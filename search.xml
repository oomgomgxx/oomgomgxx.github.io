<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring MVC再入门</title>
      <link href="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/"/>
      <url>/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>温故而知新。</p><p>研究源码不建议基于 SpringBoot，着手搭建框架有利于熟悉内部组件。</p><h2 id="快速搭建基于-Servlet-3-的-Web-项目"><a href="#快速搭建基于-Servlet-3-的-Web-项目" class="headerlink" title="快速搭建基于 Servlet 3 的 Web 项目"></a>快速搭建基于 Servlet 3 的 Web 项目</h2><h3 id="一、让-Maven-支持-Web-环境"><a href="#一、让-Maven-支持-Web-环境" class="headerlink" title="一、让 Maven 支持 Web 环境"></a>一、让 Maven 支持 Web 环境</h3><p>在 pom.xml 中添加插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用1：导出war包，通过mvn war:war --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 作用2：导出可直接部署的项目，通过mvn war:exploded --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插件式Tomcat --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Tomcat有3中形式存在：二进制、插件、内嵌API --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果需要命令行执行操作（mvn）需要添加以下插件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 否则会用默认或IDE的JDK版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 Maven 项目的打包方式改为 war</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 Servlet 依赖支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet 3.1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、构建一个基于-Spring-父子容器的-Web-项目"><a href="#二、构建一个基于-Spring-父子容器的-Web-项目" class="headerlink" title="二、构建一个基于 Spring 父子容器的 Web 项目"></a>二、构建一个基于 Spring 父子容器的 Web 项目</h3><p>在 resources&#x2F;META-INF&#x2F;services 中添加一个名为 <code>javax.servlet.ServletContainerInitializer</code> 的文件，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.td.WebServletContainerInitializer</span><br></pre></td></tr></table></figure><p>WebServletContainerInitializer 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定Web容器启动时需要处理的接口</span></span><br><span class="line"><span class="comment">// WebApplicationInitializer是Spring用于在Web环境下进行容器配置的接口</span></span><br><span class="line"><span class="comment">// 注意：如果使用了Spring-Web则可以不配置@HandlesTypes，因为这件事它帮我们做了</span></span><br><span class="line"><span class="meta">@HandlesTypes(WebApplicationInitializer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title class_">ServletContainerInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 容器启动时需要做的配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现自定义的 WebApplicationInitializer </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVLET_MAPPING_PATH</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父容器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123; RootContainerConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子容器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123; WebContainerConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 映射路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123; SERVLET_MAPPING_PATH &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>AbstractAnnotationConfigDispatcherServletInitializer 实现了 WebApplicationInitializer 接口</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/001.png"></p></li></ul><p>父容器配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">        basePackages = &quot;com.td&quot;, // 组件所在位置</span></span><br><span class="line"><span class="meta">        excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class)</span></span><br><span class="line"><span class="meta">)</span> <span class="comment">// 扫描除了@Controller之外的组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RootContainerConfig</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 入容器 Bean 配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子容器配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">        basePackages = &quot;com.td.controller&quot;, // 组件所在位置</span></span><br><span class="line"><span class="meta">        includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class),</span></span><br><span class="line"><span class="meta">        useDefaultFilters = false // 不对除了@Controller之外组件进行扫描</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebContainerConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 子容器 Bean 配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、测试是否搭建成功"><a href="#三、测试是否搭建成功" class="headerlink" title="三、测试是否搭建成功"></a>三、测试是否搭建成功</h3><p>在子容器的组件扫描范围（com.td.controller 包）下创建一个用于测试的 TestController </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Maven 的 tomcat7-maven-plugin 插件启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn tomcat7:run</span><br></pre></td></tr></table></figure><p>使用 curl 工具测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;curl localhost:8080</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p>可以看到至此一个基于 Servlet 3 和 Spring 父子容器的 Web 项目已经构建成功了。<br>父子容器的区别在于父容器在应用中是单一的，可以被多个（DispatcherServlet）子容器共享。</p><p>note：如果需要支持 JSP 则需要将当前 Maven 在 IDEA 中转为 Web 项目，将 JSP 视图存放到 webapp 目录下</p><h2 id="Spring-MVC-分派器原理"><a href="#Spring-MVC-分派器原理" class="headerlink" title="Spring MVC 分派器原理"></a>Spring MVC 分派器原理</h2><h3 id="父子容器是如何组装的？"><a href="#父子容器是如何组装的？" class="headerlink" title="父子容器是如何组装的？"></a>父子容器是如何组装的？</h3><p>在上面我们通过继承 AbstractAnnotationConfigDispatcherServletInitializer 抽象类成功配置了父子容器。所以我们可以进入其源码了解一下它是如何配置容器的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建父容器</span></span><br><span class="line">    <span class="comment">// 用于创建ContextLoaderListener监听器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">Class&lt;?&gt;[] configClasses = getRootConfigClasses();</span><br><span class="line">        <span class="comment">// 如果提供了父容器的配置类，则创建父容器</span></span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line"><span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();  <span class="comment">// 使用注解配置的web上下文</span></span><br><span class="line">context.register(configClasses); </span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子容器</span></span><br><span class="line">    <span class="comment">// 提供给DispatchServlet使用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1）使用注解配置的web上下文</span></span><br><span class="line"><span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">Class&lt;?&gt;[] configClasses = getServletConfigClasses();</span><br><span class="line">        <span class="comment">// 2）如果提供了子容器的配置类，则注册到上下文中</span></span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">context.register(configClasses);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父子容器模板方法</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getRootConfigClasses();</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getServletConfigClasses();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出 AbstractAnnotationConfigDispatcherServletInitializer 抽象类其实只是一个模板，用于创建父子容器对应的 WebApplicationContext。</p><p>当 DispatchServlet 被创建时，子容器的 WebApplicationContext 就会被传入以协助 init() 的初始化工作，而父容器则是在初始化 DispatchServlet 时被注入到子容器中（Servlet的init方法由Tomcat的生命周期操作回调）</p><p>DispatchServlet#init</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    initServletBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DispatchServlet#initServletBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化容器</span></span><br><span class="line">        <span class="built_in">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">        <span class="comment">// 初始化分派Servlet</span></span><br><span class="line">        initFrameworkServlet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | RuntimeException ex) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DispatchServlet#initWebApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 从ServletContext中提取出父容器</span></span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前DispatchServelt所在的子容器（在创建时被传入）</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 注入父容器</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分派器剖析"><a href="#分派器剖析" class="headerlink" title="分派器剖析"></a>分派器剖析</h3><h4 id="回顾-Servlet-规范"><a href="#回顾-Servlet-规范" class="headerlink" title="回顾 Servlet 规范"></a>回顾 Servlet 规范</h4><p>我们知道 DispatchServlet 的本质就是 Servlet，所以在这先简单回顾一下 Servlet 标准</p><p>Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line">    <span class="comment">// 获取当前Servlet的配置</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 请求处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span>;</span><br><span class="line">    <span class="comment">// 获取当前Servlet信息</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 销毁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServletConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 当前Servlet的名字</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 当前Servlet的上限文对象</span></span><br><span class="line">    <span class="comment">// ServletContext是Servlet的三大域之一，除此之外还有request、session</span></span><br><span class="line">    <span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 获取指定的初始化参数值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">// 获取所有初始化参数值</span></span><br><span class="line">    <span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但一般我们很少直接使用 Servlet 接口，因为需要实现所有的抽象方法，所以后来就有了 GenericServlet 抽象类。GenericServlet 只是简单复写了 Servlet 接口，让其子类无需实现自己不需要的方法，即所谓的<strong>接口隔离原则</strong>。而除了 GenericServlet 之外，Servlet API 包还提供了 HttpServlet 抽象类（继承了GenericServlet），在 HttpServlet 中它将原来的 service 方法细分成了以下这几种操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD_DELETE</span> <span class="operator">=</span> <span class="string">&quot;DELETE&quot;</span>; <span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD_HEAD</span> <span class="operator">=</span> <span class="string">&quot;HEAD&quot;</span>; <span class="comment">// 紧获取响应头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD_GET</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>; <span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD_OPTIONS</span> <span class="operator">=</span> <span class="string">&quot;OPTIONS&quot;</span>; <span class="comment">// 查看通信状态（如果CORS的预检请求操作就会用到）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD_POST</span> <span class="operator">=</span> <span class="string">&quot;POST&quot;</span>; <span class="comment">// 新增</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD_PUT</span> <span class="operator">=</span> <span class="string">&quot;PUT&quot;</span>; <span class="comment">// 修改（幂等，即需要传输整个实体）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">METHOD_TRACE</span> <span class="operator">=</span> <span class="string">&quot;TRACE&quot;</span>; <span class="comment">// 检测请求，用于检测请求路线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求头，服务器对对比If-Modified-Since和本地的Last-Modified。如果Last-Modified比较大，这表示资源已修改，Servlet处理请求</span></span><br><span class="line"><span class="comment">// 而如果Last-Modified比较小，这表示资源没有变，返回304，即然浏览器使用缓存即可</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HEADER_IFMODSINCE</span> <span class="operator">=</span> <span class="string">&quot;If-Modified-Since&quot;</span>; </span><br><span class="line"><span class="comment">// 响应头，告诉浏览器当前请求的资源最后一次被修改的时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HEADER_LASTMOD</span> <span class="operator">=</span> <span class="string">&quot;Last-Modified&quot;</span>;</span><br></pre></td></tr></table></figure><p>而且 HttpServlet 的细分操作也很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    HttpServletRequest  request;</span><br><span class="line">    HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp;</span><br><span class="line">          res <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;non-HTTP request or response&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 先将原来的request、response转为HTTP实现</span></span><br><span class="line">    request = (HttpServletRequest) req;</span><br><span class="line">    response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行细分操作</span></span><br><span class="line">    service(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为Servlet#service方法的重载，用于完成细分操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">        <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123; <span class="comment">// 不支持 If-Modified-Since，直接响应最新数据</span></span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">ifModifiedSince</span> <span class="operator">=</span> req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">            <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123; <span class="comment">// 请求的资源被修改过，响应最新数据</span></span><br><span class="line">                maybeSetLastModified(resp, lastModified);</span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 请求的资源没被修改过，无需放回，即让浏览器使用缓存</span></span><br><span class="line">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">        <span class="comment">// 请求资源在服务器中最后一次被修改的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">        maybeSetLastModified(resp, lastModified);</span><br><span class="line">        doHead(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">        doPut(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">        doDelete(req, resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">        doOptions(req,resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">        doTrace(req,resp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">        Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">        errArgs[<span class="number">0</span>] = method;</span><br><span class="line">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">        <span class="comment">// 无法处理返回错误信息</span></span><br><span class="line">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-MVC是如何接入-Servlet-规范的？"><a href="#Spring-MVC是如何接入-Servlet-规范的？" class="headerlink" title="Spring MVC是如何接入 Servlet 规范的？"></a>Spring MVC是如何接入 Servlet 规范的？</h4><p>关于 Spring MVC 我们接触得最多的 Servlet 肯定就是 DispatchServelt 了，所以我们可以先从它入手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">FrameworkServlet</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>可以看到它继承了一个叫 FrameworkServlet 的父类，而该类的初始化动作我们在上面的 DispatchServlet#initServletBean 已经看到过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FrameworkServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServletBean</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>而 FrameworkServlet 又继承了 HttpServletBean（Spring Web模块提供的类），如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpServletBean</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> <span class="keyword">implements</span> <span class="title class_">EnvironmentCapable</span>, EnvironmentAware &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>至此可以看到，Spring MVC 和 Servlet 的接入点就在 HttpServletBean 这个抽象类中，所以我们大可先看看它有没有复写其父类的方法</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/002.png"></p><p>可以看到它并没有复写诸如 service、doXXX 这些方法，只是添加了一些获取环境变量的操作而已，所以这时我们可以回看它的实现类 FrameworkServlet （它只一个直属实现）</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/003.png"></p><p>而在 FrameworkServlet 中我们发现，它实现了 serivce 方法，这时我们可以断定这就是关键所在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1)解析出请求方式</span></span><br><span class="line">    <span class="type">HttpMethod</span> <span class="variable">httpMethod</span> <span class="operator">=</span> HttpMethod.resolve(request.getMethod());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 情况1: 如果是PATCH请求（相当于PUT，但PATCH是非幂等的，即它提供的不是完整的资源）或没有解析到</span></span><br><span class="line">    <span class="comment">// 则对该请求进行再次封装和分配处理。这是因为 Servlet 规范并不支持 PATCH 请求，所以才需要扩展原来 HttpServlet#service 方法，这点需要注意</span></span><br><span class="line">    <span class="keyword">if</span> (httpMethod == HttpMethod.PATCH || httpMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">        processRequest(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 情况2: 其他请求方式交给父类处理</span></span><br><span class="line">        <span class="comment">// 我们在上面已经了解到，当前 FrameworkServlet 的父类其实是 HttpServletBean</span></span><br><span class="line">        <span class="comment">// 但 HttpServletBean 并没有实现 service 方法，因此这里的 service 其实最后指的是 HttpServlet#service</span></span><br><span class="line">        <span class="comment">// 而 HttpServlet#serivce 只作分发工作（按HTTP请求方法）</span></span><br><span class="line">        <span class="built_in">super</span>.service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们可以再看看 FrameworkServlet 是否有 doXXX 方法实现</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/004.png"></p><p>也就是说，当请求使用 HttpServlet#serivce 分发时，就会分发到 FrameworkServlet#doXXX 中处理。现在继续看看它都做了些什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">processRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">processRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doPut</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">processRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他方法一样...</span></span><br></pre></td></tr></table></figure><p>可以看到它实现的 doXXX 其实并没有直接处理，而是将请求交给了 processRequest。该方法在上面也遇到过，处理 PATCH 请求的就是它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processRequest 也没有处理，又交给了 doService。注意，这里的 doService 其实是一个抽象方法，它的实现位于 DispatchServlet。 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存request域的属性快照</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前环境的相关引用保存到request域</span></span><br><span class="line">    <span class="comment">// 1. 应用上下文容器</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    <span class="comment">// 2. 本地解析器（国际化相关）</span></span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    <span class="comment">// 3. 主题解析器（支持页面主题样式，需要配合spring提供的taglib）</span></span><br><span class="line">    <span class="comment">// &lt;%@ taglib prefix=&quot;spring&quot; uri=&quot;http://www.springframework.org/tags&quot;%&gt;</span></span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将请求分派下去处理</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 在Servlet3开始，Servlet支持异步请求处理</span></span><br><span class="line">        <span class="comment">// request.getAsyncContext().start(Runnable)</span></span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DispatchServlet#doDispatch（分派器的核心逻辑）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="comment">// 在HandlerExecutionChain中包含了“处理器”和“拦截器链”</span></span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 从处理器返回的ModelAndView（数据和视图信息）</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检查是不是文件上传操作（譬如表单的enctype=&quot;multipart/form-data&quot;）</span></span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 一、通过映射器（HandlerMapping）匹配并返回具体的处理器实现和拦截器链</span></span><br><span class="line">            <span class="comment">// 以Spring 5.3.1为例有以下3个内置的处理器映射器</span></span><br><span class="line">            <span class="comment">// 1. BeanNameUrlHandlerMapping: 让url和bean名字进行映射匹配，常用于Controller接口实现方式的处理器定义</span></span><br><span class="line">            <span class="comment">// 2. RequestMappingHandlerMapping：让url和@RequestMapping进行映射匹配（包含其余的Restful风格注解，其实本质只是@RequestMapping的派生注解）</span></span><br><span class="line">            <span class="comment">// 3. RouterFunctionMapping：让url和RouterFunction映射（Spring5.2新特性，用于简化Controller编写）</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 二、根据处理器返回对应的适配器</span></span><br><span class="line">            <span class="comment">// 以Spring 5.3.1为例有以下4个内置的处理器适配器</span></span><br><span class="line">            <span class="comment">// 1. HandlerFunctionAdapter：处理器通过RouterFunctions实现</span></span><br><span class="line">            <span class="comment">// 2. HttpRequestHandlerAdapter：处理器通过@RequestMapping实现</span></span><br><span class="line">            <span class="comment">// 3. SimpleControllerHandlerAdapter：处理器通过Controller接口实现</span></span><br><span class="line">            <span class="comment">// 4. SimpleServletHandlerAdapter：处理器通过Servlet接口实现</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查是否有必要真的执行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 三、执行拦截器链的preHandle方法</span></span><br><span class="line">            <span class="comment">// 这时可以对HttpServletRequest和HttpServletResponse修改</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 四、通过适配器执行处理器</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 如果没有指定视图名称则返回默认的</span></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 五、执行拦截器链postHandle方法</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 六、执行响应操作</span></span><br><span class="line">        <span class="comment">// 1. 根据视图解析器解析出视图View，然后对数据进行渲染</span></span><br><span class="line">        <span class="comment">// 2. 执行拦截器链afterCompletion</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;   </span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程图</p></blockquote><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/005.png"></p><ul><li>对于@RequestMapping处理而言，请求的参数和响应数据的处理可参考 RequestMappingHandlerAdapter 适配器</li></ul><h3 id="装配过程"><a href="#装配过程" class="headerlink" title="装配过程"></a>装配过程</h3><ol><li>WebApplicationContext 上下文容器启动</li><li>实例化 Singleton 域的 Bean，其顺序规则大致如下：<ol><li>先实例化配置类</li><li>定义在配置类上的注解，譬如@EnableWebMvc、@Import之类</li><li>按照配置类的定义从上到下（次过程也会按需实例化，即实例化A时发现依赖了B，这先实例化B，如此类推。）</li></ol></li><li>因为 WebContainerConfig 被 @EnableWebMvc 标注，所以在 WebContainerConfig 实例化后会马上实例化DelegatingWebMvcConfiguration</li><li>继续回到 WebContainerConfig，按定义顺序和需要继续实例化 Bean</li><li>如果 WebContainerConfig 复写了 WebMvcConfigurer 的方法，则必要时就会实例化 WebMvcConfigurationSupport 中对应的Bean，因为它是 DelegatingWebMvcConfiguration 的父类。除此之外还会触发 DelegatingWebMvcConfiguration 的委派操作，这时如果环境中有多个 WebMvcConfigurer 实现，则只要其中一个 WebMvcConfigurer 的方法被执行，其他所有 WebMvcConfigurer 对应的方法都会被执行。</li></ol><h3 id="请求数据是如何流入处理器的？"><a href="#请求数据是如何流入处理器的？" class="headerlink" title="请求数据是如何流入处理器的？"></a>请求数据是如何流入处理器的？</h3><blockquote><p>基本流程</p></blockquote><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/006.png"></p><blockquote><p>普通解析器（默认），用于解析 HttpServletRequest中的内容</p></blockquote><p>以 RequestMappingHandlerAdapter#getDefaultArgumentResolvers 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="title function_">getDefaultArgumentResolvers</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Annotation-based argument resolution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 支持@RequestParam和MultipartFile解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="literal">false</span>));</span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestParamMapMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持@PathVariable解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">PathVariableMethodArgumentResolver</span>());</span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">PathVariableMapMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持@MatrixVariable解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">MatrixVariableMethodArgumentResolver</span>());</span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">MatrixVariableMapMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持@ModelAttribute解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ServletModelAttributeMethodProcessor</span>(<span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 支持@RequestBody和@ResponseBody解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(), <span class="built_in">this</span>.requestResponseBodyAdvice));</span><br><span class="line">    <span class="comment">// 支持@RequestPart解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestPartMethodArgumentResolver</span>(getMessageConverters(), <span class="built_in">this</span>.requestResponseBodyAdvice));</span><br><span class="line">    <span class="comment">// 支持@RequestHeader解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestHeaderMethodArgumentResolver</span>(getBeanFactory()));</span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestHeaderMapMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持@CookieValue解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ServletCookieValueMethodArgumentResolver</span>(getBeanFactory()));</span><br><span class="line">    <span class="comment">// 支持@Value解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ExpressionValueMethodArgumentResolver</span>(getBeanFactory()));</span><br><span class="line">    <span class="comment">// 支持@SessionAttribute解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">SessionAttributeMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持@RequestAttribute解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestAttributeMethodArgumentResolver</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Type-based argument resolution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 支持以下类型的解析（即可以直接写在处理器参数列表上，Spring MVC会自动将内容注入到其中）</span></span><br><span class="line">    <span class="comment">// WebRequest、ServletRequest、MultipartRequest、HttpSession</span></span><br><span class="line"><span class="comment">// Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ServletRequestMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 ServletResponse、OutputStream、Writer 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ServletResponseMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 HttpEntity、RequestEntity 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">HttpEntityMethodProcessor</span>(getMessageConverters(), <span class="built_in">this</span>.requestResponseBodyAdvice));</span><br><span class="line">    <span class="comment">// 支持 RedirectAttributes 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RedirectAttributesMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 Model 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ModelMethodProcessor</span>());</span><br><span class="line">    <span class="comment">// 支持 Map 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">MapMethodProcessor</span>());</span><br><span class="line">    <span class="comment">// 支持 Errors 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ErrorsMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 SessionStatus 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">SessionStatusMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 UriComponentsBuilder 解析</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">UriComponentsBuilderMethodArgumentResolver</span>());</span><br><span class="line">    <span class="keyword">if</span> (KotlinDetector.isKotlinPresent()) &#123;</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> <span class="title class_">ContinuationHandlerMethodArgumentResolver</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义解析器</span></span><br><span class="line">    <span class="comment">// 在 WebMvcConfigurationSupport#requestMappingHandlerAdapter 中调用</span></span><br><span class="line">    <span class="comment">// 添加操作可通过实现WebMvcConfigurer接口的addArgumentResolvers方法实现</span></span><br><span class="line">    <span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="literal">null</span>) &#123;</span><br><span class="line">        resolvers.addAll(getCustomArgumentResolvers());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Catch-all</span></span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="literal">true</span>));</span><br><span class="line">    resolvers.add(<span class="keyword">new</span> <span class="title class_">ServletModelAttributeMethodProcessor</span>(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resolvers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单说就是 Spring MVC 支持直接在方法参数列表中定义以上类型的注解或参数，然后它会自动将 HttpServletRequest 中的内容提取出来再封装进去</li></ul><blockquote><p>绑定参数解析器（即显式指定了绑定对象，如 @PathVariable(“date”) LocalDateTime date），通样用于解析 HttpServletRequest中的内容</p></blockquote><p>以 RequestMappingHandlerAdapter#getDefaultInitBinderArgumentResolvers 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="title function_">getDefaultInitBinderArgumentResolvers</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Annotation-based argument resolution</span></span><br><span class="line">    <span class="comment">// 支持 @RequestParam(name=xxx) 绑定解析</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="literal">false</span>));</span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestParamMapMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 @PathVariable(value=xxx) 绑定解析</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">PathVariableMethodArgumentResolver</span>());</span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">PathVariableMapMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 @MatrixVariable(name=xxx) 绑定解析</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">MatrixVariableMethodArgumentResolver</span>());</span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">MatrixVariableMapMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 @Value 绑定解析</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">ExpressionValueMethodArgumentResolver</span>(getBeanFactory()));</span><br><span class="line">    <span class="comment">// 支持 @SessionAttribute 绑定解析</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">SessionAttributMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 @RequestAttribute 绑定解析</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestAttributeMethodArgumentResolver</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type-based argument resolution</span></span><br><span class="line">    <span class="comment">// 支持一下类型绑定解析</span></span><br><span class="line">    <span class="comment">// WebRequest、ServletRequest、MultipartRequest、HttpSession</span></span><br><span class="line"><span class="comment">// Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">ServletRequestMethodArgumentResolver</span>());</span><br><span class="line">    <span class="comment">// 支持 ServletResponse、OutputStream、Writer 绑定解析</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">ServletResponseMethodArgumentResolver</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义解析器</span></span><br><span class="line">    <span class="comment">// 在 WebMvcConfigurationSupport#requestMappingHandlerAdapter 中调用</span></span><br><span class="line">    <span class="comment">// 添加操作可通过实现WebMvcConfigurer接口的addArgumentResolvers方法实现</span></span><br><span class="line"><span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="literal">null</span>) &#123;</span><br><span class="line">resolvers.addAll(getCustomArgumentResolvers());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Catch-all</span></span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">PrincipalMethodArgumentResolver</span>());</span><br><span class="line">resolvers.add(<span class="keyword">new</span> <span class="title class_">RequestParamMethodArgumentResolver</span>(getBeanFactory(), <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resolvers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>返回值处理器</p></blockquote><p>以 RequestMappingHandlerAdapter#getDefaultReturnValueHandlers 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; <span class="title function_">getDefaultReturnValueHandlers</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;HandlerMethodReturnValueHandler&gt; handlers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Single-purpose return value types</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 支持 ModelAndView 返回类型处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ModelAndViewMethodReturnValueHandler</span>());</span><br><span class="line">    <span class="comment">// 支持 Model 返回类型处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ModelMethodProcessor</span>());</span><br><span class="line">    <span class="comment">// 支持 View 返回类型处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ViewMehodReturnValueHandler</span>());</span><br><span class="line">    <span class="comment">// 支持 ResponseEntity 返回类型处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ResponseBodyEmitterReturnValueHandler</span>(getMessageConverters(),</span><br><span class="line"><span class="built_in">this</span>.reactiveAdapterRegistry, <span class="built_in">this</span>.taskExecutor, <span class="built_in">this</span>.contentNegotiationManager));</span><br><span class="line">    <span class="comment">// 支持 StreamingResponseBody 返回类型处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">StreamingResponseBodyReturnValueHandler</span>());</span><br><span class="line">    <span class="comment">// 支持 HttpEntity 返回值处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">HttpEntityMethodProcessor</span>(getMessageConverters(),</span><br><span class="line"><span class="built_in">this</span>.contentNegotiationManager, <span class="built_in">this</span>.requestResponseBodyAdvice));</span><br><span class="line">    <span class="comment">// 支持 HttpHeaders 返回值处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">HttpHeadersReturnValueHandler</span>());</span><br><span class="line">    <span class="comment">// 支持 Callable 返回值处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">CallableMethodReturnValueHandler</span>());</span><br><span class="line">    <span class="comment">// 支持 DeferredResult、ListenableFuture、CompletionStage 返回值处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">DeferredResultMethodReturnValueHandler</span>());</span><br><span class="line">    <span class="comment">// 支持 WebAsyncTask 返回值处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">AsyncTaskMethodReturnValueHandler</span>(<span class="built_in">this</span>.beanFactory));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Annotation-based return value types</span></span><br><span class="line">    <span class="comment">// 支持 @ModelAttribute</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ServletModelAttributeMethodProcessor</span>(<span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 支持 @ResponseBody</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">RequestResponseBodyMethodProcessor</span>(getMessageConverters(),</span><br><span class="line"><span class="built_in">this</span>.contentNegotiationManager, <span class="built_in">this</span>.requestResponseBodyAdvice));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multi-purpose return value types</span></span><br><span class="line">    <span class="comment">// 支持 void、CharSequence “视图名”返回值处理</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ViewNameMethodReturnValueHandler</span>());</span><br><span class="line">    <span class="comment">// 支持 Map 返回值处理（没有用注解）</span></span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">MapMethodProcessor</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义返回值处理器</span></span><br><span class="line">    <span class="comment">// 在 WebMvcConfigurationSupport#getReturnValueHandlers 中调用</span></span><br><span class="line">    <span class="comment">// 添加操作可通过实现WebMvcConfigurer接口的addReturnValueHandlers方法实现</span></span><br><span class="line"><span class="keyword">if</span> (getCustomReturnValueHandlers() != <span class="literal">null</span>) &#123;</span><br><span class="line">handlers.addAll(getCustomReturnValueHandlers());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Catch-all</span></span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(getModelAndViewResolvers())) &#123;</span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ModelAndViewResolverMethodReturnValueHandler</span>(getModelAndViewResolvers()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">handlers.add(<span class="keyword">new</span> <span class="title class_">ServletModelAttributeMethodProcessor</span>(<span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handlers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程案例：以处理返回 Json 数据为例子</p></blockquote><p>首先需要将负责处理 Json 数据的转换器（HttpMessageConverter）添加到环境中</p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    objectMapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">mappingJackson2HttpMessageConverter</span></span><br><span class="line">        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>(objectMapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mappingJackson2HttpMessageConverter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123; <span class="comment">// 接收的是Json</span></span><br><span class="line">    System.out.println(person);</span><br><span class="line">    person.setName(<span class="string">&quot;server ：&quot;</span> + person.getName());</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d &#x27;&#123;&quot;name&quot;:&quot;sam&quot;,&quot;age&quot;:&quot;18&quot;&#125;&#x27; -H &#x27;Content-Type:application/json&#x27; -X POST localhost:8080/add</span><br></pre></td></tr></table></figure><p>过程</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/007.png"></p><p>从上图中可以发现，先是从 HandlerMethodArgumentResolver 中查找出支持解析当前处理器参数列表上对应类型的解析器（这里是RequestResponseBodyMethodProcessor），然后再通过 HttpMessageConverter 进行请求转换（从json串转为对象）后将结果传给处理器，最后反射执行处理器处理请求（参数是getBean（即处理器所在的Bean）和处理好的参数）</p><h3 id="常用-WebMvcConfigurer-配置"><a href="#常用-WebMvcConfigurer-配置" class="headerlink" title="常用 WebMvcConfigurer 配置"></a>常用 WebMvcConfigurer 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 特殊的处理器映射器：快速映射到视图</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addViewController(<span class="string">&quot;/about&quot;</span>).setViewName(<span class="string">&quot;about&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊的处理器映射器：静态资源映射</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/res/**&quot;</span>).addResourceLocations(<span class="string">&quot;/static/**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义转换器，只针对处理器参数类表</span></span><br><span class="line"><span class="comment">// Formatter类型转换器，String -&gt; T</span></span><br><span class="line"><span class="comment">// Converter类型转换器，S -&gt; T</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// registry.addFormatter(null);</span></span><br><span class="line">    <span class="comment">// registry.addConverter(null);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义处理器的异常解析器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">    <span class="comment">// resolvers.add(null);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图模板位置解析</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">    registry.jsp(<span class="string">&quot;/views/&quot;</span>, <span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CORS跨域支持</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">  registry.addMapping(<span class="string">&quot;/**&quot;</span>).allowedOrigins(<span class="string">&quot;*&quot;</span>).allowedMethods(<span class="string">&quot;*&quot;</span>).allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Listener、Filter、Interceptor、AOP-的作用和区别"><a href="#Listener、Filter、Interceptor、AOP-的作用和区别" class="headerlink" title="Listener、Filter、Interceptor、AOP 的作用和区别"></a>Listener、Filter、Interceptor、AOP 的作用和区别</h2><h3 id="使用-Tomcat-Embed-运行项目"><a href="#使用-Tomcat-Embed-运行项目" class="headerlink" title="使用 Tomcat-Embed 运行项目"></a>使用 Tomcat-Embed 运行项目</h3><blockquote><p>说明</p></blockquote><p>因为 Listener 和 Filter 是由 Web 容器来负责触发的，而又因为 Maven 插件方式的部署无法跟踪其代码执行流程，所以为了方便起见我们可以干脆将 Tomcat 切换为由 API 控制，即内嵌版 Tomcat。</p><blockquote><p>配置</p></blockquote><p>添加依赖和资源配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不能和 Maven Tomcat 插件同时使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果要用插件则应该设置 &lt;scope&gt;provided&lt;/scope&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;tomcat.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不进行传播和打包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配合tomcat-embed使用，编译时将views拷贝到classes --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为编译不会像打包那样将全部需要的资源拷贝的输出中 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将webapp/views拷贝到target/classes --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拷贝到target/classes/META-INF --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/META-INF<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建 Tomcat 的启动类，并让其加载当前案例项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatStarter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONTEXT_PATH;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_WEB_CLASSES_PATH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DEFAULT_CONTEXT_PATH = <span class="string">&quot;/&quot;</span>; <span class="comment">// 访问路径</span></span><br><span class="line">        DEFAULT_WEB_CLASSES_PATH = Paths.get(<span class="string">&quot;target/classes&quot;</span>).toAbsolutePath().toString(); <span class="comment">// 可执行项目所在路径</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Tomcat</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tomcat</span>();</span><br><span class="line"></span><br><span class="line">        tomcat.addWebapp(DEFAULT_CONTEXT_PATH, DEFAULT_WEB_CLASSES_PATH);</span><br><span class="line"></span><br><span class="line">        tomcat.setPort(<span class="number">8888</span>);</span><br><span class="line">        tomcat.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动连接器，处理HTTP请求</span></span><br><span class="line">        tomcat.getConnector().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><blockquote><p>基本介绍</p></blockquote><p>观察者是一种用于构建<code>一对多关系模型</code>的行为型设计模式，作用是当“一”方发生状态改变时，“多”方就会感知到并自动执行处理逻辑，所以 Listener 的主要作用其实是为了监听某些特定对象，而这些对象常见有如下这些：</p><ul><li>ServletContextListener：监听 ServletContext 的初始化和销毁事件</li><li>ServletContextAttributeListener：监听 ServletContext 属性的更新事件（包含增删改）</li><li>ServletRequestListener：监听 ServletRequestListener 的初始化和销毁事件</li><li>ServletRequestAttributeListener：监听 ServletRequestAttributeListener 属性的更新事件（包含增删改）</li><li>ReadListener：监听输入流状态事件（已读、异常、可能在读 javax.servlet.ServletInputStream#isReady() 被调用时）</li><li>WriteListener：监听输出流状态事件（可能在写，在 javax.servlet.ServletOutputStream#isReady() 被调用时）</li></ul><blockquote><p>执行时机</p></blockquote><p>案例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title class_">ServletContainerInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 容器启动时需要做的配置</span></span><br><span class="line"></span><br><span class="line">        ctx.addListener(<span class="keyword">new</span> <span class="title class_">ServletContextListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ServletContext被初始化&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ctx.addListener(<span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ServletRequest被初始化&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面我们注册了两个监听器，分别是 ServletContextListener 和 ServletRequestListener</li><li>然后我们可以在其初始化方法实现中各自打一个断点进行观察</li></ul><p>启动 Tomcat </p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/008.png"></p><p>接着放行端点，但放行后发现并没有执行 Request 监听器，这里不难理解，因为这时还没有用户请求所以肯定不会生成 Request 和 Response 实例。</p><p>现在模拟请求触发断点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8888</span><br></pre></td></tr></table></figure><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/009.png"></p><p>到这里我们就得到了以下信息：</p><ul><li>ServletContextListener 优先级别最高，在容器启动时执行</li><li>Request 和 Response 实例在请求到来时生成</li><li>Request 和 Response 会流经管道后转变成符合 Servlet 规范处理要求的 ServletRequest 和 ServletResponse</li></ul><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><blockquote><p>基本介绍</p></blockquote><p>过滤器顾名思义就是用来筛选信息的，开发者可以通过实现 Filter 来对 Request、Response 进行处理。过滤器通常不会单个存在，所以它时常会伴随着<code>责任链模式</code>出现。即多个过滤器按顺序形成一条过滤链，而每个过滤器都有各自的责任，所以这条链就叫责任链。责任链模式非常常见，除了当前 Filter 外，上面提到的<code>管道模式</code>其实也是一种责任链，除此之外后面将要聊到的 Interceptor、AOP 都用到了责任链。</p><blockquote><p>快速入门责任链模式</p></blockquote><p>Filter 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line">    <span class="comment">// 执行拦截</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span><br><span class="line"><span class="params">                         FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">    <span class="comment">// 销毁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，在 doFilter 的参数列表中就有一个 FilterChain 类型的变量，而这个类就是责任链模式实现</li></ul><p>FilterChain 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line">    <span class="comment">// 执行拦截</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span> <span class="params">( ServletRequest request, ServletResponse response )</span> <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该接口看上去很简单，只有一个 doFilter 方法</li><li>注意，到这里我们发现了件有趣的事，不知道你有没有感觉 FilterChain#doFilter 方法看上去更加适合 Filter，所以我们在这可以发挥一下想象力，就是认为责任链模式的实现技巧就是将 Chain（“链”）添加到自己“原本”的方法中，而“原本”的方法就转移到 Chain（“链”） 中</li><li>在 Tomcat 中 FilterCain 的实现只有一个 ApplicationFilterChain</li></ul><p>以下为去除了多余操作的 ApplicationFilterChain 源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤器器包装类（责任链）</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationFilterConfig[] filters = <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、往责任链上添加Filter处理器</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addFilter</span><span class="params">(ApplicationFilterConfig filterConfig)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        filters[n++] = filterConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、添加Servlet，用于执行完责任链后进行请求处理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServlet</span><span class="params">(Servlet servlet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servlet = servlet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从头执行责任链</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            internalDoFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">                                  ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行责任链</span></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> filters[pos++];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filterConfig.getFilter();</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行Filter</span></span><br><span class="line">                    filter.doFilter(request, response, <span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="comment">/**/) &#123;</span></span><br><span class="line"><span class="comment">                //...</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                // 执行完责任链，开始执行Servlet（如果是Spring MVC，这个Servlet这为DispatchServlet）</span></span><br><span class="line"><span class="comment">                servlet.service(request, response);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125; catch (IOException | ServletException | RuntimeException e) &#123;</span></span><br><span class="line"><span class="comment">            //...</span></span><br><span class="line"><span class="comment">        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">            //...</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 释放责任链</span></span><br><span class="line"><span class="comment">    void release() &#123;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">            filters[i] = null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        n = 0;</span></span><br><span class="line"><span class="comment">        pos = 0;</span></span><br><span class="line"><span class="comment">        servlet = null;</span></span><br><span class="line"><span class="comment">        servletSupportsAsync = false;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    void reuse() &#123;</span></span><br><span class="line"><span class="comment">        pos = 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>责任链的执行过程如下</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/010.png"></p><blockquote><p>执行时机</p></blockquote><p> 案例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title class_">ServletContainerInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 容器启动时需要做的配置</span></span><br><span class="line"></span><br><span class="line">        ctx.addFilter(<span class="string">&quot;my-filter&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpFilter</span>()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行过滤器：&quot;</span> + <span class="built_in">this</span>.getFilterName());</span><br><span class="line"></span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).addMappingForUrlPatterns(<span class="literal">null</span>, <span class="literal">false</span>, <span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ctx.addListener(<span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ServletRequest被初始化&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 Tomcat，并模拟请求触发断点</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/011.png"></p><h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><blockquote><p>基本介绍</p></blockquote><p>在 Spring Web 模块中提供了两种类型的拦截器，分别是 HandlerInterceptor、WebRequestInterceptor。在处理器被执行前后 Spring 会对其进行适配调用，而两者的区别是 WebRequestInterceptor 只能获取WebRequest 、ModelMap 进行修改而不能阻断请求，而 HandlerInterceptor 更强大，更像 Filter。</p><p>注意，如果需要实现拦截器，则可以通过直接继承 HandlerInterceptorAdapter 而不是实现 HandlerInterceptor，因为这样可以省略不必要的实现（接口隔离原则）。</p><p>题外话，不难发好些地方都是通过抽象类来简单对接口的实现，从而做到接口隔离原则，但在JDK1.8后，Java添加了接口的新特性“默认方法”，即以后无需再多写一个抽象来实现接口以求达到接口隔离，而只需要使用默认方法提供默认实现，这样之类就可以不用实现自己不需要的接口了。</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/012.png"></p><blockquote><p>拦截器责任链</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerExecutionChain</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;HandlerInterceptor&gt; interceptorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">interceptorIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.interceptorList.size(); i++) &#123;</span><br><span class="line"><span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line"><span class="comment">// 将 request, response, handler 让所有拦截器进行“预”处理（譬如预统一处理或阻截操作）</span></span><br><span class="line"><span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="built_in">this</span>.handler)) &#123;</span><br><span class="line">triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.interceptorIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line"><span class="comment">// 将 request, response, handler 让所有拦截器进行“后”处理（譬如结果统一处理）</span></span><br><span class="line">interceptor.postHandle(request, response, <span class="built_in">this</span>.handler, mv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line"><span class="comment">// 将 request, response, handler 让所有拦截器进行“渲染后”处理（譬如释放资源、记录处理后日志）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">interceptor.afterCompletion(request, response, <span class="built_in">this</span>.handler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex2) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，拦截器责任链和上面过滤器责任链的不同之处是，过滤器针对的是Servlet，而拦截器针对的是Handler，但两者都可以对 Request 和 Response 进行过滤处理。除此之外，两者有个比较大的区别，就是拦截器责任链执行到某个拦截器时，该拦截器可以选择不继续执行后续的拦截器而直接执行处理器。也就是说，再拦截器责任链中，拦截器链的传递是由拦截器本身控制的，这点和过滤器链不同。</p><blockquote><p>执行时机</p></blockquote><p>DispatcherServlet#doDispatch</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/013.png"></p><h3 id="AOP（-Aspect-Oriented-Programming-）"><a href="#AOP（-Aspect-Oriented-Programming-）" class="headerlink" title="AOP（ Aspect Oriented Programming ）"></a>AOP（ Aspect Oriented Programming ）</h3><blockquote><p>AOP 术语</p></blockquote><ul><li>关注点代码<ul><li>在多个方法中出现的代码</li></ul></li><li>通知（Advice&#x2F;Interceptor）<ul><li>可以简单理解为使关注点代码在AOP处理中的基本单位</li></ul></li><li>切入点<ul><li>需要织入关注点代码（通知）的方法</li><li>在Spring AOP中，切入点单位只能是方法</li></ul></li><li>切入点表达式<ul><li>定义切入点的表达式</li></ul></li><li>织入<ul><li>指将通知添加到切入点的这个过程</li></ul></li></ul><blockquote><p>基本介绍</p></blockquote><p>AOP 是一种编程思想，它旨在将重复出现在多个方法中的代码抽离并单独存放，然后在需要时将其织入到方法中。它是一种降低代码耦合性和无侵入扩展的实现方案，而且 Spring AOP 的思想和前面提到的拦截器（Interceptor）很像，你可以简单理解只要是拦截器能做到的 AOP 都能够做到，而且能做得更好。</p><p>除此之外，你还可以使用 AOP 实现诸如<code>日志记录</code>、<code>权限管理</code>、<code>代码埋点提取信息（多见于通过agent在启动应用时附加在应用上）</code>、<code>性能监控</code>、<code>事务管理（Spring声明式事务）</code>、<code>配合EL表达式完成缓存管理</code>, <code>Spring MVC的异常处理（例如被@ControllerAdvice定义的类其实就是一个切面类）</code>等等。</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/014.png"></p><p>在 Java 中 AOP 织入时机可以分为以下这几种：</p><ul><li>编译时织入：AspectJ</li><li>类加载时织入：AspectJ 5</li><li>运行时织入：Spring AOP、Java Agent</li></ul><p>AOP 在 Spring 的常见应用案例：</p><ul><li>事务管理</li><li>缓存管理</li><li>统一异常处理</li></ul><p>Spring AOP 支持的几种配置方式：</p><ul><li>基于 ProxyFactoryBean</li><li>XML 的 AOP 标签（xmlns:aop&#x3D;”<a href="http://www.springframework.org/schema/aop&quot;%EF%BC%89">http://www.springframework.org/schema/aop&quot;）</a></li><li>@Aspect 注解（推荐）</li></ul><blockquote><p>案例代码</p></blockquote><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启用 AOP（@Aspect）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为当前案例的切入点是Controller，所以必须标注在管理Controller的子容器配置类上，否则不生效</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">        basePackages = &quot;com.td.controller&quot;,</span></span><br><span class="line"><span class="meta">        includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class),</span></span><br><span class="line"><span class="meta">        useDefaultFilters = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebContainerConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义切面类</p><ul><li>可以理解为是 <strong>Advice（Interceptor）</strong>和<strong>切入点配置</strong>的集合类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切入点表达式：表示拦截 TestController 中的所有(切入点)方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.td.controller.TestController.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect#before&quot;</span>);</span><br><span class="line">        System.out.println(joinPoint.getTarget());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect#after&quot;</span>);</span><br><span class="line">        System.out.println(joinPoint.getTarget());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect#around-pre&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect#around-post&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行顺序结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Servlet Filter</span><br><span class="line">HandlerInterceptor#preHandle</span><br><span class="line">MyAspect#around-pre</span><br><span class="line">MyAspect#before</span><br><span class="line">执行处理器</span><br><span class="line">MyAspect#after</span><br><span class="line">MyAspect#around-post</span><br><span class="line">HandlerInterceptor#postHandle</span><br><span class="line">HandlerInterceptor#afterCompletion</span><br></pre></td></tr></table></figure><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/015.png"></p><p>Advice 之所以在拦截器之后执行，是因为 Spring AOP 是通过代理来实现的。即如果 Spring 发现某个类被切入点表达式锁定，就会为其创建一个代理类，而织入操作就是在调用方法的时候，所以拦截器前置方法执行时根本还没执行处理器，而且从这点可以看出要使用 Spring AOP，那么其拦截目标必须被 Spring 容器所管理，否则不生效。<br>以下为 Advice 的执行顺序：</p><ul><li>相同类型 Advice ，按照定义顺序织入</li><li>不同类型：around -&gt; before -&gt; after</li></ul><blockquote><p>Spring AOP 原理以及执行时机</p></blockquote><p>虽然关于 Spring AOP 的原理已经在以前的文章中详细地聊过了，但为了当前文章更加饱满，以及践行温故而知新的理念，所以还是打算再次看看 Spring AOP 是执行原理。但在这之前需要多说一句，这部分内容的前置知识点是 Bean 的生命周期过程，所以应该要有先后次序地理解。</p><p>Spring 会在 Bean 生命周期的初始化阶段（initializeBean）回调 BeanPostProcessor，而在回调后置处理方法期间会通过一个叫 <code>AnnotationAwareAspectJAutoProxyCreator(主要用getAdvicesAndAdvisorsForBeanf方法)</code> 的 BeanPostProcessor 来判断当前 Bean 是否有必要生成代理，其判断的主要依据如下</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/016.png"></p><p>以上图 TestController 这个 Bean 为例，它的通知有以下这些</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/017.png"></p><p>这是因为先前我们定义了<strong>切入点表达式</strong>锁定了 TestController 的所有方法的原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.td.controller.TestController.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>因此，在 AbstractAdvisorAutoProxyCreator#getAdvicesAndAdvisorsForBean 时就会通过切入点表达式返回匹配的通知。</p><p>但现在的问题是，Spring 是如何知道有哪些通知的？其过程大致如下：</p><ol><li>在 Spring 容器启动时，检测到配置类上有 @EnableAspectJAutoProxy 注解，因此就会在上下文中注册一个 AnnotationAwareAspectJAutoProxyCreator 的 BeanPostProcessor 用于判断每一个 Bean 是否有必要生成切面代理实例</li><li>经过步骤 1 之后，当有 Bean 触发 AnnotationAwareAspectJAutoProxyCreator 的后处理方法 postProcessBeforeInstantiation 回调时，就会判断哪些是切面类。具体逻辑位于 BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors 方法中</li><li>是否为切面类的判断步骤如下：<ol><li>先通过 BeanFactory 获取到所以 Bean 的 BeanName</li><li>循环地根据 BeanName 获取到与其对应的 Bean Type</li><li>最后通过 AspectJAdvisorFactory#isAspect 方法判断其类是否被 @Aspect 注解</li></ol></li><li>找出切面类之后，会通过 AspectJAdvisorFactory#getAdvisors 返回类中匹配的通知方法</li></ol><p>至此，所有的通知都被找了出来，它们会在<strong>判断是否需要为 Bean 生成切面代理实例</strong>或<strong>代理目标方法被执行</strong>时被应用。</p><p>当代理实例生成后，它会像其他 Bean 一样被添加到容器中以提供给使用者使用。</p><p>最后，我们可以在目标方法中打个断点观察其代理是如何执行方法的</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/018.png"></p><p>上图中 DynamicAdvisedInterceptor#intercept 的源码如下</p><p><img src="/SpringMVC%E5%86%8D%E5%85%A5%E9%97%A8/019.png"></p><p>总结：</p><ul><li>通知（Advice&#x2F;Interceptor）和目标方法会以责任链形式执行</li><li>之所以一直称通知为拦截器，是因为通知其实际是 Advice ，而在 AOP 中 Interceptor 就继承自 Advice 。而它比较常用的一个实现就是进行事务管理的<code>TransactionInterceptor</code>、<code>CacheInterceptor</code></li></ul><h2 id="拓展：Spring-MVC是如何处理异常的？"><a href="#拓展：Spring-MVC是如何处理异常的？" class="headerlink" title="拓展：Spring MVC是如何处理异常的？"></a>拓展：Spring MVC是如何处理异常的？</h2><ol><li><p>请求到来后，通过DispacherServlet映射器获取处理器时，会创建一个HandlerMethod（存放了目标方法、响应吗、参数、所在类、bean容器等信息）</p></li><li><p>然后通过HandlerMethod和request获取其拦截器链，最后通过将 HandlerMethod和拦截器链封装到HandlerExecutionChain返回</p></li><li><p>根据处理器类型获取适配器</p></li><li><p>执行拦截器前置拦截</p></li><li><p>适配调用handler（如果用的是@RequestMapping，适配器是RequestMappingHandlerAdapter）</p><ol><li><p>会将目标方法包装成ServletInvocableHandlerMethod（继承自InvocableHandlerMethod）扩展其能力（如支持@ResponseStatus）</p></li><li><p>将以下内容添加到ServletInvocableHandler</p><ul><li>参数解析器（this.argumentResolvers）</li><li>返回值处理器（this.returnValueHandlers）</li><li>参数名发现器（ParameterNameDiscoverer）</li></ul></li><li><p>调用ServletInvocableHandler#invokeAndHandle方法，执行请求处理：</p><ol><li><p>解析出参数</p></li><li><p>反射调用目标方法</p></li><li><p>【注意】假设目标出现了异常，这时会将异常往外抛出（抛到DispacherServlet）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Throwable</span> <span class="variable">targetException</span> <span class="operator">=</span> ex.getTargetException();</span><br><span class="line"><span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line"><span class="keyword">throw</span> (RuntimeException) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Error) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (targetException <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line"><span class="keyword">throw</span> (Exception) targetException;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatInvokeError(<span class="string">&quot;Invocation failure&quot;</span>, args), targetException);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>因为处理器抛出了异常，所以 DispacherServlet 不会再执行拦截器，而是直接执行 processDispatchResult 处理请求的返回结果</p><ol><li><p>DispacherServlet#processDispatchResult提取出目标方法，接着交给 DispacherServlet#processHandlerException</p></li><li><p>DispacherServlet#processHandlerException 会将 request、response、handler、exception 等信息传递给 this.handlerExceptionResolvers 解析处理（默认有两个：DefaultErrorAttributes（用于解析出错误信息）、HandlerExceptionResolverComposite（组装了多个异常解析器，用于处理程序映射或执行期间抛出的异常））。其中在 HandlerExceptionResolverComposite 中默认有以下3个异常解析处理器（按顺序处理）：</p><ul><li>ExceptionHandlerExceptionResolver：利用@ExceptionHandler处理异常（如果有的话）</li><li>ResponseStatusExceptionResolver：解析@ResponseStatus信息</li><li>DefaultHandlerExceptionResolver：解析标准SpringMVC异常，并将它们转换为相应的HTTP状态代码（就是出现了<code>SpringMVC内置的特定异常</code>，设置特定状态码，如404、500、406等等等等）,但如果不是抛出Spring的异常，这不会被处理。</li></ul></li><li><p>【注意】如果没有使用@ExceptionHandler、@ResponseStatus、Spring内置的异常类的话，则DispacherServlet#processHandlerException是并不会处理该异常，它会将异常抛给自己的父类FrameworkServlet处理，但其实FrameworkServlet也不会处理，而是将其再次封装成NestedServletException继续往外抛，直到Tomcat发现这个异常，这时Tomcat会重定向到<code>/error页面（如果是SpringBoot，会自动配置）</code>，这时请求会再次被DispatcherServlet处理。<br>如果是SpringBoot的话，会自动添加一个<code>BasicErrorController</code>来处理<code>/error</code>的请求，BasicErrorController这个处理器是通过实现Controller接口来实现的，即只针对&#x2F;error进行处理，它会返回默认视图来渲染结果显示给用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span> &#123; <span class="comment">// ..&#125;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo SPI机制源码浅析</title>
      <link href="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
      <url>/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SPI 的全称是 Service Provider Interface（服务提供者接口）。它 是模块化编程和微内核架构的重要部分。例如我们可以利用 SPI 做到不修改代码的情况切换接口的具体实现，又或者在多模块化编程时利用 SPI 来实现依赖倒置。</p><p>SPI 并不是 Dubbo 中独有的机制，准确点来说是 Dubbo 扩展了  JDK 的 SPI 机制。而除了 Dubbo 之外，其实很多常见的开源框架在直接或间接上地使用 SPI。例如 Hibernate 5 开始通过模块化来聚合第三方组件，JDBC 4.0 后自动加载数据库驱动， Sping Boot 的自动装配类加载，以及 Servlet 3.0 开始的无 xml 配置方式等，都是建基于 SPI 或其思想之上实现的。</p><h2 id="JDK-SPI-入门"><a href="#JDK-SPI-入门" class="headerlink" title="JDK SPI 入门"></a>JDK SPI 入门</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在了解 Dubbo SPI 机制之前，个人认为很有必要先入门一下 JDK SPI，因为这是很多开源框架实现模块化组装的基础。</p><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p>一、创建 SPI 扩展接口（为依赖倒置作支持）</p><p>Person：全限定名为 spi.Person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、给 SPI 扩展接口提供扩展实现（实现必须带有空参构造方法）</p><p>1）Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是学无止境的小学鸡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）Worker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是玉树临风的工作人员&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、编写关联文件</p><ol><li>在类路径 META-INF&#x2F;services&#x2F; 下，创建一个以 SPI 扩展接口全限定名为名称的普通文本文件。该文件无需扩展名，当前案例为 pub.tandi.ddd_demo.test.Person</li><li>将想要使用的具体实现的全限定名填写进去。当前例子如下：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pub.tandi.ddd_demo.domain.Student</span></span><br><span class="line"><span class="attr">pub.tandi.ddd_demo.domain.Worker</span></span><br></pre></td></tr></table></figure><p>四、使用 JDK SPI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSPI</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> Optional&lt;Person&gt; personOptional = ServiceLoader.load(Person.class).findFirst();</span><br><span class="line">  personOptional.ifPresent(Person::sayHi);</span><br><span class="line">  <span class="comment">// output: 你好，我是学无止境的小学鸡</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSPIByStream</span><span class="params">()</span> &#123;</span><br><span class="line">  ServiceLoader.load(Person.class).stream().forEach(personProvider -&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> personProvider.get();</span><br><span class="line">    person.sayHi();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// output: </span></span><br><span class="line">  <span class="comment">// 你好，我是学无止境的小学鸡</span></span><br><span class="line">  <span class="comment">// 你好，我是玉树临风的工作人员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSPIReload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  ServiceLoader&lt;Person&gt; peopleService = ServiceLoader.load(Person.class);</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">3</span>);  </span><br><span class="line">    peopleService.reload(); <span class="comment">// 重新加载关联文件内容（会清除缓存Map）</span></span><br><span class="line">    <span class="keyword">final</span> Optional&lt;Person&gt; personOptional = peopleService.findFirst();</span><br><span class="line">    personOptional.ifPresent(Person::sayHi);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 输入：</span></span><br><span class="line"><span class="comment">你好，我是玉树临风的工作人员</span></span><br><span class="line"><span class="comment">你好，我是玉树临风的工作人员</span></span><br><span class="line"><span class="comment">你好，我是玉树临风的工作人员</span></span><br><span class="line"><span class="comment">你好，我是玉树临风的工作人员</span></span><br><span class="line"><span class="comment">你好，我是学无止境的小学鸡</span></span><br><span class="line"><span class="comment">你好，我是学无止境的小学鸡</span></span><br><span class="line"><span class="comment">你好，我是学无止境的小学鸡</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 可以看到在第五行开始，输出内容变了</span></span><br><span class="line"><span class="comment">// 这是因为我把关联文件中的pub.tandi.ddd_demo.domain.Worker改成了pub.tandi.ddd_demo.domain.Student</span></span><br></pre></td></tr></table></figure><h3 id="ServiceLoader-源码浅析"><a href="#ServiceLoader-源码浅析" class="headerlink" title="ServiceLoader 源码浅析"></a>ServiceLoader 源码浅析</h3><p>字段、构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ServiceLoader</span>&lt;S&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;S&gt; &#123;</span><br><span class="line">  <span class="comment">// 关联文件存放位置</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;META-INF/services/&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// SPI扩展接口Class实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载关联文件的类加载器</span></span><br><span class="line">  <span class="comment">// 注意：因为同一个类加载器“实例”不会对同一个类文件加载两次</span></span><br><span class="line">  <span class="comment">// 所以要是T.class被加载过，那么即使修改T.class后再reload也不会加载到新的T.class</span></span><br><span class="line">  <span class="comment">// 而只有T.class被卸载或加载T.class的类加载器被回收后再次加载时才会加载到新的T.class</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 安全访问控制，和SecurityManager配置相关</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现的对象实例缓存器（容器单例）</span></span><br><span class="line">  <span class="keyword">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 懒加载形式的服务发现迭代器</span></span><br><span class="line">  <span class="comment">// ServiceLoader会先从providers查找，找不到才从LazyIterator中发现</span></span><br><span class="line">  <span class="keyword">private</span> LazyIterator lookupIterator;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有构造函数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">ServiceLoader</span><span class="params">(Class&lt;S&gt; svc, ClassLoader cl)</span> &#123;</span><br><span class="line">    service = Objects.requireNonNull(svc, <span class="string">&quot;Service interface cannot be null&quot;</span>);</span><br><span class="line">    loader = (cl == <span class="literal">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class="line">    acc = (System.getSecurityManager() != <span class="literal">null</span>) ? AccessController.getContext() : <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 注意：每创建一次ServiceLoader实例都会reload一次，这时会清除缓存providers，并重新创建LazyIterator lookupIterator</span></span><br><span class="line">    reload();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>load 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class="title function_">load</span><span class="params">(Class&lt;S&gt; service)</span> &#123;</span><br><span class="line">  <span class="comment">// 获取加载当前类的类加载器</span></span><br><span class="line">  <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader(); </span><br><span class="line">  <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class="title function_">load</span><span class="params">(Class&lt;S&gt; service,</span></span><br><span class="line"><span class="params">                                        ClassLoader loader)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 创建ServiceLoader实例（清除缓存providers，并重新创建LazyIterator）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceLoader</span>&lt;&gt;(service, loader); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reload 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除缓存providers，并重新创建LazyIterator lookupIterator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reload</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 清理本地缓存providers</span></span><br><span class="line">  providers.clear(); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 重新创建LazyIterator</span></span><br><span class="line">  <span class="comment">// 注意：之所以重新创建LazyIterator，是为了让ServiceLoader的iterator()方法重新回到懒加载状态</span></span><br><span class="line">  <span class="comment">// 懒加载的核心思想是只有在使用时才会去加载，是一种避免不必要消耗的处理手法</span></span><br><span class="line">  <span class="comment">// 参数1：SPI扩展接口的Class实例</span></span><br><span class="line">  <span class="comment">// 参数2：类加载器</span></span><br><span class="line">  lookupIterator = <span class="keyword">new</span> <span class="title class_">LazyIterator</span>(service, loader); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterator 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用：懒加载迭代。即首先从缓存providers中获取实例，如果没有再用lookupIterator到关联文件中加载</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;S&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;S&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders = providers.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (knownProviders.hasNext()) <span class="comment">// 先在缓存中查找，没有再用LazyIterator发现</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> lookupIterator.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> S <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">        <span class="keyword">return</span> knownProviders.next().getValue();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> lookupIterator.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LazyIterator 懒加载服务发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LazyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;S&gt; &#123;</span><br><span class="line">  <span class="comment">// 加载出来的内容</span></span><br><span class="line">  Enumeration&lt;URL&gt; configs = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析出来的实现信息</span></span><br><span class="line">  Iterator&lt;String&gt; pending = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 待加载实现的全限定名</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">nextName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载接口实现</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasNextService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextName != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (configs == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123; </span><br><span class="line">        <span class="comment">// 关联文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> PREFIX + service.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况1：如果没有指定类加载器，则使用应用类加载器尝试加载</span></span><br><span class="line">        <span class="keyword">if</span> (loader == <span class="literal">null</span>) </span><br><span class="line">          configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况2：指定了类加载器</span></span><br><span class="line">        <span class="comment">// 注：ExtClassLoader、AppClassLoader继承自URLClassLoader</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">          configs = loader.getResources(fullName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((pending == <span class="literal">null</span>) || !pending.hasNext()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 表示已经没有内容需要加载（这时nextName为null，因为每次调用nextService()是该变量都会被置空）</span></span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// 将加载内容解析成pending（Iterator&lt;String&gt;）</span></span><br><span class="line">      pending = parse(service, configs.nextElement());</span><br><span class="line">    &#125;</span><br><span class="line">    nextName = pending.next();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> S <span class="title function_">nextService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Fail Fast</span></span><br><span class="line">    <span class="keyword">if</span> (!hasNextService())</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> nextName;</span><br><span class="line">    nextName = <span class="literal">null</span>;</span><br><span class="line">    Class&lt;?&gt; c = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、获取SPI实现的Class对象</span></span><br><span class="line">      c = Class.forName(cn, <span class="literal">false</span>, loader); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 2、实例化实现，并保存到缓存中</span></span><br><span class="line">      <span class="type">S</span> <span class="variable">p</span> <span class="operator">=</span> service.cast(c.newInstance());</span><br><span class="line">      providers.put(cn, p); <span class="comment">// 可以看到，key为类的限定名</span></span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 如果加载的内容没有做访问控制，则直接用hasNextService()获取</span></span><br><span class="line">    <span class="keyword">if</span> (acc == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> hasNextService();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 反之，包装hasNextService()进行访问控制检验</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      PrivilegedAction&lt;Boolean&gt; action = <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> Boolean <span class="title function_">run</span><span class="params">()</span> &#123; </span><br><span class="line">          <span class="keyword">return</span> hasNextService(); </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：URLClassLoader基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">classLoader</span><span class="params">()</span> &#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Test.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">  out(<span class="string">&quot;classLoader.getName()&quot;</span>, <span class="string">&quot;获取类加载器的名称&quot;</span>, classLoader.getName()); <span class="comment">// app：应用类加载器</span></span><br><span class="line">  out(<span class="string">&quot;classLoader.getParent()&quot;</span>, <span class="string">&quot;获取父类加载器&quot;</span>, classLoader.getParent().getName()); <span class="comment">// platform：平台类加载器</span></span><br><span class="line">  out(<span class="string">&quot;classLoader.getDefinedPackages()&quot;</span>, <span class="string">&quot;获取被加载过的包路径&quot;</span>, classLoader.getDefinedPackages());</span><br><span class="line">  out(<span class="string">&quot;classLoader.getSystemResource()&quot;</span>, <span class="string">&quot;使用系统类加载器直接从类路径中加载资源（不需要加/头，因为默认相对于类加载器路径）&quot;</span>, ClassLoader.getSystemResource(<span class="string">&quot;netty/test/kv.properties&quot;</span>));</span><br><span class="line">  out(<span class="string">&quot;classLoader.getSystemResourceAsStream()&quot;</span>, <span class="string">&quot;使用系统类加载器直接从类路径中加载资源，并返回输入流（不需要加/头，因为默认相对于类加载器路径）&quot;</span>, ClassLoader.getSystemResourceAsStream(<span class="string">&quot;netty/test/kv.properties&quot;</span>));</span><br><span class="line">  out(<span class="string">&quot;classLoader.resources()&quot;</span>, <span class="string">&quot;加载指定路径下的资源（不需要加/头，因为默认相对于类加载器路径），返回Stream&lt;URL&gt;&quot;</span>, classLoader.resources(<span class="string">&quot;netty/test/&quot;</span>));</span><br><span class="line">  out(<span class="string">&quot;classLoader.loadClass()&quot;</span>, <span class="string">&quot;使用委派模型加载类，但不进行初始化&quot;</span>, classLoader.loadClass(netty.test.Person.class.getName()));</span><br><span class="line">  <span class="comment">// Class.forName(netty.test.Person.class.getName()); // 默认初始化类</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// URLClassLoader使用</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> <span class="string">&quot;file:&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">localDir</span> <span class="operator">=</span> <span class="string">&quot;/Users/tan/ProgrammingEnvironment/workspace/IdeaProjects/java11-demo/target/classes/&quot;</span>;</span><br><span class="line">  <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(protocol + localDir);</span><br><span class="line">  <span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">  Class&lt;?&gt; aClass = urlClassLoader.loadClass(<span class="string">&quot;netty.test.Person&quot;</span>); <span class="comment">// 从本地加载，但不初始化</span></span><br><span class="line">  aClass.getDeclaredConstructor().newInstance(); <span class="comment">// 初始化并实例化</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要注意的是，其实上面classLoader.getSystemResource()和classLoader.getSystemResourceAsStream() 依赖的是下面两个方法</span></span><br><span class="line">  <span class="comment">// 即只要是从磁盘或网络中定位，其实都是通过URLClassLoader来查找资源的，而默认路径是classpath下，即*/target/classes/</span></span><br><span class="line">  <span class="comment">// 区别：loadClass()用于加载类，而findResource()用于加载其它资源</span></span><br><span class="line">  urlClassLoader.findResource(<span class="string">&quot;netty/test/kv.properties&quot;</span>);</span><br><span class="line">  urlClassLoader.getResourceAsStream(<span class="string">&quot;netty/test/kv.properties&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK-SPI-最佳实践-Servlet-3-0"><a href="#JDK-SPI-最佳实践-Servlet-3-0" class="headerlink" title="JDK SPI 最佳实践 - Servlet 3.0"></a>JDK SPI 最佳实践 - Servlet 3.0</h3><p><img src="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/001.png"></p><h2 id="Dubbo微内核架构基石-SPI扩展"><a href="#Dubbo微内核架构基石-SPI扩展" class="headerlink" title="Dubbo微内核架构基石 - SPI扩展"></a>Dubbo微内核架构基石 - SPI扩展</h2><h3 id="为什么-Dubbo-需要扩展-JDK-SPI"><a href="#为什么-Dubbo-需要扩展-JDK-SPI" class="headerlink" title="为什么 Dubbo 需要扩展 JDK SPI"></a>为什么 Dubbo 需要扩展 JDK SPI</h3><p>1）在其官方文档它认为 JDK SPI 有如下缺点</p><ul><li>需要遍历所有的实现并将其实例化，然后在循环中才能找到真正需要的实现</li><li>基于上一点的原因，无法实现按需加载</li><li>在关联文件中不能为具体扩展命名，导致在程序中很难准确地引用想要的实现</li><li>如果扩展本身依赖其他的扩展，不能做到自动地依赖注入</li><li>没有类 IOC 和 AOP 功能，亦没有渠道对其扩径进行参数配置，因此而导致扩展性差<ul><li>Dubbo SPI 实现了 IOC 能力，通过<code>适配器模式</code>实现</li><li>Wrapper 实现了 AOP 能力，通过<code>装饰器模式</code>，主要用于扩展能力和减少反射的使用</li></ul></li><li>扩展很难和其他的框架集成。譬如扩展依赖了一个 Spring Bean 的话原生的 JDK SPI 机制是不支持</li></ul><p>2）在 Dubbo 中 SPI 的常见扩展点</p><p><img src="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/005.png"></p><p>其实除了下面的 Service层（提供给客户端使用的API接口层）和 Config层（配置层）之外，其它都可通过 SPI 进行扩展。</p><p>这也是为什么微内核架构也叫插件式架构的原因</p><p><img src="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/006.png"></p><ul><li>proxy层：为消费者提供stub代理，用于模拟远程服务实例。为生产者提供Wrapper能力，减少反射调用</li><li>Registry层：实现为消费者拉取服务列表，为生产者注册服务列表等功能</li><li>Cluster层 ：实现服务调用路由规则、负载均衡、集群容错等功能（这些功能均通过 Invoker 实现）</li><li>Monitor层：实现消费者和生产者的数据统计，为监控提供支持</li><li>Protocol层：实现RPC通信协议。如支持 InJVM、HTTP、Dubbo、Hessiam、RMI、WebService 、Triple（Dubbo 3）等协议（默认使用 Dubbo）</li><li>Exchange层：实现请求和响应的方式，以及同步和异步的转换</li><li>Transport层：网络传输抽象，依赖于Netty 和 Mina</li><li>Serialize层：提供对传输数据进行序列化的能力。如支持 DubboSerialization、Hessian2Serialization、JavaSerialization、CompactedJavaSerialization、NativeJavaSerialization 等方式（默认使用 Hessian2）</li></ul><p>3）拓展：关于服务列表注册的小记</p><p><img src="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/007.png"></p><ul><li>先启动 Netty 然后再注册</li><li>期间 DubboProtocol 会通过 DubboExporter 获取要暴露的 Invoker 进行注册，而 Invoker 代表的是某个服务的一个提供者（具体信息保存在 Invocation 中）</li><li>Invoker 是 Cluster 层的实现者</li></ul><h3 id="快速入门案例-1"><a href="#快速入门案例-1" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><p>一、创建 SPI 扩展接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.SPI;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SPI(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、给 SPI 扩展接口提供扩展实现（实现必须带有空参构造方法）</p><p>Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是学无止境的小学鸡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Worker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是玉树临风的工作人员&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、编写关联文件</p><ol><li><p>在类路径 META-INF&#x2F;dubbo&#x2F; 下，创建一个以 SPI 扩展接口全限定名为名称的普通文本文件。该文件无需扩展名，当前案例为 pub.tandi.ddd_demo.test.Person</p></li><li><p>将想要使用的具体实现的全限定名填写进去。当前例子如下：</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student</span>=<span class="string">pub.tandi.ddd_demo.domain.Student</span></span><br><span class="line"><span class="attr">worker</span>=<span class="string">pub.tandi.ddd_demo.domain.Worker</span></span><br></pre></td></tr></table></figure><ul><li><p>关联文件是 key - value 对</p></li><li><p>值得注意的是关联文件除了可以存放在 <code>META-INF/services/</code> 下，还可以放在 <code>META-INF/dubbo/</code> 和 <code>META-INF/internal/</code> 下。它们分别与 ServicesLoadingStrategy、DubboLoadingStrategy、DubboInternalLoadingStrategy 三种加载策略对应</p></li></ul><p>四、使用测试</p><p>普通模式使用：直接依赖 @SPI 操作</p><ul><li>@SPI 用于标注扩展点接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDSPI</span><span class="params">()</span> &#123;</span><br><span class="line">  ExtensionLoader&lt;Person&gt; loader = ExtensionLoader.getExtensionLoader(Person.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式1：返回默认扩展实现。即@SPI(&quot;DefaultKey&quot;)</span></span><br><span class="line">  <span class="comment">//Person person = loader.getDefaultExtension();</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式2：根据指定Key获取（找不到会返回默认扩展实现）</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;worker&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> loader.getOrDefaultExtension(key);</span><br><span class="line">  person.sayHi();</span><br><span class="line">  <span class="comment">// output: 你好，我是玉树临风的工作人员</span></span><br><span class="line"></span><br><span class="line">  System.out.println(person);</span><br><span class="line">  <span class="comment">// output: pub.tandi.ddd_demo.domain.Worker@f0c8a99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配模式使用：@SPI + @Adaptive </p><ul><li>@Adaptive 为扩展接口提供适配模式支持</li><li>@Adaptive 可标注在<code>扩展点抽象方法</code>和<code>扩展点实现类</code>上<ul><li>当标注在扩展点实现类上时，表示这是一个装饰器类（参考：AdaptiveCompiler 类）</li><li>当标注在扩展点抽象方法上时，方法需在参数列表中添加 Dubbo 提供的 URL&#x2F;Invoker 类作为入参，否则会抛出 IllegalStateException 异常。其中 URL 用于传递参数，主要作用是为 AOP 适配具体实现提供条件依据</li></ul></li></ul><p>1）开启适配模式</p><p>扩展接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.URL;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.Adaptive;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.SPI;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SPI(&quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 启用适配模式</span></span><br><span class="line">  <span class="comment">// value参数：定义URL中的参数名。用于根据该参数的值进行扩展点实现适配</span></span><br><span class="line">  <span class="meta">@Adaptive(value = &quot;active&quot;)</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">(URL url)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展点实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.URL;</span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是学无止境的小学鸡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.URL;</span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是玉树临风的工作人员&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）使用测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDSPIAdaptive</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  ExtensionLoader&lt;Person&gt; loader = ExtensionLoader.getExtensionLoader(Person.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用适配模式匹配</span></span><br><span class="line">  <span class="comment">// 因为使用运行时织入的AOP，所以这里返回的是一个代理实例</span></span><br><span class="line">  <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> loader.getAdaptiveExtension();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拼装URL</span></span><br><span class="line">  <span class="comment">// URL在Dubbo中用于传递配置，贯穿了整个RPC过程，比较重要</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> URL.valueOf(<span class="string">&quot;https://www.baidu.com/?active=worker&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 适配调用</span></span><br><span class="line">  person.sayHi(url);</span><br><span class="line">  <span class="comment">// output: 你好，我是玉树临风的工作人员</span></span><br><span class="line"></span><br><span class="line">  System.out.println(person);</span><br><span class="line">  <span class="comment">// output: pub.tandi.ddd_demo.test.Person$Adaptive@5db45159</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dubbo 3.0.4 为止没有适配 JDK17，异常操作会出现反射异常，添加 <code>--illegal-access=permi</code> 亦无法解决</li></ul><p>激活模式：@SPI + @Activate</p><ul><li>在激活模式中扩展点接口无需使用 URL 作为入参，但依然需要 URL 来激活</li><li>@Activate 可以标注在<code>扩展点实现类</code>或<code>扩展点方法</code>上</li><li>@Activate 常见用法有两种：<ol><li>@Activate (value &#x3D; “xxx”)：指定激活参数。即URL中如果包含该值就激活对应的实现</li><li>@Activate (group&#x3D; “xxx”)：指定 group 值，当调用 getActivateExtension 时指定 group 值，那么被匹配的组将会被激活</li></ol></li></ul><p>@Activate (value &#x3D; “name”) 案例</p><p>1）配置</p><p>Worker类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(value = &quot;worker&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是玉树临风的工作人员&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(value = &quot;student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是学无止境的小学鸡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）使用测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDSPIActivate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  ExtensionLoader&lt;Person&gt; loader = ExtensionLoader.getExtensionLoader(Person.class);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span> <span class="string">&quot;http://localhost&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> <span class="string">&quot;key=student&quot;</span>; <span class="comment">// 启用 @Activate 值为 student 的实现</span></span><br><span class="line">  <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> URL.valueOf(request + <span class="string">&quot;?&quot;</span> + params);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过激活模式激活扩展点实现</span></span><br><span class="line">  <span class="keyword">final</span> List&lt;Person&gt; persons = loader.getActivateExtension(url, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">  persons.forEach(Person::sayHi);</span><br><span class="line">  <span class="comment">// output: 你好，我是学无止境的小学鸡</span></span><br><span class="line"></span><br><span class="line">  System.out.println(persons);</span><br><span class="line">  <span class="comment">// output: [pub.tandi.ddd_demo.domain.Student@64485a47]</span></span><br><span class="line">  <span class="comment">// 可以看到并不是代理，也就是说激活模式其实是普通模式的增强</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Activate (group&#x3D; “name”) 案例</p><p>1）配置</p><p>Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(group = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是学无止境的小学鸡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Worker类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pub.tandi.ddd_demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.common.extension.Activate;</span><br><span class="line"><span class="keyword">import</span> pub.tandi.ddd_demo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Activate(group = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好，我是玉树临风的工作人员&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）使用测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDSPIActivate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  ExtensionLoader&lt;Person&gt; loader = ExtensionLoader.getExtensionLoader(Person.class);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span> <span class="string">&quot;http://localhost&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> <span class="string">&quot;key=student&quot;</span>; <span class="comment">// 启用 @Activate 值为 student 的实现</span></span><br><span class="line">  <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> URL.valueOf(request + <span class="string">&quot;?&quot;</span> + params);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式1：通过激活模式激活扩展点实现</span></span><br><span class="line">  <span class="comment">// final List&lt;Person&gt; persons = loader.getActivateExtension(url, &quot;key&quot;);</span></span><br><span class="line">  <span class="comment">// persons.forEach(Person::sayHi);</span></span><br><span class="line">  <span class="comment">// output: 你好，我是学无止境的小学鸡</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式2：通过组名激活整个组的具体实现</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">groupName</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> List&lt;Person&gt; persons = loader.getActivateExtension(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;, groupName);;</span><br><span class="line">  persons.forEach(Person::sayHi);</span><br><span class="line">  <span class="comment">// output:</span></span><br><span class="line">  <span class="comment">// 你好，我是学无止境的小学鸡</span></span><br><span class="line">  <span class="comment">// 你好，我是玉树临风的工作人员</span></span><br><span class="line"></span><br><span class="line">  System.out.println(persons);</span><br><span class="line">  <span class="comment">// output: [pub.tandi.ddd_demo.domain.Student@64485a47, pub.tandi.ddd_demo.domain.Worker@25bbf683]</span></span><br><span class="line">  <span class="comment">// 可以看到并不是代理，也就是说激活模式其实是普通模式的增强</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExtensionLoader-源码浅析"><a href="#ExtensionLoader-源码浅析" class="headerlink" title="ExtensionLoader 源码浅析"></a>ExtensionLoader 源码浅析</h3><h4 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h4><p><img src="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/002.png"></p><p>getOrDefaultExtension(String name) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">getOrDefaultExtension</span><span class="params">(String name)</span> &#123;</span><br><span class="line">  <span class="comment">// containsExtension(name)：会先加载SPI扩展配置文件，并判断key值name是否存在于加载内容中</span></span><br><span class="line">  <span class="comment">// 如果返回true，则直接调用 getExtension(name) 获取，否者加载默认值(既@SPI中的value值)</span></span><br><span class="line">  <span class="keyword">return</span> containsExtension(name) ? getExtension(name) : getDefaultExtension();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>containsExtension(name) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断key值name是否存在于加载内容中</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">containsExtension</span><span class="params">(String name)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> getExtensionClasses().containsKey(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getExtensionClasses() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取SPI扩展实现</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; getExtensionClasses() &#123;</span><br><span class="line">  <span class="comment">// 先判断缓存中是否存在，避免无谓消耗</span></span><br><span class="line">  Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();</span><br><span class="line">  <span class="keyword">if</span> (classes == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (cachedClasses) &#123;</span><br><span class="line">      classes = cachedClasses.get();</span><br><span class="line">      <span class="keyword">if</span> (classes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 加载关联文件</span></span><br><span class="line">        classes = loadExtensionClasses(); <span class="comment">// 加载扩展点实现的Class集合 </span></span><br><span class="line">        <span class="comment">// 将其保存到 Holder&lt;Map&lt;String, Class&lt;?&gt;&gt;&gt; cachedClasses 中缓存</span></span><br><span class="line">        cachedClasses.set(classes);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadExtensionClasses() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从SPI关联文件中加载扩展点实现</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class="line">  <span class="comment">// 从扩展点的@SPI注解中得到默认的key值（如果有的话）</span></span><br><span class="line">  cacheDefaultExtensionName(); </span><br><span class="line">  <span class="comment">// 扩展点的实现</span></span><br><span class="line">  Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过Dubbo内置的加载策略来加载SPI关联文件</span></span><br><span class="line">  <span class="keyword">for</span> (LoadingStrategy strategy : strategies) &#123;</span><br><span class="line">    <span class="comment">// 参数1：存放加载内容的容器</span></span><br><span class="line">    <span class="comment">// 参数2：加载目录</span></span><br><span class="line">    <span class="comment">// 参数3：扩展点名称</span></span><br><span class="line">    <span class="comment">// 参数4：类加载器</span></span><br><span class="line">    <span class="comment">// 参数5：是否开启覆盖</span></span><br><span class="line">    <span class="comment">// 参数6：查找时排除的包</span></span><br><span class="line">    loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());</span><br><span class="line">    loadDirectory(extensionClasses, strategy.directory(), type.getName().replace(<span class="string">&quot;org.apache&quot;</span>, <span class="string">&quot;com.alibaba&quot;</span>), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> extensionClasses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Dubbo 中内置的加载策略有以下这些</p><ul><li>DubboInternalLoadingStrategy：从 <code>META-INF/dubbo/internal/</code> 中加载</li><li>DubboLoadingStrategy：从 <code>META-INF/dubbo/</code> 中加载</li><li>ServicesLoadingStrategy：从 <code>META-INF/services/</code> 中加载</li></ul><p>也就是说，Dubbo SPI 的关联文件可以存放在以上文件路径下。</p><p>除此之外，也可以通过实现 LoadingStrategy 接口，然后在 META-INF&#x2F;services 下添加关联文件来扩展 Dubbo 的加载策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLoadingStrategy</span> <span class="keyword">implements</span> <span class="title class_">LoadingStrategy</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">directory</span><span class="params">()</span> &#123; <span class="comment">// 自定义关联文件加载路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;META-INF/my/&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">overridden</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span> &#123; <span class="comment">// 优先级别</span></span><br><span class="line">    <span class="keyword">return</span> NORMAL_PRIORITY;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadDirectory(…) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据加载策略到指定的位置加载关联文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDirectory</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, String dir, String type,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> extensionLoaderClassLoaderFirst, <span class="type">boolean</span> overridden, String... excludedPackages)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> dir + type; <span class="comment">// 关联文件的全限定名称</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Enumeration&lt;java.net.URL&gt; urls = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> findClassLoader();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (urls == <span class="literal">null</span> || !urls.hasMoreElements()) &#123;</span><br><span class="line">      <span class="comment">// 这里和JDK SPI一样，如果没有指定类加载的前提下就使用加载当前类的类加载器加载</span></span><br><span class="line">      <span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">        urls = classLoader.getResources(fileName); </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        urls = ClassLoader.getSystemResources(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (urls != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">        java.net.<span class="type">URL</span> <span class="variable">resourceURL</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">        <span class="comment">// 进行资源加载</span></span><br><span class="line">        loadResource(extensionClasses, classLoader, resourceURL, overridden, excludedPackages);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadResource(…) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析关联文件，并将其实现Class添加到容器extensionClasses中保存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadResource</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, ClassLoader classLoader,</span></span><br><span class="line"><span class="params">                          java.net.URL resourceURL, <span class="type">boolean</span> overridden, String... excludedPackages)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(resourceURL.openStream(), StandardCharsets.UTF_8))) &#123;</span><br><span class="line">      String line;</span><br><span class="line">      <span class="comment">// 一次读取一行，一行的格式是：key=value</span></span><br><span class="line">      <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123; </span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ci</span> <span class="operator">=</span> line.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ci &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          line = line.substring(<span class="number">0</span>, ci);</span><br><span class="line">        &#125;</span><br><span class="line">        line = line.trim();</span><br><span class="line">        <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> line.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              name = line.substring(<span class="number">0</span>, i).trim();</span><br><span class="line">              line = line.substring(i + <span class="number">1</span>).trim();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span> &amp;&amp; !isExcluded(line, excludedPackages)) &#123; <span class="comment">// 加载实现，并初始化</span></span><br><span class="line">              loadClass(extensionClasses, resourceURL, Class.forName(line, <span class="literal">true</span>, classLoader), name, overridden);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getExtension(String name) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据name来获取实现</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getExtension</span><span class="params">(String name)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> getDefaultExtension();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> Holder&lt;Object&gt; holder = getOrCreateHolder(name);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> holder.get(); <span class="comment">// Object为Map&lt;String, Class&lt;?&gt;&gt;</span></span><br><span class="line">  <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 如果找不到，则扫描关联文件</span></span><br><span class="line">    <span class="keyword">synchronized</span> (holder) &#123;</span><br><span class="line">      instance = holder.get();</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        instance = createExtension(name);</span><br><span class="line">        holder.set(instance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (T) instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getDefaultExtension() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取默认实现</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getDefaultExtension</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 扫描关联文件</span></span><br><span class="line">  <span class="comment">// 注意，该方法并不会重复加载，因为在当前例子中调用getOrDefaultExtension()时结果已经被缓存</span></span><br><span class="line">  <span class="comment">// 这里调用getExtensionClasses()是因为当前方法getDefaultExtension()是public修饰的</span></span><br><span class="line">  <span class="comment">// 其实getOrDefaultExtension()方法只是组合了getExtension(name)和getDefaultExtension()两个public方法而已</span></span><br><span class="line">  getExtensionClasses(); </span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isBlank(cachedDefaultName) || <span class="string">&quot;true&quot;</span>.equals(cachedDefaultName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 可以看到找到默认key后，实质最终也是用getExtension(name)查找的</span></span><br><span class="line">  <span class="keyword">return</span> getExtension(cachedDefaultName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注，cachedDefaultName  的值是在 loadExtensionClasses() 中的 cacheDefaultExtensionName() 确认的，其源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从@SPI注解中得到默认key值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cacheDefaultExtensionName</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 获取@SPI注解</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">SPI</span> <span class="variable">defaultAnnotation</span> <span class="operator">=</span> type.getAnnotation(SPI.class);</span><br><span class="line">  <span class="comment">// 没有指定注解</span></span><br><span class="line">  <span class="keyword">if</span> (defaultAnnotation == <span class="literal">null</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取@SPI注解中的value值</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> defaultAnnotation.value();</span><br><span class="line">  <span class="comment">// value值不为空</span></span><br><span class="line">  <span class="keyword">if</span> ((value = value.trim()).length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    String[] names = NAME_SEPARATOR.split(value);</span><br><span class="line">    <span class="comment">// value值本身是String类型</span></span><br><span class="line">    <span class="comment">// 这里的意思是value值字符串不能存在&quot;,&quot;分隔符</span></span><br><span class="line">    <span class="keyword">if</span> (names.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (names.length == <span class="number">1</span>) &#123;</span><br><span class="line">      cachedDefaultName = names[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适配模式"><a href="#适配模式" class="headerlink" title="适配模式"></a>适配模式</h4><p><img src="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/003.png"></p><ul><li>Dubbo 内置的编译器有两种：JDK Compiler 和 Javasist Compiler</li></ul><p>getAdaptiveExtension() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回适配代理</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getAdaptiveExtension</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 先尝试从缓存中获取适配实现</span></span><br><span class="line">  <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> cachedAdaptiveInstance.get();</span><br><span class="line">  <span class="comment">// 二次检测，以减少同步锁的判断</span></span><br><span class="line">  <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">synchronized</span> (cachedAdaptiveInstance) &#123;</span><br><span class="line">      instance = cachedAdaptiveInstance.get();</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 根据Class创建适配代理实例, 并将其缓存到cachedAdaptiveInstance中</span></span><br><span class="line">          instance = createAdaptiveExtension();</span><br><span class="line">          cachedAdaptiveInstance.set(instance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (T) instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createAdaptiveExtension() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">createAdaptiveExtension</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 返回适配代理的Class并将其实例化</span></span><br><span class="line">    <span class="comment">// 如何有必要，则进行参数注入（针对非基本类型）</span></span><br><span class="line">    <span class="keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getAdaptiveExtensionClass() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">  <span class="comment">// 加载SPI实现</span></span><br><span class="line">  getExtensionClasses(); </span><br><span class="line">  <span class="keyword">if</span> (cachedAdaptiveClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建Adaptive代理的源代码(.java)，并将其使用Compiler编译</span></span><br><span class="line">  <span class="type">return</span> <span class="variable">cachedAdaptiveClass</span> <span class="operator">=</span> createAdaptiveExtensionClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createAdaptiveExtensionClass() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class="line">  <span class="comment">// 生成Java源码字</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdaptiveClassCodeGenerator</span>(type, cachedDefaultName).generate();</span><br><span class="line">  <span class="comment">// 获取类加载器</span></span><br><span class="line">  <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> findClassLoader();</span><br><span class="line">  <span class="comment">// 对源码进行编译并加载到内存中（javassist）</span></span><br><span class="line">  org.apache.dubbo.common.compiler.<span class="type">Compiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();</span><br><span class="line">  <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以当前案例为例，根据 Person 扩展点所生产的适配代理源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person$Adaptive</span> <span class="keyword">implements</span> <span class="title class_">spi</span>.Person &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">(org.apache.dubbo.common.URL arg0)</span> &#123;</span><br><span class="line">    <span class="comment">// 可以看到代理是不允许传入null值的</span></span><br><span class="line">    <span class="keyword">if</span> (arg0 == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">    org.apache.dubbo.common.<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> arg0;</span><br><span class="line">    <span class="comment">// 从URL参数列表中获取active对应的值，如果没有则使用默认值</span></span><br><span class="line">    <span class="comment">// 默认值为@SPI的value值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> url.getParameter(<span class="string">&quot;active&quot;</span>, <span class="string">&quot;student&quot;</span>);</span><br><span class="line">    <span class="comment">// 根据value值，再使用getExtensionLoader获取实现实例，如何执行目标方法</span></span><br><span class="line">    spi.<span class="type">Person</span> <span class="variable">extension</span> <span class="operator">=</span> (spi.Person) ExtensionLoader.getExtensionLoader(spi.Person.class).getExtension(extName);</span><br><span class="line">    extension.sayHi(arg0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>injectExtension(T instance) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给Adapter代理实例进行参数注入（IOC），如果有必要的话</span></span><br><span class="line"><span class="comment">// 如果你没忘记，Dubbo认为JDK SPI的缺点之一就是扩展性差，譬如无法注入Spring Bean</span></span><br><span class="line"><span class="comment">// 而该方法就是解决这一问题的</span></span><br><span class="line"><span class="keyword">private</span> T <span class="title function_">injectExtension</span><span class="params">(T instance)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (objectFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取代理的所有方法</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class="line">      <span class="comment">// 如果不是Setter，则跳过</span></span><br><span class="line">      <span class="keyword">if</span> (!isSetter(method)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果方法被@DisableInject注解，则跳过</span></span><br><span class="line">      <span class="keyword">if</span> (method.getAnnotation(DisableInject.class) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果参数是基本数据类型（包含装箱类），则跳过</span></span><br><span class="line">      <span class="comment">// 这里只获取第一个参数是因为，Setter正常情况下只有1个参数</span></span><br><span class="line">      Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (ReflectUtils.isPrimitives(pt)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 根据属性Setter方法名称，返回字段的名称（既去除set前三个字符）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> getSetterProperty(method);</span><br><span class="line">        <span class="comment">// 根据字段在实际扩展实现中得到对应的值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> objectFactory.getExtension(pt, property);</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 将其注入到代理中</span></span><br><span class="line">          method.invoke(instance, object);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="激活模式"><a href="#激活模式" class="headerlink" title="激活模式"></a>激活模式</h4><p><img src="/Dubbo-SPI%E6%9C%BA%E5%88%B6%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/004.png"></p><p>getActivateExtension(URL url, String[] values, String group) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据条件来激活扩展实现</span></span><br><span class="line"><span class="comment">// 参数1：URL条件信息</span></span><br><span class="line"><span class="comment">// 参数2：必须激活的实现</span></span><br><span class="line"><span class="comment">// 参数3：组的名称，以组的形式激活一个或多个实现</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getActivateExtension</span><span class="params">(URL url, String[] values, String group)</span> &#123;</span><br><span class="line">  List&lt;T&gt; activateExtensions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  List&lt;String&gt; names = values == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">0</span>) : asList(values); <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span> (!names.contains(REMOVE_VALUE_PREFIX + DEFAULT_KEY)) &#123; <span class="comment">// REMOVE_VALUE_PREFIX=-,DEFAULT_KEY=default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载SPI扩展实现</span></span><br><span class="line">    getExtensionClasses();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 激活筛选逻辑</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : cachedActivates.entrySet()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> entry.getKey(); <span class="comment">// 实现的key值</span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">activate</span> <span class="operator">=</span> entry.getValue(); <span class="comment">// @Activate注解对象</span></span><br><span class="line">      String[] activateGroup, activateValue; <span class="comment">// @Activate注解中的值</span></span><br><span class="line">      <span class="comment">// 获取@Activate注解中的value值和group值</span></span><br><span class="line">      <span class="keyword">if</span> (activate <span class="keyword">instanceof</span> Activate) &#123; <span class="comment">// 新注解</span></span><br><span class="line">        activateGroup = ((Activate) activate).group(); <span class="comment">// group值</span></span><br><span class="line">        activateValue = ((Activate) activate).value(); <span class="comment">// value值</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (activate <span class="keyword">instanceof</span> com.alibaba.dubbo.common.extension.Activate) &#123; <span class="comment">// 旧注解</span></span><br><span class="line">        activateGroup = ((com.alibaba.dubbo.common.extension.Activate) activate).group();</span><br><span class="line">        activateValue = ((com.alibaba.dubbo.common.extension.Activate) activate).value();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isMatchGroup(group, activateGroup) <span class="comment">// 根据group参数激活，如果没有指定group则默认返回true</span></span><br><span class="line">          &amp;&amp; !names.contains(name)</span><br><span class="line">          &amp;&amp; !names.contains(REMOVE_VALUE_PREFIX + name)</span><br><span class="line">          &amp;&amp; isActive(activateValue, url)) &#123; <span class="comment">// 根据URL激活，如果没有指定URL则默认返回true</span></span><br><span class="line">        <span class="comment">// 加载实现并将其实例对象暂存到activateExtensions中</span></span><br><span class="line">        activateExtensions.add(getExtension(name));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    activateExtensions.sort(ActivateComparator.COMPARATOR);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加载必须的实现</span></span><br><span class="line">  List&lt;T&gt; loadedExtensions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.size(); i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> names.get(i);</span><br><span class="line">    <span class="keyword">if</span> (!name.startsWith(REMOVE_VALUE_PREFIX)</span><br><span class="line">        &amp;&amp; !names.contains(REMOVE_VALUE_PREFIX + name)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (DEFAULT_KEY.equals(name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!loadedExtensions.isEmpty()) &#123;</span><br><span class="line">          activateExtensions.addAll(<span class="number">0</span>, loadedExtensions);</span><br><span class="line">          loadedExtensions.clear();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        loadedExtensions.add(getExtension(name));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!loadedExtensions.isEmpty()) &#123;</span><br><span class="line">    activateExtensions.addAll(loadedExtensions);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回激活了的实现实例集合</span></span><br><span class="line">  <span class="keyword">return</span> activateExtensions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cacheActivateClass(Class&lt;?&gt; clazz, String name) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存带有@Activate注解的实现</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cacheActivateClass</span><span class="params">(Class&lt;?&gt; clazz, String name)</span> &#123;</span><br><span class="line">  <span class="comment">// 获取当前扩展类的@Activate注解</span></span><br><span class="line">  <span class="type">Activate</span> <span class="variable">activate</span> <span class="operator">=</span> clazz.getAnnotation(Activate.class);</span><br><span class="line">  <span class="keyword">if</span> (activate != <span class="literal">null</span>) &#123;</span><br><span class="line">    cachedActivates.put(name, activate);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果新注解没有，则检查是否有用到旧注解，旧注解包名包含为alibaba，新注解为apache</span></span><br><span class="line">    <span class="comment">// support com.alibaba.dubbo.common.extension.Activate</span></span><br><span class="line">    com.alibaba.dubbo.common.extension.<span class="type">Activate</span> <span class="variable">oldActivate</span> <span class="operator">=</span> clazz.getAnnotation(com.alibaba.dubbo.common.extension.Activate.class);</span><br><span class="line">    <span class="keyword">if</span> (oldActivate != <span class="literal">null</span>) &#123;</span><br><span class="line">      cachedActivates.put(name, oldActivate);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://dubbo.apache.org/zh-cn/blog/introduction-to-dubbo-spi.html">Dubbo可扩展机制实战</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA性能调优小记</title>
      <link href="/IDEA%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B0%8F%E8%AE%B0/"/>
      <url>/IDEA%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间将 IDEA 升级到了 2020 版本，而最近在使用方面可能是因为项目文件较多的缘故，发现经常出现卡顿的现象。而笔者的机器是15年购入的，虽然算起来也有段历史了（i5-5200U CPU、8G RAM），但感觉也不至于卡成这样，所以这次打算针对 IDEA 所使用的 JVM 进行一次调优，而调优的最终目标是舒缓运行过程中的卡顿感。</p><p>个人认为性能调优其实是件非常矛盾的事情，因为调优的核心思想其实就是如何在资源有限资源的情况下让应用程序运行得更好。所以有时在网上看到一些对配置和调优目标只字不提就开始高谈阔论地教人调优的文章也是挺让人费解。</p><p>对于 JVM 调优而言，个人的第1个建议是尽量放到最后才考虑，应该先通过程序来优化。如果要优化 JVM，特别是生产环境，应该每调一次完就测试一次，防止开倒车。第2个建议是条件允许的情况下可以通过升级 JDK 来达到优化的目的，因为升级 JDK 本身就是一种很大的优化。</p><p>在进行 JVM 调优之前，我们还应该知道如何衡量一款 GC 的性能。常见的衡量指标有以下这些</p><ul><li>吞吐量：考虑的是 GC 回收时对应用程序本身处理能力的影响</li><li>延时：考虑的是 GC 回收时造成应用程序暂停服务的问题</li><li>资源消耗：考虑的是 GC 在内存和CPU等方面的消耗</li></ul><p>造成应用程序卡顿感的常见原因</p><ol><li>GC 回收带来的 STW</li><li>资源分配不合理导致频繁 GC 或 CPU 使用过高</li><li>代码存在缺陷导致 CPU 使用率过高</li></ol><h2 id="参数调优说明"><a href="#参数调优说明" class="headerlink" title="参数调优说明"></a>参数调优说明</h2><p>调优目标：舒缓 IDEA 启动及运行过程的卡顿感<br>环境配置：</p><ul><li>双核四线程CPU</li><li>8G内存</li><li>JRE 11 （可以使用 choose runtime 插件来查看及更改）</li><li>CMS 垃圾回收器（IDEA默认）</li></ul><blockquote><p>注：</p><ul><li>从 JDK9 开始默认 GC 从 Parallel 改为了 G1。G1 的优势是可以将较的内存划分为若干个 Region 区来细化管理，所以如果能够给堆分配较大的内存的话就更能够体现 G1 的优势（官方建议6G或以上）</li><li>但个人在思考一个问题，就是为什么 IDEA 都基于 JRE 11 了，但却依然默认使用 CMS 。对于这个问题，笔者认为在内存较小的情况下 CMS 和 G1 其实在性能方面是差不了多少的，要不然这问题说不过去。因为 G1 一样有并发标记操作，而且导致 STW 的阶段操作比 CMS 多（但 G1 有优先回收策略，因此个人认为可以忽略这点），其次是 IDEA 提供商无法保证用户机器内存都足够充裕，所以默认最好最稳健的方案就是 CMS + Parallel 了，这也是正所谓的”合适由于行业领先”原则</li><li>CMS 从 JDK 14 开始被移除，因此不管是学习还是使用，个人都更加推荐 G1 或 者更前卫的 ZGC，但 ZGC 在 JDK 15 才被正式使用，而且需要在 Linux 64位机器或Windows 10 1803 版本及以上版本系统才能使用，所以目前而言使用 G1 其实已经能够满足大部分需求</li><li>ZGC 是一个单代堆管理、并发、极低停顿的垃圾回收器，且 GC 回收所需时间不会随着堆的增大而延长（只受到GC Roots数量影响），据介绍 ZGC 一次回收操作可控制在10毫秒内。除此之外，ZGC 堆内存最大允许为4T（据悉日后支持16T），但因为回收阶段基本上都是和应用程序并发执行，所以会一定程度降低应用程序的吞吐量。而 ZGC 之所以能够实现极低的停顿时间，是因为采用了<code>着色指针</code>和<code>读屏障</code>等机制来准确定位对象地址从而得到了更好的并发性</li></ul></blockquote><p>优化过后的配置如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Xverify</span>:<span class="string">none</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">ParallelGCThreads=4</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">ConcGCThreads=2</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">MetaspaceSize=512m</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">MaxMetaspaceSize=1g</span></span><br><span class="line"><span class="attr">-Xms1g</span></span><br><span class="line"><span class="attr">-Xmx1g</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+UseG1GC</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">G1HeapRegionSize=2m</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+UseStringDeduplication</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">CICompilerCount=2</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+UseAdaptiveSizePolicy</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">ReservedCodeCacheSize=256m</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">InitialCodeCacheSize=256m</span></span><br></pre></td></tr></table></figure><ul><li>可以使用以下命令来查看当前版本的 JDK 支持那些 Flag<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印所有Flag</span></span><br><span class="line">java -XX:+PrintFlagsFinal --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印以-X开头的参数项</span></span><br><span class="line">java -X</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例子：打印所有与大小关键字有关的Flag</span></span><br><span class="line">java -XX:+PrintFlagsFinal --version | grep &quot;Size\|size&quot;</span><br></pre></td></tr></table></figure></li></ul><p>配置说明：</p><p><del>-server</del></p><ul><li><del>使用 C2 编译器</del></li><li><del>让热点代码（方法和循环）更高质量地被编译</del></li><li><del>不指定将默认使用mixed模式执行编译</del></li></ul><p>-Xverify:none</p><ul><li>加载类时不进行字节码校验</li><li>可以一定程度提升类的加载效率，特别是类较多的情况下</li><li>注意：该配置在 JDK 13 被废弃</li></ul><p>-Xms1g</p><ul><li>启动时堆的初始化大小</li><li>默认为主存的 1&#x2F;64 </li><li>该值和 -Xmx 可以保持一致，这样可以一定程度低减少内存扩容时带来的性能开销</li></ul><p>-Xmx1g</p><ul><li>堆的最大值</li><li>注意：<ul><li>如果<code>不指定 Xmx 默认情况下 MaxHeapSize 只占系统内存的 1/4</code>，所以强烈建议设置，不论是何种应用</li><li>Xmx并不是越大越好，因为如果内存过于充裕就会导致GC时间边长</li></ul></li></ul><p><del>-XX:+AlwaysPreTouch</del></p><ul><li><del>特别需要注意的是，Xms和Xmx只是用来规范Java堆大小的参数，但这些内存是还没有确切地分配下来的，而是等到真正需要访问到时才会向C堆申请（Java堆 -&gt; C堆 -&gt; 操作系统）。该参数的作用就是让JVM进程在初始化期间获取所有的内存，而不是需要时才向操作系统获取（通过提前访问内存页实现）</del></li><li><del>该配置可以一定程度地提升程序运行期间的稳定性。虽然会带来一定的启动延时（其实很短暂），但依然建议在生产项目中开该这个配置项。而因为笔记本内存比较稀缺，所以就不推荐使用了</del></li></ul><p>-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize</p><ul><li>指定元空间大小</li><li>元空间是 Java 8 HostSpot虚拟机中方法区的新实现，用于代替之前的永久代方法区实现。之所以替换永久代的主要原因个人认为是因为 HostSpot 虚拟机为了方便管理而将永久代实现在了堆中（逻辑划分与堆进行隔离），然而这中设计不太符合普遍的 GC 标准，譬如不能直接适配收购回来的垃圾回收器实现，其次是因为永久代（ -XX:MaxPermSize ）存在默认的上限，用意出现 OOM，因此特别是类较多的情况下需要额外花心思来维护。而元空间位于直接内存，受直接内存限制，且默认没有上限值（上限就是物理内存大小）</li><li>建议：如果是一般项目两个配置最好一致，原因同上</li><li>注意：强烈建议设置 -XX:MetaspaceSize 参数，因为一旦 MetaspaceSize（默认 20 多兆）被填满就会触发 Full GC 。如果不设置则可能会出现在程序启动期间就连续执行多次 Full GC 的情况，所以设置该值可以有效地降低启动时 Full GC 的频率</li></ul><p><del>-Xmn512m</del></p><ul><li><del>新生代内存大小</del></li><li><del>该内存要特别主要，虽然 Young GC 效率较高停顿较低（因为用的是标记复制算法）但频率也高。如果新生代设置得很大，还是会给 GC 线程带来回收压力的，而频繁地 Young GC 除了导致 CPU 使用率上升的同时还会加大停顿时间</del></li><li><del>建议：</del><ul><li><del>如果有较为充足的内存分配给新生代，个人建议这时可以适当地将幸存者区域内存增大，因为这样可以提升 标记-复制 算法 的内存使用率</del></li><li>使用 G1 时<code>不推荐</code>对该选项进行配置，因为 G1 会通过<code>启发式推断</code>来动态调节内存以尽量达到用户期望的停顿要求（MaxGCPauseMillis，默认为 200 ms，这只得太小也没用，因为做不到）</li></ul></li></ul><p><del>-XX:+UseConcMarkSweepGC</del></p><ul><li><del>老年代使用 CMS，新生代使用 ParNew</del></li></ul><p>-XX:+UseG1GC</p><ul><li>启用 Garbage First 垃圾回收器</li><li>因为 G1 的 GC 停顿时间更加可控。可以通过 <code>MaxGCPauseMillis</code> 设置 GC 停顿期望值，默认为 200 ms</li></ul><p>-XX:G1HeapRegionSize&#x3D;2m</p><ul><li>指定 G1 Region 区的大小。该配置项默认值为1m</li><li>适当增加该值可以提高内存的使用率，但与此同时增大 Region 就意味着增加回收成本，所以应该根据实际的情况来设置。该配置纯粹是个经验值，譬如网上建议 Xmx 为 4G 时可以将该值设置为 4m</li><li>注意：该值必须是 2 的 n 幂，而且范围在 1 MB 到 32 MB 之间。默认情况下该值为 1M，既 0 次幂</li></ul><p>-XX:ParallelGCThreads&#x3D;4</p><ul><li>STW 时的 GC 工作线程</li><li>建议：<ul><li>该值尽量少于 CPU 核心线程数，因为这样可以减少 CPU 资源竞争从而提高程序的吞吐量</li><li>当然，如果 CPU 较强，或者对 GC 停顿有所要求，则可以适当提高该值。譬如当前双核四线程 CPU 可以设置5 或 6 条线程</li></ul></li><li>该值默认为 CPU 核心线程数数量</li></ul><p>-XX:ConcGCThreads&#x3D;2</p><ul><li>并发标记线程数</li><li>当前案例设置为 2</li><li>默认值为 （ParallelGCThreads + 3）&#x2F;4</li></ul><p><del>-XX:CMSInitiatingOccupancyFraction&#x3D;75</del></p><ul><li><del>触发 CMS 并发标记的内存使用阈值。默认为92，表示老年代使用率92%时触发</del></li><li><del>这里设置为 75 是我根据 HashMap 的扩容因子值来设置的，其实这是一个比较合理的折中值</del></li><li><del>注意：</del><ul><li><del>该值不建议设置过大。因为触发并发标记后如果预留空间不足以分配给其它对象实例的话就会出现<code>并发失败</code>的情况，这时会使用 Serial 进行串行 STW 执行回收</del></li><li><del>该配置必须和 UseCMSInitiatingOccupancyOnly （默认为 false）一起使用才生效</del></li></ul></li></ul><p><del>-XX:-CMSClassUnloadingEnabled</del></p><ul><li><del>禁止 CMS 卸载类</del></li><li><del>这里禁止卸载类是为了减少类加载带来的开销。然后，开启该配置的前提是元空间的内存足够充裕，否则容易引发 Full GC</del></li><li><del>如果 JDK 是 1.7 之前的版本，开启 <code>-XX:+CMSClassUnloadingEnabled</code> 配置，让 CMS 回收垃圾时允许它卸载类，这样可以有效地降低永久代 OOM 的几率</del></li></ul><p>-XX:CICompilerCount&#x3D;2 </p><ul><li>JIT 编译热点代码时的工作线程数</li><li>建议：数量不宜过多，因为在 IDEA 启动时会伴随大量的 JIT 编译和多次 Young GC，所以 CPU 很容易到达100%，这是 IDEA 启动卡顿的重要原因之一</li></ul><p><del>-XX:MaxTenuringThreshold&#x3D;10</del></p><ul><li><del>对象晋升老年代的岁数。默认值为15，既表示对象经历15次 GC 后依然没被回收就晋升到老年代</del></li><li><del>注意：如果使用的是 CMS ，该值默认为 6 而不是 15。使用 CMS 时可以通过命令<code>jinfo -flag MaxTenuringThreshold 线程PID</code> 观察到。个人认为之所以 CMS 被设置为 6 而不是 15 是因为 CMS 有并发标记可以有效地回收老年代实例，从而降低 Full GC 的原因，所以就算提前晋升也关系不大。但作为使用者必须理解，不管是 15 还 6 ，这都是通过大量测试得出来的经验值，所以不要问为什么是 15 和 6 而不是其他这种傻不拉几的问题</del></li></ul><p>-XX:InitialCodeCacheSize&#x3D;256m，-XX:ReservedCodeCacheSize&#x3D;256m</p><ul><li>存放 JIT 编译内容的缓存大小</li><li>注意：<ul><li>该值在 64bit server 模式下默认大小为240m。如果热点代码编译内容达到该阈值，JIT 将不会继续编译。因此为了尽量提高执行效率，可以适当地增大该值</li><li>这部分内存应该是位于方法区的，而又因为 JDK 1.8 后元空间位于直接内存，所以可以推断出 ReservedCodeCacheSize 受直接内存所控</li></ul></li></ul><p>-XX:+UseStringDeduplication</p><ul><li>开启字符串去重功能，以提高内存的使用率</li><li>字符串去重操作会在 GC 期间进行，默认情况下只有经历 3 次 GC 还存活的字符串才会列为关注对象（可以-XX:StringDeduplicationAgeThreshold 设置该阈值）</li><li>建议：<ul><li>开启字符串去重功能会加大 GC 垃圾回收的工作量，既一定程度上延长 GC 停留时间，所以这是一个<code>时间换空间</code>的操作。个人认为如果内存不充裕且对 GC 停顿时间不太苛刻的话建议开启该功能</li><li>如果有留意过 Spring 的 STS Eclipse 的话，它默认就开启了该配置项，因此即使你是不明所以，但跟着 Spring 走也准没错</li></ul></li><li>注意：该功能在  Java8u20  版本才引入，而且只在 G1 上生效</li></ul><p>-XX:+UseAdaptiveSizePolicy</p><ul><li>可以在 Full GC 时打印自适应配置策略信息，以及告知在哪里引发了 Full GC</li><li>该配置默认开启，这里单纯为了可读性而显式配置</li></ul><blockquote><p>小结</p></blockquote><ul><li>Full GC 是很难避免的，因为 Full GC 是一个有效地防止内存溢出的机制，换句话来说内存越小触发 Full GC 的几率就越大。其次随着应用程序运行时间拉长，期间可能会产生大量长期驻留在堆的对象，又或者程序本身存在缺陷导致内存泄露等原因都可能会导致频繁地 Full GC</li><li>除此之外，如果在正式项目中调优，应该每调完一次就持续监控器状况，以确保没有倒优化</li><li>如果项目应用堆内存较为紧张的话，可以考虑利用定期手动触发 Full GC 的方式来清理内存，以避免内存溢出 ，譬如可以在系统访问流量较低的时间段利用定时任务触发 System.gc() 。一个比较好的例子就是 Tomcat 中有个预防内存泄露的监听类 <code>JreMemoryLeakPreventionListener</code> 就是采用这种方式来检测内存泄露的（多次 Full GC 后内存使用量都不见降低时，由内存泄露引起的记录较大）。除此之外，如果使用的是 G1&#x2F;CMS 的话可以开启 <code> +XX:+ExplicitGCInvokesConcurrent</code>来优化并发 GC 效率。但反过来，如果你想禁止这种手动触发 Full GC 的操作，则可以开启 <code> -XX:+DisableExplicitGC</code> 配置，就可以避免诸如 Tomcat 监听类每小时触发一次 Full GC 的问题</li><li>最后多说一句，有时候面试很喜欢问如何合理地设置线程数这类问题。这里简单的答一下，设置线程数其实并没有一个标准，虽然网上有人给出一些公式，但个人认为出于应用程序本身存在区别，所以这些公式并不是放之四海而皆准的，而最合理的做法就是通过不断地反复测试来得出结论</li></ul><h2 id="IDEA设置优化"><a href="#IDEA设置优化" class="headerlink" title="IDEA设置优化"></a>IDEA设置优化</h2><p><img src="/IDEA%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B0%8F%E8%AE%B0/003.png"></p><p><img src="/IDEA%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B0%8F%E8%AE%B0/004.png"></p><p><img src="/IDEA%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B0%8F%E8%AE%B0/005.png"></p><p>除此之外，还可以在 IDEA 右下角点击右键开启内存监控器，可以实时观察堆的内存使用情况，也可以在内存占用较大时手动点击触发 Full GC</p><p><img src="/IDEA%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B0%8F%E8%AE%B0/001.png"></p><p>注意：有些时候可能你会观察到这么一个现象，就是 IDEA 的内存使用量超过了 -xmx 所指定的范围。这是因为 -xmx 控制的只是 JVM 堆内存，而在任务管理器中所看到的是 JVM 进程所占用的全部内存，其中包含 <code>堆内存</code> 和 <code>堆外内存（栈内存（由系统分配管理，速度快且没有泄露问题）、元空间、直接内存、C库内存池）</code> 等。</p><h2 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h2><blockquote><p>拓展1 — C库内存池，也叫内存分配器</p></blockquote><ul><li>内存池用于加速内存分配。一般而言应用程序会首先向应用内存池（譬如 JVM 堆）申请内存，如果不足分配则会向C库内存池申请（malloc），只有在 C库内存池 不足分配时才会到系统内核中申请，而系统内核调配资源相对来说是比较低效的</li><li>常见的 C库内存池譬如有 Linux 下 JVM 使用的 （glibc）Ptmalloc2 、Google 的 TCMalloc、Redis 用的 Facebook JeMalloc 等等</li><li>malloc 属于动态内存分配，它的实现分为 <code>brk</code> 和 <code>mmap</code> 两种。它们的区别在于 brk 用于分派较小的内存，同时缓存释放后不会马上归还给内核而是缓存起来以提高后续所需的分配操作，而 mmap 用于较大的内存分配时使用（按需向上取整到整数个页），特点是内存在释放后会马上归还， 所以每次 mmap 都会发生缺页中断（频繁发生会使内核管理负担增大 ） 。这里需要重要注意的是 malloc 并不是将内存马上分配给进程，分配给进程的只是虚拟内存，即真正分配是在进程访问虚拟内存发生缺页中断时分配的</li><li>其中 Ptmalloc2 会为每条线程预分配 64M 的内存（用于线程需要时领取），其中又因为 JVM 的线程模型 与 Linux内核线程是单对单的关系，所以在多线程高并发场景下会出现进程所占内存突增的现象。这个问题可以添加环境变量 MALLOC_ARENA_MAX 来控制，亦可以通过环境变量 LD_PRELOAD 来挂载指定的 malloc</li><li>因为 glibc 默认的 malloc  容易造成内碎片，影响内存回收，因此 Redis 用 JeMalloc 取而代之。除此之外，如果发生非堆上内存泄露，同时泄露点不在应用程序上时则可以考虑将 malloc 更改为 JeMalloc</li></ul><blockquote><p>拓展2 — 查看进程的内存状态</p></blockquote><ol><li>先用 <code>pidof</code> 或 <code>jps</code> 得到 PID 号</li><li>再用 <code>pmap -x PID</code> 查看（需要安装psutil工具包，如MacOS：pip3 install psutil）</li></ol><blockquote><p>拓展3 — Linux OOM-Killer （内存溢出杀手）</p></blockquote><ul><li>Linux 系统的一种保护机制，在内存不足时用于关闭  <code>/proc/&lt;pid&gt;/oom_score</code> 值最大的进程 </li><li>可通过命令 <code>grep &quot;Out of memory&quot; /var/log/messages</code> 查看有哪些进程被 Killer 关闭</li><li>防止进程被关闭的方法是调整进程<code>oom_score_adj</code> 的值（范围在 -17 至 15 之间） ，该值越小被关闭的机会就越少，其中 -17 表示禁止杀死该进程。例如可通过命令 <code>sudo echo -17 &gt; /proc/进程PID/oom_score_adj</code> 设置</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/51056407">Memory Allocator</a></li></ul><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三十分钟理解AQS与Synchronized的原理与流程</title>
      <link href="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/"/>
      <url>/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年9月30日21:55:01 — 内容修辑</li></ul><h2 id="Synchronized原理"><a href="#Synchronized原理" class="headerlink" title="Synchronized原理"></a>Synchronized原理</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>synchronized 是 Java 较早的同步机制，它是通过互斥量来实现同步操作的，分别是代表加锁操作的 lock 指令以及代表解锁操作的 unlock 指令。<br>但要注意的是这两个指令在 JVM 字节码中有另一种表示形式，譬如用 monitorenter 代表 lock，用 monitorexit 代表 unlock 。</p><p>在 JDK 1.6 之前 synchronized 被称为重量级锁，这是因为一旦线程竞争锁失败就会被系统挂起。而在高并发环境下，大量现场被挂起和唤醒会严重影响系统性能。</p><p>在 JDK 1.5 引入的 Lock 是在 Java 语言层面的实现，竞争锁操作通过 CAS (CPU原子指令）来完成。虽然 Lock 同样会阻塞线程（LockSupport.park），但相较于 synchronized 来说就轻量了不少，因为它的竞争操作均通过 CAS 来完整，通过使用 CPU 资源进行大量自旋操作来避免线程挂起。</p><p>而 synchronized 在 JDK 1.6 版本过后中也得到很大的改进。譬如有如下这些</p><ul><li><strong>锁消除</strong>：尽量无谓的锁操作</li><li><strong>锁粗化</strong>：减少锁竞争</li><li><strong>锁升级</strong>：引入无锁、偏向锁、轻量级锁、重量级锁等不同的锁阶段以尽量避免线程进入内核竞争锁</li><li><strong>自旋锁</strong>：轻量级锁阶段时，如果竞争不到锁会进行一定次数的自旋来尽量避免线程马上升级为重量级锁。重量级锁时也会自旋一定次数避免马上被内核挂起</li><li><strong>自适应自旋</strong>：自旋锁默认情况下最大自旋数为10，一旦超过阈值则会发生锁膨胀或被内核挂起。自适应则是动态调节该阈值的机制，以得出一个更合理的自旋阈值</li></ul><h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>指编译器经过分析后对锁进行消除的操作。譬如虽然代码片段中加了 synchronized ，但实际并不存在并发操作，这时编译器会将 synchronized 块去除以避免无谓的加锁操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">concatString</span><span class="params">(String s1, String s2, String s3)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 + s3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如上面这个案例在 JDK 1.6 之前会在前端编译 javac 优化为 StringBuffer ，而在 JDK 1.6 开始则改为了 StringBuilder，而两者的区别在于前者的方法都被 synchronized 修饰，而后者不是。</p><h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>锁粗化和锁消除类似，指的是经过分析后发现连续的代码片段中出现了重复加锁操的操作，因此将 synchronized 块范围扩大的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">sf.append(s1);</span><br><span class="line">sf.append(s2);</span><br><span class="line">sf.append(s3);</span><br></pre></td></tr></table></figure><p>例如上面这个案例中因为 StringBuilder 的 append 方法是同步的，因此锁粗化操作会将多个 synchronized 块合并成一个以减少无畏的加锁操作，譬如下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">synchronized</span> (sf) &#123;</span><br><span class="line">    sf.append(s1);</span><br><span class="line">    sf.append(s2);</span><br><span class="line">    sf.append(s3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>自旋通其实就是轮训，即循环地等待某个条件满足为止。自旋锁在 JDK 1.4 时被引入，其主要作用是避免线程在竞争锁失败时直接被挂起。<br>但自旋本身是一种较为消耗 CPU 资源的操作，所以如果任务所需时间较长的话在高并发环境就很可能会出现 CPU 使用率急速上升的情况，此时自旋反而没有直接使用阻塞高效。JVM 提供了两个配置项用来控制自旋操作，分别是自旋开关<code> -XX:+UseSpinning</code> （默认开启）和阈值 <code>-XX:PreBlockSpin</code> （默认10次）。</p><p>自旋锁在 JDK 1.6 之后得到了改进，通过引入<code>自适应自旋</code>来优化自旋阈值。例如它会根据上一次自旋获取锁成功的案例所使用的自旋次数来调节下一次的自旋的阈值以提高成功率；又或者经过分析后得出自旋获取锁的成功几率非常低，因此 JVM 有可能会直接关闭自旋操而直接进入阻塞线程。</p><h4 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h4><p>默认情况下锁分为4个阶段：<code>无锁</code> -&gt; <code>偏向锁</code> -&gt; <code>轻量级锁</code> -&gt; <code>重量级锁(膨胀锁)</code>。其中偏向锁可以通过 -XX:-UseBiasedLocking配置项关闭</p><blockquote><p>了解锁升级之前应该先了解对象头</p></blockquote><p>可能你听过或被问过这样一个问题，就是“一个对象实例有多大？”。首先对象实例的大小时不固定的，譬如在默认开启压缩指针（-XX：+UseCompressedOops）的情况下：</p><ul><li>引用占4个字节</li><li>布尔类型占1个字节</li><li>short和char占2个字节</li><li>float和int占4个字节</li><li>long和dubble占8个字节</li></ul><p>以上这些是固定的，但是唯有对象头的大小会根据操作系统的位数而变动，譬如64位操作系统对象头为16个字节（开启压缩指针后为12个字节），而32位操作系统则是8个字节。所以说对象实例是有基本大小的（16&#x2F;12&#x2F;8），而实际的大小需要根据实际情况而定。</p><p>对象头是对象实例结构的组成部分，它主要由两部分组成：</p><ul><li>Mark Word：记录了锁标记、锁偏向模式、哈希值、实例GC年龄等信息</li><li>Class Word：存放方法区入口（Class实例）的地址</li></ul><p>其中 Mark Word 是锁升级的关键，或者说它是 synchronized 监控锁的关键，因为 synchronized 锁定的目标是实例（Mark Word）而不是代码片段。synchronized 通过修改 Mark Word 信息来实现线程的持锁状态。</p><p>如下为64位操作系统的实例对象头基本结构：</p><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/002.png"></p><p>大致了解对象头之后接下来看看 4 种锁的区别</p><p>无锁</p><ul><li>对象没有被锁定，此时 Mark Word 值为<code> [ 对象哈希值 | GC年龄 | 0 | 01 ]</code></li></ul><p>偏向锁</p><ul><li>对象被锁定，对象头 MarkWord 中的记录了持锁线程的标识，当进入临界代码时仅需要判断锁标识是否相等即可，如果相同则无需进行同步操作，达到消除了锁语意的效果</li><li>当处于偏向锁时，出现第2条竞争线程，偏向锁就会撤销偏向，升级为轻量级锁</li><li>偏向锁 Mark Word 值为 <code> [ JavaTheadId | epoch | GC年龄| 0 | 01 ]</code></li></ul><p>轻量级锁</p><ul><li>轻量级锁和偏向锁其实很类似，都是为了消除锁语意，区别在于轻量级锁使用CAS方式获取锁</li><li>当锁处于轻量时，出现第2条竞争线程，轻量级锁就会进入锁膨胀阶段，即先自旋，自旋失败再挂起</li><li>轻量级锁 Mark Word 值为 <code> [ ptr | 00 ]</code>，其中 ptr 是持锁线程栈的 BasicLock 指针（BasicLock是JVM内部创建的锁，用于实现轻量级锁）</li></ul><p>重量级锁</p><ul><li>重量级锁其实指的是监控锁的最终状态，即竞争失败就被挂起</li><li>重量级锁 Mark Word 值为 <code> [ ptr | 10 ]</code></li></ul><blockquote><p>轻量级锁加锁过程</p></blockquote><p>偏向锁加锁过程其实是通过 CAS 操作将 Mark Word 信息修改为 ptr 指向。</p><p>轻量级锁的加锁过程：</p><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/003.png"></p><blockquote><p>4种锁的升级过程</p></blockquote><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/004.png"></p><h3 id="指令源码"><a href="#指令源码" class="headerlink" title="指令源码"></a>指令源码</h3><blockquote><p>使用<code>javap -v</code>命令观察 synchronized 的 JVM 字节码</p></blockquote><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/001.png"></p><p>可以从上图中观察到 synchronized 确实采用 monitorenter 和 monitorexit 两条字节码指令来完成同步锁功能的</p><h3 id="源码浅析（Open-JDK1-8）"><a href="#源码浅析（Open-JDK1-8）" class="headerlink" title="源码浅析（Open JDK1.8）"></a>源码浅析（Open JDK1.8）</h3><blockquote><p>synchronizer.cpp</p></blockquote><p>偏向锁</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::fast_enter</span><span class="params">(Handle obj, BasicLock* lock, <span class="type">bool</span> attempt_rebias, TRAPS)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 正在使用偏向锁（JVM参数项）</span></span><br><span class="line"> <span class="keyword">if</span> (UseBiasedLocking) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不在安全点</span></span><br><span class="line">    <span class="keyword">if</span> (!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>()) &#123;</span><br><span class="line">      <span class="comment">// 撤销后再偏向</span></span><br><span class="line">      BiasedLocking::Condition cond = BiasedLocking::<span class="built_in">revoke_and_rebias</span>(obj, attempt_rebias, THREAD);</span><br><span class="line">      <span class="keyword">if</span> (cond == BiasedLocking::BIAS_REVOKED_AND_REBIASED) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在安全点，撤销偏向</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">assert</span>(!attempt_rebias, <span class="string">&quot;can not rebias toward VM thread&quot;</span>);</span><br><span class="line">      BiasedLocking::<span class="built_in">revoke_at_safepoint</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(!obj-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;biases should be revoked by now&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 偏向锁已撤销，升为轻量级</span></span><br><span class="line"> <span class="built_in">slow_enter</span> (obj, lock, THREAD) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轻量级锁</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BasicLock是线程栈LockRecord段中的组成部分</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::slow_enter</span><span class="params">(Handle obj, BasicLock* lock, TRAPS)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取锁对象的对象头</span></span><br><span class="line">  markOop mark = obj-&gt;<span class="built_in">mark</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 该对象头没有被锁定</span></span><br><span class="line">  <span class="keyword">if</span> (mark-&gt;<span class="built_in">is_neutral</span>()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将锁对象头信息转移到线程栈LockRecord段的displaced_header中</span></span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span>(mark);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用CAS尝试获取轻量级锁</span></span><br><span class="line">    <span class="comment">// 尝试将当前线程栈LockRecord段地的指针内容替换为锁对象头的指向</span></span><br><span class="line">    <span class="keyword">if</span> (mark == (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(lock, <span class="built_in">obj</span>()-&gt;<span class="built_in">mark_addr</span>(), mark)) &#123;</span><br><span class="line">      <span class="built_in">TEVENT</span> (slow_enter: release stacklock) ;</span><br><span class="line">      <span class="keyword">return</span> ; <span class="comment">// 加锁成功</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前轻量级锁存在锁竞争</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 当前操作的线程为持锁线程，进行重入</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_locker</span>() &amp;&amp; THREAD-&gt;<span class="built_in">is_lock_owned</span>((address)mark-&gt;<span class="built_in">locker</span>())) &#123;</span><br><span class="line">    <span class="built_in">assert</span>(lock != mark-&gt;<span class="built_in">locker</span>(), <span class="string">&quot;must not re-lock the same lock&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(lock != (BasicLock*)obj-&gt;<span class="built_in">mark</span>(), <span class="string">&quot;don&#x27;t relock with same BasicLock&quot;</span>);</span><br><span class="line">    <span class="comment">// 可以看到轻量级锁的重入操作只是置空了displaced_header</span></span><br><span class="line">    <span class="comment">// 因为displaced_header只在加锁时起暂存作用，方式加锁失败</span></span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span>(<span class="literal">NULL</span>); </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前线程并非持锁线程，即第2条竞争锁的线程</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重置线程栈BasicLock</span></span><br><span class="line">  lock-&gt;<span class="built_in">set_displaced_header</span>(markOopDesc::<span class="built_in">unused_mark</span>());</span><br><span class="line">  <span class="comment">// 进入锁膨胀阶段</span></span><br><span class="line">  ObjectSynchronizer::<span class="built_in">inflate</span>(THREAD, <span class="built_in">obj</span>())-&gt;<span class="built_in">enter</span>(THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>objectMonitor.cpp</p></blockquote><p>重量级锁（轻量级锁的膨胀过程）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入监控锁</span></span><br><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::enter</span><span class="params">(TRAPS)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取当前操作线程的指针</span></span><br><span class="line">  Thread * <span class="type">const</span> Self = THREAD ;</span><br><span class="line">  <span class="type">void</span> * cur ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &amp;_owner为持锁线程的地址</span></span><br><span class="line">  <span class="comment">// 尝试使用CAS操作将当前线程变为持锁线程，成功则表示加锁成功</span></span><br><span class="line">  <span class="comment">// 返回持锁线程的指针</span></span><br><span class="line">  cur = Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_owner, <span class="literal">NULL</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取失败（可能锁正在升级）</span></span><br><span class="line">  <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     <span class="comment">// Either ASSERT _recursions == 0 or explicitly set _recursions = 0.</span></span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (_owner == Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="comment">// CONSIDER: set or assert OwnerIsThread == 1</span></span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取成功，且当前线程为“上一任持锁线程”，进行锁重入计数</span></span><br><span class="line">  <span class="keyword">if</span> (cur == Self) &#123;</span><br><span class="line">     _recursions ++ ;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取成功，但当前线程是第一次获取到该锁</span></span><br><span class="line">  <span class="keyword">if</span> (Self-&gt;<span class="built_in">is_lock_owned</span> ((address)cur)) &#123;</span><br><span class="line">    _recursions = <span class="number">1</span> ;</span><br><span class="line">    _owner = Self ; </span><br><span class="line">    OwnerIsThread = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取失败，因为有其他线程持有该锁，意味需要进行锁竞争</span></span><br><span class="line">  <span class="built_in">assert</span> (Self-&gt;_Stalled == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  Self-&gt;_Stalled = <span class="built_in">intptr_t</span>(<span class="keyword">this</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线程进入队列之前，先尝试一轮自旋，若成果直接返回</span></span><br><span class="line">  <span class="comment">// 注意：TrySpin操作是“自适应自旋”，既它会自动调节自旋次数阈值</span></span><br><span class="line">  <span class="keyword">if</span> (Knob_SpinEarly &amp;&amp; <span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) &#123; <span class="comment">// mutex.cpp</span></span><br><span class="line">     <span class="built_in">assert</span> (_owner == Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (((oop)(<span class="built_in">object</span>()))-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">encode</span>(<span class="keyword">this</span>), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     Self-&gt;_Stalled = <span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span> (_owner != Self          , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_succ  != Self          , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (Self-&gt;<span class="built_in">is_Java_thread</span>()  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前Java线程的指针</span></span><br><span class="line">  JavaThread * jt = (JavaThread *) Self ;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span> (!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>(), <span class="string">&quot;invariant&quot;</span>) ; <span class="comment">// 不在安全点</span></span><br><span class="line">  <span class="built_in">assert</span> (jt-&gt;<span class="built_in">thread_state</span>() != _thread_blocked   , <span class="string">&quot;invariant&quot;</span>) ; <span class="comment">// 没有阻塞</span></span><br><span class="line">  <span class="built_in">assert</span> (<span class="keyword">this</span>-&gt;<span class="built_in">object</span>() != <span class="literal">NULL</span>  , <span class="string">&quot;invariant&quot;</span>) ; </span><br><span class="line">  <span class="built_in">assert</span> (_count &gt;= <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent deflation at STW-time.  See deflate_idle_monitors() and is_busy().</span></span><br><span class="line">  <span class="comment">// Ensure the object-monitor relationship remains stable while there&#x27;s contention.</span></span><br><span class="line">  Atomic::<span class="built_in">inc_ptr</span>(&amp;_count);</span><br><span class="line"></span><br><span class="line">  EventJavaMonitorEnter event;</span><br><span class="line"></span><br><span class="line">  &#123; </span><br><span class="line">    <span class="comment">// 将当前Java线程的状态修改为Blocked</span></span><br><span class="line">    <span class="function">JavaThreadBlockedOnMonitorEnterState <span class="title">jtbmes</span><span class="params">(jt, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 切换为内核线程</span></span><br><span class="line">    <span class="function">OSThreadContendState <span class="title">osts</span><span class="params">(Self-&gt;osthread())</span></span>;</span><br><span class="line">    <span class="function">ThreadBlockInVM <span class="title">tbivm</span><span class="params">(jt)</span></span>;</span><br><span class="line"></span><br><span class="line">    Self-&gt;<span class="built_in">set_current_pending_monitor</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重量级锁竞争</span></span><br><span class="line">    <span class="comment">// TODO-<span class="doctag">FIXME:</span> change the following for(;;) loop to straight-line code.</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      jt-&gt;<span class="built_in">set_suspend_equivalent</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 重量级锁竞争逻辑</span></span><br><span class="line">      <span class="built_in">EnterI</span> (THREAD) ;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">ExitSuspendEquivalent</span>(jt)) <span class="keyword">break</span> ;</span><br><span class="line">        </span><br><span class="line">      _recursions = <span class="number">0</span> ;</span><br><span class="line">      _succ = <span class="literal">NULL</span> ;</span><br><span class="line">      <span class="built_in">exit</span> (<span class="literal">false</span>, Self) ;</span><br><span class="line"></span><br><span class="line">      jt-&gt;<span class="built_in">java_suspend_self</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    Self-&gt;<span class="built_in">set_current_pending_monitor</span>(<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Atomic::<span class="built_in">dec_ptr</span>(&amp;_count);</span><br><span class="line">  <span class="built_in">assert</span> (_count &gt;= <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  Self-&gt;_Stalled = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ObjectMonitor::_sync_ContendedLockAttempts != <span class="literal">NULL</span>) &#123;</span><br><span class="line">     ObjectMonitor::_sync_ContendedLockAttempts-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EnterI (THREAD)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::EnterI</span> <span class="params">(TRAPS)</span> </span>&#123;</span><br><span class="line">    Thread * Self = THREAD ;</span><br><span class="line">    <span class="built_in">assert</span> (Self-&gt;<span class="built_in">is_Java_thread</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (((JavaThread *) Self)-&gt;<span class="built_in">thread_state</span>() == _thread_blocked   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) &#123; <span class="comment">// 返回值大于1表示尝试成功</span></span><br><span class="line">        <span class="built_in">assert</span> (_succ != Self              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_owner == Self             , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_Responsible != Self       , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DeferredInitialize</span> () ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自适应自旋</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span> (_owner == Self        , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_succ != Self         , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_Responsible != Self  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重量级锁自旋失败，线程将进入同步队列（实质是链表）进行阻塞操作</span></span><br><span class="line">    <span class="built_in">assert</span> (_succ  != Self            , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (_owner != Self            , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (_Responsible != Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enqueue &quot;Self&quot; on ObjectMonitor&#x27;s _cxq.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Node acts as a proxy for Self.</span></span><br><span class="line">    <span class="comment">// As an aside, if were to ever rewrite the synchronization code mostly</span></span><br><span class="line">    <span class="comment">// in Java, WaitNodes, ObjectMonitors, and Events would become 1st-class</span></span><br><span class="line">    <span class="comment">// Java objects.  This would avoid awkward lifecycle and liveness issues,</span></span><br><span class="line">    <span class="comment">// as well as eliminate a subset of ABA issues.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> eliminate ObjectWaiter and enqueue either Threads or Events.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 返回线程的代理节点</span></span><br><span class="line">    <span class="comment">// 该同步队列由链表结构实现</span></span><br><span class="line">    <span class="function">ObjectWaiter <span class="title">node</span><span class="params">(Self)</span> </span>;</span><br><span class="line">    Self-&gt;_ParkEvent-&gt;<span class="built_in">reset</span>() ;</span><br><span class="line">    node._prev   = (ObjectWaiter *) <span class="number">0xBAD</span> ; <span class="comment">// 当前(线程)节点的前驱节点</span></span><br><span class="line">    node.TState  = ObjectWaiter::TS_CXQ ; <span class="comment">// 当前(线程)节点的状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Push &quot;Self&quot; onto the front of the _cxq.</span></span><br><span class="line">    <span class="comment">// Once on cxq/EntryList, Self stays on-queue until it acquires the lock.</span></span><br><span class="line">    <span class="comment">// Note that spinning tends to reduce the rate at which threads</span></span><br><span class="line">    <span class="comment">// enqueue and dequeue on EntryList|cxq.</span></span><br><span class="line">    ObjectWaiter * nxt ;</span><br><span class="line">    <span class="comment">// 先将当前竞争锁线程的代理节点加入到同步队列头</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 头插法</span></span><br><span class="line">        node._next = nxt = _cxq ; <span class="comment">// 一开始_cxq为null</span></span><br><span class="line">        <span class="comment">// 替换原来的同步队列，成功后打断循环</span></span><br><span class="line">        <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (&amp;node, &amp;_cxq, nxt) == nxt) <span class="keyword">break</span> ;</span><br><span class="line">        <span class="comment">// 在CAS替换队列失败时也不忙尝试获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">assert</span> (_succ != Self         , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="built_in">assert</span> (_owner == Self        , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="built_in">assert</span> (_Responsible != Self  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入同步队列后，尝试申请成为“责任线程”</span></span><br><span class="line">    <span class="comment">// 在同步队列中只有一条责任线程，责任线程的特点是会被定时唤醒，主要用于轮询持锁线程_owner是否已经释放锁</span></span><br><span class="line">    <span class="comment">// 申请条件是当前线程（节点）没有子节点，且_EntryList中没有正在获取尝试获取锁的线程</span></span><br><span class="line">    <span class="comment">// 所以因为头插法的缘故第一条进入同步队列的线程会率先作为责任线程</span></span><br><span class="line">    <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">16</span>) == <span class="number">0</span> &amp;&amp; nxt == <span class="literal">NULL</span> &amp;&amp; _EntryList == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// Try to assume the role of responsible thread for the monitor.</span></span><br><span class="line">        <span class="comment">// CONSIDER:  ST vs CAS vs &#123; if (Responsible==null) Responsible=Self &#125;</span></span><br><span class="line">        Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_Responsible, <span class="literal">NULL</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">TEVENT</span> (Inflated enter - Contention) ;</span><br><span class="line">    <span class="type">int</span> nWakeups = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> RecheckInterval = <span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 再次尝试获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line">        <span class="built_in">assert</span> (_owner != Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取锁失败且当前没有责任检测，则尝试申请成为责任线程</span></span><br><span class="line">        <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">2</span>) &amp;&amp; _Responsible == <span class="literal">NULL</span>) &#123;</span><br><span class="line">           Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_Responsible, <span class="literal">NULL</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：以下就是重量级锁“重”的地方，线程将会阻塞，操作由系统调度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前线程是“责任线程”，则进行超时阻塞</span></span><br><span class="line">        <span class="keyword">if</span> (_Responsible == Self || (SyncFlags &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated enter - park TIMED) ;</span><br><span class="line">            Self-&gt;_ParkEvent-&gt;<span class="built_in">park</span> ((jlong) RecheckInterval) ;</span><br><span class="line">            <span class="comment">// Increase the RecheckInterval, but clamp the value.</span></span><br><span class="line">            RecheckInterval *= <span class="number">8</span> ;</span><br><span class="line">            <span class="keyword">if</span> (RecheckInterval &gt; <span class="number">1000</span>) RecheckInterval = <span class="number">1000</span> ;</span><br><span class="line">        <span class="comment">// 如果当前线程不是“责任线程”，则一直阻塞直到被唤醒</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated enter - park UNTIMED) ;</span><br><span class="line">            Self-&gt;_ParkEvent-&gt;<span class="built_in">park</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被唤醒后先尝试一次获取锁，成功直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span>(Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取锁失败，即表示锁已经被其他线程持有</span></span><br><span class="line">        <span class="comment">// 因此记录无用的唤醒次数</span></span><br><span class="line">        <span class="built_in">TEVENT</span> (Inflated enter - Futile wakeup) ;</span><br><span class="line">        <span class="keyword">if</span> (ObjectMonitor::_sync_FutileWakeups != <span class="literal">NULL</span>) &#123;</span><br><span class="line">           ObjectMonitor::_sync_FutileWakeups-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ nWakeups ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不是虚假唤醒，通常会得到 _succ == Self，则尝试进行自适应自旋</span></span><br><span class="line">        <span class="keyword">if</span> ((Knob_SpinAfterFutile &amp; <span class="number">1</span>) &amp;&amp; <span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((Knob_ResetEvent &amp; <span class="number">1</span>) &amp;&amp; Self-&gt;_ParkEvent-&gt;<span class="built_in">fired</span>()) &#123;</span><br><span class="line">           Self-&gt;_ParkEvent-&gt;<span class="built_in">reset</span>() ;</span><br><span class="line">           OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_succ == Self) _succ = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Invariant: after clearing _succ a thread *must* retry _owner before parking.</span></span><br><span class="line">        OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> (_owner == Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (<span class="built_in">object</span>() != <span class="literal">NULL</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UnlinkAfterAcquire</span> (Self, &amp;node) ;</span><br><span class="line">    <span class="keyword">if</span> (_succ == Self) _succ = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> (_succ != Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (_Responsible == Self) &#123;</span><br><span class="line">        _Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">        OrderAccess::<span class="built_in">fence</span>(); <span class="comment">// Dekker pivot-point</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SyncFlags &amp; <span class="number">8</span>) &#123;</span><br><span class="line">       OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放监控锁</span></span><br><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::exit</span><span class="params">(<span class="type">bool</span> not_suspended, TRAPS)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取当前释放锁线程的指针</span></span><br><span class="line">   Thread * Self = THREAD ;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (THREAD != _owner) &#123; </span><br><span class="line">     <span class="keyword">if</span> (THREAD-&gt;<span class="built_in">is_lock_owned</span>((address) _owner)) &#123;</span><br><span class="line">       <span class="built_in">assert</span> (_recursions == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">       _owner = THREAD ;</span><br><span class="line">       _recursions = <span class="number">0</span> ;</span><br><span class="line">       OwnerIsThread = <span class="number">1</span> ;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">TEVENT</span> (Exit - Throw IMSX) ;</span><br><span class="line">       <span class="built_in">assert</span>(<span class="literal">false</span>, <span class="string">&quot;Non-balanced monitor enter/exit!&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="built_in">THROW</span>(vmSymbols::<span class="built_in">java_lang_IllegalMonitorStateException</span>());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 释放锁重入标记</span></span><br><span class="line">   <span class="comment">// 注意：如果锁重入了，调用一次 ObjectMonitor::exit 并不会释放锁，必须递减到0</span></span><br><span class="line">   <span class="keyword">if</span> (_recursions != <span class="number">0</span>) &#123;</span><br><span class="line">     _recursions--;        <span class="comment">// this is simple recursive enter</span></span><br><span class="line">     <span class="built_in">TEVENT</span> (Inflated exit - recursive) ;</span><br><span class="line">     <span class="keyword">return</span> ; <span class="comment">// 递减后退出方法返回</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      _Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 虽然 _recursions = 0 但线程还持有锁标识</span></span><br><span class="line">      <span class="built_in">assert</span> (THREAD == _owner, <span class="string">&quot;invariant&quot;</span>) </span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (Knob_ExitPolicy == <span class="number">0</span>) &#123; </span><br><span class="line">         OrderAccess::<span class="built_in">release_store_ptr</span> (&amp;_owner, <span class="literal">NULL</span>) ;   <span class="comment">// drop the lock</span></span><br><span class="line">         OrderAccess::<span class="built_in">storeload</span>() ;                         <span class="comment">// See if we need to wake a successor</span></span><br><span class="line">         <span class="keyword">if</span> ((<span class="built_in">intptr_t</span>(_EntryList)|<span class="built_in">intptr_t</span>(_cxq)) == <span class="number">0</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - simple egress) ;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Inflated exit - complex egress) ;</span><br><span class="line">         <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (THREAD, &amp;_owner, <span class="literal">NULL</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Exit - Reacquired) ;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> ((<span class="built_in">intptr_t</span>(_EntryList)|<span class="built_in">intptr_t</span>(_cxq)) == <span class="number">0</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            OrderAccess::<span class="built_in">release_store_ptr</span> (&amp;_owner, <span class="literal">NULL</span>) ;   <span class="comment">// drop the lock</span></span><br><span class="line">            OrderAccess::<span class="built_in">storeload</span>() ;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Ratify the previously observed values.</span></span><br><span class="line">            <span class="keyword">if</span> (_cxq == <span class="literal">NULL</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">TEVENT</span> (Inflated exit - simple egress) ;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (THREAD, &amp;_owner, <span class="literal">NULL</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">               <span class="built_in">TEVENT</span> (Inflated exit - reacquired succeeded) ;</span><br><span class="line">               <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - reacquired failed) ;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - complex egress) ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">guarantee</span> (_owner == THREAD, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">      ObjectWaiter * w = <span class="literal">NULL</span> ;</span><br><span class="line">      <span class="type">int</span> QMode = Knob_QMode ; <span class="comment">// Knob_QMode 默认为 0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">2</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">assert</span> (w-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">3</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">             <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">             <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">             w = u ;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">          ObjectWaiter * p ;</span><br><span class="line">          <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">              <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">              p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">              p-&gt;_prev = q ;</span><br><span class="line">              q = p ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          ObjectWaiter * Tail ;</span><br><span class="line">          <span class="keyword">for</span> (Tail = _EntryList ; Tail != <span class="literal">NULL</span> &amp;&amp; Tail-&gt;_next != <span class="literal">NULL</span> ; Tail = Tail-&gt;_next) ;</span><br><span class="line">          <span class="keyword">if</span> (Tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">              _EntryList = w ;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              Tail-&gt;_next = w ;</span><br><span class="line">              w-&gt;_prev = Tail ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">4</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">             <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">             <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">             w = u ;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">          ObjectWaiter * p ;</span><br><span class="line">          <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">              <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">              p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">              p-&gt;_prev = q ;</span><br><span class="line">              q = p ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Prepend the RATs to the EntryList</span></span><br><span class="line">          <span class="keyword">if</span> (_EntryList != <span class="literal">NULL</span>) &#123;</span><br><span class="line">              q-&gt;_next = _EntryList ;</span><br><span class="line">              _EntryList-&gt;_prev = q ;</span><br><span class="line">          &#125;</span><br><span class="line">          _EntryList = w ;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Fall thru into code that tries to wake a successor from EntryList</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      w = _EntryList  ;</span><br><span class="line">      <span class="keyword">if</span> (w != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="built_in">assert</span> (w-&gt;TState == ObjectWaiter::TS_ENTER, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将同步队列转移给w</span></span><br><span class="line">      w = _cxq ; </span><br><span class="line">      <span class="keyword">if</span> (w == <span class="literal">NULL</span>) <span class="keyword">continue</span> ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 以下操作相当于置空_cxq</span></span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">          ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">          <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">          w = u ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">TEVENT</span> (Inflated exit - drain cxq into EntryList) ;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">      <span class="built_in">assert</span> (_EntryList  == <span class="literal">NULL</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="comment">// QMode == 1 : drain cxq to EntryList, reversing order</span></span><br><span class="line">         <span class="comment">// We also reverse the order of the list.</span></span><br><span class="line">         ObjectWaiter * s = <span class="literal">NULL</span> ;</span><br><span class="line">         ObjectWaiter * t = w ;</span><br><span class="line">         ObjectWaiter * u = <span class="literal">NULL</span> ;</span><br><span class="line">         <span class="keyword">while</span> (t != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="built_in">guarantee</span> (t-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">             t-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">             u = t-&gt;_next ;</span><br><span class="line">             t-&gt;_prev = u ;</span><br><span class="line">             t-&gt;_next = s ;</span><br><span class="line">             s = t;</span><br><span class="line">             t = u ;</span><br><span class="line">         &#125;</span><br><span class="line">         _EntryList  = s ;</span><br><span class="line">         <span class="built_in">assert</span> (s != <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// QMode == 0 or QMode == 2</span></span><br><span class="line">         _EntryList = w ; <span class="comment">// w = _cxq</span></span><br><span class="line">         ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">         ObjectWaiter * p ;</span><br><span class="line">         <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">             <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             p-&gt;TState = ObjectWaiter::TS_ENTER ; </span><br><span class="line">             p-&gt;_prev = q ;</span><br><span class="line">             q = p ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (_succ != <span class="literal">NULL</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      w = _EntryList  ;</span><br><span class="line">      <span class="keyword">if</span> (w != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="built_in">guarantee</span> (w-&gt;TState == ObjectWaiter::TS_ENTER, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ; <span class="comment">// 唤醒 _EntryList 队列中头一条线程</span></span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唤醒线程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放监控锁时唤醒线程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectMonitor::ExitEpilog</span> <span class="params">(Thread * Self, ObjectWaiter * Wakee)</span> </span>&#123;</span><br><span class="line">   <span class="built_in">assert</span> (_owner == Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Exit protocol:</span></span><br><span class="line">   <span class="comment">// 1. ST _succ = wakee</span></span><br><span class="line">   <span class="comment">// 2. membar #loadstore|#storestore;</span></span><br><span class="line">   <span class="comment">// 2. ST _owner = NULL</span></span><br><span class="line">   <span class="comment">// 3. unpark(wakee)</span></span><br><span class="line"></span><br><span class="line">   _succ = Knob_SuccEnabled ? Wakee-&gt;_thread : <span class="literal">NULL</span> ;</span><br><span class="line">   ParkEvent * Trigger = Wakee-&gt;_event ;</span><br><span class="line">   Wakee  = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 解除锁关联</span></span><br><span class="line">   OrderAccess::<span class="built_in">release_store_ptr</span> (&amp;_owner, <span class="literal">NULL</span>) ;</span><br><span class="line">   OrderAccess::<span class="built_in">fence</span>() ;  <span class="comment">// ST _owner vs LD in unpark()</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 代码执行安全点</span></span><br><span class="line">   <span class="keyword">if</span> (SafepointSynchronize::<span class="built_in">do_call_back</span>()) &#123;</span><br><span class="line">      <span class="built_in">TEVENT</span> (unpark before SAFEPOINT) ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 唤醒队列（_EntryList）中的头部线程</span></span><br><span class="line">   Trigger-&gt;<span class="built_in">unpark</span>() ; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象队列同步器（AQS）"><a href="#抽象队列同步器（AQS）" class="headerlink" title="抽象队列同步器（AQS）"></a>抽象队列同步器（AQS）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>在JDK1.5版本中除了新增了Instrumentation这个有趣的API外还加入了大神道格利（Doug Lea）编写的JSR-166（JUC包），该包中的工具主要依赖CAS和AQS（AbstractQueuedSynchronizer）来实现，其中AQS主要由CLH双向队列以及一个int型的state标识组成，它是juc包中同步工具类的抽象基础（工具主要是使用围绕state来构建），而Lock仅仅只是AQS的其中一个体现，除此外还有譬如CountDownLatch、Semaphore等实现。由于当前文章主要讨论的话题是锁，所以接下来会以Lock源码为切入点来理解AQS的工作原理。</p><h3 id="FIFO队列"><a href="#FIFO队列" class="headerlink" title="FIFO队列"></a>FIFO队列</h3><blockquote><p>同步队列 和 等待队列</p></blockquote><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/008.png"></p><p>ReentrantLock 默认使用的是非公平说模式。在非公平锁模式下并发争夺锁资源的线程有以下这些</p><ul><li>释放锁资源线程的next线程</li><li>并发争夺锁资源的线程</li><li>将要进入CLH队列的线程（还没到达被park的条件）</li></ul><blockquote><p>AQS 节点源码</p></blockquote><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/009.png"></p><h3 id="独占锁源码浅析"><a href="#独占锁源码浅析" class="headerlink" title="独占锁源码浅析"></a>独占锁源码浅析</h3><h4 id="加锁和解锁过程"><a href="#加锁和解锁过程" class="headerlink" title="加锁和解锁过程"></a>加锁和解锁过程</h4><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/006.png"></p><h4 id="条件等待过程"><a href="#条件等待过程" class="headerlink" title="条件等待过程"></a>条件等待过程</h4><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/007.png"></p><h3 id="拓展1：CountDownLatch"><a href="#拓展1：CountDownLatch" class="headerlink" title="拓展1：CountDownLatch"></a>拓展1：CountDownLatch</h3><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/011.png"></p><h3 id="拓展2：CyclicBarrier"><a href="#拓展2：CyclicBarrier" class="headerlink" title="拓展2：CyclicBarrier"></a>拓展2：CyclicBarrier</h3><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/012.png"></p><h3 id="拓展3：Semaphore"><a href="#拓展3：Semaphore" class="headerlink" title="拓展3：Semaphore"></a>拓展3：Semaphore</h3><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/013.png"></p><h3 id="拓展4：Exchanger（AQS无关）"><a href="#拓展4：Exchanger（AQS无关）" class="headerlink" title="拓展4：Exchanger（AQS无关）"></a>拓展4：Exchanger（AQS无关）</h3><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/014.png"></p><h2 id="Lock和Synchronized对比"><a href="#Lock和Synchronized对比" class="headerlink" title="Lock和Synchronized对比"></a>Lock和Synchronized对比</h2><blockquote><p>区别</p></blockquote><p><img src="/%E4%B8%89%E5%8D%81%E5%88%86%E9%92%9F%E4%BD%93%E4%BC%9AAQS%E4%B8%8ESynchronized%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B/010.png"></p><blockquote><p>性能差别</p></blockquote><p>自 JDK 1.6 对 synchronized 进行优化过后，其实两者在性能方面差别并不大，所以个人认为无需多虑。这点可以在 JDK 1.8 的 ConcurrentHashMap 中体会到。譬如说 ConcurrentHashMap 使用 CAS + synchronized 组合取代了原来的段锁，而没有用 CAS + Lock 这个组合。当然，很大原因是因为 Lock 本身也是 CAS 实现的，所以问题就在于如果 ConcurrentHashMap 光使用 CAS 来实现同步的话，那么在多线程高并发环境就会导致严重的 CPU 消耗，因此我们可以简单地得出两个结论：</p><ol><li>synchronized 性能不差</li><li>synchronized 可以一定程度地通过消耗时间来换取 CPU 资源</li></ol><blockquote><p>如何选择</p></blockquote><ul><li>Lock 是纯粹的自旋锁，通过自旋操作避免了不必要的用户态和内核态的切换开销。但自旋本身对 CPU 消耗较大，所以在多线程高并发场景如果存在大量自旋操作的话，很容引发 CPU 使用率急速上升，甚至可能引起卡顿现象</li><li>虽然 synchronized 也存在自旋操作，但自旋次数一般很少，因为受到自适应机制影响，因此 CPU 消耗并没有 Lock 高，所以如果是<strong>多线程高并发且线程执行任务所需时间较长时，则建议使用 synchronized 而不是 Lock</strong></li><li>Lock 灵活性较高且粒度相对较细，所以如果有特别需要，譬如<strong>读多写少的场景</strong>，则建议选择 Lock 的读写锁来实现同步操作，因为这样可以获得更高的并发性能</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《深入理解Java虚拟机》</li><li><a href="https://weekly-geekly.github.io/articles/447848/index.html">Java object header</a></li><li><a href="https://wiki.openjdk.java.net/display/HotSpot/Synchronization">Synchronization and Object Locking</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ORM框架执行原理与比对</title>
      <link href="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/"/>
      <url>/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年8月18日22:09:56 — 添加 Spring Data JPA 动态 SQL 相关内容</li><li>2020年8月20日20:12:33 — 添加 MyBatis 源码分析</li></ul><h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>今天心血来潮地在网上搜了一下有关 ORM 框架的使用对比，发现其实国内外对于ORM 框架的使用还是有着很大差别的。例如国内比较流行 MyBatis ，而国外则是 Hibernate。至于为什么这样，个人认为不同的人有着不同的考虑。其实对于技术本身而言并没有最好也没有最坏之说，有的只是合不合适而已。因此从今晚开始，打算写一篇有关ORM 框架对比相关的文章以梳理一下自己对 ORM 框架的理解，以及顺便对相关知识进行查漏补缺一下。</p><blockquote><p>使用趋势比对</p></blockquote><p>全球趋势</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/043.png"></p><p>中国占用份额</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/044.png"></p><h2 id="ORM是什么"><a href="#ORM是什么" class="headerlink" title="ORM是什么"></a>ORM是什么</h2><p>ORM的全称叫 Object Relational Mapping ，既对象关系映射。最初 ORM 的概念起始于面向对象编程，因为在面向对象编程中有句这样的话，就是“万物皆对象”，但是我们知道数据最终是要被持久化到硬盘上的，例如通过关系型数据库做介质来做持久化操作，因此也有人将 ORM 中的 R 解释为关系型数据库，那么当时存在的问题就是在关系型数据库中数据是以一条条记录的形式来存储的，这种存储方式叫行存储，行存储的特点是可以将多个不同类型的数据列存储为一条行记录。因此问题的关键点就在于关系型数据库并不是以对象的形式来持久化数据的。那么面对这样一个问题该如何解决呢？这时就诞生了 ORM 。通俗点来说 ORM 其实就是将数据库表映射为对象的操作，那么程序要想操作表记录的话就只需操作其映射对象就可以了，而完成这个 ORM 操作或者说提供 ORM 功能支持的就叫 ORM 框架。</p><p>现今主流的 ORM 框架可以大致分为两种，既 完全ORM 和 非完全ORM。完全ORM指的是在ORM框架的加持下开发人员无需再维护SQL语句而只需要关心其对象就可以了。而非完全ORM指的是虽然提供ORM功能，但SQL语句还是需要开发人员来维护的。</p><p>对于目前而言，据个人的了解提供完全 ORM 功能的框架有两个，Hibernate 和 TopLink。但是实话实说 TopLink 我是没有使用过，而且目前使用 TopLink 的人实在是少，所以不太好评价。而半完全 ORM 的代表莫过于 MyBatis 了。</p><p>最后还是那句，对于技术而言并没有最好和最坏之分，有的只是合不合适而已。</p><h2 id="完全ORM-Hibernate"><a href="#完全ORM-Hibernate" class="headerlink" title="完全ORM-Hibernate"></a>完全ORM-Hibernate</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>完全可以使用 API 来代替 SQL 工作</li><li>支持 JPA 规范，能够自动生成数据库表</li><li>支持映射数据库表和视图</li><li>支持 <code>Native SQL</code>、<code>HQL</code>、<code>Criteria</code> 3种操作方式</li><li>支持 Annotation 和 XML 两种映射配置方式</li><li>支持 一级缓存（Session级别）、二级缓存（SessionFactory级别）、查询缓存（需要二级缓存支持）</li><li>默认会缓存 SQL（全列）语句模板来提高操作效率（可用 @DynamicUpdate&#x2F;@DynamicInsert 改为动态生成）</li><li>支持多种 ID 自生成策略</li><li>支持批量更新和插入操作（与IDENTITY主键自增长策略一起使用会失效）</li><li>支持的懒加载配置：<code>FetchType.LAZY</code>、<code>FetchType.EAGER</code>、<code>@Fetch</code></li><li>支持多种存储过程调用方式：<ul><li>Session#createStoredProcedureCall()</li><li>Session#doWork</li><li>EntityManager#createStoredProcedureQuery</li></ul></li><li>对并发操作支持较为完善，提供悲观锁（LockMode&#x2F;LockModeType）、乐观锁@Version、无版本乐观锁@OptimisticLocking等实现</li><li>对第三方技术有良好支持，例如可以模块化组装第三方本地缓存以及连接池池等</li><li>内置分页方法</li><li>对关联表关系有较为全面的支持</li><li>能做到切换数据源时代码无感知</li><li>支持多租户</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>封装程度较高，导致架构略显复杂，有一定学习成本</li><li>无法对SQL进行统一管理，且SQL嵌套在代码中不利于修改和非开发人员浏览</li><li>批量操作不够灵活</li></ul><h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/016.png"></p><p>一、持久化（瞬态转持久态）</p><ol><li>使用 Session&#x2F;EntityManager 执行 CRUD 操作，譬如 save(Object)</li><li>内部通过 SessionImpl#fireEventOnEachListener 发布 SaveOrUpdateEvent 事件<ul><li>SaveOrUpdateEvent 包含了入参和 EventSource（SessionImpl）等信息</li></ul></li><li>DefaultSaveEventListener（DefaultSaveOrUpdateEventListener） 接收到事件进行处理，会进行以下操作：<ol><li>使用 IdentifierGenerator 生成主键</li><li>将主键设置到入参实体中</li><li>将实体保存到一级缓存（StatefulPersistenceContext）</li></ol></li><li>返回 ID 值给调用层</li><li>提交事务（start）</li><li>执行 JdbcResourceLocalTransactionCoordinatorImpl#beforeCompletionCallback，而其主要逻辑位于 SessionImpl#flushBeforeTransactionCompletion</li><li>发布 FlushEvent 事件</li><li>DefaultFlushEventListener 接收事件执行 onFlush 方法<ol><li>刷新缓存</li><li>执行 SQL <ol><li>通过 AbstractFlushingEventListener#performExecutions 执行 ActionQueue（当前 Session 的 CRUD 操作）</li><li>执行具体 Action 的 execute 方法，主要做以下事情<ol><li>构建 SQL 语句（PreparedStatement 从具体连接池中连接中返回）</li><li>将入参设置进 PreparedStatement</li><li>执行 SQL</li></ol></li></ol></li></ol></li><li>提交事务（end）</li></ol><p>二、查询操作</p><p>1）get 操作</p><ol><li>Session#get（class，id）</li><li>SessionImpl#doLoad（id）发布 LoadEvent 事件。LoadEvent 包含 id、实例类型限定名、SessionImpl</li><li>DefaultLoadEventListener 接收到事件执行 onLoad 方法<ol><li>尝试从一级缓存（StatefulPersistenceContext）中找，如果没有则到二级缓存中找（CacheEntityLoaderHelper#loadFromSecondLevelCache）</li><li>如果实例依然被 Session 管理则返回，否则返回null</li></ol></li></ol><p>2）query#iterator 操作</p><ol><li>Session#createQuery（HQL）返回 Query 实例</li><li>Query#iterator 返回迭代器。期间会保存查询策略，并先查出 HQL 对应的所有 ID 值</li><li>Iterator#hasNext 判断是否有数据</li><li>Iterator#next 返回代理实例</li></ol><h3 id="使用回顾"><a href="#使用回顾" class="headerlink" title="使用回顾"></a>使用回顾</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/001.png"></p><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/002.png"></p><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/003.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/004.png"></p><h3 id="JPA-规范配置"><a href="#JPA-规范配置" class="headerlink" title="JPA 规范配置"></a>JPA 规范配置</h3><p><strong>配置</strong></p><blockquote><p>位置：src\main\resources\META-INF\persistence.xml</p></blockquote><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/005.png"></p><p><strong>使用案例</strong></p><p>工具类</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/006.png"></p><p>案例</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/007.png"></p><h3 id="和Spring整合"><a href="#和Spring整合" class="headerlink" title="和Spring整合"></a>和Spring整合</h3><blockquote><p>整合过程</p></blockquote><p>1）依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.10.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）配置Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HikariDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driverClass);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocalSessionFactoryBean <span class="title function_">localSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">LocalSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setPackagesToScan(<span class="string">&quot;com.td.entity&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(Environment.HBM2DDL_AUTO, <span class="string">&quot;create&quot;</span>);</span><br><span class="line">        properties.put(Environment.SHOW_SQL, <span class="literal">true</span>);</span><br><span class="line">        properties.put(Environment.FORMAT_SQL, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 不用配置</span></span><br><span class="line">        <span class="comment">//properties.put(Environment.DIALECT, &quot;org.hibernate.dialect.MySQL5Dialect&quot;);</span></span><br><span class="line">        factoryBean.setHibernateProperties(properties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用spring声明式事务</span></span><br><span class="line">    <span class="comment">// 还需要使用@EnableTransactionManagement开启</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HibernateTransactionManager <span class="title function_">transactionManager</span><span class="params">(LocalSessionFactoryBean localSessionFactoryBean)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> localSessionFactoryBean.getObject();</span><br><span class="line">        <span class="type">HibernateTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HibernateTransactionManager</span>();</span><br><span class="line">        transactionManager.setSessionFactory(sessionFactory);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用JPA方式操作</span></span><br><span class="line">    <span class="comment">// 如果想要用@PersistenceContext来注入EntityManager</span></span><br><span class="line">    <span class="comment">// 则需要引入hibernate-jpa-2.1-api</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> EntityManager <span class="title function_">entityManager</span><span class="params">(LocalSessionFactoryBean localSessionFactoryBean)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> localSessionFactoryBean.getObject();</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> sessionFactory.createEntityManager();</span><br><span class="line">        <span class="keyword">return</span> entityManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123; HibernateConfig.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> Person.builder().name(<span class="string">&quot;zhang&quot;</span>).age(<span class="number">30</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> session.getTransaction();</span><br><span class="line">        transaction.begin();</span><br><span class="line"></span><br><span class="line">        session.save(person);</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">// JPA不能用Session事务，只能用Spring事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> Person.builder().name(<span class="string">&quot;zhang&quot;</span>).age(<span class="number">30</span>).build();</span><br><span class="line">        entityManager.persist(person);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="半ORM-MyBatis"><a href="#半ORM-MyBatis" class="headerlink" title="半ORM-MyBatis"></a>半ORM-MyBatis</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>支持 XML 统一管理 SQL 语句，方便修改和调优需要</li><li>架构清晰简单，小巧易上手</li><li>开放拦截器接口(插件)，可按需定制和扩展功能，灵活性较高</li><li>支持 Annotation 和 XML 两种映射配置方式</li><li>支持 一级缓存(Session&#x2F; Statement级别)、二级缓存(Namespace)</li><li>提供 动态SQL 标签，可实现逻辑拼装 SQL</li><li>提供 ResultMap 标签定制映射结果集，以及 association(1-1) 和 collection(1-n) 两种关联配置</li><li>映射配置文件支持 OGNL 表达式</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>需要维护SQL，因此对开发人员而已需要有一定的SQL能能力</li><li>不支持物理分页操作，需要依赖插件来完成</li><li>级联操作与 Hibernate 相比支持较差</li><li>引入第三方连接池需要手动实现接口</li><li>不支持 JPA 规范，无法自动生成数据库表</li><li>因为映射模板 ID 唯一，所以导致关联接口时方法不能重载</li><li>二级缓存使用不当容易导致脏读现象</li><li>ID自生成策略较为薄弱，只支持 Jdbc3KeyGenerator(依赖数据库) 和 SelectKeyGenerator 两种</li><li>源码缺少注释</li></ul><blockquote><p>二级缓脏读问题：</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/018.png"></p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/019.png"></p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/020.png"></p></blockquote><h3 id="执行原理-1"><a href="#执行原理-1" class="headerlink" title="执行原理"></a>执行原理</h3><blockquote><p>图解</p></blockquote><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/017.png"></p><blockquote><p>过程</p></blockquote><p>一、初始化过程</p><ol><li><p>容器启动，实例化 ConfigurationAnnotationProcessor，解析 @Configuration 配置类上 @MapperScan 的信息</p></li><li><p>实例化 MapperScannerConfigurer 并执行其 postProcessBeanDefinitionRegistry 方法</p><ul><li>该方法源自 BeanDefinitionRegistryPostProcessor（BeanFactoryPostProcessor的扩展，即只执行一次，可用于实现Bean的急切的初始化）</li><li>创建一个 ClassPathMapperScanner，用来扫描 @MapperScan 中指定包上的 Mapper，并为其生成与之对应的 MapperFactoryBean 的 BeanDefinition 后添加到容器中</li></ul><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/054.png"></p></li><li><p>实例化 MapperFactoryBean</p></li><li><p>执行 MapperFactoryBean#afterPropertiesSet（初始化方法，源自InitializingBean）</p></li><li><p>执行 MapperFactoryBean#checkDaoConfig，将抽象方法上面的注解信息，解析为 MappedStatement（SQL节点），并保存在 Configuration 中提供后续 MapperProxy 操作使用</p><ul><li>MappedStatement 包含了 sqlSource、keyGenerator 等信息。其中 sqlSource 用于返回 BoundSql ，而 BoundSql 是 SQL 相关的元信息（包含解析出来的 SQL 语句以及入参名字）</li></ul></li></ol><p>二、使用过程</p><ol><li><p>有其他 Bean 依赖了 Mapper 接口，那么在该 Bean 在填充属性阶段就会用对应的 MapperFactoryBean#getObject 方法返回一个 Mapper 的代理实例（JDK动态代理）</p></li><li><p>用 Mapper 代理（MapperProxy）执行 CRUD 方法</p></li><li><p>根据代理的限定名从 Configuration#getMappedStatement 中返回对应的 MappedStatement（SQL节点）</p><ul><li>MappedStatement 保存在 StrictMap 中（继承自 HashMap）</li><li>StrictMap 的特点是插入时发现 key 存在就会直接抛异常。因此 Mapper 方法并不支持方法重载，因为 key 使用的是抽象方法的全限定名，当不包含参数列表在内</li></ul></li><li><p>利用 SqlSession 创建 Executor 并将执行权交给 Executor 来处理（CachingExecutor -&gt; SimpleExecutor）</p><ul><li>Executor 通过 Configuration 创建，在返回实例前如果判断被拦截，则会返回代理</li></ul></li><li><p>Executor 会将 this 引用、MappedStatement（SQL节点）等作为参数，通过 Configuration 生成一个 RoutingStatementHandler 并将执行权交给它</p><ul><li>RoutingStatementHandler 用的是委派模式，真正工作的 StatementHandler 实例会在 RoutingStatementHandler 创建时根据具体的 StatementType 来创建</li><li>InterceptorChain 的拦截先后顺序是 Executor 、ParameterHandler、StatementHandler、ResultSetHandler</li></ul></li><li><p>RoutingStatementHandler 会先从 BoundSql 中获取具体的 SQL 语句，然后通过 connection#prepareStatement 返回一个 PrepareStatement（由具体线程池提供）</p></li><li><p>接着 RoutingStatementHandler 会将设置 PrepareStatement 参数的任务交给具体的 StatementHandler 来处理，过程如下：</p><ul><li>从 BoundSql 中返回入参的名称和类型，然后通过 TypeHandler 将值设入 PrepareStatement </li><li>TypeHandler 对应着不同参数类型，而 MyBatis 提供了四十多个 TypeHandler 实例</li></ul></li><li><p>执行 SQL 语句</p></li><li><p>返回 SQL 影响到的记录数量。在这之前如果使用了指定的 KeyGenerator，则在当前返回之前会先将主键封装到实体中再返回</p></li></ol><blockquote><p>拓展：MappedStatement 中有什么？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MapperAnnotationBuilder#parseStatement(method)</span></span><br><span class="line">assistant.addMappedStatement(</span><br><span class="line">    mappedStatementId,    <span class="comment">// MappedStatement的key值（方法的限定名，当不包含参数列表）</span></span><br><span class="line">    sqlSource,            <span class="comment">// 用来返回BoundSql（保存了SQL语句和参数相关信息）</span></span><br><span class="line">    statementType,        <span class="comment">// SQL语句对应的类型（譬如CRUD类型）</span></span><br><span class="line">    sqlCommandType,       <span class="comment">// 对应的命令类型，用于分发操作是作为判断条件</span></span><br><span class="line">    fetchSize,            <span class="comment">// 抓取数据大小的建议值（可在@Options中配置）</span></span><br><span class="line">    timeout,              <span class="comment">// 执行超时值（可在@Options中配置）</span></span><br><span class="line">    <span class="comment">// ParameterMapID</span></span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    parameterTypeClass,    <span class="comment">// 入参的类型</span></span><br><span class="line">    resultMapId,           <span class="comment">// 如果用了ResultMap，则该值就是其对应的ID值，用于返回时进行映射</span></span><br><span class="line">    getReturnType(method), <span class="comment">// 抽象方法的返回值，用于判断是否有必要返回SQL执行后的影响记录数</span></span><br><span class="line">    resultSetType,         <span class="comment">// ResultSet的操作类型，譬如是否为只向后滚动变量（该类型是个枚举）</span></span><br><span class="line">    flushCache,            <span class="comment">// 用于判断是否需要刷新缓存</span></span><br><span class="line">    useCache,              <span class="comment">// 用于判断是否需要缓存记录，如果是select就需要</span></span><br><span class="line">    <span class="comment">// TODO gcode issue #577</span></span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    keyGenerator,          <span class="comment">// 返回主键的策略。譬如Jdbc3KeyGenerator、SelectKeyGenerator</span></span><br><span class="line">    keyProperty,           <span class="comment">// 主键映射的属性名称</span></span><br><span class="line">    keyColumn,             <span class="comment">// 主键在数据库表中的字段名称</span></span><br><span class="line">    <span class="comment">// DatabaseID</span></span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 驱动SQL的类型</span></span><br><span class="line">    <span class="comment">// 这里的驱动不是JDBC驱动，是XMLLanguageDriver（默认）或RawLanguageDriver。用于解析注解上的SQL</span></span><br><span class="line">    languageDriver, </span><br><span class="line">    <span class="comment">// ResultSets</span></span><br><span class="line">    options != <span class="literal">null</span> ? nullOrEmpty(options.resultSets()) : <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><blockquote><p><a href="https://mybatis.org/mybatis-3/zh/java-api.html">官方 API 文档</a></p></blockquote><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/008.png"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/013.png"></p><h4 id="实体-1"><a href="#实体-1" class="headerlink" title="实体"></a>实体</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/009.png"></p><h4 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/010.png"></p><h4 id="映射关联接口"><a href="#映射关联接口" class="headerlink" title="映射关联接口"></a>映射关联接口</h4><p>Person（传统XML配置SQL）</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/011.png"></p><p>Employee（MyBatis 3 注解配置SQL）</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/012.png"></p><h4 id="自定义拦截器-1"><a href="#自定义拦截器-1" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/014.png"></p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/015.png"></p><h3 id="和Spring整合-1"><a href="#和Spring整合-1" class="headerlink" title="和Spring整合"></a>和Spring整合</h3><blockquote><p>整合过程</p></blockquote><p>1）依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- orm事务由spring管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- orm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）配置Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="comment">// 扫描Mapper接口，将Mapper接口封装为一个个MapperFactoryBean</span></span><br><span class="line"><span class="comment">// MapperFactoryBean#getObject实质就是session.getMapper(Interface.class)</span></span><br><span class="line"><span class="comment">// 即返回一个Mapper代理实例（MapperProxy，JDK动态代理）</span></span><br><span class="line"><span class="comment">// 可参考：MapperProxyFactory</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.td.mapper&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mysql.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClass;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HikariDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driverClass);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     如果接入spring声明式事务，则不是用JdbcTransactionFactory而是用SpringManagedTransactionFactory</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public TransactionFactory transactionFactory() &#123;</span></span><br><span class="line"><span class="comment">//        JdbcTransactionFactory transactionFactory = new JdbcTransactionFactory();</span></span><br><span class="line"><span class="comment">//        return transactionFactory;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionFactory <span class="title function_">transactionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SpringManagedTransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringManagedTransactionFactory</span>();</span><br><span class="line">        <span class="keyword">return</span> transactionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource, TransactionFactory transactionFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTransactionFactory(transactionFactory);</span><br><span class="line">        <span class="comment">// 如果用XML管理SQL，则需要指定其目录（PathMatchingResourcePatternResolver由Spring提供）</span></span><br><span class="line">        <span class="comment">// ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();</span></span><br><span class="line">        <span class="comment">// Resource[] resources = resolver.getResources(&quot;classpath:mapper/*.xml&quot;);</span></span><br><span class="line">        <span class="comment">// factoryBean.setMapperLocations(resources);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果需要添加插件</span></span><br><span class="line">        <span class="comment">// org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();</span></span><br><span class="line">        <span class="comment">// factoryBean.setConfiguration(configuration);</span></span><br><span class="line">        <span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactoryBean sqlSessionFactoryBean)  &#123;</span></span><br><span class="line"><span class="comment">//        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBean.getObject();</span></span><br><span class="line"><span class="comment">//        SqlSessionTemplate template = new SqlSessionTemplate(sqlSessionFactory);</span></span><br><span class="line"><span class="comment">//        return template;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用spring声明式事务</span></span><br><span class="line">    <span class="comment">// 还需要使用@EnableTransactionManagement开启</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,age) values(#&#123;id&#125;, #&#123;name&#125;, #&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    // 操作方式1：使用temple</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">    private SqlSessionTemplate sessionTemplate;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 在SpringJUnit4ClassRunner中，声明式事务中的单元测试是不会落盘的</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Transactional</span></span></span><br><span class="line"><span class="comment">    <span class="doctag">@Test</span></span></span><br><span class="line"><span class="comment">    public void testSqlSessionTemplate() &#123;</span></span><br><span class="line"><span class="comment">        User user = User.builder().id(1).name(&quot;sam&quot;).age(29).build();</span></span><br><span class="line"><span class="comment">        final UserMapper mapper = sessionTemplate.getMapper(UserMapper.class);</span></span><br><span class="line"><span class="comment">        mapper.insert(user);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">// 操作方式2：直接用mapper代理</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">// UserMapper没有显式用Spring注解加入容器，所以编译器会警告，但不用理</span></span><br><span class="line">    <span class="comment">// 因为是用@MapperScan加入容器的</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder().id(<span class="number">2</span>).name(<span class="string">&quot;lisa&quot;</span>).age(<span class="number">18</span>).build();</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@MapperScan 流程</p></blockquote><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/053.png"></p><p>@MapperScan 其实就是自动配置了 MapperScannerConfigurer</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="获取返回主键值"><a href="#获取返回主键值" class="headerlink" title="获取返回主键值"></a>获取返回主键值</h4><blockquote><p>基本介绍</p></blockquote><p>在 MyBatis 中，默认执行完 Insert 语句返回的是更新记录的数量，所以如果想要获取其主键值时就需要依赖 MyBatis 提供的 KeyGenerator 接口来实现。KeyGenerator 可以做到在执行 SQL 后将其 ID 值保存回实体中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">KeyGenerator</span> &#123;</span><br><span class="line">  <span class="comment">// SQL执行前触发</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">processBefore</span><span class="params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span>;</span><br><span class="line">  <span class="comment">// SQL执行后触发</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">processAfter</span><span class="params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KeyGenerator 有 3 个实现</p><ul><li>NoKeyGenerator：默认，即不需要返回 ID 值</li><li>Jdbc3KeyGenerator：用于支持自增主键的数据库，例如 MySQL</li><li>SelectKeyGenerator：支持可以手动获取最新 ID 主键值的数据库，例如 Oracle、MySQL<ul><li>即 SelectKey 动态查询标签</li></ul></li></ul><blockquote><p>快速回顾：JDBC如何实现插入数据后返回其主键值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">MYSQL_PROPS_FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;jdbc.properties&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">MYSQL_PROP_URL_KEY</span> <span class="operator">=</span> <span class="string">&quot;mysql.url&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">MYSQL_PROP_USERNAME_KEY</span> <span class="operator">=</span> <span class="string">&quot;mysql.username&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">MYSQL_PROP_PASSWORD_KEY</span> <span class="operator">=</span> <span class="string">&quot;mysql.password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties <span class="title function_">readProps</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载类路径下的配置文件</span></span><br><span class="line">        <span class="comment">// 如果在Spring环境，可用ClassPathResource或PathMatchingResourcePatternResolver直接返回InputStream</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> getClass().getClassLoader();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> classLoader.getResourceAsStream(MYSQL_PROPS_FILE_PATH);</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(inputStream));</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：真实操作会使用反射来解决类型的不确定性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> readProps();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> props.getProperty(MYSQL_PROP_URL_KEY);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> props.getProperty(MYSQL_PROP_USERNAME_KEY);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> props.getProperty(MYSQL_PROP_PASSWORD_KEY);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, name, password);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user(`name`, `age`) values(?, ?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder().name(<span class="string">&quot;sam&quot;</span>).age(<span class="number">18</span>).build();</span><br><span class="line">        statement.setString(<span class="number">1</span>, user.getName());</span><br><span class="line">        statement.setInt(<span class="number">2</span>, user.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">updateRowNums</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回当前insert操作生成的自增主键</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">keysRS</span> <span class="operator">=</span> statement.getGeneratedKeys();</span><br><span class="line">        <span class="keyword">if</span> (updateRowNums == <span class="number">1</span>) &#123;</span><br><span class="line">            keysRS.next();</span><br><span class="line">            user.setId(keysRS.getInt(Statement.RETURN_GENERATED_KEYS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前插入的记录：&quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用 MyBatis 实现上面的功能，以 Jdbc3KeyGenerator 为例子</p></blockquote><p>Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty=&quot;id&quot;, keyColumn = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(name,age) values(#&#123;name&#125;, #&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder().name(<span class="string">&quot;lisa&quot;</span>).age(<span class="number">18</span>).build();</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于SqlSource类型"><a href="#关于SqlSource类型" class="headerlink" title="关于SqlSource类型"></a>关于SqlSource类型</h4><blockquote><p>介绍</p></blockquote><p>SqlSource 的主要作用是用来返回 BoundSql。BoundSql 实例保存了具体的 SQL 语句和入参类型。但不同 SqlSource 所产生的 BoundSql 是不一样的。譬如 SqlSource 它有以下 4 个具体实现：</p><ul><li>DynamicSqlSource：<code>动态SQL</code>或使用<code>$&#123;&#125;</code>时使用</li><li>RawSqlSource：使用了<code>#&#123;&#125;</code>时使用</li><li>StaticSqlSource：使用了占位符时使用<ul><li>其实 RawSqlSource 和 DynamicSqlSource 都用到次类</li></ul></li><li>ProviderSqlSource：使用了 Provider 相关注解时使用<ul><li>譬如 @InsertProvider 是在 MyBatis 3.4.5 版本后新增的，用于注解方式配置动态 SQL</li></ul></li></ul><blockquote><p>SqlSource 的生成过程</p></blockquote><p>Spring 容器启动时会例化 MapperFactoryBean 并执行其初始化方法 afterPropertiesSet （该方法实现自生命周期接口 InitializingBean）。</p><p>在 MapperFactoryBean#afterPropertiesSet 中会先通过 MapperFactoryBean#checkDaoConfig 方法对对应的 Mapper 接口进行解析。即如果这时使用了注解配置就会对其进行解析并得到 SQL 相关修改信息（如果是 XML 配置，则在构建创建 SqlSessionFactory 时解析）。</p><p>以注解配置方式为例，这时就会通过 MapperAnnotationBuilder#parseStatement 方法对接口中的各个 Method 进行解析，而 SqlSource 就是在这期间产生的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSource <span class="title function_">getSqlSourceFromAnnotations</span><span class="params">(Method method, Class&lt;?&gt; parameterType, LanguageDriver languageDriver)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 返回CURD注解类型，如果有的话</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; sqlAnnotationType = getSqlAnnotationType(method);</span><br><span class="line">        <span class="comment">// 返回Provider注解类型，如果有的话</span></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; sqlProviderAnnotationType = getSqlProviderAnnotationType(method);     </span><br><span class="line">        <span class="comment">// 如果是CURD注解</span></span><br><span class="line">        <span class="keyword">if</span> (sqlAnnotationType != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 则不能和Provider注解同时使用</span></span><br><span class="line">            <span class="keyword">if</span> (sqlProviderAnnotationType != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="comment">/**/);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            // 返回CRUD注解上的SQL语句</span></span><br><span class="line"><span class="comment">            Annotation sqlAnnotation = method.getAnnotation(sqlAnnotationType);</span></span><br><span class="line"><span class="comment">            final String[] strings = (String[]) sqlAnnotation.getClass().getMethod(&quot;value&quot;).invoke(sqlAnnotation);</span></span><br><span class="line"><span class="comment">            // 注意：返回SqlSource实例</span></span><br><span class="line"><span class="comment">            return buildSqlSourceFromStrings(strings, parameterType, languageDriver);</span></span><br><span class="line"><span class="comment">        &#125; else if (sqlProviderAnnotationType != null) &#123;</span></span><br><span class="line"><span class="comment">            // 如果用的是Provider注解，则返回类型为ProviderSqlSource的SqlSource</span></span><br><span class="line"><span class="comment">            Annotation sqlProviderAnnotation = method.getAnnotation(sqlProviderAnnotationType);</span></span><br><span class="line"><span class="comment">            return new ProviderSqlSource(assistant.getConfiguration(), sqlProviderAnnotation, type, method);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return null;</span></span><br><span class="line"><span class="comment">    &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">        //...</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>buildSqlSourceFromStrings 返回 SqlSrouce 的主要逻辑实现位于 XMLLanguageDriver#createSqlSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SqlSource <span class="title function_">createSqlSource</span><span class="params">(Configuration configuration, String script, Class&lt;?&gt; parameterType)</span> &#123;</span><br><span class="line">    <span class="comment">// 注意：在这里可以看到，CRUD注解除了可以直接在value属性中写SQL外</span></span><br><span class="line">    <span class="comment">// 还可以填写&lt;script&gt;标签。&lt;script&gt;标签相当于可以在注解中写XML一样的标签内容</span></span><br><span class="line">    <span class="keyword">if</span> (script.startsWith(<span class="string">&quot;&lt;script&gt;&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 解析XML动态SQL标签后返回SqlSource</span></span><br><span class="line">        <span class="type">XPathParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XPathParser</span>(script, <span class="literal">false</span>, configuration.getVariables(), <span class="keyword">new</span> <span class="title class_">XMLMapperEntityResolver</span>());</span><br><span class="line">        <span class="keyword">return</span> createSqlSource(configuration, parser.evalNode(<span class="string">&quot;/script&quot;</span>), parameterType);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 注意：根据判断SQL中是否用了$&#123;&#125;来选择DynamicSqlSource或RawSqlSource</span></span><br><span class="line">        script = PropertyParser.parse(script, configuration.getVariables());</span><br><span class="line">        <span class="type">TextSqlNode</span> <span class="variable">textSqlNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextSqlNode</span>(script);</span><br><span class="line">        <span class="keyword">if</span> (textSqlNode.isDynamic()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicSqlSource</span>(configuration, textSqlNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RawSqlSource</span>(configuration, script, parameterType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上操作过后，SqlSource 最终会被封装到对应的 MappedStatement 实例中。而 MappedStatement 则在执行 CURD 操作时被使用。</p><h4 id="Executor的生成时机"><a href="#Executor的生成时机" class="headerlink" title="Executor的生成时机"></a>Executor的生成时机</h4><p>Executor 会在返回 SqlSession 实例时被创建。SqlSession 主要用于对外提供 CRUD 操作，而内部实质是由 Executor 来处理的 ，即 SqlSession 相当于 Executor 的一个代理。值得留意的是 Executor 使用了装饰器模式来扩展功能，譬如二级缓存实现。</p><p>SqlSession 类结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title class_">SqlSession</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Executor executor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> autoCommit;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> dirty;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Cursor&lt;?&gt;&gt; cursorList; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Executor 类结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseExecutor</span> <span class="keyword">implements</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(BaseExecutor.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> Transaction transaction;</span><br><span class="line">  <span class="keyword">protected</span> Executor wrapper;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> ConcurrentLinkedQueue&lt;DeferredLoad&gt; deferredLoads;</span><br><span class="line">  <span class="keyword">protected</span> PerpetualCache localCache;</span><br><span class="line">  <span class="keyword">protected</span> PerpetualCache localOutputParameterCache;</span><br><span class="line">  <span class="keyword">protected</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> queryStack;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> closed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Executor 的创建逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Configuration</span></span><br><span class="line"><span class="keyword">public</span> Executor <span class="title function_">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> &#123;</span><br><span class="line">    executorType = executorType == <span class="literal">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">    executorType = executorType == <span class="literal">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">    Executor executor;</span><br><span class="line">    <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">BatchExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">ReuseExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">SimpleExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果开启了二级缓存，则装饰Executor</span></span><br><span class="line">    <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">CachingExecutor</span>(executor);</span><br><span class="line">    &#125;</span><br><span class="line">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解版使用"><a href="#注解版使用" class="headerlink" title="注解版使用"></a>注解版使用</h3><p>在 MyBatis 3 版本开始，已经推荐使用 JavaConfig 来代替传统的 XML 配置。譬如，提供 @Insert、@Update、@Delete、@Select、@InsertProvider、@DeleteProvider、@UpdateProvider、@SelectProvider 等注解来完成 CURD 模板定义，以及动态SQL定义</p><p>详细使参考官方配置文档：</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/java-api.html">Java API</a></li><li><a href="https://mybatis.org/mybatis-3/zh/statement-builders.html">SQL 语句构建器</a></li></ul><p>但个人认为使用注解来配置 MyBatis 就相当于舍弃了它最大的优势（集中式管理SQL），因此并不推荐使用。</p><h2 id="纯手动ORM-Spring-JDBC"><a href="#纯手动ORM-Spring-JDBC" class="headerlink" title="纯手动ORM-Spring JDBC"></a>纯手动ORM-Spring JDBC</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>仅在原生JDBC的基础上进行了简单的封装，让 JDBC 操作边的更加方便好用</li><li>简单易上手，只要有原生 JDBC 知识就可以直接使用</li><li>提供简单的 ORM 功能（RowMapper）</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>对 ORM 映射功能支持薄弱，复杂查询一般需要实现自定义 RowMapper</li><li>无法对 SQL 进行统一管理，如果存在修改 SQL 的需求时需要修改源码后并重新编译</li><li>开发人要维护 SQL，会降低了开发效率</li><li>耦合程度较高，导致切换数据库困难</li><li>不支持缓存</li></ul><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/021.png"></p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/022.png"></p><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/023.png"></p><h2 id="JPA规范升华-Spring-Data-JPA"><a href="#JPA规范升华-Spring-Data-JPA" class="headerlink" title="JPA规范升华-Spring Data JPA"></a>JPA规范升华-Spring Data JPA</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Spring Data JPA 其实并不是 ORM 框架，而是对 JPA 规范的进一步封装。它是 Spring Data 成员，而 Spring Data 一直在贯彻<code>抽象化持久层操作</code>和<code>约定优于配置</code>等理念。可以简单理解，它在现今五花八门的持久化库的基础上提供了一套抽象API，让其具体实现变得更加简单明了，因此通过使用 Spring Data 项目完全可以大大地提高开发效率。</p><blockquote><p>Spring Data JPA 架构图</p></blockquote><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/024.png"></p><p>从上图可以大体看到 Spring Data JPA 位于 Jakarta EE  JPA 规范之上。所以可以得出的结论是，只要底层的 ORM 框架支持 Jakarta EE  JPA 规范，那么就能够被 Spring Data JPA 所支持。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>继承了 Hibernate 的优点</li><li>支持约定优于配置的操作定义方式，大大提高了开发效率</li><li>支持 JPQL（Spring版HQL）、Native SQL 两种方法来自定义SQL操作</li><li>简单易上手</li><li>支持持久层审计操作</li><li>支持异步返回</li><li>支持 DDD（领域驱动设计）聚合事件传播操作（ <em>@DomainEvents</em> 、 <em>AbstractAggregateRoot</em> ）</li><li>支持审计</li><li>多种动态查询方式<ol><li>定义多个不同条件的 Repository 方法，然后根据入参条件再判断应该使用哪个方法（不推荐）</li><li>自定义 JPA Repository 接口和实现（通过注入 EntityManager 进行动态查询），类似第1种方式</li><li>QueryByExampleExecutor API 查询（缺点是客户端需要拼接动态查询）</li><li>在 @Query 注解。譬如运用IF函数或组合is null和or判断</li><li>非内置方式，既使用 QueryDSL - JPA 进行查询（类似 Hibernate 的 Criteria API）</li></ol></li></ul><blockquote><p>关于动态查询，建议方式2和3组合使用，解决需要客户端执行平拼装查询条件的问题</p></blockquote><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ul><li>无法对 SQL 进行统一管理，如果存在修改 SQL 的需求时需要修改源码后并重新编译</li><li>批量操作不够灵活</li><li>因为是面向领域对象设计，所以对于关联查询有些别扭</li></ul><h3 id="执行原理-2"><a href="#执行原理-2" class="headerlink" title="执行原理"></a>执行原理</h3><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/025.png"></p><h3 id="使用案例-2"><a href="#使用案例-2" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="依赖-3"><a href="#依赖-3" class="headerlink" title="依赖"></a>依赖</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/026.png"></p><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>审计操作</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/027.png"></p><p>JavaConfig</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/028.png"></p><h4 id="实体和投影"><a href="#实体和投影" class="headerlink" title="实体和投影"></a>实体和投影</h4><p>基础模型</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/029.png"></p><p>Person</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/030.png"></p><p>Person投射</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/031.png"></p><p>Job</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/032.png"></p><p>PersonJob</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/033.png"></p><h4 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/034.png"></p><h4 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/035.png"></p><h3 id="动态SQL解决案例"><a href="#动态SQL解决案例" class="headerlink" title="动态SQL解决案例"></a>动态SQL解决案例</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><blockquote><p>自定义 Repository 接口方案</p></blockquote><p>步骤1：创建一个自定义的 JPA Repository 接口</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/045.png"></p><p>步骤2：实现上面的接口</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/046.png"></p><p>步骤3：正常使用以上自定义Repository，只需继承接口即可</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/047.png"></p><blockquote><p>MySQL if函数 方案</p></blockquote><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/048.png"></p><blockquote><p>QueryDSL</p></blockquote><p>步骤1：添加 QueryDSL JPA 依赖和插件</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/049.png"></p><p>步骤2：将 JPAQueryFactory 添加到容器让 Spring 管理</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/050.png"></p><p>步骤3：在自定义 Repository 实现中进行动态SQL操作</p><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/051.png"></p><h4 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/052.png"></p><h2 id="不伦不类-MyBatis-Plus"><a href="#不伦不类-MyBatis-Plus" class="headerlink" title="不伦不类-MyBatis Plus"></a>不伦不类-MyBatis Plus</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>MyBatis Plus 是国内开发团队 baomidou 在原 MyBatis 基础框架上做的扩展。其中特别强调了“ 只做增强不做改变 ”，所以如果是从 MyBatis 切换到 MyBatis Plus 的话，只需要简单地将 SqlSessionFactory 切换为 MybatisSqlSession 即可。MyBatis Plus 做的扩展在原理上解析其实很简单，主要是重写了 MyBatis 的以下部分：</p><ul><li>资源解析 - MapperXXXBuilder（注入通用SQL位置）</li><li>代理处理 - MapperProxy</li><li>方法分派 - MapperMethod</li></ul><p>通过以上组件的重写可以支持通用 CRUD 注入和 ActiveRecord 模式等功能。</p><p>MyBatis Plus 除了封装通用 CRUD 之外还集成了一些插件。例如以前如果想进行物理分页的话是需要单独引入和配置分页插件的，而现在这个分页插件已经内嵌在 MyBatis Plus 中，既用的时候只需要配置一下就可以了。所以，可以简单地说 MyBatis Plus 让 MyBatis 更加人性化了。</p><p>观点：从了解 MyBatis Plus 开始，它给我的感觉就有些不伦不类，因为是它和 Spring Data JPA 在功能上十分相似，甚至可以明确地看到存在借鉴 JPA 规范的操作，譬如实体注解和通用 CRUD 操作。个人的第1个疑问是为什么 baomidou 不尝试把 MyBatis Plus 上做的扩展尝试 pull requests 到现今的 MyBatis 中（难道是为了团队利益？看到文章MyBatis Plug提供收费功能），而不这样做的话如果后期 MyBatis 升级可能会导致功能重叠。第2个疑问是虽然 MyBatis3 本身已经提供注解配置，但这种方式摒弃了集中式管理SQL的优点，那么如果想要使用注解来处理持久化的话 Spring Data JPA 是更好的选择，既 MyBatis Plus 这种无谓的扩展是否有价值或是否背离了 MyBatis 初衷？。</p><p>因此基于上述原因其实个人并不推荐使用 MyBatis Plus，之所以加到文章里完全是希望文章更饱满一些而已😃。</p><blockquote><p>MyBatis Plus 的依赖结构</p></blockquote><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/036.png"></p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>继承了 MyBatis 的优点</li><li>内嵌分页插件支持物理分页操作</li><li>新增通用 CRUD 模板。主要分为 Service 和 Mapper 两种，可配合新增的 Wrapper 实现对条件进行封装。该方案其实就等同于 Spring Data JPA 中的自定义Repository CRUD 方法</li><li>新增 ActiveRecord 模式。实体可通过继承 Model 类来将 CRUD 操作内聚到实体自身中</li><li>新增 ID 自生成策略</li><li>新增 SQL 阻断器功能。支持拦截恶意或误操作等性质的全表 delete、update 行为</li><li>新增字段映射类型转换器。例如：JacksonTypeHandler、GsonTypeHandler 等</li></ul><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>不是正统 MyBatis 版本</p></li><li><p>引入第三方连接池需要手动实现接口</p></li><li><p>级联操作与 Hibernate 相比支持较差</p></li><li><p>仍然不支持自动生成数据库表</p></li><li><p>关联接口时方法仍然不能重载</p></li><li><p>二级缓存使用不当容易导致脏读现象</p></li></ul><h3 id="执行原理-3"><a href="#执行原理-3" class="headerlink" title="执行原理"></a>执行原理</h3><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/037.png"></p><h3 id="使用案例-3"><a href="#使用案例-3" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="依赖-4"><a href="#依赖-4" class="headerlink" title="依赖"></a>依赖</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/038.png"></p><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/039.png"></p><h4 id="实体和映射关联接口"><a href="#实体和映射关联接口" class="headerlink" title="实体和映射关联接口"></a>实体和映射关联接口</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/040.png"></p><h4 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h4><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/041.png"></p><h2 id="Spring中ORM的注意事项"><a href="#Spring中ORM的注意事项" class="headerlink" title="Spring中ORM的注意事项"></a>Spring中ORM的注意事项</h2><h3 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h3><p>在 Spring 单元测试环境使用 @Transactional 注解 CRUD 操作会自动回滚。如果想要持久化，可以直接去掉 @Transactional 注解即可，但并不推荐，因为单元测试数据没必要做落盘操作。</p><h3 id="EntityManager问题"><a href="#EntityManager问题" class="headerlink" title="EntityManager问题"></a>EntityManager问题</h3><p>EntityManager 本身是非线程安全的，因此如果在 Singleton 实例中使用，则应该通过 @PersistenceContex 注解注入，而非 @Autowired、@Resource。因为 @PersistenceContex 可以为每条线程注入一个线程安全的 EntityManager。</p><h2 id="ORM框架比对"><a href="#ORM框架比对" class="headerlink" title="ORM框架比对"></a>ORM框架比对</h2><p><img src="/ORM%E6%A1%86%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AF%94%E5%AF%B9/042.png"></p><h2 id="拓展小知识"><a href="#拓展小知识" class="headerlink" title="拓展小知识"></a>拓展小知识</h2><h3 id="ORM-中的-N-1-问题"><a href="#ORM-中的-N-1-问题" class="headerlink" title="ORM 中的 N + 1 问题"></a>ORM 中的 N + 1 问题</h3><blockquote><p>基本介绍</p></blockquote><p>首先关于 N + 1 名字而言，个人认为叫 1 + N 更加合适。指的是当我们只想查询主模型时，ORM 框架默认会连同其关联也查出来。即原本只需 1 条 SQL 的功夫，现在却变成了 1 + N 条（N 代表的是 1 这条 SQL 所查出来的模型个数），既 ORM 会根据模型的 ID 值再次去查询其关联模型。</p><p>例子：假设 A 模型关联了 B 模型</p><ul><li>A 进行 findAll（select * from A） 操作，假设现在返回了 2 个模型，既这时 n &#x3D; 2</li><li>接着 ORM 框架（默认）会根据 findAll 查询出来的每个模型的 ID 值再到关联表 B 中将其关联的模型查询出来。既 n &#x3D; 2 的话，那么就会再另外多执行 2 条 SQL 来查询关联对象。</li></ul><blockquote><p>问题思考</p></blockquote><p>个人理解其实就是执行了我们认为多余的SQL操作。譬如上述例子中原本我们只需要 1 条 SQL 的数据，但却执行了 1 + N 条，这显然造成了无畏的消耗，这不是我们想要的。而且应该需要知道的是，数据库通常是整个应用中最容易出现瓶颈的地方，所以如果存在大量的 1 + N 操作，就会导致大量的 SQL 语句执行，从而给数据库造成负担。除此之外，JDBC在获取返回数据时是阻塞的，所以如果大批量地执行 SQL 的话其效率不言而喻。</p><p>在罗列解决方案之前需要多说一句，1 + N 问题只要是 ORM 支持关联操作就一定会存在，所以我们能够做的只有一些补救操作：</p><ul><li>使用<code>懒加载</code>延迟 N 操作的执行，既只有我们通过代理实例访问关联模型时才真正执行 SQL 查询</li><li>将 1 + N 操作直接合并为 1 条 SQL。譬如在 Hibernate 的 HQL 中支持使用<code>join fetch</code>操作一次过连同关联模型一同查询出来，这样做可以避免多次执行 SQL </li><li>在 Hibernate 中提供<code>Criteria查询</code>查询方式，即所谓的 QBC （Query by Criteria ）。该操作效果和 join fetch 一样，会连同关联模型一同查出来</li></ul><p>除了以上方案外，还看到网上有些文章建议使用二级缓存来解决，我想大概的思路是，第一次 findAll 操作虽然会有 1 + N 问题，但因为查询出来后会被缓存，那么后续操作就能相应地降低额外的 SQL 查询数量了。个人认为这种方法实属是投机取消，因为 1 + N 问题的本质是执行了多余的 SQL ，所以我们要从如何减少多余 SQL 执行的角度出发。而且缓存这种机制一开始就是针对那些常用且少修改的数据设计的，所以如果对象频繁地被修改的话，那么缓存就没什么意义了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《MyBatis从入门到精通》</li><li>《MyBatis技术内幕》</li><li>《深入浅出Hibernate》</li><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/">Spring Data JPA - Reference Documentation</a></li><li><a href="https://mybatis.plus/guide/">MyBatis-Plus Guide</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中不只有值传递</title>
      <link href="/Java%E4%B8%AD%E4%B8%8D%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/"/>
      <url>/Java%E4%B8%AD%E4%B8%8D%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="论述"><a href="#论述" class="headerlink" title="论述"></a>论述</h2><ol><li><p>首先Java语言层面是屏蔽了指针（引用对象的内存地址）这个概念的，所以并不存在引用传递。准确点来说，Java传递参数是通过操作数栈和局部变量表交互来完成的</p><p><img src="/Java%E4%B8%AD%E4%B8%8D%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/002.png" alt="img"></p></li><li><p>网上一般的论述是拷贝了对象的地址所以是值传递，但这种说法是站不住脚的，因为这和值传递的概念不符。值传递的特点是通过拷贝值来隔离两个不同的栈帧域，让其在操作期间互不干扰。但在 Java 中普通的引用类型并不如是，因此实质也不是值传递。</p></li><li><p>准确点来说，Java 的基本数据类为值传递，而引用类型则为<strong>共享对象传递</strong>。</p></li><li><p>String 引用类型在 Java 中有着特殊实现。特点是不可变，且有运行时字符串常量池来提高字符串的利用率。因为字符串在程序中的出现率颇高，所以为了提高其复用率就使用池化思想来维护。其次因为池本身是线程共享的，所以为了避免出现并发修改所带来的同步问题，因此还特意使用 final 标注，以示其不可变。除此之外，字符串字面量本身都有与之对应的 String 对象实例，而且可以是一对多的关系，因此我们可以这样理解，<strong>传递 String 对象时依然是在传递共享对象</strong>，因为字符串字面量的指向相同且不可变的缘故，所以就导致 String 在传递时显得像值传递一样（因为你并不能修改它从而观察到影响返回），这点可以通过观察其hashCode来验证。</p></li></ol><blockquote><p>图片源自维基百科</p></blockquote><p><img src="/Java%E4%B8%AD%E4%B8%8D%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92/001.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人认为网上之所以总是在值传递和引用传递之间徘徊，是因为被概念所限制了思想（即只知道值传递或引用传递）。但不论是<strong>值传递</strong>、<strong>引用传递</strong>，还是<strong>共享对象传递</strong>其实都不重要，因为本质上来说它们只是<strong>对变量传递过程的一种行为描述</strong>而已，所以无需过度解读而只需要了解其本质。譬如在开发时，我们只需要知道在 Java 中普通的引用类型实例在不同栈帧中的操作是会相互影响的，这就已经足够了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5">wikipedia - 求值策略</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码浅析之依赖注入</title>
      <link href="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年05月14日02:17:55 — 增加循环依赖源码浅析案例</li></ul><h2 id="关于控制反转和依赖注入"><a href="#关于控制反转和依赖注入" class="headerlink" title="关于控制反转和依赖注入"></a>关于控制反转和依赖注入</h2><blockquote><p>什么是控制反转和依赖注入？</p></blockquote><p>下图内容片段摘自网上的某篇文章</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/001.png"></p><p>谈注入方式之前，我们先聊聊关于<code>控制反转（IOC）</code>和<code>依赖注入（DI）</code>的话题。主要是因为在网上看到很多人说两者是同一个东西，而我个人并不这样理解。因为 IoC 和 DI 其实并不是同级别的概念，譬如 IoC 其实是包含 DI 的，且不仅仅有 DI。很多人聊控制反转都拿 Spring 容器来举例，而其实用到控制反转思想的地方不仅如此。例如生活中的<code>排队叫号(观察者模式)</code>、著名的<code>好莱坞原则</code>都是控制反转的体现。而在 Spring 中，控制反转主要体现在<code>上下文管理</code>上，开发者不仅可以将 Bean 的维护工作交给容器，还能使用容器来进行<code>资源管理</code>、<code>依赖查找</code>、<code>依赖注入</code>、<code>事件传播</code>等操作，所以“依赖注入其实是IOC的另一种说法”这种说法是不正确的。通俗点说应该是依赖注入其实是控制反转的一种体现。</p><p>多说一句，依赖注入功能其实是依赖查找功能的超集，因为依赖注入时会伴随着依赖查找。而且需注意的是<code>依赖注入时的依赖查找</code>和<code>主动依赖查找</code>并不相同。具体表现在<code>主动依赖</code>查找只会查找有 BeanDefinition 的 Bean，而<code>依赖注入时的依赖查找</code>还可以查找到 Spring 容器内部创建的 bean (譬如BeanFactory)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动依赖查找</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 会抛出 NoSuchBeanDefinitionException </span></span><br><span class="line">    applicationContext.getBean(BeanFactory.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖注入时的依赖查找（依赖查找 + 注入依赖）</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BeanFactory beanFactory; <span class="comment">// 可以获取到 BeanFactory 实例</span></span><br></pre></td></tr></table></figure><p><code>手动依赖查找</code>之所以会抛出 NoSuchBeanDefinitionException 是因为 BeanFactory 是内部创建的 Bean，没有对应的 BeanDefinition，而手动依赖查找是根据 BeanDefinition 来找的。</p><p>除了 BeanFactory 之外，ResourceLoader、ApplicationContext、Environment、ApplicationEventPublisher 等都是内置 Bean（参考AbstractApplicationContext#prepareBeanFactory）。</p><blockquote><p>依赖注入和依赖查找的基本流程</p></blockquote><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/002.png"></p><h2 id="Spring支持的几种依赖注入方式"><a href="#Spring支持的几种依赖注入方式" class="headerlink" title="Spring支持的几种依赖注入方式"></a>Spring支持的几种依赖注入方式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>目前Spring支持4种依赖注入的方式，我们可以将其按类型进行划分，分别是<code>构造器注入</code>、<code>字段注入</code>、<code>方法注入(包含Setter方法)</code>、<code>接口方法回调注入</code>等。</p><p>在网上可以看到一些人将<code>方法注入</code>和<code>Setter注入</code>分开其实是不正确的，这点可以在 @Autowired 注解处理器的中得到答案。</p><p>如下图，@Autowired 注解的处理只区分 Field 和 Method 两种类型，而且并不会区分普通 Method 还是 Setter。</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/003.png"></p><p>除了上面提到的按类型对依赖注入方式进行划分之外，也可以按照<code>注入时机</code>来划分：</p><ul><li><p>构造器注入：依赖会在Bean实例创建时被注入</p><ul><li>官方推荐注入方式，优点如下：</li><li>1）在创建Bean实例时其依赖就全部要准备好，可以有效地防止 NullPointerException，同时也减少了判空代码</li><li>2）使用final修饰依赖，可使其保证不变形，使得Singleton实例在多线程下更加安全</li></ul></li><li><p>方法注入和字段注入：依赖会在Bean实例创建后的依赖填充阶段被注入（populateBean）</p></li><li><p>接口方法回调注入：依赖会 populateBean 后接着的初始化阶段被注入（initializeBean）</p></li></ul><h3 id="注入方式详解"><a href="#注入方式详解" class="headerlink" title="注入方式详解"></a>注入方式详解</h3><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><blockquote><p>基本介绍</p></blockquote><p>指通过<code>带参构造器</code>或<code>@Bean注解方法</code>产生实例并进行依赖注入。因为构造器注入是 Spring 默认的依赖注入方式，因此在使用构造器注入时并不需要添加额外的注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersonRepo personRepo;</span><br><span class="line">    <span class="comment">// 当Bean有且仅有一个构造器时，Spring将默认通过该构造器进行实例化和依赖注入。</span></span><br><span class="line">  <span class="comment">// 而如果有多个构造器，但又想用构造器注入，则可以在期望的构造器上添加上@Autowired即可。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfig</span><span class="params">(PersonRepo personRepo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.personRepo = <span class="built_in">this</span>.getPersonRepo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，如果采用@Bean注解方法来实现构造器注入，则需要记住的规则是<code>内部注解优先于标注在方法上的注解或在方法内部相同属性的定义</code>。例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Value(&quot;HanMeiMei&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name); <span class="comment">// 结果是LiLei，而不是HanMeiMei</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;LiLei&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码浅析</p></blockquote><p>在上面已经提到过，构造器注入会在实例化Bean时进行依赖注入。要了解这一点其实很简单，我们可以在Bean生命周期的依赖填充阶段上进行观察。即如果在执行依赖填充之前就已经有了依赖，就说明依赖是在创建实例时被注入的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersonRepo personRepo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestConfig</span><span class="params">(PersonRepo personRepo, TransactionTemplate transactionTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.personRepo = personRepo;</span><br><span class="line">        <span class="built_in">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/004.png"></p><h4 id="方法注入和字段注入"><a href="#方法注入和字段注入" class="headerlink" title="方法注入和字段注入"></a>方法注入和字段注入</h4><blockquote><p>基本介绍</p></blockquote><p>方法注入和字段注入的时机是一样的，都是在Bean实例化后的依赖填充阶段中进行，而两者的区别仅是操作上有些许不同而已。但不管是方法注入还是字段注入，它们都是通过注解来实现的（不像构造器注入时Spring默认的），其常见的相关注解又 @Autowired、@Value、@Inject、@Resource等。但注解本身只是一种描述代码的元数据，所以每一个注解的背后都应该有与之对应的注解处理器，而InstantiationAwareBeanPostProcessor这个BeanPostProcessor就是注解处理器的基础，在Spring中比其它BeanPostProcessor有更高的优先级别。</p><p>InstantiationAwareBeanPostProcessor常见的之类有以下这几个：</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/005.png"></p><blockquote><p>源码浅析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepo personRepo;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先要证明在依赖填充操作之前，依赖是还没有被注入的</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/006.png"></p><p>执行属性填充之后，Bean状态如下</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/007.png"></p><h4 id="接口方法回调注入"><a href="#接口方法回调注入" class="headerlink" title="接口方法回调注入"></a>接口方法回调注入</h4><blockquote><p>基本介绍</p></blockquote><p>接口方法回调注入主要依赖Spring提供的Aware接口（模板模式），通过实现Aware接口可以实现在Bean实例化后被回调。常用的Aware接口有以下这几个：</p><ul><li>ApplicationContextAware：可用于获取内置Bean实例ApplicationContext</li><li>BeanFactoryAware：可用于获取内置Bean实例BeanFactory</li><li>ApplicationEventPublisherAware：可用于获取内置Bean实例ApplicationEventPublisher</li><li>ResourceLoaderAware：可用于获取内置Bean实例ResourceLoader</li></ul><blockquote><p>源码浅析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PersonRepo personRepo;</span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 手动依赖查找后进行注入</span></span><br><span class="line">      <span class="built_in">this</span>.personRepo = applicationContext.getBean(PersonRepo.class);</span><br><span class="line">        <span class="built_in">this</span>.transactionTemplate = applicationContext.getBean(TransactionTemplate.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先证明接口方法在被回调之前是没有被注入依赖的</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/008.png"></p><p>执行完回调方法后Bean状态如下</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/009.png"></p><h3 id="如何选择依赖注入方式？"><a href="#如何选择依赖注入方式？" class="headerlink" title="如何选择依赖注入方式？"></a>如何选择依赖注入方式？</h3><ul><li>经过上面的简单分析，我们已经得知到几种依赖注入方式的主要区别在于注入时机</li><li>构造器注入<ol><li>官方推荐</li><li>注入依赖的时机最早，能够确保其依赖在Bean实例化时就被全部注入，可有效避免空指针和减少判空逻辑，代码更健壮</li><li>如果依赖在注入后不打算改变（推荐使用final修饰），且依赖数量不多的情况下（如果依赖多，请考虑是否指责过大），推荐使用构造器注入</li><li>缺点是无法实现循环引用。因为构造器注入的要求是Bean在实例化时就准备好其依赖，但如果依赖又需要当前Bean的话（即发生了循环依赖），这时理论上就会发生死循环，但Spring在这点上提供了检测机制，即当发现循环依赖时通过抛异常来避免死循环。所以，如果确实有必要用到循环依赖的话，这可以使用其它的注入方式来解决，因为其余的注入方式Spring会通过提前暴露来解决循环依赖（这点后续会继续分析）。</li></ol></li><li>方法注入和字段注入<ol><li>注入依赖的时机时在Bean实例化之后的依赖填充阶段</li><li>但依赖数量较多是，或依赖注入后可能会变动，此时可以考虑使用这种注入方式</li><li>优点是能够解决循环依赖问题</li></ol></li><li>接口方法回调注入<ul><li>注入依赖的时机在实例化以及填充后进行，注入时机是几种方式中最晚的</li><li>需要手动进行依赖查找并注入依赖，因此具有一定的局限性，所以在平常开发中并不推荐使用这种方法来注入依赖</li></ul></li></ul><h2 id="为什么构造器无法解决循环依赖"><a href="#为什么构造器无法解决循环依赖" class="headerlink" title="为什么构造器无法解决循环依赖"></a>为什么构造器无法解决循环依赖</h2><h3 id="什么是循环依赖？"><a href="#什么是循环依赖？" class="headerlink" title="什么是循环依赖？"></a>什么是循环依赖？</h3><p>循环依赖指的是<code>A-&gt;B-&gt;A</code>的依赖关系。因为A实例化时需要依赖B，因此B会被实例化，但B在实例化时又发现需要依赖A，但这时A在等待B完整实例化，所以这时就会出现死循环而导致栈溢出。</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/010.png"></p><p>在上面已经提到过，对于<code>构造器注入</code>而言是无法解决循环依赖的，但如果真的发生了，Spring并不会出现栈溢出，而是会抛出BeanCurrentlyInCreationException来通知开发者生了循环依赖。</p><p>需要知道，在Spring中其实只有<code>构造器注入</code>发生循环依赖才会抛BeanCurrentlyInCreationException，这是因为通过构造器注入的依赖被认为是<code>急需性</code>的，而对于<code>字段注入</code>、<code>方法注入</code> 、<code>接口回调注入</code>而言Spring就做了内部处理来解决。</p><p>Spring对于<code>非构造器注入</code>引发的循环依赖问题的解决方案是，在Bean A<code>实例化后（在依赖填充前）</code>先提前暴露一个ObjectFactory到DefaultSingletonBeanRegistry.singletonFactories中，而这个ObjectFactory的getObject()方法封装了获取当前Bean A的逻辑（既如果这时马上调用ObjectFactory#getObject()就可以获得当前这个还没完成依赖注入的Bean A实例）。如果在这时发生了循环依赖，既Bean A在依赖填充阶段要去实例化Bean B，这时Bean B亦会暴露一个ObjectFactory，随机Bean B因为又依赖了Bean A。这时Bean B就会进行依赖查找，从DefaultSingletonBeanRegistry.singletonFactories中得到一个Bean A的ObjectFactory。因此，即使这时Bean A还没有完全初始化，但也解决了循环依赖问题。</p><h3 id="构造器注入的循环依赖检测机制"><a href="#构造器注入的循环依赖检测机制" class="headerlink" title="构造器注入的循环依赖检测机制"></a>构造器注入的循环依赖检测机制</h3><p>案例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">student</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为使用的是<code>@Bean标注方法</code>的形式添加进入容器，所以其方法会被视为一个FactoryMethod（工厂方法模式）。既这时Person和Student会使用FactoryMethod方案进行实例化。除此之外，各自都在构造时通过参数列表传入依赖，所以会采用默认的注入方式（构造器注入）来注入依赖。</p><p>首先，在容器启动时，Person因为默认是Singleton域的缘故，而且定义在Student之上，所以会率先被实例化</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/011.png"></p><p>接着会通过FactoryMethod方式进行实例化</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/012.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/013.png"></p><p>进入方法后，会执行是否需要采用构造器注入的判断逻辑</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/014.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/015.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/016.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/017.png"></p><p>获取依赖过程如下</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/018.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/019.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/020.png"></p><p>进入beanFactory.getBean(Student)进行依赖查找后，就会从Person创建转为对Student创建，因此实例化Person时发现依赖了Student</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/021.png"></p><p>因为当前案例使用的是<code>构造器注入</code>方式，所以并不会走右上图的if的逻辑（即直接返回null）。所以不管是Person还是Student，其实都不可能获取到对方的引用。</p><p>下图为Spring对构造器注入而引发生循环依赖的检查机制。</p><p>场景是Person实例化时，发现依赖了Student，然后进行Student实例化</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/022.png"></p><h3 id="非构造器提前暴露引用过程"><a href="#非构造器提前暴露引用过程" class="headerlink" title="非构造器提前暴露引用过程"></a>非构造器提前暴露引用过程</h3><p>案例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Student sutdent;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于构造器注入案例代码只是删掉了参数列表，而改用通过@Autowired标注在字段上来进行依赖注入。因此Bean实例方式依然会使用 FactoryMethod方案，但因为参数列表为0，所以会使用字段方式进行依赖注入而不是构造器注入。</p><p>启动Spring容器执行代码，观察Person Bean的创建过程：</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/023.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/024.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/025.png"></p><p>创建完Bean后就会对其进行提前暴露</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/026.png"></p><p>那么这时如果因为循环依赖而导致Student需要被实例化，那么Student就可以在以下操作中获取到提前暴露出来的Person Bean引用</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/027.png"></p><h3 id="Prototype原型域实例无法解决循环依赖"><a href="#Prototype原型域实例无法解决循环依赖" class="headerlink" title="Prototype原型域实例无法解决循环依赖"></a>Prototype原型域实例无法解决循环依赖</h3><p>上面已经提到过，提前暴露的条件之一就是必须是Singleton域的Bean。</p><p>个人理解这样做的原因可能是因为Prototype类型的Bean每次都返回新的实例的缘故，所以并没有提前暴露的必要兴（因为暴露了也不会被使用到），其次如果不阻断循环依赖的话就会一直创建对象而最终导致OOM的发生。</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/028.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.baeldung.com/spring-5-functional-beans">Spring 5 Functional Bean Registration</a></li><li><a href="https://www.baeldung.com/circular-dependencies-in-spring">Circular Dependencies in Spring</a></li><li><a href="https://spring.io/blog/2007/07/11/setter-injection-versus-constructor-injection-and-the-use-of-required">Setter injection versus constructor injection and the use of @Required</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码浅析之SingletonBean实例化过程</title>
      <link href="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8BSingletonBean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
      <url>/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8BSingletonBean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><p>2020年04月12日10:35:23 — 修改对初始化流程的理解</p><h2 id="分析案例"><a href="#分析案例" class="headerlink" title="分析案例"></a>分析案例</h2><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析BeanDefinition</span></span><br><span class="line">        <span class="comment">// 方法1：指定类</span></span><br><span class="line">        ac.register(JavaConfig.class); </span><br><span class="line">        <span class="comment">// 方法2：指定classpath</span></span><br><span class="line">        <span class="comment">//ac.scan(&quot;com.example.test3&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动容器（容器初始化与Singleton Bean实例化）</span></span><br><span class="line">        ac.refresh(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依赖查找</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(Person.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person<span class="punctuation">&#123;</span>beanFactory=org.springframework.beans.factory.support.DefaultListableBeanFactory@<span class="number">3</span>bb9a3ff<span class="punctuation">:</span> defining beans <span class="punctuation">[</span>org.springframework.context.annotation.internalConfigurationAnnotationProcessor<span class="punctuation">,</span>org.springframework.context.annotation.internalAutowiredAnnotationProcessor<span class="punctuation">,</span>org.springframework.context.annotation.internalCommonAnnotationProcessor<span class="punctuation">,</span>org.springframework.context.event.internalEventListenerProcessor<span class="punctuation">,</span>org.springframework.context.event.internalEventListenerFactory<span class="punctuation">,</span>javaConfig<span class="punctuation">,</span>person<span class="punctuation">]</span>; root of factory hierarchy<span class="punctuation">,</span> name=&#x27;zhangsan&#x27;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="AnnotationConfigApplicationContext类简介"><a href="#AnnotationConfigApplicationContext类简介" class="headerlink" title="AnnotationConfigApplicationContext类简介"></a>AnnotationConfigApplicationContext类简介</h2><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8BSingletonBean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/001.png"></p><h3 id="关于BeanFactory和ApplicationContext的区别"><a href="#关于BeanFactory和ApplicationContext的区别" class="headerlink" title="关于BeanFactory和ApplicationContext的区别"></a>关于BeanFactory和ApplicationContext的区别</h3><ul><li><p>BeanFactory的主要功能</p><ul><li>依赖查找</li><li>依赖注入</li><li>Bean管理（注册、注销）</li></ul></li><li><p>Application的主要功能（组合了BeanFactory）</p><ul><li>资源管理（ResourceLoader）</li><li>事件传播（ApplicationEventPublisher）</li><li>国际化（MessageSource）</li></ul></li><li><p>两者的之间的关系如下</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8BSingletonBean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/002.png"></p></li></ul><h3 id="refresh-启动容器"><a href="#refresh-启动容器" class="headerlink" title="refresh() - 启动容器"></a>refresh() - 启动容器</h3><blockquote><p>该方法继承自AbstractApplicationContext类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// 预初始化</span></span><br><span class="line">        <span class="comment">// PropertySources</span></span><br><span class="line">        <span class="comment">// 1. OriginTrackMapPropertySource：加载SpringBoot的配置文件（application.yml）</span></span><br><span class="line">        <span class="comment">// 2. OriginAwareSystemEnvironmentPropertySource：加载系统环境变量</span></span><br><span class="line">        <span class="comment">// 3. PropertiesPropertySource：加载系统属性</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建基础容器（ConfigurableListableBeanFactory）</span></span><br><span class="line">        <span class="comment">// 注意：这里包含了设置父容器（BeanFactory）的逻辑</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化容器，譬如添加内部Bean</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这是一个模板方法，可以针对性地做些特殊处理</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 非常重要</span></span><br><span class="line">            <span class="comment">// 1、执行BeanDefinitionRegistryPostProcessor实现（该类型扩展自BeanFactoryPostProcessor），它的实现都是用于将Bean添加到容器的，所以该接口非常重要</span></span><br><span class="line">            <span class="comment">//  * ConfigurationClassPostProcessor：解析出@Configuration配置类的BeanDefinition（注意，解析并不是实例化）</span></span><br><span class="line">            <span class="comment">//  * ImportBeanDefinitionRegistrar：其实现用于注册自定义的BeanDefinition</span></span><br><span class="line">            <span class="comment">// 2、创建并注册自定义BeanPostProcessor</span></span><br><span class="line">            <span class="comment">//  * 注册时会通过BeanFactory.getBean()获取或创建（默认反射创建）</span></span><br><span class="line">            <span class="comment">// 3、触发依赖数据库的DependsOnDatabaseInitializationDetector</span></span><br><span class="line">            <span class="comment">//  其中之一就是AnnotationDependsOnDatabaseInitializationDetector，它会使用beanFactory.findAnnotationOnBean(beanName, DependsOnDatabaseInitialization.class) 找出所有的Repository对其进行实例化（将Repository接口实例化成JpaRepositoryFactoryBean）</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 非常重要</span></span><br><span class="line">            <span class="comment">// 执行InstantiationAwareBeanPostProcessor实现，它是Spring内部使用的BeanPostProcessor，用于特殊用途</span></span><br><span class="line">            <span class="comment">// 2. AutowiredAnnotationBeanPostProcessor：用于处理@Autowired、@Value、@Inject</span></span><br><span class="line">            <span class="comment">// 3. CommonAnnotationBeanPostProcessor：用于处理@Resource、@PreConstruct、@PostDestroy</span></span><br><span class="line">            <span class="comment">// 4. PersistenceBeanPostProcessor(JPA包)：用于处理@PersistenceContext</span></span><br><span class="line">            <span class="comment">// 5. AnnotationAwareAspectJAutoProxyCreator：用于查找切面类，判断是否需要生成AOP代理</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 国际化相关初始化</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 事件相关初始化</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这是一个模板方法，可以针对性地做些特殊处理</span></span><br><span class="line">            <span class="comment">// 此时bean还没有实例化</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册事件监听者到当前上下文中</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 【注】实例化非延时加载外的单例Bean</span></span><br><span class="line">            <span class="comment">// 默认实例化顺序的规则如下(可用@DependsOn修改)：</span></span><br><span class="line">            <span class="comment">// 1. 先实例化配置类</span></span><br><span class="line">            <span class="comment">// 2. 定义类配置类上的注解，譬如@EnableWebMvc、@Import之类</span></span><br><span class="line">            <span class="comment">// 3. 按照配置类的定义从上到下实。期间也会按需实例化，例如A依赖了B，者会先实例化B</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发布上下文刷启动事件</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="comment">// 异常处理...</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 容器启动完成后清理在启动期间产生的元数据</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="invokeBeanFactoryPostProcessors-解析出配置类"><a href="#invokeBeanFactoryPostProcessors-解析出配置类" class="headerlink" title="invokeBeanFactoryPostProcessors() - 解析出配置类"></a>invokeBeanFactoryPostProcessors() - 解析出配置类</h3><p>invokeBeanFactoryPostProcessors -&gt; invokeBeanFactoryPostProcessors -&gt;  invokeBeanDefinitionRegistryPostProcessors(ConfigurationClassPostProcessor) -&gt; postProcessBeanDefinitionRegistry</p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8BSingletonBean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/004.png"></p><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8BSingletonBean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/005.png"></p><h3 id="finishBeanFactoryInitialization-实例化Bean"><a href="#finishBeanFactoryInitialization-实例化Bean" class="headerlink" title="finishBeanFactoryInitialization() - 实例化Bean"></a>finishBeanFactoryInitialization() - 实例化Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化非延时加载外的单例Bean</span></span><br><span class="line">    beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beanFactory.preInstantiateSingletons()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回通过资源解析器解析配置（xml、class）得到的bean的名字</span></span><br><span class="line">    List&lt;String&gt; beanNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">    <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        <span class="comment">// 实例化条件：</span></span><br><span class="line">        <span class="comment">// 1、非抽象 2、非延时加载 3、单例</span></span><br><span class="line">        <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;   </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 情况1：Bean实例通过FactoryBean接口产生</span></span><br><span class="line">            <span class="keyword">if</span> (isFactoryBean(beanName)) &#123; </span><br><span class="line">                <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">                <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123; <span class="comment">// 譬如 JPA 中 Repository 接口</span></span><br><span class="line">                    <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;    </span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                    <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                        getBean(beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 情况2：其他</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>AbstractBeanFactory#doGetBean </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, <span class="meta">@Nullable</span> <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span><br><span class="line"><span class="params">                          <span class="meta">@Nullable</span> <span class="keyword">final</span> Object[] args, <span class="type">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> transformedBeanName(name);</span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先到容器中检查bean是否存在（存在表示已经创建并注册过）</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="literal">null</span> &amp;&amp; args == <span class="literal">null</span>) &#123;</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有父容器，且当前容器并没有该Bean的定义，则尝试在父容器中获取</span></span><br><span class="line">        <span class="type">BeanFactory</span> <span class="variable">parentBeanFactory</span> <span class="operator">=</span> getParentBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (parentBeanFactory != <span class="literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">RootBeanDefinition</span> <span class="variable">mbd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实例化Bean之前，先确保指定的依赖已经被实例化（@DependsOn）</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    getBean(dep);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 情况1：创建Singleton Bean</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> createBean(beanName, mbd, args); <span class="comment">// 创建Bean</span></span><br><span class="line">                &#125;);</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 情况2：创建Prototype Bean（当前不会被调用）</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;        </span><br><span class="line">                <span class="type">Object</span> <span class="variable">prototypeInstance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 其他scope的处理（如自定义的Scope）</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重：createBean() 实际会通过 AbstractAutowireCapableBeanFactory#doCreateBean 来创建，以下是去除多余代码后的主要逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">    <span class="comment">// Instantiate the bean.</span></span><br><span class="line">    <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果是Singleton bean，则先尝试在cache中获取</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        instanceWrapper = <span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1）创建bean实例</span></span><br><span class="line">    <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance(); <span class="comment">// bean实例</span></span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass(); <span class="comment">// bean实例对应的类型</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">  <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 重点注意</span></span><br><span class="line">        <span class="comment">// 这里会调用InstantiationAwareBeanPostProcessor（BeanPostProcessors）类型BeanPostProcessor进行预先处理，即找出依赖的相关信息然后放如BeanDefinition中，而并不会马上注入依赖。</span></span><br><span class="line">        <span class="comment">// InstantiationAwareBeanPostProcessor是Spring内部用的BeanPostProcessor，用于特殊用途。</span></span><br><span class="line">        <span class="comment">// 1）CommonAnnotationBeanPostProcessor</span></span><br><span class="line">        <span class="comment">// 2）AutowiredAnnotationBeanPostProcessor</span></span><br><span class="line">        applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">      mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">  <span class="comment">// 2）填充依赖</span></span><br><span class="line">    populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">  <span class="comment">// 3）初始化</span></span><br><span class="line">    exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    registerDisposableBeanIfNecessary(beanName, bean, mbd); <span class="comment">// 注册销毁逻辑</span></span><br><span class="line">    <span class="keyword">return</span> exposedObject; <span class="comment">// 暴露实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createBeanInstance() 内调用的是 AbstractAutowireCapableBeanFactory#createBeanInstance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> BeanWrapper <span class="title function_">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 在创建bean前先解析对应的类</span></span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建实例的方案 //////////////////////////</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 情况1：bean从Supplier中产生</span></span><br><span class="line">  <span class="comment">// context.registerBean(&quot;myService&quot;, MyService.class, () -&gt; new MyService());</span></span><br><span class="line">    Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">    <span class="keyword">if</span> (instanceSupplier != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况2：bean从工厂方法中产生（譬如@Bean标注在方法上）</span></span><br><span class="line">  <span class="comment">// 特别注意：此时因为还没进行属性填充，所以如果在new时手动指定了属性值</span></span><br><span class="line">  <span class="comment">// 而这个属性值又被@Value/@Autowired等Spring注解所标注，则在填充属性时手动指定的属性值就会被覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shortcut when re-creating the same bean...</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">resolved</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">autowireNecessary</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">                resolved = <span class="literal">true</span>;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况3：用构造器创建（譬如@Controller的Bean）</span></span><br><span class="line">    <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">    <span class="comment">// 构造器带有参数，实例化注入依赖</span></span><br><span class="line">        <span class="keyword">if</span> (autowireNecessary) &#123; </span><br><span class="line">            <span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 构造器无参实例化</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>instantiateUsingFactoryMethod() 内调用的是 ConstructorResolver#instantiate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">instantiate</span><span class="params">(String beanName, RootBeanDefinition mbd,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> Object factoryBean, Method factoryMethod, Object[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt;</span><br><span class="line">                <span class="built_in">this</span>.beanFactory.getInstantiationStrategy().instantiate(</span><br><span class="line">                        mbd, beanName, <span class="built_in">this</span>.beanFactory, factoryBean, factoryMethod, args),</span><br><span class="line">                <span class="built_in">this</span>.beanFactory.getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beanFactory.getInstantiationStrategy().instantiate(</span><br><span class="line">                mbd, beanName, <span class="built_in">this</span>.beanFactory, factoryBean, factoryMethod, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到 Singleton Bean 实例化逻辑位于 beanFactory.getInstantiationStrategy().instantiate()</li><li>目前 Spring 中实例化 Bean 的策略主有两种：<ul><li>SimpleInstantiationStrategy：采用反射进行实例化</li><li>CglibSubclassingInstantiationStrategy（默认）：通过 CGLIB 生成子类实例化（继承自SimpleInstantiationStrategy），即这时返回的是一个代理</li></ul></li></ul><p>关于InstantiationStrategy：InstantiationStrategy接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InstantiationStrategy</span> &#123;</span><br><span class="line">    <span class="comment">// 无参构造器方式</span></span><br><span class="line">    Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造器方式</span></span><br><span class="line">    Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner,</span></span><br><span class="line"><span class="params">            Constructor&lt;?&gt; ctor, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工厂方法方式</span></span><br><span class="line">    Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> Object factoryBean, Method factoryMethod, Object... args)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无参构造器方式 - SimpleInstantiationStrategy#instantiate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner)</span> &#123;</span><br><span class="line">    <span class="comment">// 不存在方法重写（方法注入）时，采用反射创策略，反之使用CGLIB</span></span><br><span class="line">    <span class="comment">// 特别注意：这里的方法重写不是Java中@Override，而是Spring中的lookup-method和replace-method</span></span><br><span class="line">    <span class="comment">// 1. lookup-method（@Lookup）用于将prototype依赖注入到一个singleton bean对应的getter中。如果不用lookup-method，则注入依赖时spring会将prototype依赖隐式转为singleton</span></span><br><span class="line">    <span class="comment">// 2. replaced-method 用于对bean的方法进行替换</span></span><br><span class="line">    <span class="keyword">if</span> (!bd.hasMethodOverrides()) &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Must generate CGLIB subclass.</span></span><br><span class="line">        <span class="keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有参构造器方式 - SimpleInstantiationStrategy#instantiate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner,</span></span><br><span class="line"><span class="params">                          <span class="keyword">final</span> Constructor&lt;?&gt; ctor, Object... args)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!bd.hasMethodOverrides()) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtils.instantiateClass(ctor, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner, ctor, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂方法方式 - SimpleInstantiationStrategy#instantiate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner,</span></span><br><span class="line"><span class="params">                          <span class="meta">@Nullable</span> Object factoryBean, <span class="keyword">final</span> Method factoryMethod, Object... args)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">priorInvokedFactoryMethod</span> <span class="operator">=</span> currentlyInvokedFactoryMethod.get();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        currentlyInvokedFactoryMethod.set(factoryMethod);</span><br><span class="line">        <span class="comment">// 执行工厂方法返回实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> factoryMethod.invoke(factoryBean, args);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            result = <span class="keyword">new</span> <span class="title class_">NullBean</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (priorInvokedFactoryMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">            currentlyInvokedFactoryMethod.set(priorInvokedFactoryMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            currentlyInvokedFactoryMethod.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="populateBean-填充依赖"><a href="#populateBean-填充依赖" class="headerlink" title="populateBean() - 填充依赖"></a>populateBean() - 填充依赖</h3><p>AbstractAutowireCapableBeanFactory#populateBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> BeanWrapper bw)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在填充依赖之前调用InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation实现的后处理器</span></span><br><span class="line">  <span class="comment">// 但默认并不会有任何副作用</span></span><br><span class="line">  <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!bp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取已经决定的注入的方式，即显示指定了用 by name（@Qualifier）或 by type</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">resolvedAutowireMode</span> <span class="operator">=</span> mbd.getResolvedAutowireMode();</span><br><span class="line">    <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        <span class="type">MutablePropertyValues</span> <span class="variable">newPvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>(pvs);</span><br><span class="line">        <span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">        <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">        <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasInstAwareBpps</span> <span class="operator">=</span> hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">needsDepCheck</span> <span class="operator">=</span> (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    PropertyDescriptor[] filteredPds = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pvs == <span class="literal">null</span>) &#123;</span><br><span class="line">            pvs = mbd.getPropertyValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 依赖注入逻辑 ///////////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="comment">// 通过 InstantiationAwareBeanPostProcessor#postProcessProperties 实现进行依赖注入</span></span><br><span class="line">      <span class="comment">// 譬如处理 @Autowired、@Value、@Inject 等注解会被 AutowiredAnnotationBeanPostProcessor 处理</span></span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">pvsToUse</span> <span class="operator">=</span> ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">                <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (filteredPds == <span class="literal">null</span>) &#123;</span><br><span class="line">                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                    &#125;</span><br><span class="line">                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                pvs = pvsToUse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="initializeBean-生命周期模板方法回调"><a href="#initializeBean-生命周期模板方法回调" class="headerlink" title="initializeBean() - 生命周期模板方法回调"></a>initializeBean() - 生命周期模板方法回调</h3><p>AbstractAutowireCapableBeanFactory#initializeBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 步骤1：回调特定的Aware接口方法</span></span><br><span class="line">    <span class="comment">// BeanNameAware -&gt; BeanClassLoaderAware -&gt; BeanFactoryAware</span></span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> bean;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    <span class="comment">// 步骤2：以下方法位于 AbstractAutowireCapableBeanFactory ，有以下功能</span></span><br><span class="line">    <span class="comment">// 1）回调ApplicationContextAware接口实现</span></span><br><span class="line">    <span class="comment">// 2）回调ServletContextAware接口实现</span></span><br><span class="line">    <span class="comment">// 3）回调BeanPostProcessor接口实现的前置方法（postProcessAfterInitialization）</span></span><br><span class="line">    <span class="comment">// 4）回调CommonAnnotationBeanPostProcessor处理@PostConstruct</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 步骤3：回调初始化方法</span></span><br><span class="line">    <span class="comment">// 1）回调通过InitializingBean#afterPropertiesSet实现的初始化方法</span></span><br><span class="line">    <span class="comment">// 2) 回调通过init-method指定的初始化方法</span></span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">                (mbd != <span class="literal">null</span> ? mbd.getResourceDescription() : <span class="literal">null</span>),</span><br><span class="line">                beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">// 步骤4：回调BeanPostProcessor接口实现的后置方法（postProcessAfterInitialization）</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractAutowireCapableBeanFactory#invokeInitMethods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, <span class="keyword">final</span> Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isInitializingBean</span> <span class="operator">=</span> (bean <span class="keyword">instanceof</span> InitializingBean);</span><br><span class="line">    <span class="comment">// 1）回调通过InitializingBean#afterPropertiesSet实现的初始化方法，如果有的话。</span></span><br><span class="line">    <span class="comment">// 注意，如果afterPropertiesSet方法被标注了@PostConstruct注解，则会提前执行而不是在这里执行</span></span><br><span class="line">    <span class="keyword">if</span> (isInitializingBean &amp;&amp; (mbd == <span class="literal">null</span> || !mbd.isExternallyManagedInitMethod(<span class="string">&quot;afterPropertiesSet&quot;</span>))) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1）回调通过init-method指定的初始化方法，如果有的话。</span></span><br><span class="line">    <span class="keyword">if</span> (mbd != <span class="literal">null</span> &amp;&amp; bean.getClass() != NullBean.class) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> mbd.getInitMethodName();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class="line">            !(isInitializingBean &amp;&amp; <span class="string">&quot;afterPropertiesSet&quot;</span>.equals(initMethodName)) &amp;&amp;</span><br><span class="line">            !mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">            invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bean生命周过程"><a href="#Bean生命周过程" class="headerlink" title="Bean生命周过程"></a>Bean生命周过程</h3><p><img src="/Spring%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90%E4%B9%8BSingletonBean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B/003.png"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="Order注解"><a href="#Order注解" class="headerlink" title="@Order注解"></a>@Order注解</h3><blockquote><p>作用</p></blockquote><p>控制同类型Bean的注入顺序或实例化顺序。</p><blockquote><p>案例</p></blockquote><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rating</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getRating</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Excellent</span> <span class="keyword">implements</span> <span class="title class_">Rating</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRating</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Good</span> <span class="keyword">implements</span> <span class="title class_">Rating</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRating</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(Ordered.LOWEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Average</span> <span class="keyword">implements</span> <span class="title class_">Rating</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRating</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RatingRetrieverUnitTest</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Rating&gt; ratings;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">givenOrder_whenInjected_thenByOrderValue</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThat(ratings.get(<span class="number">0</span>).getRating(), is(equalTo(<span class="number">1</span>)));</span><br><span class="line">        assertThat(ratings.get(<span class="number">1</span>).getRating(), is(equalTo(<span class="number">2</span>)));</span><br><span class="line">        assertThat(ratings.get(<span class="number">2</span>).getRating(), is(equalTo(<span class="number">3</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.baeldung.com/">baeldung</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Java探针和字节码框架来动态修改代码运行时行为</title>
      <link href="/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/"/>
      <url>/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><blockquote><p>是什么？</p></blockquote><ul><li><code>Java探针</code>其实就是指Java Agent，一种能够直接与 JVM 交互的代理</li><li>Java Agent能与JVM交互的前提是JVM本身支持JVM TI（<a href="https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html">JVM Tool Interface</a>）。这样说的原因是并非所有JVM都支持JVM TI，即JVM TI并不是规范</li><li>JVM TI 支持需要访问JVM状态的全部工具，包括但不限于：<code>性能分析</code>，<code>Debug调试</code>，<code>监控</code>，<code>线程分析</code>和<code>覆盖率分析</code>等等。从这点可以看出 JVM TI 是很强大的</li><li>Java从JDK5开始提供了实现Java Agent的API，位于<code>java.lang.instrument </code>包下</li></ul><blockquote><p>Java Agent与 JVM TI 的关系</p></blockquote><ul><li><p>Java Agent通过实现JVM TI的回调方法来获取或操作 JVM 的相关性信息</p><p><img src="/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/001.png"></p></li><li><p>Java Agent可以简单理解为是一段需要依附在主程序上的代码。目前的依附方式有两种（都属于本机内操作）</p><ul><li><p><strong>启动依附：</strong>即在启动主程序时指定Java Agent，通过<code>-javaagent:代理.jar[=参数]</code>设置（个认为这对于国内的小伙伴来说并不陌生，其实IDEA的破解包就是用它来实现的🌚）</p></li><li><p><strong>使用Attach API依附：</strong>该API位于 <code>tool.jar</code> 的<code>com.sun.tools.attach</code>包下。该方式可以实现动态依附，既即使主程序正在运行也可以操作</p><p><img src="/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/002.png"></p></li></ul></li></ul><blockquote><p>可能经过上面一番说明你依然感觉很困惑，但没关系，我们来看看Java Agent 的身影</p></blockquote><ul><li>热部署插件JRebel</li><li>懒人开发包Lombok</li><li>分布式链路追中服务的Java探针（例如SkyWalking和Pinpoint）</li><li>安全(不能改内容)且动态的Java跟踪工具 BTrace</li><li>阿里开源的在线分析诊断工具 Arthas</li><li>JDK自带的诊断工具，例如 Visual VM、JConsole、jmap</li><li>IDEA破解包…</li></ul><h2 id="Java-Agent实现"><a href="#Java-Agent实现" class="headerlink" title="Java Agent实现"></a>Java Agent实现</h2><h3 id="了解基本API"><a href="#了解基本API" class="headerlink" title="了解基本API"></a>了解基本API</h3><p>经过一番了解过后我想大家对 Java Agent 的情况已经略知一二了。接下来以案例的形式对 Java Agent 开发进行快速入门。案例分为两部分：</p><ul><li>第1部分，以<code>-javaagent</code>参数进行依附，模拟在不修改主程序源码情况下为目标类增加方法</li><li>第2部分，以<code>Attach API</code>进行依附，模拟主程序处于运行时，为目标织入环绕代码（类似于Spring AOP中的 @Around 功能）</li></ul><blockquote><p>在这之前先了解一下 Java Agent 的 jar 包结构：</p></blockquote><p><img src="/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/003.png"></p><ul><li><p>Agent class</p><p>实现了 JVM TI 回调方法的代理类，相当于普通程序的入口类(Main)。其中有两个回调方法可以实现，分别是：premain 和 agentmain，各自为 <code>-javaagent</code>依附和<code>Attach API</code>依附的入口方法</p><p><img src="/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/004.png"></p></li><li><p>Packaging</p><p>即包结构，如图所示需要创建 <code>META-INF/MANIFEST.MF</code>文件结构。其中 MANIFEST.MF 包含以下描述配置</p><ul><li>Agent-Class：实现了agentmain回调方法的入口类限定名</li><li>Premain-Class：实现了premain 回调方法的入口类限定名</li><li>Boot-Class-Path：依赖的路径，可以省略但需要将依赖一同编译进jar包</li><li>Can-Redefine-Classes：是否允许重新定义类，默认为false</li><li>Can-Retransform-Classes：是否允许替换类的字节码，默认为false</li></ul></li></ul><blockquote><p>JDK 5 开始提供的Instrumentation API</p></blockquote><p><img src="/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/005.png"></p><h3 id="不修改主程序源码情况下为目标类增加方法"><a href="#不修改主程序源码情况下为目标类增加方法" class="headerlink" title="不修改主程序源码情况下为目标类增加方法"></a>不修改主程序源码情况下为目标类增加方法</h3><h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于指定程序入口，如果不做以下操作运行需要使用-cp参数指定入口类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>wiki.td.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>主程序代码</p></blockquote><p>Person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;============ main ===========&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sam&quot;</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java-Agent实现-1"><a href="#Java-Agent实现-1" class="headerlink" title="Java Agent实现"></a>Java Agent实现</h4><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字节码框架Javassit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.26.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--            &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;version&gt;3.1.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">                &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                    &lt;archive&gt;</span></span><br><span class="line"><span class="comment">                        &lt;manifest&gt;</span></span><br><span class="line"><span class="comment">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span></span><br><span class="line"><span class="comment">                        &lt;/manifest&gt;</span></span><br><span class="line"><span class="comment">                        &lt;manifestEntries&gt;</span></span><br><span class="line"><span class="comment">                            &lt;Premain-Class&gt;wiki.td.Agent&lt;/Premain-Class&gt;</span></span><br><span class="line"><span class="comment">                            &lt;Agent-Class&gt;wiki.td.Agent&lt;/Agent-Class&gt;</span></span><br><span class="line"><span class="comment">                            &lt;Can-Redefine-Classes&gt;true&lt;/Can-Redefine-Classes&gt;</span></span><br><span class="line"><span class="comment">                            &lt;Can-Retransform-Classes&gt;true&lt;/Can-Retransform-Classes&gt;</span></span><br><span class="line"><span class="comment">                            &amp;lt;!&amp;ndash; 指定依赖的classpath &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">                            &amp;lt;!&amp;ndash; 如果不配置则启动时指定：java -classpath &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">                            &lt;Boot-Class-Path&gt;E:/ProgrammingEnvironment/maven/LocalRepository/org/javassist/javassist/3.26.0-GA/javassist-3.26.0-GA.jar&lt;/Boot-Class-Path&gt;</span></span><br><span class="line"><span class="comment">                        &lt;/manifestEntries&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/archive&gt;</span></span><br><span class="line"><span class="comment">                &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">            &lt;/plugin&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                1. 将依赖一同打包进jar（因为依赖会一起打包所以无需像maven-jar-plugin那样指定依赖的classpath）</span></span><br><span class="line"><span class="comment">                2. 指定 Premain-Class、Agent-Class、Can-Redefine-Classes、Can-Retransform-Classes</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">index</span>&gt;</span>true<span class="tag">&lt;/<span class="name">index</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>wiki.td.Agent<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>wiki.td.Agent<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 将当前项目的依赖一同打包进jar --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly-dir<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Java Agent实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动依附回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> agentArgs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========================= into premain =========================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;参数：&quot;</span> + agentArgs);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">PersonClassFileTransformer</span>(agentArgs), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attach API依附回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> agentArgs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">premain(agentArgs, inst);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClassFileTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String targetClassName;</span><br><span class="line"></span><br><span class="line">    PersonClassFileTransformer(String targetClassName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.targetClassName = targetClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">                            ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line"><span class="comment">// 修改类的限定名格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> className.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (targetClassName.equals(target)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标类</span></span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(classfileBuffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建一个新的方法，案例以toString为例</span></span><br><span class="line"><span class="comment">// 如果不重写toString，默认对象会用Object的toString，输出类容是限定名加十六进制地址</span></span><br><span class="line"><span class="comment">// 这里我们重载toString让其输出Person的name</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>()</span><br><span class="line">                        .append(<span class="string">&quot;public String toString() &#123; &quot;</span>)</span><br><span class="line">                        .append(<span class="string">&quot;return \&quot;name=\&quot; + this.name; &#125;&quot;</span>)</span><br><span class="line">                        .toString();</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">make</span> <span class="operator">=</span> CtNewMethod.make(method, ctClass);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将添加到类中（注意：如果是修改操作无需进行addMethod）</span></span><br><span class="line">                ctClass.addMethod(make);</span><br><span class="line">                <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打包并测试"><a href="#打包并测试" class="headerlink" title="打包并测试"></a>打包并测试</h4><p>未使用agent之前</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ java -jar hello.jar</span><br><span class="line">============ main ===========</span><br><span class="line">wiki.td.Person@75b84c92</span><br></pre></td></tr></table></figure><p>使用agent之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ java -javaagent:agent.jar=wiki.td.Person -jar hello.jar</span><br><span class="line">========================= into premain =========================</span><br><span class="line">参数：wiki.td.Person</span><br><span class="line">============ main ===========</span><br><span class="line">name=Sam</span><br></pre></td></tr></table></figure><h3 id="主程序处于运行时，为目标织入Around代码"><a href="#主程序处于运行时，为目标织入Around代码" class="headerlink" title="主程序处于运行时，为目标织入Around代码"></a>主程序处于运行时，为目标织入Around代码</h3><h4 id="主程序-1"><a href="#主程序-1" class="headerlink" title="主程序"></a>主程序</h4><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为检索不到tools的缘故，所以这里我硬编指定本地依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- attach api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>C:/Program Files/Java/jdk1.8.0_231/lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>主程序代码</p></blockquote><p>Person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好呀&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 让程序一直循环以便观察</span></span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Person</span>().sayHi();</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java-Agent实现-2"><a href="#Java-Agent实现-2" class="headerlink" title="Java Agent实现"></a>Java Agent实现</h4><blockquote><p>Java Agent实现（依赖和上面案例一样不变）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动依附回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> agentArgs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">        agentmain(agentArgs, inst)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attach API依附回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> agentArgs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========================= into agentmain =========================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;参数：&quot;</span> + agentArgs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allLoadedClasses.length; i++) &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> allLoadedClasses[i];</span><br><span class="line"><span class="comment">// 只往目标类织入代码</span></span><br><span class="line">            <span class="keyword">if</span> (clazz.getName().equals(agentArgs)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 添加转换器</span></span><br><span class="line">                    inst.addTransformer(<span class="keyword">new</span> <span class="title class_">PersonClassFileTransformer</span>(agentArgs), <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 用转换器重新转换类</span></span><br><span class="line">                    inst.retransformClasses(clazz);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClassFileTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String targetClassName;</span><br><span class="line"></span><br><span class="line">    PersonClassFileTransformer(String targetClassName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.targetClassName = targetClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">                            ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> className.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (targetClassName.equals(target)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取到类</span></span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(targetClassName);</span><br><span class="line"><span class="comment">// 获取到目标类的sayHi方法</span></span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;sayHi&quot;</span>);</span><br><span class="line"><span class="comment">// 在say之前和之后织入环绕代码</span></span><br><span class="line">                method.insertBefore(<span class="string">&quot;&#123; System.out.println(\&quot;----- agent before -----\&quot;); &#125;&quot;</span>);</span><br><span class="line">                method.insertAfter(<span class="string">&quot;&#123; System.out.println(\&quot;----- agent after -----\&quot;); &#125;&quot;</span>);</span><br><span class="line"><span class="comment">// 返回类的最终字节流</span></span><br><span class="line">                <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类（Attach-API操作）"><a href="#测试类（Attach-API操作）" class="headerlink" title="测试类（Attach API操作）"></a>测试类（Attach API操作）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 遍历所有vm进程来获取目标进程（代替手动jps查找）</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; vms = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vms.size(); i++) &#123;</span><br><span class="line">            <span class="type">VirtualMachineDescriptor</span> <span class="variable">descriptor</span> <span class="operator">=</span> vms.get(i);</span><br><span class="line">            <span class="comment">// 要求主程序为wiki.td.Main才进行attach</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;wiki.td.Main&quot;</span>.equals(descriptor.displayName())) &#123;</span><br><span class="line">                <span class="comment">// 往目标attach agent</span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">attach</span> <span class="operator">=</span> VirtualMachine.attach(descriptor.id());</span><br><span class="line">                <span class="comment">// 参数1：agent jar, 参数2：agent参数</span></span><br><span class="line">                attach.loadAgent(<span class="string">&quot;E:/ProgrammingEnvironment/workspace/IdeaProjects/agent/target/agent-1.0-jar-with-dependencies.jar&quot;</span>, <span class="string">&quot;wiki.td.Person&quot;</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">                attach.detach(); <span class="comment">// 20s后detach agent</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="/%E5%9F%BA%E4%BA%8EJava%E6%8E%A2%E9%92%88%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A1%8C%E4%B8%BA/006.gif"></p><p>OK~~~，这就完成了我们的无代码侵入aop操作了 </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jpda2/index.html">JVMTI 和 Agent 实现</a></li><li><a href="https://www.youtube.com/watch?v=tlcF8awgUEE">How to Create a Java Agent and Why Would You Need One?</a></li><li><a href="%5Bhttps://zh.wikipedia.org/wiki/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%5D(https://zh.wikipedia.org/wiki/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90)">性能分析</a></li><li><a href="https://www.smartik.net/2017/11/method-breakpoints-are-evil.html">Method Breakpoints are Evil</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jvmti/">基于 JVMTI 实现 Java 线程的监控</a></li></ul><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap中的位运算应用</title>
      <link href="/ConcurrentHashMap%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%BA%94%E7%94%A8/"/>
      <url>/ConcurrentHashMap%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>先前写过一篇针对 HashMap 源码进行浅析的文章，现在回看觉得内容实在有些简陋，所以借着最近时间比较充裕，打算记录一下自己对 JDK 1.8 后 ConcurrentHashMap 的一些理解。<br>位运算是计算机中最为高效的运算方式，如果你平时有翻阅源码的爱好那么肯定不难发现其实很多大神写的代码中的计算操作都是用位运算来完成的。因此接下来我们就从位运算的角度切入 ConcurrentHashMap 源码，分析一下在 ConcurrentHashMap 中位运算的应用。</p><h2 id="自定义初始化容量"><a href="#自定义初始化容量" class="headerlink" title="自定义初始化容量"></a>自定义初始化容量</h2><p>先前在Q群里看到有小伙伴说面试被问到一个这样的问题，就是如果将 ConcurrentHashMap 初始化容量设置为 10000，然后往里头存储 10000 个元素，问 ConcurrentHashMap 需要扩容几次？对于这样一个问题如果你没有阅读过源码你就很容易被引入坑里，因为一些人他只知道 ConcurrentHashMap 中加载因为 0.75 ，所以 10000 的容量实质只能存储 7500 个，因此需要扩容1次。但是实际情况真的是这样的？答案肯定是否定的，对于 ConcurrentHashMap 而言它的容量必须是2的n次幂，且n不能大于30。也就是说如果你设置初始化容量为 10000 的话，那么 ConcurrentHashMap 会先判断 10000 是不是2的n次幂，如果不是则将其转变为2的n次幂再作为初始化容量。当然，前提是传入的这个初始化值是大于或等于零且小于或等于 MAXIMUM_CAPACITY（1 &lt;&lt; 30，即2的30次幂）。</p><p>以下我们就承接着上面的问题来阅读以下初始化容量的构造方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY : <span class="comment">// 入参大于或等于最大容量的一半时，直接使用最大容量</span></span><br><span class="line">               <span class="comment">// 先扩容为原来的1.5配再加1，然后转化为2的n次幂</span></span><br><span class="line">               <span class="comment">// 重点注意：如果是 HashMap 则会直接转化为2的n次幂</span></span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>)); </span><br><span class="line">    <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>initialCapacity 必须大于或者等于0</li><li>如果 initialCapacity 大于或等于(MAXIMUM_CAPACITY &gt;&gt;&gt; 1)，则直接将其设置为MAXIMUM_CAPACITY。个人认为有如下原因：<ul><li>大于时，意味着 initialCapacity 有可能超过 MAXIMUM_CAPACITY 或者并不是2的n次幂，因此避免越界和减少计算操作而直接设置为 MAXIMUM_CAPACITY 会更加高效</li><li>等于时，如果 initialCapacity 等于 (MAXIMUM_CAPACITY &gt;&gt;&gt; 1)，其实意味着后续扩容只剩下有且仅有的1次，而且到了那个时候元素的数量庞大，扩容操作的代价可想而知，因此直接设置为 MAXIMUM_CAPACITY，可以减少扩容带来的性能损耗，效果更佳</li></ul></li><li>如果 initialCapacity 不符合上面的条件，既小于 (MAXIMUM_CAPACITY &gt;&gt;&gt; 1)，那么 initialCapacity 会增加为原来的 1.5 倍再加 1。操作是 initialCapacity + (initialCapacity &gt;&gt;&gt; 1) + 1，这里采用无符号右移的好处是当 initialCapacity 为基数时可以截断其小数位（例如7除2结果时3.5，而右移结果则是3。再加1后相当于是往上取整）。</li></ul><p>将 initialCapacity 扩容为原来的1.5配再加1后操作还没有完成，这时还需要将其结果转换为2的n次幂。操作如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> c - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这这个操作主要分为两部分：</p><ol><li>return 对上的操作，主要是将数值 c 的二进制最高位1后的所有0置换为1</li><li>return行，判断结果值 n 是否越界，大于或等于 MAXIMUM_CAPACITY 时则最终结果为MAXIMUM_CAPACITY。否则为 n + 1。</li></ol><blockquote><p>接下来是分析时间，我们分析一下 return 对上的操作是如何进行的。</p><p>现在假设传入的 initialCapacity 值为 10000。过程如下：</p></blockquote><p><strong>第一步：</strong>进入构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span> = <span class="number">15001</span></span><br></pre></td></tr></table></figure><p><strong>第二部：</strong>进行 return 对上的操作，即将数值的二进制最高位1后的所有0置换为1</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">int</span> <span class="string">n = c - 1;</span></span><br><span class="line"><span class="attr">n</span> = <span class="string">15001 - 1 = 15000</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment"># n |= n &gt;&gt;&gt; 1; 计算如下</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1010 1001 1000 = 15000补码</span></span><br><span class="line"><span class="attr">0001</span> <span class="string">1101 0100 1100 = 右移1位后</span></span><br><span class="line"><span class="attr">-------------------</span> <span class="string">或运算结果（或运算是00才为0）</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1111 1101 1100 = 16348      </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># n |= n &gt;&gt;&gt; 2; 计算如下</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1111 1101 1100 = 16348补码</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">1111 1111 0111 = 右移2位后</span></span><br><span class="line"><span class="attr">-------------------</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1111 1111 1111 = 16383</span></span><br><span class="line"><span class="comment"># 可以看到这个时候n值的二进制最高位1后的值已经全部为1，所以后续的操作结果都是16383，即不会再变化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># n |= n &gt;&gt;&gt; 2;  计算如下</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1111 1111 1111 = 16383补码</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0011 1111 1111 = 右移4位后</span></span><br><span class="line"><span class="attr">-------------------</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1111 1111 1111 = 16383 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># n |= n &gt;&gt;&gt; 8;</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1111 1111 1111 = 16383补码</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0011 1111 = 右移8位后</span></span><br><span class="line"><span class="attr">-------------------</span></span><br><span class="line"><span class="attr">0011</span> <span class="string">1111 1111 1111 = 16383 </span></span><br><span class="line"><span class="comment"># 省略...</span></span><br></pre></td></tr></table></figure><p>因此n的最终结果为：16383</p><p><strong>第三部：</strong>判断是否越界，并将n设置为2的n次幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span> = <span class="number">16384</span></span><br></pre></td></tr></table></figure><p>最后我们使用 debug 来验证我们的结果：</p><p><img src="/ConcurrentHashMap%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%BA%94%E7%94%A8/001.png"></p><p>好了，到这里我们就可以回答一下上面的那个面试题了。16384 乘 0.75 结果约为 12288，所以存储 10000 个元素是不会发生扩容的。</p><h2 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h2><p>哈希值对于散列表数据结构来说是至关重要的存在。这是因为元素要想存储到散列表时必须通过哈希值（也叫散列值）来确定自己的存储下标。因为这个缘故，所以大多数情况下要是我们要用散列表来存储自己编写的引用类型时都应该重写从 Object 类继承过来的 hashCode 和 equals 两个方法。</p><p>在讲解 hashCode 和 equals 两个方法之前我们先简单回顾一下什么是散列表。散列表也叫哈希表，一般数据结构表现为 数组 + 链表。但其实这只是一种常见实现而已（例如JDK1.8加入了红黑树），因为散列表在最理想的情况下仅仅只需要数组来实现即可，即这个时候的查询时间复杂度为O(1)，这是最理想的情况，但前提是数据足够离散。但是生活告诉我们很多情况都是事与愿违的，如果数据不够离散的话，那么元素使用哈希值来定位存储下标时就会出现一种叫”哈希冲突&#x2F;碰撞”的现象，既元素之间出现了相同的哈希值。出现这种情况的原因有3种：</p><ul><li>重复保存了同一个元素</li><li>不同元素间存在相同哈希值</li><li>大小值位运算导致哈希冲突（下面有案例）</li></ul><p>好了，我们已经回顾了散列表数据结构，还提到什么是”哈希冲突&#x2F;碰撞”。那么现在就说说 hashCode 和 equals 两个方法的作用：</p><ul><li>hashCode：获取实例的哈希值</li><li>equals：判断实例是否相同</li></ul><p>hashCode 和 equals 的关系是这样的，例如：Person A 和 Person B 的 hashCode 相等，既发生了哈希碰撞，这时散列表就会调用实例的 equals 方法来进一步判断 Person A 和 Person B 是不是同一个实例。这就为什么需要重写 hashCode 和 equals 方法的原因。也因为这样的缘故所以重写方法时需要重点注意，既如果两个实例进行 equals 操作返回 true 的话，那么他们的 hashCode 肯定是相等的，反之不然。</p><p>至此，该回顾的内容我们都已经回顾了，接下来是时候看看 ConcurrentHashMap 中它是如何使用位运算来优化元素实例的哈希值的。我们从它的 put 方法开始观察，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在存储元素时它先获取了元素自身的 hashCode 值，然后传递给了 spread 方法。对于 spread 而言，它的主要功能有两个：</p><ol><li>降低元素的哈希冲突</li><li>将元素的负哈希值改为正</li></ol><p>以下为 spread 方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">spread</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一步：</strong>h ^ (h &gt;&gt;&gt; 16)</p><p>首先需要知道的是 hashCode 它是一个int类型的数值（即32位）。这里无符号右移16位的意思就是将高16位挪到低16位位置中，这样做的目的是降低哈希冲突。因为散列表下标计算公式为：h &amp; (n-1) ，而 n 的最大值为 2 的 30 次方（散列表最大容量），但又因为 hashCode 是一个32位的int类型，其最大值是 2 的 31 次方减1，因此存在 h 远大于 (n-1) 的情况（如h值体验的高位中），这是如果不做任何处理的话就会加大哈希冲突率。举个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 例如有两个哈希值a 和 b，分别如下：</span><br><span class="line">#    <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = a</span><br><span class="line">#    <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = b</span><br><span class="line"># 可以看到a和b的低<span class="number">16</span>位是相同的，而高<span class="number">16</span>位是存在差异的。</span><br><span class="line"># 接下来以HashMap默认容量值<span class="number">16</span>为例子，计算一下a和b的存储下标位置：</span><br><span class="line">a:</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> = <span class="number">16</span> - <span class="number">1</span>，高位以<span class="number">0</span>补全</span><br><span class="line">        &amp;</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = a</span><br><span class="line">---- 结果</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = 下标<span class="number">2</span></span><br><span class="line"></span><br><span class="line">b:</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span> = <span class="number">16</span> - <span class="number">1</span>，高位以<span class="number">0</span>补全</span><br><span class="line">        &amp;</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = b</span><br><span class="line">---- 结果</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = 下标同样为<span class="number">2</span>    </span><br></pre></td></tr></table></figure><p>从例子中可以看到，a和b本身并不相同，但结果却一样。既当两个哈希值高位不同但低位相同时，且与值也小时（如16-1），就容易发生了哈希冲突现象。而 h ^ (h &gt;&gt;&gt; 16) 就是解决这个问题的。</p><p>接下来我们还是使用上面a和b这两个值来进行一次 h ^ (h &gt;&gt;&gt; 16) 验证，证实一下是不是上面所说的那样可以解决上面的冲突问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">原值</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = a</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = b</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="number">16</span> 后</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span> = a</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> = b</span><br><span class="line"></span><br><span class="line">^（同为假，异位真） 后</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> = a <span class="comment">// 相当于原基础上加了8</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0010</span> = b</span><br></pre></td></tr></table></figure><p>经过计算后可以看到 a 的低位变成了1010，而b则原封不动还是0010，因此可以证实时可以减轻冲突现象的。</p><p><strong>第二步：</strong>h ^ (h &gt;&gt;&gt; 16) &amp; HASH_BITS</p><p>HASH_BITS 的值为 0x7fffffff（Integer.MAX_VALUE）。该值的二进制位 <code>0111 1111 1111 1111 1111 1111 1111 1111</code>。因此负数<code>&amp;</code>上 0x7fffffff 就会变为正数。</p><h2 id="LastRun高低位机制"><a href="#LastRun高低位机制" class="headerlink" title="LastRun高低位机制"></a>LastRun高低位机制</h2><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p>LastRun机制是用来提高 ConcurrentHashMap 的扩容（rehash）效率的，主要体现在它可以减少扩容时需要重新计算散列表下标值的工作量。但需要注意的是 LastRun 机制在 JDK1.7 和 JDK1.8 两个版本中是存在差异的。</p><p>对于高低位机制的理解，个人认为应该溯源到 JDK1.7 的 HashMap 身上，因为高低位机制解决了 HashMap 并发扩容后 get 操作的死循环问题（实在不太理解为什么会有人用多线程并发操作HashMap，真是黑人问号.jpg）。那么这个问题的点位于 JDK1.7 版 HashMap 的 transfer 方法中，源码如下：</p><blockquote><p>java.util.HashMap</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">    table = newTable; <span class="comment">// 注意：这里需要先迁移完才会切断OldTable的引用释放空间</span></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Entry[] newTable, <span class="type">boolean</span> rehash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> newTable.length;</span><br><span class="line">  <span class="comment">// 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123; </span><br><span class="line">      <span class="comment">// 遍历冲突链表</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">null</span> != e) &#123; <span class="comment">// 关键变量 e（开始时为冲突链表头节点）和 next</span></span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123; <span class="comment">// 正处于rehash操作</span></span><br><span class="line">              <span class="comment">// 只有key不为null才进行rehash</span></span><br><span class="line">                e.hash = <span class="literal">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 计算新下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(e.hash, newCapacity);</span><br><span class="line">            <span class="comment">// 头插法问题代码</span></span><br><span class="line">            e.next = newTable[i]; <span class="comment">// 1、先将冲突链表接到e下</span></span><br><span class="line">            newTable[i] = e; <span class="comment">// 2、将e放到槽的第一个位置，即成为链头</span></span><br><span class="line">            e = next; <span class="comment">// 下一个节点循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么为什么会导致死循环呢？我用图片来解释下死循环是如何发生的，如下：</p><p><img src="/ConcurrentHashMap%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%BA%94%E7%94%A8/002.png"></p><p>好了，现在我们知道了 JDK1.7 的 HashMap 并发扩容时会导致 get 死循环问题后我们再看看 JDK1.8 中 HashMap 是如何解决这个问题的，迁移源码如下：</p><blockquote><p>java.util.HashMap#resize</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>; <span class="comment">// 低位链表，即这条链表的</span></span><br><span class="line">Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代冲突链表</span></span><br><span class="line"><span class="keyword">do</span> &#123; </span><br><span class="line">    next = e.next; <span class="comment">// 记录下一个迭代节点</span></span><br><span class="line">    <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123; <span class="comment">// 等于0，表示两个二进制并没有1的相同位</span></span><br><span class="line">      <span class="comment">// 将相同情况的节点连接起来，组成低位链表</span></span><br><span class="line">        <span class="keyword">if</span> (loTail == <span class="literal">null</span>) </span><br><span class="line">            loHead = e;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            loTail.next = e;</span><br><span class="line">        loTail = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// 两个二进制有相同的1位</span></span><br><span class="line">      <span class="comment">// 将相同情况的节点连接起来，组成高位链表</span></span><br><span class="line">        <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">            hiHead = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hiTail.next = e;</span><br><span class="line">        hiTail = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">    loTail.next = <span class="literal">null</span>;</span><br><span class="line">    newTab[j] = loHead; <span class="comment">// 直接放在新表相同的位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">    hiTail.next = <span class="literal">null</span>;</span><br><span class="line">    newTab[j + oldCap] = hiHead; <span class="comment">// 放在下标=旧表位置+旧表容量的位置</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>可以看到，相较于JDK1.7而言，JDK1.8并没有直接操作e.next变量。除了e和next之外 JDK1.8 还新增了4个变量值：</p><ul><li>记录低位节点：loHead、loTail</li><li>记录高位节点：hiHead、hiTail。</li></ul><p>那么它是如何解决循环引用问题的呢？如果你有认真看上面那张循环引用分析图的话其实很容易就能得出答案。JDK 1.7之所以并发扩容会导致循环引用，主要是因为使用了头插法后直接操作变量e所导致的，因为这样会导致原来的A-&gt;B引用转换为B-&gt;A，那么多线程并发操作时就会存在循环引用的隐患。JDK 1.8后改为采用尾插法之余还新增了4个变量来避免直接操作变量e，也就是说不存在将A-&gt;B引用转换为B-&gt;A的情况。具体迁移步骤是先用hiHead和loHead按原来顺序拼接成两条链表，等拼接完后再一次设置到新散列表中。但需要强调的是，即使 JDK 1.8 的 HashMap 解决了循环引用的问题，但它依然是非线程安全的。例如在并发拼接链表时节点的next指向会被修改，这样一来就可能会直接导致其它线程拼装链表时丢失某部分节点，所以如果是多线程环境的话还是需要使用线程安全的 ConcurrentHashMap 才能保证安全。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>接下来将视角切换到 JDK 1.8 的 ConcurrentHashMap 中。先了解一个 ConcurrentHashMap 扩容时是如何使用 LastRun 高低位机制的。迁移源码如下：</p><blockquote><p>java.util.concurrent.ConcurrentHashMap#transfer</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tabAt(tab, i) == f) &#123; <span class="comment">// 普通节点</span></span><br><span class="line">    Node&lt;K,V&gt; ln, hn;</span><br><span class="line">  <span class="comment">// n：当前散列表容量</span></span><br><span class="line">  <span class="comment">// fh：当前节点的哈希值</span></span><br><span class="line">  <span class="comment">// runBit：用于判断高低位</span></span><br><span class="line">    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">// 表示节点不为空（null值的哈希值为0）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">runBit</span> <span class="operator">=</span> fh &amp; n; </span><br><span class="line">        Node&lt;K,V&gt; lastRun = f; <span class="comment">// 预定义LastRun为整条冲突链表</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> p.hash &amp; n;</span><br><span class="line">          <span class="comment">// 迭代出LastRun位置（判断依据是runBit存在差异）</span></span><br><span class="line">          <span class="comment">// 得到的结果是，从LastRun这个节点位置往后都是同一种情况的节点（即b=0或n!=0）</span></span><br><span class="line">            <span class="keyword">if</span> (b != runBit) &#123; </span><br><span class="line">                runBit = b; <span class="comment">// 注意：如果runBit存在差异，证明在迁移后当前冲突链表需要拆分</span></span><br><span class="line">                lastRun = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123; <span class="comment">// 低位</span></span><br><span class="line">            ln = lastRun;</span><br><span class="line">            hn = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 高位</span></span><br><span class="line">            hn = lastRun;</span><br><span class="line">            ln = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拼装高低位链表，只需迭代到lastRun即可</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123; </span><br><span class="line">            <span class="type">int</span> <span class="variable">ph</span> <span class="operator">=</span> p.hash; <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key; <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> p.val;</span><br><span class="line">            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>) <span class="comment">// 低位</span></span><br><span class="line">                ln = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 高位</span></span><br><span class="line">                hn = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">        &#125;</span><br><span class="line">        setTabAt(nextTab, i, ln); <span class="comment">// 低位链表迁移无需修改下标</span></span><br><span class="line">        setTabAt(nextTab, i + n, hn); <span class="comment">// 高位链表新下标 = 当前下标 + OldTable.length</span></span><br><span class="line">        setTabAt(tab, i, fwd); </span><br><span class="line">        advance = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可能跟随着上面注释的步伐一时之间还是不明白 LastRun 到底在哪里降低了下标值的计算工作。所以我又画了一张图来帮助理解：</p><p><img src="/ConcurrentHashMap%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E5%BA%94%E7%94%A8/003.png"></p><p>首先其巧妙之处是使用<code>runBit = fh &amp; n </code>来区分高低位以确定节点迁移的新下标值。而runBit的结果只有两种：</p><ul><li>等于0，迁移后 newIndex &#x3D; oldIndex</li><li>非0，迁移后 newIndex &#x3D; oldIndex + old</li></ul><p>其实一开始看源码的时候我自己是十分困惑的。我的疑问是，为什么可以这样确定新下标值，感觉很是神奇。Google了一番都没有得到结果。后来我使用位运算来模拟计算，同时进行猜想和验证：</p><p><strong>首先验证的问题：</strong>当runBit值为非0时 newIndex &#x3D; oldIndex + old。过程如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lastRun操作：table.length &amp; h</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># lastRun操作：16 &amp; 2070812441(哈希值)</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0001 0000 = 16</span></span><br><span class="line"><span class="attr">&amp;</span></span><br><span class="line"><span class="attr">0111</span> <span class="string">1011 0110 1110 0001 0111 0001 1001 = 2070812441。因为两个都是正数，所以原码就是补码</span></span><br><span class="line"><span class="attr">------</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0001 0000 = 16 </span></span><br><span class="line"><span class="comment"># runBit值不等于0，因此newIndex应该是等于 oldIndex + oldLength</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 而节点当前下标位置：(16-1) &amp; 2070812441</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0000 1111 = 15</span></span><br><span class="line"><span class="attr">&amp;</span></span><br><span class="line"><span class="attr">0111</span> <span class="string">1011 0110 1110 0001 0111 0001 1001 = 2070812441</span></span><br><span class="line"><span class="attr">------</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0000 1001 = 当前下标值为9</span></span><br><span class="line"><span class="comment"># 所以在runBit值为非零的理论基础上，扩容后newIndex应该为 9+16 = 25</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 验证上面的问题</span></span><br><span class="line"><span class="comment"># 散列表扩容后节点的新下标：(32-1) &amp; 2070812441</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0001 1111 = 31</span></span><br><span class="line"><span class="attr">&amp;</span></span><br><span class="line"><span class="attr">0111</span> <span class="string">1011 0110 1110 0001 0111 0001 1001 = 2070812441</span></span><br><span class="line"><span class="attr">------</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0001 1001 = 结果是25</span></span><br><span class="line"><span class="comment"># 因此验证了当runBit值为非零时 newIndex = oldIndex + old 是成立的</span></span><br></pre></td></tr></table></figure><p><strong>证实猜想：</strong>如果runBit等于0，那么扩容前后下标( hash&amp;(n-1) )值不变</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LastRun判断为0案例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># LastRun：16 &amp; 2070812457</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0001 0000 = 16</span></span><br><span class="line"><span class="attr">&amp;</span></span><br><span class="line"><span class="attr">0111</span> <span class="string">1011 0110 1110 0001 0111 0010 1001 = 2070812457</span></span><br><span class="line"><span class="attr">------</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0000 0000 = 0，既runBit值为0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 而节点当前下标位置：(16-1) &amp; 2070812457</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0000 1111 = 16-1</span></span><br><span class="line"><span class="attr">&amp;</span></span><br><span class="line"><span class="attr">0111</span> <span class="string">1011 0110 1110 0001 0111 0010 1001 = 2070812457</span></span><br><span class="line"><span class="attr">------</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0000 1001 = 9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 散列表扩容后节点的新下标：(32-1) &amp; 2070812457</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0001 1111 = 32-1</span></span><br><span class="line"><span class="attr">&amp;</span></span><br><span class="line"><span class="attr">0111</span> <span class="string">1011 0110 1110 0001 0111 0010 1001 = 2070812457</span></span><br><span class="line"><span class="attr">------</span></span><br><span class="line"><span class="attr">0000</span> <span class="string">0000 0000 0000 0000 0000 0000 1001 = 9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 可以看到当runBit值为0时，节点迁移前后的下标确实没有变化</span></span><br></pre></td></tr></table></figure><p>感到神奇。😃</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从IO模型到事件驱动</title>
      <link href="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/"/>
      <url>/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>前段时间阅读了部分 Netty 4 的源码，但当时并没有趁热打铁地将理解过程记录下来，以至于现在忘得七七八八。起初阅读 Netty 源码的原因是想知道它为什么高效，因为在 <code>Spring Web Flux</code> 和 <code>Spring Cloud Gateway</code> 中都看到了它的身影。虽然自己以前在公司项目中使用过 Netty 来实现功能，但是我个人很清楚，会用和懂其实是两种截然不同的境界。通常会用技术的人很多但真正懂技术的人却是少数，所以学习技术应该尽量做到知其然而知其所以然，亦只有这样才能在众多同行中增大自己的核心竞争力。</p><p>除此之外，个人对学习技术也有一定的看法。譬如我认为技术都是万变不离其宗的，所以学习技术应该要抓住根本。例如 Java 生态中开源技术繁多，所以我们不太可能将它们每一个都弄得透彻，但它们的根本是相同的，即都是 <code>JavaSE</code>、<code>设计模式</code>、<code>数据结构</code>的堆砌。所以接下来本文并不是要聊 Netty，而是 Netty 的本质，即<code>IO模型</code>和<code>事件驱动</code>。</p><p>在类 Unix 系统中 IO 模型分别有<code>阻塞IO</code>、<code>非阻塞IO</code>、<code>复用IO</code>、<code>信号驱动IO</code>、<code>异步IO</code> 5 种，它们各有各的特点，没有好坏之分。而谈到事件驱动的话，如果没有记错第一次接触到这个词是很久以前我学习 Node.js 时看到的，因为 Node.js 的三大特性之一就是事件驱动。当时其实很好奇，主要是想知道事件是如何产生及何时被回调函数处理的，但这个疑问一直等到看了 Netty 源码后才变得明朗。例如在 Netty 中采用的是 Reactor 模式实现的事件驱动处理（Node.js、Readis、Nginx、Memcache 等也是），而除了 Reactor 之外还可以通过 Proactor 来实现，两者的区别在于前者是 <code>复用IO</code> 后者是 <code>异步IO</code>，但目前 Linux 对异步 IO 模型支持较差，所以 Java 的 AIO 其实也是采用复用 IO 来实现的。</p><h2 id="IO的5种模型"><a href="#IO的5种模型" class="headerlink" title="IO的5种模型"></a>IO的5种模型</h2><p>有关Linux的系统调用，可参考 syscalls.h</p><h3 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h3><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/001.png"></p><p>2）特点</p><ul><li>IO 操作全程阻塞</li><li>在低并发 IO 密集型场景，阻塞可有效减少不必要的用户态内核态切换，所以能够一定程度地提高人物线程的处理效率</li><li>过程中用户程序只需进行一次系统调用</li><li>为了解决用户程序处理阻塞问题，需要为每个套接字分配独立的一条处理线程</li><li>不适合高并发场景，例如如下：<ul><li>阻塞会导致吞吐量下降</li><li>多线程会导致大量 CPU 上下文切换从而导致线程处理能力下降，效率不佳</li></ul></li></ul><p>3）阻塞IO例子：Java BIO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 多线程实现伪异步，解决同步处理阻塞问题</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">    System.out.println(<span class="string">&quot;服务端开启监听端口：&quot;</span> + port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 接收客户端连接</span></span><br><span class="line">      <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">      <span class="comment">// 处理客户端请求</span></span><br><span class="line">      service.submit(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">          String content;</span><br><span class="line">          <span class="keyword">while</span> ((content = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(socket.getInetAddress().getHostAddress() + <span class="string">&quot;-客户端：&quot;</span> + content);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步非阻塞IO"><a href="#同步非阻塞IO" class="headerlink" title="同步非阻塞IO"></a>同步非阻塞IO</h3><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/002.png"></p><p>2）特点</p><ul><li>IO操作无需阻塞</li><li>用户程序需要主动轮询来判断是否有就绪文件描述符</li><li>过程中用户程序需要 n 次系统调用</li><li>不适合高并发场景，例如如下：<ul><li>用户程序需要主动轮询，高并发场景会导致 CPU 使用率极速上升而导致程序卡顿</li><li>因为无法逃避主动轮询，所以和阻塞IO一样需要为每个套接字分配独立的一条处理线程</li></ul></li><li>虽然 IO 操作无需阻塞，但优势并不明显，个人认为甚至有些鸡肋，所以很少见会有程序直接使用非阻塞 IO 模型</li></ul><h3 id="复用IO"><a href="#复用IO" class="headerlink" title="复用IO"></a>复用IO</h3><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/003.png"></p><p>2）特点</p><ul><li>可以将复用 IO 理解为非阻塞 IO 的升级版</li><li>复用 IO 相当于将非阻塞 IO 的主动轮询操作迁移到了内核中进行，这样大大减少了系统调用带来的消耗</li><li>IO 操作一般情况下只会在 Selector 多路复用器上发生短暂的阻塞</li><li>过程中用户程序需要 2 次系统调用</li><li>多路复用器可以用 select&#x2F;poll&#x2F;epoll&#x2F;kqueue 等方案实现，而在 Linux 中 epoll 效率最佳，所以一般只要提到复用 IO 的话基本上都是采用 epoll 实现的</li><li>适合高并发场景，理由如下：<ul><li>IO 操作阻塞短暂</li><li>一条线程可以同时处理多个用户请求（负责注册感兴趣事件），大大降低了 CPU 资源竞争消耗</li></ul></li></ul><p>3）复用 IO 例子：Java NIO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 多线程，模拟单Reactor多线程事件驱动模型</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">    server.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8888</span>));</span><br><span class="line">    server.configureBlocking(<span class="literal">false</span>); <span class="comment">// 非阻塞模式</span></span><br><span class="line">    <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open(); <span class="comment">// 监听器（epoll）</span></span><br><span class="line">    server.register(selector, SelectionKey.OP_ACCEPT); <span class="comment">// 注册感兴趣事件</span></span><br><span class="line">    System.out.println(<span class="string">&quot;服务端开启监听端口：&quot;</span> + server.socket().getLocalPort());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">      selector.select(<span class="number">1000</span>); <span class="comment">// timeout - epoll_wait</span></span><br><span class="line">      Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator(); <span class="comment">// 就绪事件</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        iterator.remove(); <span class="comment">// 表示及时处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!key.isValid()) <span class="keyword">return</span>; <span class="comment">// 无效事件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接事件</span></span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">          <span class="type">ServerSocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (ServerSocketChannel)key.channel();</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">socket</span> <span class="operator">=</span> channel.accept();</span><br><span class="line">            socket.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            socket.register(selector, SelectionKey.OP_READ);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读事件</span></span><br><span class="line">        <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">          service.submit(() -&gt; &#123; <span class="comment">// 异步操作</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">socket</span> <span class="operator">=</span> (SocketChannel)key.channel();</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> socket.read(buffer); <span class="comment">// 系统调用</span></span><br><span class="line">              <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123; <span class="comment">// 只处理大于0的情况（不处理异常 和 EOF）</span></span><br><span class="line">                buffer.flip(); <span class="comment">// 将指针归0</span></span><br><span class="line">                <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[buffer.remaining()];</span><br><span class="line">                buffer.get(buff); <span class="comment">// 将内容保存到buff</span></span><br><span class="line">                System.out.println(socket.getLocalAddress() + <span class="string">&quot;-客户端：&quot;</span> +</span><br><span class="line">                                   <span class="keyword">new</span> <span class="title class_">String</span>(buff).replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Selector 多路复用器实现（内核版本：linux-5.4.81）</p><p>1）select 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件位置：/usr/include/bits/typesizes.h</span></span><br><span class="line"><span class="comment">// 之所以默认为1024（以进程为单位）是因为内核开发者认为已经足够了，虽然你可以增大该值，但增大该值也不会提高处理性能，因为select会随着文件描述符数增多则性能下降，其时间复杂度为O(n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FD_SETSIZE            1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件位置：/usr/include/sys/select.h</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">int</span> __fd_mask; <span class="comment">// </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    __fd_mask fds_bits[__FD_SETSIZE / __NFDBITS];</span><br><span class="line">    __fd_mask __fds_bits[__FD_SETSIZE / __NFDBITS];</span><br><span class="line">&#125; fd_set;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件位置：fs/select.c</span></span><br><span class="line"><span class="comment">// 过程：由内核先轮询感兴趣的事件集，有就绪文件描述符、超时、收到信号就返回</span></span><br><span class="line"><span class="comment">// 参数1：当前监听的最大文件描述符</span></span><br><span class="line"><span class="comment">// 参数2：感兴趣的可读文件描述符集合（数组）</span></span><br><span class="line"><span class="comment">// 参数3：感兴趣的可写文件描述符集合（数组）</span></span><br><span class="line"><span class="comment">// 参数4：感兴趣的异常文件描述符集合（数组）</span></span><br><span class="line"><span class="comment">// 参数5：等待超时时间</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">kern_select</span><span class="params">(<span class="type">int</span> n, fd_set __user *inp, fd_set __user *outp,</span></span><br><span class="line"><span class="params">       fd_set __user *<span class="built_in">exp</span>, <span class="keyword">struct</span> timeval __user *tvp)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"><span class="comment">// 返回就绪文件描述符数量</span></span><br><span class="line">    <span class="comment">// core_sys_select -&gt; do_select</span></span><br><span class="line">ret = core_sys_select(n, inp, outp, <span class="built_in">exp</span>, to);</span><br><span class="line">    <span class="comment">// 存在就绪文件描述符时返回大于0的值，超时返回0，异常返回-1</span></span><br><span class="line"><span class="keyword">return</span> poll_select_finish(&amp;end_time, tvp, PT_TIMEVAL, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>无状态，因为 fd_set 只有一个字段用来记录关注和就绪的事件，所以每次调用都会导致 fd_set 初始化，即相当于每次调用 select 都需要将感兴趣的文件描述符内容重新拷贝到内核</li><li>正常情况下，只要<strong>有就绪的文件描述</strong>符或 <strong>select 超时</strong>就会<strong>返回就绪文件描述符数量</strong>，但返回后需要再轮询集合找出具体的文件描述符，所以随着文件描述符（连接数）增多而效率会降低</li><li>因为随着文件描述符（连接数）增多而会导致效率下降，所以通常单条进程 select 时的最大感兴趣文件描述符数量会受到限制，一般为 2014（FD_SETSIZE），可以执行 <code>ulimit -n</code> 查看。所以 select 在并发能力上是存在局限性的</li></ul><p>2）poll 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位置：poll.h</span></span><br><span class="line"><span class="comment">// 特别注意，poll其实和select差不多，但它用单向链表解决了文件描述符数量上的限制</span></span><br><span class="line"><span class="comment">// 且感兴趣文件描述符集合和就绪描述符集合由两个不同的变量存储，而select只用一个fd_set（long数组）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line"><span class="type">int</span> fd; <span class="comment">// 文件描述符</span></span><br><span class="line"><span class="type">short</span> events; <span class="comment">// 感兴趣文件描述符集合</span></span><br><span class="line"><span class="type">short</span> revents; <span class="comment">// 就绪描述符集合</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poll_list</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poll_list</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">entries</span>[0];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件位置：fs/select.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">do_poll</span><span class="params">(<span class="keyword">struct</span> poll_list *<span class="built_in">list</span>, <span class="keyword">struct</span> poll_wqueues *wait,</span></span><br><span class="line"><span class="params">   <span class="keyword">struct</span> timespec64 *end_time)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">for</span> (walk = <span class="built_in">list</span>; walk != <span class="literal">NULL</span>; walk = walk-&gt;next) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">for</span> (; pfd != pfd_end; pfd++) &#123;</span><br><span class="line"><span class="keyword">if</span> (do_pollfd(pfd, pt, &amp;can_busy_loop,busy_flag)) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> (count || timed_out)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 存在就绪文件描述符时返回大于0的值，超时返回0，异常返回-1</span></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>和 select 相比，仍然是无状态，因为在每次系统调用时还是需要将所有感兴趣的文件描述符重新拷贝到内核，但 poll 还是相对于 select 有所优化的， 譬如使用链表代替了数组来解决单进程文件描述符数量限制问题，以及将感兴趣和就绪集合分开从而避免了不必要的初始化操作</li><li>返回的依然是就绪文件描述符的数量，所以还是需要重新轮询集合得到具体的文件描述符，即时间复杂度和 select 一样是 O(n)</li></ul><p>3）epoll 函数</p><p>epoll 和 select、poll 不一样，它其实有三个函数：epoll_create、epoll_ctl、epoll_wait，而且 epoll 内部是基于事件驱动的。</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/006.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件位置: fs/eventpoll.c</span></span><br><span class="line"><span class="comment">// 文件描述符结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// epoll操作的等待队列</span></span><br><span class="line"><span class="type">wait_queue_head_t</span> wq;</span><br><span class="line"><span class="type">wait_queue_head_t</span> poll_wait;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 就绪的文件描述符</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">rdllist</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树（根节点）数据结构</span></span><br><span class="line"><span class="comment">// 用于有状态的缓存感兴趣的文件描述符</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rb_root_cached</span> <span class="title">rbr</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">mtx</span>;</span></span><br><span class="line"><span class="type">rwlock_t</span> lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">ovflist</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wakeup_source</span> *<span class="title">ws</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line">u64 gen;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NET_RX_BUSY_POLL</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> napi_id;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// epoll_create操作</span></span><br><span class="line"><span class="comment">// 初始化内存数据结构</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">do_epoll_create</span><span class="params">(<span class="type">int</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> error, fd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在内存中创建eventpoll数据结构</span></span><br><span class="line">error = ep_alloc(&amp;ep);</span><br><span class="line"><span class="keyword">if</span> (error &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// epoll_ctl操作</span></span><br><span class="line"><span class="comment">// 用于对epoll内存数据结构进行，新增节点、修改节点、更新节点</span></span><br><span class="line">SYSCALL_DEFINE4(epoll_ctl, <span class="type">int</span>, epfd, <span class="type">int</span>, op, <span class="type">int</span>, fd,</span><br><span class="line"><span class="keyword">struct</span> epoll_event __user *, event) &#123;</span><br><span class="line"><span class="type">int</span> error;</span><br><span class="line"><span class="type">int</span> full_check = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>, <span class="title">tf</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epds</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">tep</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">error = -EFAULT;</span><br><span class="line"><span class="comment">// 将用户空间感兴趣的epoll时间拷贝到内核态中</span></span><br><span class="line"><span class="keyword">if</span> (ep_op_has_event(op) &amp;&amp;</span><br><span class="line">    copy_from_user(&amp;epds, event, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> epoll_event)))</span><br><span class="line"><span class="keyword">goto</span> error_return;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增、删、改</span></span><br><span class="line">error = -EINVAL;</span><br><span class="line"><span class="keyword">switch</span> (op) &#123;</span><br><span class="line"><span class="keyword">case</span> EPOLL_CTL_ADD:</span><br><span class="line"><span class="keyword">if</span> (!epi) &#123;</span><br><span class="line">epds.events |= EPOLLERR | EPOLLHUP;</span><br><span class="line">error = ep_insert(ep, &amp;epds, tf.file, fd, full_check);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">error = -EEXIST;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EPOLL_CTL_DEL:</span><br><span class="line"><span class="keyword">if</span> (epi)</span><br><span class="line">error = ep_remove(ep, epi);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">error = -ENOENT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EPOLL_CTL_MOD:</span><br><span class="line"><span class="keyword">if</span> (epi) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(epi-&gt;event.events &amp; EPOLLEXCLUSIVE)) &#123;</span><br><span class="line">epds.events |= EPOLLERR | EPOLLHUP;</span><br><span class="line">error = ep_modify(ep, epi, &amp;epds);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">error = -ENOENT;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// epoll_wait操作</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ep_poll</span><span class="params">(<span class="keyword">struct</span> eventpoll *ep, <span class="keyword">struct</span> epoll_event __user *events,</span></span><br><span class="line"><span class="params">   <span class="type">int</span> maxevents, <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>, eavail, timed_out = <span class="number">0</span>;</span><br><span class="line">u64 slack = <span class="number">0</span>;</span><br><span class="line"><span class="type">wait_queue_entry_t</span> wait;</span><br><span class="line"><span class="type">ktime_t</span> expires, *to = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec64</span> <span class="title">end_time</span> =</span> ep_set_mstimeout(timeout);</span><br><span class="line">slack = select_estimate_accuracy(&amp;end_time);</span><br><span class="line">to = &amp;expires;</span><br><span class="line">*to = timespec64_to_ktime(end_time);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经超时，直接返回</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout == <span class="number">0</span>) &#123;</span><br><span class="line">timed_out = <span class="number">1</span>;</span><br><span class="line">write_lock_irq(&amp;ep-&gt;lock);</span><br><span class="line">eavail = ep_events_available(ep);</span><br><span class="line">write_unlock_irq(&amp;ep-&gt;lock);</span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line"><span class="keyword">goto</span> send_events;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetch_events:</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有就绪的事件</span></span><br><span class="line"><span class="comment">// 注意，这里并不需要真正去轮询双向链表（rdllist），而只需要判断链头标记即可</span></span><br><span class="line"><span class="keyword">if</span> (!ep_events_available(ep))</span><br><span class="line">ep_busy_loop(ep, timed_out); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在可用的就绪事件，则发布事件</span></span><br><span class="line">eavail = ep_events_available(ep);</span><br><span class="line"><span class="keyword">if</span> (eavail)</span><br><span class="line"><span class="keyword">goto</span> send_events;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入队列等待直至超时</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 进入等待队列</span></span><br><span class="line">        init_wait(&amp;wait);</span><br><span class="line">        write_lock_irq(&amp;ep-&gt;lock);</span><br><span class="line">        __add_wait_queue_exclusive(&amp;ep-&gt;wq, &amp;wait);</span><br><span class="line">        write_unlock_irq(&amp;ep-&gt;lock);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">// 等待出来再查看一下有没有就绪事件</span></span><br><span class="line">        eavail = ep_events_available(ep);</span><br><span class="line">        <span class="keyword">if</span> (eavail)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断就绪双向链表是否为空</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">ep_events_available</span><span class="params">(<span class="keyword">struct</span> eventpoll *ep)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !list_empty_careful(&amp;ep-&gt;rdllist) ||</span><br><span class="line">READ_ONCE(ep-&gt;ovflist) != EP_UNACTIVE_PTR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布epoll事件</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">send_events</span><span class="params">(<span class="keyword">struct</span> ldc_channel *lp, <span class="type">unsigned</span> <span class="type">int</span> event_mask)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event_mask &amp; LDC_EVENT_RESET)</span><br><span class="line">lp-&gt;cfg.event(lp-&gt;event_arg, LDC_EVENT_RESET);</span><br><span class="line"><span class="keyword">if</span> (event_mask &amp; LDC_EVENT_UP)</span><br><span class="line">lp-&gt;cfg.event(lp-&gt;event_arg, LDC_EVENT_UP);</span><br><span class="line"><span class="keyword">if</span> (event_mask &amp; LDC_EVENT_DATA_READY) <span class="comment">// 存在就绪数据</span></span><br><span class="line">lp-&gt;cfg.event(lp-&gt;event_arg, LDC_EVENT_DATA_READY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>无最大文件描述符数量限制</li><li>存在状态，内部维护着<strong>一颗红黑树</strong>和<strong>双向链表</strong>，所以用户线程无需多次拷贝感兴趣的文件描述符</li><li>epoll 将用户程序感兴趣的文件描述符注册在红黑树上，当有就绪的文件描述符时内核会通过事件驱动方式将其添加到双向链表（rdllist）中，即当执行 epoll_wait 时就只需要从 rdllist 中获取就绪文件描述符即可，而无需遍历整个红黑树</li><li>epoll 整个过程是通过事件驱动的方式来完成的，即当有就绪的文件描述符时内核会自动回调 ep_poll_callback 方法将就绪的文件描述符添加到双向链表（rdllist）中并唤醒等待的内核线程，所以避免了繁重的轮询操作，大大降低了系统的开销</li><li>epoll 的时间复杂度为 O(1)，从上面的源码可以得出结论就是 epoll 不会随着并发连接数的增多而降低效率，因为它是基事件驱动的，而且没有轮询操作</li></ul><p>4）关于 select、poll、epoll、kqueue 性能对比</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/009.png"></p><h3 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h3><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/007.png"></p><p>2）特点</p><ul><li>读取数据时需要先往注册一个信号处理器，当存在就绪 fd 时内核就会发出信号来通知处理</li><li>过程中用户程序需要 2 次系统调用</li><li>读取数据时是非阻塞的，且无需主动轮询，因此一定程度地降低 CPU 资源消耗</li><li>注意，该模型一般只在 UDP 协议场景下应用，例如监听数据报到来或是异常通知等一些简单需要。而在 TCP 协议场景基本没人用，原因有以下两个：<ul><li>响应信号过于太频率，因此对处理能力要求较高</li><li>响应信号不能表示出具体的事件（Linux支持的信号有限），所以并发信号时无法辨识事件</li></ul></li></ul><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/008.png"></p><p>2）特点</p><ul><li>IO 操作无需阻塞，亦无需主动轮询</li><li>过程中用户程序只需发起一次系统调用</li><li>适合高并发高吞吐量场景</li><li>注意：<ul><li>异步 IO 是需要系统内核支持的。例如 Windows 上的 IOCP（Input&#x2F;Output Completion Port）才是真正的异步 IO，而目前 Linux 上暂时还不能真正实现的异步 IO，所以在 Java 的 AIO 中实质用的是 epoll （可参考 LinuxAsynchronousChannelProvider 类）</li><li>与此同时我们也不能忽视 Linux 在 AIO 方面作出的努力。譬如在 Linux 5.1 这个内核版本中就发布了一套全新的异步操作API <code>io_uring</code>，所以 Linux 完善异步 IO 我们就拭目而待吧</li></ul></li></ul><p>3）异步 IO 例子：Java AIO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多线程处理</span></span><br><span class="line">    <span class="type">AsynchronousChannelGroup</span> <span class="variable">channelGroup</span> <span class="operator">=</span> AsynchronousChannelGroup.withFixedThreadPool(<span class="number">10</span>, Executors.defaultThreadFactory());</span><br><span class="line">    <span class="type">AsynchronousServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> AsynchronousServerSocketChannel.open(channelGroup);</span><br><span class="line">    server.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port));</span><br><span class="line">    System.out.println(<span class="string">&quot;服务端开启监听端口：&quot;</span> + port);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册连接事件回调处理</span></span><br><span class="line">    server.accept(server, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, AsynchronousServerSocketChannel&gt;() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment)</span> &#123;</span><br><span class="line">        <span class="comment">// 继续在当前 ServerSocket 上注册连接事件回调处理 -----</span></span><br><span class="line">        attachment.accept(attachment, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理当前连接 -----</span></span><br><span class="line">        <span class="type">AsynchronousSocketChannel</span> <span class="variable">socket</span> <span class="operator">=</span> result;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册读事件回调处理</span></span><br><span class="line">        socket.read(buffer, buffer, <span class="keyword">new</span> <span class="title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> &#123; <span class="comment">// 正常处理</span></span><br><span class="line">            <span class="comment">// 继续在当前socket上注册读事件回调处理  -----</span></span><br><span class="line">            socket.read(attachment, attachment, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result &lt; <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">// 只处理大于0的情况（不处理异常 和 EOF）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理当前读事件 -----</span></span><br><span class="line">            <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[result];</span><br><span class="line">            attachment.flip(); <span class="comment">// 将指针归0</span></span><br><span class="line">            attachment.get(buff);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buff);</span><br><span class="line">              <span class="keyword">if</span> (!Pattern.compile(<span class="string">&quot;\r\n&quot;</span>).matcher(str).find()) <span class="comment">// 不处理\r\n</span></span><br><span class="line">                System.out.println(socket.getLocalAddress() + <span class="string">&quot;-客户端：&quot;</span> + str);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">            attachment.clear(); <span class="comment">// 清空 buffer 以复用</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> &#123; <span class="comment">// 异常处理</span></span><br><span class="line">            exc.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable exc, AsynchronousServerSocketChannel attachment)</span> &#123; <span class="comment">// 异常处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          attachment.close();</span><br><span class="line">          exc.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    LockSupport.park(); <span class="comment">// 因为是异步操作，所以要阻塞主线程</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h2><h3 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h3><h4 id="单Reactor单线程模式"><a href="#单Reactor单线程模式" class="headerlink" title="单Reactor单线程模式"></a>单Reactor单线程模式</h4><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/010.png"></p><p>2）角色</p><ul><li>selector：复用 IO 模型中的多路复用器，对应着 select&#x2F;poll&#x2F;epoll&#x2F;kqueue 。主要负责接收用户感兴趣的事件</li><li>dispatch：属于 Reactor 职责，用于在 selector 返回非 accept 就绪事件后将其分派给 Handler 处理</li><li>Acceptor：accept 事件处理器，以及负责其它事件Handler的创建工作</li><li>Handler：事件处理器</li></ul><p>3）例子说明：日志服务程序</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/011.png"></p><ol><li>程序启动时，先向 Reactor 注册一个 Acceptor 处理器用于处理就绪的 accpet 事件</li><li>Reactor 将对应的 Acceptor 处理器感兴趣的事件（accept）注册到 Selector 多路复用器中</li><li>当有客户端连接到来时，Selector 多路复用器会返回 accept 事件的 key 给 Reactor，表示存在就绪事件让Reactor 进行分配处理</li><li>Reactor 按照 key 的类型将其分派给对应的 Handler 。当前是 accept 事件所以会分派给 Acceptor 来处理</li><li>Acceptor 接收到分派任务之后就会处理 accept 事件</li><li>当 Acceptor 处理完 accept 事件后就会为后续的操作作准备，例如创建其它类型的 Handler 来监听和处理各种事件，譬如 read 和 write。</li><li>Handler 被 Acceptor 创建后需要注册到 Reactor 上，除此之外和上面的 Acceptor 一样还需要注册相应感兴趣的事件。譬如 ReadHandler 就注册 read 事件，WriteHandler 就注册 write 事件。</li></ol><p>4）模式最佳实践以及优缺点</p><ul><li>Redis 采用的就是单 Reactor 单线 (6.x.x 版本前)</li><li>优点1：单线程不存在资源竞争，所以这是线程的处理能力是最高的</li><li>优点2：实现起来简单</li><li>缺点1：单线程无法充分发挥多核心 CPU 的性能</li><li>缺点2：单线程在执行 Handler 时无法处理其它事件，所以 Handler 执行时间较长时就会很容易导致系统出现瓶颈。也因为这个缘故所以 Redis 是不建议使用诸如 keys 这样较为耗时的命令来操作的。</li><li>总的来说，单Reactor单线只适合请求处理迅速的场景</li></ul><h4 id="单Reactor多线程模式"><a href="#单Reactor多线程模式" class="headerlink" title="单Reactor多线程模式"></a>单Reactor多线程模式</h4><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/012.png"></p><p>2）差异</p><p>在当前模式中 Handler 位于 Reactor 线程，但它只负责接收事件，而真正的任务处理会交给其它线程来完成。例如可以创建一个单独的 Worker 线程池来处理。</p><p>3）模式最佳实践以及优缺点</p><ul><li>Redis 6.x 版本开始支持多线程处理网络IO，而开启该功能后 Redis 就数据单Reactor多线程模型</li><li>优点1：从 Reactor 线程中抽离了最为耗时的读写事件处理操作，大大地提高程序的任务处理能力</li><li>优点2：引入了多线程处理，可以充分发挥多核 CPU 性能</li><li>缺点1：多线程操作引入资源同步以及 CPU 资源竞争激烈等问题</li><li>缺点2：因为 Reactor 依然是单线程，所以大量客户端发起 accept 操作时亦可能会出现瓶颈（当然这量要很大）</li></ul><h4 id="多Reactor多线程（主从Reactor）"><a href="#多Reactor多线程（主从Reactor）" class="headerlink" title="多Reactor多线程（主从Reactor）"></a>多Reactor多线程（主从Reactor）</h4><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/013.png"></p><p>2）差异</p><p>Reactor 引入了多线程，将 accept 和 非accept 两种事件进行了更细的拆分。</p><p>主 Reactor 线程负责 accept 事件，而从 Reactor 则负责非accept 事件。</p><p>每个 Reactor 线程都有自己的 Selector 。</p><p>3）模式最佳实践以及优缺点</p><ul><li>Memcache 以及 Nginx(Worker进程) 都采用了主从 Reactor 模式<ul><li>在 Nginx 中该模型叫 Run-Loop 而不叫 Reactor，但只是名字有别而已</li><li>要注意的是 Nginx 使用的是多进程而不是线程。虽然多线程模型能够节省资源，但缺点是位于同一个进程内，线程之间能够访问同一地址空间，彼此容易互相影响，譬如虚拟内存发生缺页中断则有可能影响所有的线程。Nginx 使用多进程加异步操作处理网络请求，这种高可用高可靠的服务器需求</li></ul></li><li>优点1：Reactor 通过多线程对职责进行了进一步的划分，这样领到模式的整体结构更加清晰以及实现起来比单Reactor多线程更加容易</li><li>优点2：父子 Reactor 线程交互简单，且每个线程都有独自的 Selector ，所以处理非同步资源时性能要比前两种都好</li><li>缺点：多线程会导致 CPU 资源竞争激烈，因此线程并不是越多越好。</li><li>若果你不知道如何设置线程数的话可以<code>参考</code>以下原则<ul><li>CPU密集型：大量操作落在 CPU 和 内存 上，意味着 CPU 资源竞争激烈，这样会容易导致 CPU 使用率急速上升从而导致系统瓶颈，甚至会出现卡顿。这时线程数应该尽量少一些，例如<code>CPU核心数 + 1</code></li><li>IO密集型：大量操作落在  IO 上，因为 IO 存在阻塞现象（异步IO除外），所以线程可能会被短暂阻塞，这样可以起到缓解 CPU 资源竞争带来的压力。这时线程数可以稍微高一些，例如<code>CPU核心数x2+1</code></li></ul></li></ul><h3 id="Proactor"><a href="#Proactor" class="headerlink" title="Proactor"></a>Proactor</h3><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/014.png"></p><p>2）角色</p><ul><li>Proactor Initiator：Proactor 引导程序</li><li>Acceptor：accept 事件处理器</li><li>Handler：非 accept 事件处理器</li><li>Asynchronous Operation Processor：内核异步操作处理</li><li>Proactor：异步IO事件分派器</li></ul><p>3）模式最佳实践和优缺点</p><ul><li>ACE Proactor （由 Windows IOCP实现）</li><li>在 Linux 中所谓的 AIO 操作是由 GNU libc 库函数在用户空间借由 pthread 方式实现的，而且仅仅针对磁盘类 I&#x2F;O，套接字 I&#x2F;O 不支持</li></ul><h2 id="Netty事件驱动浅析"><a href="#Netty事件驱动浅析" class="headerlink" title="Netty事件驱动浅析"></a>Netty事件驱动浅析</h2><h3 id="请求处理流程"><a href="#请求处理流程" class="headerlink" title="请求处理流程"></a>请求处理流程</h3><p>1）图解</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/015.png"></p><p>2）启动说明</p><ol><li>Main 线程的使命是负责创建第一条 BossEventLoop 线程，然后再创建 NioServerSocketChannel 并注册到该 EventLoop 的 Selector 上</li><li>EventLoop 执行 run 方法（上图的 EventLoop 轮询），并完成注册 Channel 的 TaskQueue 任务<ol><li>将 Channel 注册到当前 EventLoop 的 Selector 中</li><li>创建 Acceptor（Handler） 事件回调处理器</li><li>绑定 NioServerSocketChannel 的监听地址，开始监听事件</li><li>回调管道（DefaultChannelPipeline）中处理器的 ChannelActive 方法正式</li></ol></li></ol><h3 id="主从Reactor源码浅析"><a href="#主从Reactor源码浅析" class="headerlink" title="主从Reactor源码浅析"></a>主从Reactor源码浅析</h3><p>1）实例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8888</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">NioEventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">    <span class="type">NioEventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    serverBootstrap</span><br><span class="line">      .group(bossGroup, workerGroup)</span><br><span class="line">      .channel(NioServerSocketChannel.class)</span><br><span class="line">      .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">          pipeline</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>()) <span class="comment">// 将字节流解码为String</span></span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;String&gt;() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前处理线程：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;客户端：&quot;</span> + msg.replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">      .childOption(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;服务端开启监听端口：&quot;</span> + port);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步操作</span></span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> serverBootstrap</span><br><span class="line">      .bind(port) <span class="comment">// 调试断点位置 ------------</span></span><br><span class="line">      .sync();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当关闭后会得到通知</span></span><br><span class="line">    future.channel().closeFuture().sync();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）启动过程</p><p>执行 ServerBootstrap 的 bind 方法</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/016.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/017.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/018.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/019.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/021.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/022.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/023.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/024.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/025.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/026.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/027.png"></p><p>回调执行的第1个任务：</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/023.png"></p><p>回调执行的第2个任务：</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/028.png"></p><p>回调执行的第3个任务：</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/029.png"></p><p>回调执行的第4个任务：</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/030.png"></p><p>至此 Netty 的主从Reactor 初始化完成，主 Reactor 会阻塞在 Selector 上等待就绪事件到来。</p><p>3）accept evetn 处理过程</p><p>使用 telnet 模拟客户端请求</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/031.png"></p><p>请求到来，主 Reactor 被 Selector 唤醒</p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/032.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/033.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/034.png"></p><p><img src="/%E4%BB%8EIO%E6%A8%A1%E5%9E%8B%E5%88%B0%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/035.png"></p><p>处理完 accept event 后，主从 Reactor 都会阻塞在 Selector 上等待就绪事件到来。主 Reactor 阻塞等待 accept event，从 Reactor 阻塞等待非 accept event。</p><p>4）非 accept event 处理过程</p><p>因为非 accept event 处理是由 NioSocketChannel 来完成的，因此如果有非 accept event 就绪的话从 Reactor 就会从 Selector 唤醒，而处理过程和主 Reactor 处理 accept event 一样，不同的只是处理器而已（非 accept event 会交给 ChannelPipeline 来完成）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Unix网络编程》</li><li>《LINUX系统编程》</li><li>《操作系统概念》</li><li><a href="https://zh.wikipedia.org/wiki/Epoll">epoll</a></li><li><a href="http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf">Scalable IO in Java - Doug Lea</a></li><li><a href="http://www.laputan.org/pub/sag/proactor.pdf">Proactor</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用阿里云公网IP和FRP工具对内网设备进行穿透访问</title>
      <link href="/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AC%E7%BD%91ip%E5%92%8Cfrp%E5%B7%A5%E5%85%B7%E5%AF%B9%E5%86%85%E7%BD%91%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E7%A9%BF%E9%80%8F%E8%AE%BF%E9%97%AE/"/>
      <url>/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AC%E7%BD%91ip%E5%92%8Cfrp%E5%B7%A5%E5%85%B7%E5%AF%B9%E5%86%85%E7%BD%91%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E7%A9%BF%E9%80%8F%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>最近打算将软路由放到公网上访问，但是因为我所处的地方是出租屋，网线是房东提供的，所以我的路由器肯定是分配不到公网ip的（就算是自己拉的网线也不一定分到公网ip），因此并不能使用DDNS（动态DNS）对内网进行访问，换句话就是只能进行内网穿透了。</p><p>所谓的内网穿透其实就是NAT穿透，即将内网ip以及端口映射到公网ip上。通常来说，要完成内网穿透的话需要：<code>拥有公网ip的服务器</code>、<code>穿透工具(服务端、客户端)</code>、<code>能上网的内网设备</code>等设备。</p><p>对于穿透工具，比较出名的诸如<code>花生壳</code>、<code>Ngrok</code>、<code>Natapp</code>、<code>frp</code>等等。我自己而言之前用过Natapp做内网穿透，特点是方便，提供一站式的服务端配置，使用时只需要在目标设置安装客户端进行对接即可。现在不用的原因是考虑到自己买了阿里云服务器和域名，而阿里云服务器是有公网ip的，所以就打算干脆在阿里云上搭一个穿透工具服务端来对接内网设备得了，这时就想到了frp提供自搭建的p2p（点对点）对接功能。</p><p>拓展：</p><ul><li>NAT：Network Address Translation，网络地址转换</li></ul><h2 id="案例-frp穿透访问路由器"><a href="#案例-frp穿透访问路由器" class="headerlink" title="案例-frp穿透访问路由器"></a>案例-frp穿透访问路由器</h2><p><strong>准备</strong></p><p>拥有公网ip的服务器 — 我的阿里云服务器</p><p>穿透工具(服务端、客户端）— frp（frps、frpc）</p><p>能上网的内网设备 — 我家的软路由</p><p><strong>访问原理图</strong></p><p><img src="/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AC%E7%BD%91ip%E5%92%8Cfrp%E5%B7%A5%E5%85%B7%E5%AF%B9%E5%86%85%E7%BD%91%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E7%A9%BF%E9%80%8F%E8%AE%BF%E9%97%AE/001.png"></p><p><strong>阿里云配置</strong></p><blockquote><p>frp下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p></blockquote><p>步骤1：下载frp并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_freebsd_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.29.0_freebsd_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>步骤2：进入解压后的文件夹配置frps.ini（穿透工具服务端配置）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment"># frps和frpc的通信端口</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="string">7000</span></span><br><span class="line"><span class="comment"># http协议映射端口（即内网设备的80端口映射到该端口上）</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="string">8088</span></span><br><span class="line"><span class="comment"># https协议映射端口（即内网设备的80端口映射到该端口上）</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="string">8099</span></span><br></pre></td></tr></table></figure><blockquote><p>多说一句，上面http和https没有配置成默认的80和443是因为被nginx用了，这是个人原因，如果没有安装nginx和为nginx添加https功能的话可以直接配置成80和443，这样访问的时候就可以省略端口的输入</p></blockquote><p>步骤3：启动并后台运行frp服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure><p>步骤4：将启动frp服务端这个动作设置为开机执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.d/rc.local</span><br><span class="line">sudo vim /etc/rc.d/rc.local</span><br><span class="line">追加以下内容</span><br><span class="line">cd /home/admin/frp_0.29.0_linux_amd64</span><br><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是我阿里云服务器的系统是CentOS，系统不同文件的位置可能不同</p></blockquote><p>步骤5（重）：配置阿里云的端口访问限制（或者关闭防火墙）</p><blockquote><p>必须对端口放行或者关闭防火墙才能正常访问，否则就会被防火墙拦截</p></blockquote><p><img src="/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AC%E7%BD%91ip%E5%92%8Cfrp%E5%B7%A5%E5%85%B7%E5%AF%B9%E5%86%85%E7%BD%91%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E7%A9%BF%E9%80%8F%E8%AE%BF%E9%97%AE/002.png"></p><p><strong>软路由配置</strong></p><p>步骤1：下载frp并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_freebsd_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.29.0_freebsd_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>步骤2：进入解压后的文件夹配置frpc.ini（穿透工具客户端配置）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment"># frps所在的服务器ip（公网ip，这里填写我阿里云的公网ip）</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="string">x.x.x.x</span></span><br><span class="line"><span class="comment"># frps和frpc的通信端口</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="string">7000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ssh映射</span></span><br><span class="line"><span class="comment"># 即可以通过 ssh 用户名称@公网ip -p 6000 来访问当前192.168.5.1的22端口</span></span><br><span class="line"><span class="attr">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">tcp</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="string">192.168.5.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="string">6000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># http映射</span></span><br><span class="line"><span class="comment"># 浏览器访问 公网ip：8088 来访问当前192.168.5.1的80端口</span></span><br><span class="line"><span class="attr">[http]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">http</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">80</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="string">192.168.5.1</span></span><br><span class="line"><span class="attr">custom_domains</span> = <span class="string">个人域名，如 xxx.com 或者 yyy.xxx.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># https映射</span></span><br><span class="line"><span class="comment"># 浏览器访问 公网ip：8099 来访问当前192.168.5.1的80端口</span></span><br><span class="line"><span class="attr">[https]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">https</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">443</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="string">192.168.5.1</span></span><br><span class="line"><span class="attr">custom_domains</span> = <span class="string">个人域名，如 xxx.com 或者 yyy.xxx.com</span></span><br></pre></td></tr></table></figure><p>步骤3：启动并后台运行frp服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -c frpc.ini &amp;</span><br></pre></td></tr></table></figure><p>步骤4：将启动frp服务端这个动作设置为开机执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.local</span><br><span class="line">vim /etc/rc.local</span><br><span class="line">追加以下内容</span><br><span class="line">cd /root/frp_0.29.0_linux_amd64</span><br><span class="line">nohup ./frpc -c frpc.ini &amp;</span><br></pre></td></tr></table></figure><p><strong>测试是否成功配置穿透访问</strong></p><p><img src="/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%8F%90%E4%BE%9B%E7%9A%84%E5%85%AC%E7%BD%91ip%E5%92%8Cfrp%E5%B7%A5%E5%85%B7%E5%AF%B9%E5%86%85%E7%BD%91%E8%AE%BE%E5%A4%87%E8%BF%9B%E8%A1%8C%E7%A9%BF%E9%80%8F%E8%AE%BF%E9%97%AE/003.png"></p><h2 id="参考和推荐"><a href="#参考和推荐" class="headerlink" title="参考和推荐"></a>参考和推荐</h2><p>NAT 穿透原理浅浅说（一）：<a href="https://cloud.tencent.com/developer/article/1005974">https://cloud.tencent.com/developer/article/1005974</a></p>]]></content>
      
      
      <categories>
          
          <category> 软硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章解决Kafka的基本使用</title>
      <link href="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年10月9日 20:24:41 — 修改关于上下文切换、用户态内核态、内存映射文件相关内容</li><li>2020年3月21日 15:31:22 — 增加 HW、LEO、Leader Epoch 相关内容</li></ul><h2 id="拓展知识点"><a href="#拓展知识点" class="headerlink" title="拓展知识点"></a>拓展知识点</h2><p>为了更好地学习和理解kafka，个人觉得有必要搞清楚一些概念</p><h3 id="什么是磁盘的顺序写入？"><a href="#什么是磁盘的顺序写入？" class="headerlink" title="什么是磁盘的顺序写入？"></a>什么是磁盘的顺序写入？</h3><p>指在写入数据时磁盘的磁头不用寻道而可以一次将数据写完。因为节省了磁头寻道的时间，所以在速度方面得到了很大的提升，甚至可以媲美内存的随机写入。常见的顺序写入场景是<code>文件内容追加</code>，例如Kafka 中的日志文件是不能修改只能追加的</p><p>关于磁盘、SSD、内存 之间的访问速度对比</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/002.png"></p><ul><li>图片源自：queue.acm.org</li></ul><p>可以看到磁盘的顺序访问是相当快的，所以为 Kafka 选择磁盘时并无需刻意地选择 SSD。</p><h3 id="mmap操作"><a href="#mmap操作" class="headerlink" title="mmap操作"></a>mmap操作</h3><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/018.png"></p><p>mmap 是操作系统中一种给进程开辟虚拟内存空间的方式，它可以实现将磁盘文件直接映射到虚拟内存中（会先开辟内存）。当然，它也并不是直接就将文件映射到虚拟内存中，而是先将磁盘数据通过 DMA 拷贝到 Page Cache 中再进行映射。也就是说进程对该文件的操作数据会先落到 Page Cache 中，然后再由系统定时刷到磁盘，因此 mmap 其实也存在一定的数据丢失的风险。因为需要将磁盘数据全部临时存放在 Page Cache 中才能进行操作的缘故，所以 mmap 其实并不太适合用来操作体积较大的文件（大文件建议用直接IO）。例如在 Kafka 中也只是用 mmap 来映射索引文件来提高日志的检索速度，而不是直接映射日志本身。</p><h3 id="CPU上下文切换、用户态内和核态切换"><a href="#CPU上下文切换、用户态内和核态切换" class="headerlink" title="CPU上下文切换、用户态内和核态切换"></a>CPU上下文切换、用户态内和核态切换</h3><p>1）基本介绍</p><p>CPU上下文切换指的是在任务交替执行时 CPU 寄存器和程序计数器需要先将当前正在执行任务的相关数据和状态记录下（用于下次执行时恢复），然后再加载接下来要执行任务的相关数据的过程。而用户态内核态切换其实是CPU上下文切换的一种特殊例子（在下面单独介绍）</p><p>CPU上下文切换带来的问题是在上下文切换期间用户应用就相当于进入了呆滞状态，需要等到切换完成后才会恢复运行。虽然单次上下文切换所需的时间非常短暂，但如果线程数量较多，那么在并发竞争资源时就会产生大量的上下文切换，使得 CPU 使用率极速上升之外还会降低应用的任务处理能力（吞吐量下降）。举个例子，譬如现在有 10 秒钟时间用来给应用处理客户端请求，但可能因为线程数数量太多（时间片结束导致的切换）且有资源竞争的情况（阻塞导致的切换），结果在上下文切换上就花费了 6 秒，所以应用实质用来处理请求的时间就只有 4 秒而已。虽然这个例子不太恰当但却能够说明频繁上下文切换所带来的性能损耗是不可忽视的，同样也提醒我们在进行多线程编程时<code>并不是线程数量越多越好</code>，而且应该尽可能<code>减少资源竞争</code>和<code>避免阻塞操作</code>以减少上下文的切换。</p><p>注：如果使用的是类 Unix 系统，则可以使用 vmstat 命令查看应用当前的上下文切换情况。</p><p>2）用户态和内核态切换</p><p>为了保护资源的安全，操作系统将任务的执行空间被画分层了<code>用户空间</code>和<code>内核空间</code>两种。处于用户空间的线程不能访问除属于自己（进程资源）之外的其他资源。例如<strong>磁盘</strong>、网络块等设备是不能直接访问的。以使用阻塞I&#x2F;O读取磁盘数据为例，程序首先在用户空间发起一个 read 系统调用，系统就会从用户态切换为内核态，并将 read 操作交由内核线程来处理（因为处于内核空间的线程拥有最高的资源访问权限），而当内核线程完成读取操作后（既将磁盘数据 read 到了Page Cache）就会将数据拷回用户空间中，既此时用户空间的 read 操作会结束阻塞并得到数据。至此，以上就是一个典型的用户态和内核态切换的例子，和普通的 CPU 上下文切换一样应该避免，而且应该更加小心谨慎，因为用户态和内核态切换相当对应用本身而言属于重量级操作。</p><p>注意：用户空间中的每一条线程都有与之对应的内核线程，可能是一条或者多条（根据平台而定）。譬如 Java 线程就是一对一的关系</p><h3 id="Zero-copy"><a href="#Zero-copy" class="headerlink" title="Zero-copy"></a>Zero-copy</h3><p>Zero-copy 指的是 I&#x2F;O 操作期间不用进行 CPU copy，而 CPU copy 常见于用户空间和内核空间进行数据交互上，所以 Zero-copy 这种技术是能够有效地减少用户态和内核态切换次数从而提升应用处理能力的。对于高级语言编程人员而言，其实常见的 Zero-copy 操作只有两种，分别是 <code>sendfile</code> 以及<code>通过mmap来映射文件</code>（其余可参考 <a href="https://en.wikipedia.org/wiki/Zero-copy%EF%BC%89%E3%80%82">https://en.wikipedia.org/wiki/Zero-copy）。</a></p><p>下图为 sendfile 操作过程：</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/003.png"></p><p>值得注意的是 Zero-copy 并不是完全不进行拷贝，只不过是不用进行 CPU copy 而已。如上图所示，内核其实会通过一种叫 DMA 的技术先将磁盘数据读到缓存中再进行发送的。而在 Kafka 中，就是通过 sendfile 指令来实现数据传输接口的（TransportLayer），当需要注意 Kafka 的 Zero-copy 只在非 SSL 协议环境下适用。</p><h2 id="Kafka是什么？"><a href="#Kafka是什么？" class="headerlink" title="Kafka是什么？"></a>Kafka是什么？</h2><p>1）官方介绍</p><p>Apache Kafka 是一个开放源的<code>分布式事件流平台</code>，成千上万的公司使用它来实现<code>高性能数据管道</code>，<code>流分析</code>，<code>数据集成</code>，以及<code>关键任务应用程序（如Saga事务）</code>。 </p><p>2）什么是事件流，个人理解如下：</p><p><strong>事件</strong>：特指某个上下文中被关注且已发生的事情</p><p><strong>事件流</strong>：事件的流向过程（从一端转移到另一端的）。譬如说数据库记录被更新，因此而产生了对应的更新事件，该事件通过 Kafka 事件流平台（作为介质）转移到了其他服务节点上的过程。譬如利用 Kafka Connnect 实现 CDC（capture data change）操作</p><p><strong>流处理</strong>：提供一系列操作手段（修改、持久化、特殊处理等），让数据在流动的过程中产生所需的变化，如 Kafka Streams</p><h2 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h2><ul><li>异步功能解耦</li><li>消息订阅发布</li><li>日志收集</li><li>数据源连接</li><li>流量削峰</li><li>大数据流处理</li></ul><p>注：以上只是部分 Kafka 的使用场景，其实不管是 Kafka 还是其他系统，都只是<strong>运用之妙，存于一心</strong>而已。</p><h2 id="为什么kafka性能高？"><a href="#为什么kafka性能高？" class="headerlink" title="为什么kafka性能高？"></a>为什么kafka性能高？</h2><ul><li>文件操作方式为磁盘的顺序访问</li><li>通过 zero-copy 传输网络数据，减少用户态和内核态之间的切换和数据拷贝从而提高传输效率</li><li>使用 mmap 将日志索引映射到虚拟内存，提高磁盘数据的检索速度</li><li>一个 Topic 可以有多个 Partition，除了去中心化之外还提高了并发效率</li><li>生产者发送缓存机制。支持批量发送操作，Producer 只有数据大小到达<code>batch.size</code>或<code>到达等待时间</code>才会真正发出，目的是提高发送的吞吐量</li><li>Broker 基于 Reactor 线程模型，大程度地提高了 I&#x2F;O 的处理能力</li><li>Kafka 在消费完数据后它并不会马上删除，而是等到某个时间或大小条件满足后才会删除，因此在此期间减少了不必要的操作，从而提高了吞吐量和降低了延时</li><li>消息压缩。Kafka 允许在 Producer 和 Broker 这两个点对消息集合进行压缩<ul><li>这是一种以时间换空间（可以提升网络传输效率）的做法，因此如果 Producer 端 CPU 充裕的话可以开启该功能，且建议使用 zstd 算法</li><li>默认情况下 Producer 端如果开启了压缩功能，那么 Broker 就会沿用它的配置，既这时 Broker 接收数据后会直接保存，然后 Consumer 拉取数据后就会使用同样的算法对其解压消费</li></ul></li></ul><h2 id="Topic、Partition、Replica"><a href="#Topic、Partition、Replica" class="headerlink" title="Topic、Partition、Replica"></a>Topic、Partition、Replica</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>在 Kafka 中 Topic 只是逻辑概念，在物理层面实质是以 Partition 来进行日志存放的。而 Partition 是一个序列，在物理磁盘上对应着一个文件夹，其中包含了至少一个日志段文件（还有索引文件）。一个 Topic 可以有一个或多个 Partition，而 Topic 的数据则会按照一定的路由规则存放到这些 Partition 中（规则在 Producer 端定义）。而对于 Partition 而言，其内部的消息数据是有序的（Kafka只能保证单个 Partition 的有序性，而不能保证多个 Partition 之间的有序性）</p><p>Replica 是 Partition 在副本层面上的概念，一个 Partition 可以有一到多个 Replica，既至少要有一个作为 Leader Replica 对外提供服务。Broker 除了 Leader Replica 外还有 Follower Replica，但 Follower Replica 正常情况下是不对外提供服务的（但 2.4 版本（<a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica">KIP-392</a>）后，追随者副本也允许提供读服务了），它的主要职责是<code>拉取</code> Leader Replica 中的消息日志进行冗余备份，以防备 Leader Replica 发生故障后接替 Leader Replica 的职责对外继续提供服务。而 Replica 集合又称为 AR（Assigned Replicas），其中同步 Leader 滞后较低的子集叫 <code>ISR（In-sync replica，包含 Leader 在内）</code>，而同步滞后较高的则叫 <code>OSR（Out-of-Sync Replicas） </code>。两种子集区别在于默认情况下只有 ISR 成员能够参与 Leader 竞选。而实质上一开始所有的 Replica 都属于 ISR 集合成员，但随着时间推移，节点之间出现同步效率上的差异，导致某些 Broker 上的 Replica 无法跟上复制进度从而被踢出 ISR（参考配置replica.lag.time.max.ms），而被踢出 ISR 的 Replica 只有追上复制进度后才会被重新纳入到 ISR 集合中。最后值得注意的是，当 Producer 向 Leader 发送一条日志数据时，并不是 Leader 接收了就会对 Consumer 可见，而是还需要等待所有的 ISR 成员都成功同步才会对 Consuemr 可见。</p><p>图片源自网络</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/006.png"></p><h3 id="为什么需要Partition？"><a href="#为什么需要Partition？" class="headerlink" title="为什么需要Partition？"></a>为什么需要Partition？</h3><p>有人可能会有这样的疑问，既然有了 Topic 为什么还要有 Partition 这个概念呢？譬如 ActiveMQ 就没有Partition。这点需要从 Kafka 的主要使用场景角度来说，Kafka 通常被用作实时处理场景，为其提供 <code>高吞吐</code>、<code>低延迟</code> 的解决方案，而 Partition 就是用来提 Topic 的并发量的，同时有着<code>去中心化容灾</code>和<code>负载均衡</code>的效果</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/004.png"></p><h2 id="日志存储"><a href="#日志存储" class="headerlink" title="日志存储"></a>日志存储</h2><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/021.png"></p><p>为了方便观察，先执行命令创建一个名称为 test 的 Topic，再为其分配 2 个 Partition 分区和每个分区对应 1 个 Replica（既只有 Leader Replica）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ ./kafka-topics.sh --create --zookeeper 192.168.4.157:2181 --partitions 2 --rerelication-factor 1 --topic test</span><br></pre></td></tr></table></figure><p>1）观察配置中 logDir 指定的目录情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  data ls -al</span><br><span class="line">...</span><br><span class="line">drwxr-xr-x 2 tandi tandi 4096  9月  8 06:30 test-0</span><br><span class="line">drwxr-xr-x 2 tandi tandi 4096  9月  8 06:30 test-1</span><br></pre></td></tr></table></figure><p>可以看到生成了test-0、test-1两个文件夹，既当前 test 这个 Topic 的两个 Partition 分区。</p><p>接着进入其中一个文件夹 test-1 再进行观察</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  test-1 ll</span><br><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000000000.timeindex</span><br><span class="line">leader-epoch-checkpoint</span><br></pre></td></tr></table></figure><p>*.index</p><ul><li>保存 offset index (偏移量索引)</li></ul><p>*.log</p><ul><li>保存消息数据</li></ul><p>*.timeindex</p><ul><li>保存 time index (时间戳索引)</li></ul><p>leader-epoch-checkpoint</p><ul><li>保存 Leader 写入的 offset 信息，当 Follower 成为 Leader 前会取出该信息进行对比，其中 offset 较大的 Follower 晋升为 Leader 的概率较高，因为它的消息数比较全。</li></ul><p>2）Partition Segment 日志段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000000000.timeindex</span><br><span class="line"></span><br><span class="line">00000000000000010000.index</span><br><span class="line">00000000000000010000.log</span><br><span class="line">00000000000000010000.timeindex</span><br></pre></td></tr></table></figure><p>文件的名称是以存储的第一条消息日志的索引位置进行命名的，这样便于对数据和索引进行区间查找。默认情况下，每个 segment 能够保存 1G 的数据，保存时长为 7 天。 </p><p>3）偏移量索引和时间戳索引的区别</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/024.png"></p><h2 id="集群控制器"><a href="#集群控制器" class="headerlink" title="集群控制器"></a>集群控制器</h2><p>1）介绍</p><p>Kafka Controller 的作用是协调 Broker 集群，而一个集群当中只有一个 Broker Controller，它通过 Zookeeper 竞选产生。</p><p>其职责如下：</p><ul><li><p>Topic 管理</p><ul><li>创建、删除、分区（Leader选举）</li></ul></li><li><p>集群成员管理</p><ul><li>新增Broker、Broker主动关闭、Broker 宕机</li></ul></li><li><p>Preferred 选举</p><ul><li>解决集群负载不均的问题</li></ul></li><li><p>重新分区</p><ul><li>指的是扩容或缩容集群节点后重新对 Partition 进行分配</li><li>该操作可以通过<code>kafka-reassign-partitions</code>脚本完成</li></ul></li><li><p>提供元数据服务</p><ul><li><p>控制器会向其它 Broker 提供元数据服务</p></li><li><p>控制器上保存了最全的集群元数据信息，其它 Broker 会定期接收控制器发来的元数据从而更新其内存中的缓存数据</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/025.png"></p></li></ul></li></ul><h2 id="领导者选举"><a href="#领导者选举" class="headerlink" title="领导者选举"></a>领导者选举</h2><h3 id="优先副本选举（Preferred选举）"><a href="#优先副本选举（Preferred选举）" class="headerlink" title="优先副本选举（Preferred选举）"></a>优先副本选举（Preferred选举）</h3><p>1）基本介绍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">./bin/kafka-topics.sh --zookeeper 192.168.0.201:2181 --describe --topic test2</span></span><br><span class="line">Topic: test2PartitionCount: 2ReplicationFactor: 2Configs: </span><br><span class="line">Topic: test2Partition: 0Leader: 0Replicas: 0,5Isr: 0,5</span><br><span class="line">Topic: test2Partition: 1Leader: 5Replicas: 5,0Isr: 5,0</span><br></pre></td></tr></table></figure><p>在上面输出中，表明 Partition 0 的 AR 为 [0,5]，而其中的优先副本为是 0 。</p><p>优先副本和 Leader Replica 选举息息相关，既一般都会选用优先副本来做 Leader Replica 。</p><p>2）如果没有优先副本会出现什么问题？</p><ul><li>譬如原 Leader Replica 宕机而导致 ISR 中的某个 Follower Replica 晋升为 Leader，但这个 Replica 所处的 Broker 已经有其它 Topic 的 Leader Replica 了。也就是说现在这个 Broker 上有多个 Leader Replica，这样的话该 Broker 的负载压力就会增大</li><li>如何使用优先副本解决以上问题？<ul><li>可以手动通过 kafka-preferred-replica-election 脚本完成优先副本选举</li></ul></li></ul><p>3）优先副本选举策略</p><ul><li>选举策略  PreferredReplicaPartitionLeaderElectionStrateg。它会选择 AR 集合中第一个存活的副本作为优先副本</li></ul><h3 id="Leader-Replica选举"><a href="#Leader-Replica选举" class="headerlink" title="Leader Replica选举"></a>Leader Replica选举</h3><p>1）什么时候会发生 Replica 选举？</p><ul><li>创建新分区</li><li>原 Leader Replica 下线</li><li>Broker 被优雅关闭（kafka-server-stop.sh）</li></ul><p>2）选举过程</p><ul><li>选举策略  OftlinePartitionLeaderElectionStrategy </li><li>按照 AR 集合的顺序查找，选择第一个 Replica 作为 Leader（因为第一个是优先副本）。前提条件是这个 Leader 必须在 ISR 集合中<ul><li>如果设置了 unclean.leader.election.enable&#x3D;ture，则非 ISR 成员也包含在内</li></ul></li><li>注意，如果是 Broker 优雅关闭发起的选举，则选举策略为  ControlledShutdownPartitionLeaderElectionStrategy。它会选择 AR 集合中第一个存活的副本</li></ul><h3 id="集群控制器选举"><a href="#集群控制器选举" class="headerlink" title="集群控制器选举"></a>集群控制器选举</h3><p>1）什么时候会发生控制器选举？</p><ul><li>据群初始启动期间</li><li>原控制器下线后</li></ul><p>2）选举过程</p><ul><li>控制器选举依赖于 Zookeeper，既优先在 Zookeeper 创建节点的就成为控制器。该节点叫<code>/controller</code>, 是一个临时节点</li></ul><p>3）拓展</p><ul><li>除了上面提到的<code>/controller</code>节点之外，还有一个<code>/controller_epoch</code>的节点，它用于记录控制器的任期，既当前控制器是第几任的控制器，其值从1开始递增。除此之外，该值有个很重要的职责，就是每个与控制器交互的请求都会带上该值。当请求中的 epoch 值比当前的值小时，则该请求会被认为过时而不被处理，而如果请求中的 epoch 值比当前值大，则表示集群中已经有了新的控制器，此时当前控制器会停止管理操作。</li></ul><h2 id="消息日志"><a href="#消息日志" class="headerlink" title="消息日志"></a>消息日志</h2><h3 id="topic-offset"><a href="#topic-offset" class="headerlink" title="topic offset"></a>topic offset</h3><p>当消息被写到 partition 时，kafka 会为其分配一个唯一的 offset，而 offset 从 0 开始递增，在不同的 partition 中 offset 是互不干扰的。 </p><h3 id="consumer-offset"><a href="#consumer-offset" class="headerlink" title="consumer offset"></a>consumer offset</h3><p>consumer offset 记录的是 partition 的消费偏移量（即消费到那个位置）。conusmer 会在消费消息时（实际由consuemr自定义）向 Borker 提交自己当前的 consumer osffset，那么下次再消费同一个 partition 时就可以知道从哪里开始消费了。在较新版本的 Kafka Consumer 中该 offset 被保存在一个内部的 Topic 中（__consumer__offsets），因此该 Topic 可以在数据文件夹中找到，它一共有 50 个文件夹，既它有 50 个 Partition。</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/012.png"></p><p>拓展：</p><ul><li>__consumer__offsets 这个内部主题不仅维护了消费者偏移量，还维护了消费者的元数据，它们由 Group Coordinator（消费者组协调者）管理</li><li>早期 Kafka Consumer 中消费者偏移量是保存在 Zookeeper 中的，这样是为了降低 Broker 的管理成本从而提高集群的扩展性，但后来发现因为偏移量提交是一个频繁操作，而 Zookeeper 并不合适保存大数据量以及作频繁的数据修改，所以在后期新版本 Kafka Consumer 中消费者偏移量从 Zookeeper 迁移回了 Broker 管理。</li></ul><h2 id="可靠的日志复制"><a href="#可靠的日志复制" class="headerlink" title="可靠的日志复制"></a>可靠的日志复制</h2><h3 id="HW和LEO"><a href="#HW和LEO" class="headerlink" title="HW和LEO"></a>HW和LEO</h3><p>基本介绍</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/026.png"></p><p>HW</p><ul><li>全称叫 Hight Watermark，一般称为高水位</li><li>HW 本质是一个偏移量，用于控制消息日志对 Consumer 的可见性</li><li>在 Kafka 中一条消息日志如果对 Consumer 是可见的，则表示这条日志已经成功复制到所有的 ISR 上</li><li>Consumer 只能获取到 HW 前面的消息日志，即 HW 位置开始的日志（如果有）对于 Consumer 而言是不可见的，因为还没有同步完成</li><li>即 Kafka 通过 HW 机制实现了对于 Consumer 而言的状态一致性（CAP 中的 C）。<ul><li>值得注意的是官方开发人员称 Kafka 集群是一个 CA 系统。理由是他们的目标是在单个<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83">数据中心</a>内支持 Kafka 集群中的复制，所以网络分区很少出现（既将数据中心是为一个整体）。也就是说他们在设计 Kafka 时主要针对的是 CA 两个方面，而 P 并不在考虑的范畴。</li></ul></li></ul><p>LEO</p><ul><li>全称 LogEndOffset，记录了<code>下一条</code> Producer 生成的日志的 offset，既相当于是当前 offset + 1</li><li>当 Leader Replica 中的 HW &#x3D; LEO 时，表示所有的 Replica 已经同步完成</li></ul><p>HW 和 LEO 的更新时机</p><table><thead><tr><th align="left">对象</th><th>时机</th></tr></thead><tbody><tr><td align="left">Follower Replica 中的 LEO 值</td><td>从 Leader Replica 中拉取日志消息，写入磁盘后更新 LEO 值</td></tr><tr><td align="left">Leader Replica 中的 LEO 值</td><td>从 Producer 中接收到消息，写入磁盘后更新 LEO 值</td></tr><tr><td align="left">Leader Replica 上远程副本的 LEO 值</td><td>Follower Replica 在拉取消息时，会告诉 Leader Replica 要在哪个 offset 开始拉取，而这个 offset 其实就是当前 Follower Replica 的 LEO</td></tr><tr><td align="left">Follower Replica 中的 HW 值</td><td>将拉取的日志消息写入磁盘并更新 LEO 值后，就会将当前 LEO 值和从 Leader Replica 获取到 HW（Leader） 值进行对比，然后取小的作为当前副本的 HW 值</td></tr><tr><td align="left">Leader Replica 中的 HW 值</td><td>有两个时机：1）更新完 Leader Replica 自己的 LEO 值之后。2）更新完位于 Leader Replica 上的远程副本 LEO 值之后。更新策略：取包含自己在内的所有副本的 LEO 值的最小值作为新的 HW</td></tr></tbody></table><p>日志同步例子（假设只有两个 Broker）</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/030.png"></p><ul><li>既副本中的 HW 是根据 Leader 的 HW 来调节的，而 Leader 的 HW 则是通过副本的 LEO 计算出来的</li></ul><h3 id="Leader-Epoch"><a href="#Leader-Epoch" class="headerlink" title="Leader Epoch"></a>Leader Epoch</h3><p>HW 和 LEO 同步机制存在的问题</p><p>1）数据丢失</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/028.png"></p><p>2）数据不一致</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/029.png"></p><p>Leader Epoch 解决数据丢失和不一致问题</p><p>1）是什么？</p><p>代表是 Leader 的任界值，可用于<code>防止 Broker 在重启后直接根据 HW 截断数据，以及数据不一致的情况</code>。它由以下两部分组成：</p><ul><li>Epoch：一个单调增加的版本号，每当 Leader 发生变更都会递增1，所以版本号较小的 Leader 会被认为是过期的 Leader，不会再行使 Leader 权力 </li><li>Start Offset（起始位移）：记录的第一条消息日志的偏移量</li></ul><p>例如现在有两个 Leader Epoch，分别是 &lt;0，0&gt; 和 &lt;1，20&gt;。既表示 &lt;0，0&gt; 是第一任 Leader，且到目前为止记录了 20 条消息日志（因为偏移量从0开始），而  &lt;1，20&gt; 则是第二任 Leader，它的第一条消息日志的偏移量是 20。</p><p>2）更新时机</p><ul><li><p>每个 Partition 都会缓存一份 Leader Epoch，同时还会定期地将这些信息持久化到一个 checkpoint 文件中</p></li><li><p>当 Leader Replica 将消息日子写入到磁盘时，Broker 会尝试更新这部分缓存（既如果是首次写入就必须向缓存中增加一个 Leader Epoch 条目，否则就不做更新）</p></li><li><p>一旦发生 Leader 变更，新的 Leader Replica 就会查询这部分内容，取出对应的 Leader Epoch 的起始位移然后递增 1 作为自己的新任期</p></li></ul><p>3）如何防止数据丢失问题？</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/027.png"></p><p>4）如何防止数据不一致问题？</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/001.png"></p><h2 id="Java-kafka-Producer"><a href="#Java-kafka-Producer" class="headerlink" title="Java kafka Producer"></a>Java kafka Producer</h2><h3 id="生产者模型"><a href="#生产者模型" class="headerlink" title="生产者模型"></a>生产者模型</h3><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/005.png"></p><blockquote><p>注意：</p><ol><li><p>Producer 的 send 方法是异步的，所以返回不代表发送成功。消息的发送会有一条专门负责冲刷缓冲区的线程来完成</p></li><li><p>Producer#send 操作可以是原子性的，即当前批次（batch）要么全部写入缓冲区，要么全部失败。</p></li><li><p>但该功能默认是关闭的，只有在事务操作期间才会开启，即 beginTransaction、commitTransaction、 abortTransaction 等操作</p></li><li><p>开始事务还需要如下配置：</p><ol><li>enable.idempotence &#x3D; true。该配置能够让消息幂等，且会隐式开启如下配置<ol><li>acks &#x3D; all</li><li>retries &#x3D; Integer.MAX_VALUE</li><li>max.inflight.requests.per.connection &#x3D; 1</li></ol></li><li>transctional.id &#x3D; 自定义名字</li></ol></li><li><p>Kafka支持以下三种消息交付方式：</p><ol><li>至少交付一次：默认策略</li><li>最多交付一次：关闭重试</li><li>精确交付一次：事务+幂等</li></ol></li></ol></blockquote><ul><li><p><strong>ProducerRecord：</strong>消息对象</p></li><li><p><strong>Serializer：</strong>消息对象序列化器</p></li><li><p><strong>Partitioner：</strong>分区器。将已经序列化的消息进行分区</p><ul><li><p>可以自定义分区器将 key 相同的消息发送到同一个 Partition 中。参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line"><span class="keyword">return</span> Math.abs(key.hashCode()) % partitions.size(); <span class="comment">// 取模操作</span></span><br><span class="line"><span class="comment">// 注意，以上取模方式不利于 Partition 数量的扩容缩容，如果考虑后期的扩展建议使用一致性Hash来完成</span></span><br></pre></td></tr></table></figure></li><li><p>若果 ProducerRecord 没有指定 key 则会用默认策略来选择分区。在 Producer 2.4 版本前会采用<strong>轮询</strong>策略来选择发送分区，如下：</p></li></ul><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/020.png"></p><ul><li><p>除了轮询策略外还可以用<strong>随机</strong>策略。参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line"><span class="keyword">return</span> ThreadLocalRandom.current().nextInt(partitions.size());</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>消息缓冲区：</strong></p><ul><li>用于积攒要发送的消息，减少用户态和内核态切换次数</li><li>提高消息发送操作的吞吐量</li></ul></li></ul><h3 id="producer-interceptor"><a href="#producer-interceptor" class="headerlink" title="producer interceptor"></a>producer interceptor</h3><p>生产者拦截器，可以在<strong>消息序列化前</strong>将其拦截，做一些消息统一定制修改或记录日志等操作。</p><p>自定义拦截器可通过 ProducerInterceptor 接口实现，然后将其添加进生产者配置中即可（ProducerConfig.INTERCEPTOR_CLASSES_CONFIG）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProducerInterceptor</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">Configurable</span> &#123;</span><br><span class="line">    <span class="comment">// 拦截消息</span></span><br><span class="line">    <span class="keyword">public</span> ProducerRecord&lt;K, V&gt; <span class="title function_">onSend</span><span class="params">(ProducerRecord&lt;K, V&gt; record)</span>;</span><br><span class="line">    <span class="comment">// 接收到Broker ACK应答后回调</span></span><br><span class="line">    <span class="comment">// 当Exception为null时消息生产成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span>;</span><br><span class="line">    <span class="comment">// 拦截器关闭时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义分区策略"><a href="#自定义分区策略" class="headerlink" title="自定义分区策略"></a>自定义分区策略</h3><p>上面已经提到过，Partitioner 会根据 ProducerRecord 中的 key 来决定将消息数据发送到哪个 Partition 上。但如果没有指定 key，则会按照默认策略来选择发送分区。</p><p>默认策略在 KafkaProducer 2.4 版本之前是轮询，而 2.4 版本开始改成了<strong>黏性分区策略</strong>。如果默认的分区策略无法满足你的业务需求，可以尝试手动现分区策略。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Partitioner</span> <span class="keyword">extends</span> <span class="title class_">Configurable</span>, Closeable &#123;</span><br><span class="line">    <span class="comment">// 分区逻辑实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(String topic, Object key, <span class="type">byte</span>[] keyBytes, Object value, <span class="type">byte</span>[] valueBytes, Cluster cluster)</span>;</span><br><span class="line">    <span class="comment">// Partitioner关闭，用于回收资源操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：</p><ul><li>2.4 版本开始默认分区策略为 DefaultPartitioner，逻辑如下：<ul><li>指定了分区，则发送到指定分区</li><li>没有指定分区，但指定了key，则基于key的hash值来选择分区</li><li>没有指定分区和key，则使用黏性分区策略</li></ul></li><li>黏性分区策略<ul><li>随机选择一个分区，将没有指定分区和key的消息发送到该分区上，直到填满一个 batch 或该 batch 处于已完成状态时，就再随机选择另外一个分区进行相同的操作</li><li>通过黏性分区策略可以增大 Producer 的吞吐量，因为它可能让 batch 更加丰满</li></ul></li></ul><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/023.png"></p><h3 id="常用配置参数"><a href="#常用配置参数" class="headerlink" title="常用配置参数"></a>常用配置参数</h3><p>bootstrap.servers</p><ul><li>kafka broker地址，host:ip，多个用逗号隔开</li></ul><p>key.serializer</p><ul><li>指定 key 使用那种序列化器(必须使用全类名)</li></ul><p>value.serializer</p><ul><li>指定 value 使用那种序列化器(必须使用全类名)</li></ul><p>acks（重要）</p><ul><li><p>用于判断消息是否发送成功的依据</p></li><li><p>0：Producer 完全不理会 Replica 是否已经日志落盘成功，发送完一个批消息后会马上发下一个。这时 Producer 吞吐量最高，但因为能确认日志是否落盘成功，所以存在丢失日志的风险</p></li><li><p>1（默认）：Producer 只关注 Leader Replica 是否已经日志落盘成功。该配置级别是吞吐量和安全性的折中点</p></li><li><p>-1或all：Producer 会等待集群中所有 Replica 的日志落盘成功才会发送下一个批次的消息。消息能够确保落盘成功，但吞吐量最低</p></li></ul><p>compression.type</p><ul><li><p>用于指定消息的压缩类型，默认为none，既不对消息进行压缩操作</p></li><li><p>目前 kafka 支持的压缩格式有 gzip、snappy、lz4、zstd（Kafka 2.1 开始支持，建议以官方文档为准）</p></li></ul><p>retries（重要）</p><ul><li>消息重发机制</li><li>消息发送失败的原因可能是<strong>网络问题</strong>或<strong>正处于Leader选举</strong>导致</li><li>值 0 时（默认），表示<strong>默认不进行重试</strong>。值为 n 时，表示可以重试 n 次</li><li>要十分注意<ul><li>重试操作<strong>可能会导致消息重复发送</strong>。例如因为网络原因Brokder保存消息成功但没有成功响应，而Producer进行了消息重发</li><li>开启重试操作<strong>还可能会出现消息乱序问题</strong>。例如a、b、c三条消息，a和c发送成功但b失败了，b重新发送。</li></ul></li></ul><p>retry.backoff.ms（重要）</p><ul><li>重试的时间间隔（默认为100毫秒）</li></ul><p>max.in.flight.requests.per.connection</p><ul><li><p>在 Broker 未响应之前 producer 可以 send 多少条数据（默认为5）</p></li><li><p>注意，如果开启了 retries 但又想<strong>重试消息要优先于之后的消息</strong>，就可以将该值设置为1。</p><ul><li>举个栗子：当前有两条数据 xxx 和 ccc 要发送，但因为某些原因 xxx 发送失败进入了重试操作，然而在重试期间 producer 又给发送了消息 nnn 且发送成功了，这时就算 xxx 重试成功，但显然已经乱需了。而将max.in.flight.requests.per.connection 设置为1，那么重试发送 xxx 期间因为 broker 还没应答，所以 send 就不会将 nnn 发送</li></ul></li></ul><p>batch.size（重要）</p><ul><li>发送消息的批次大小（默认16 k）</li><li>适当地增加该值可以提高 Producer 的吞吐量，但会降低消息发送的实时性和加大内存消耗</li></ul><p>linger.ms（重要）</p><ul><li>基于时间的 batch 打包策略，可配合 batch.size 使用</li><li>相当于满足该值后就会作为一个 batch。适当地提高该配置值可以让 batch 填充得更满，因为正常情况下（linger.ms为0时）batch 可能没满就被 Sender 线程发送出去了（例如当队列中有多个batch时，Sender 线程是不会管batch是否装满的）</li><li>该值默认为 0 秒，既不开启该功能</li></ul><p>buffer.memory（重要）</p><ul><li><p>消息发送<strong>缓冲区（池）</strong>的大小（默认为 32 M）</p></li><li><p>该值不宜设置得太小，特别是多线程共同操作同一个Producer时。设置太小而 send 频率又特别高的话就会导致缓冲池很容易被撑爆，一旦被撑满 send 就会被阻塞，直到腾出空间为止</p></li><li><p>相关异常：TimeoutException：Failed to allocate memory within the configured max blocking time </p></li><li><p>batch.size 和 buffer.memory 的区别：</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/022.png"></p></li></ul><p>block.on.buffer.full</p><ul><li>缓冲区用尽后停止接受新的消息，且不抛出异常</li></ul><p>max.request.size（重要）</p><ul><li>设置发送消息的最大值</li><li>默认1M，超出该值后会抛出 RecordTooLargeException 异常</li><li>如果消息很大，就可以适当地调大该值，但建议对应着 Brokder 的message.max.bytes（Brokder 能够接收消息的最大值）来设置</li></ul><p>request.timeout.ms</p><ul><li>设置 Brokder 响应超时的时间（默认为30s）</li><li>即 producer 发送请求，broker要在 30s 内响应，否则会抛出 TimeoutException</li></ul><p>partitioner.class</p><ul><li>指定自定义分区策略实现</li></ul><p>interceptor.classes</p><ul><li>指定自定义消息拦截器实现</li></ul><p>connections.max.idle.ms（重要）</p><ul><li>TCP 连接的空闲时间，默认为 9 分钟</li><li>若果 TCP 连接在 9 分钟内没有任何字节流过，就将该 TCP 连接关闭</li><li>如果是频繁创建连接且很快用完的客户端，建议将该值调低，否则如果连接到达了最大值就会导致连接被拒绝（Connection reset）</li></ul><h2 id="Broker常用配置"><a href="#Broker常用配置" class="headerlink" title="Broker常用配置"></a>Broker常用配置</h2><p>broker.id</p><ul><li>在集群中的唯一ID</li></ul><p>zookeeper.connect</p><ul><li>zookeeper的地址</li><li>格式：ip:port</li></ul><p>listeners</p><ul><li><p>Broker 的监听（bind）的地址</p></li><li><p>格式：listeners &#x3D; listener_name:&#x2F;&#x2F;host_name:port</p></li><li><p>例子：listeners &#x3D; PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</p></li></ul><p>advertised.listeners</p><ul><li>和 listeners 配置类似，一般用在有内网ip和外网ip的服务器上时（例如云服务器）<ul><li>listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;内网ip:9092</li><li>advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;外网ip:9092</li></ul></li></ul><p>num.network.threads</p><ul><li>用于接收网络IO（accept）请求的线程数（默认为3）</li></ul><p>num.io.threads</p><ul><li>用于处理网络IO任务的线程数（默认为8）</li><li>注意 Kafka Broker使用 Reactor 模式处理客户端请求。所以从 num.network.threads 和 num.io.threads 两个设置不难看出它默认采用的是<strong>多Reactor多线程模式</strong></li></ul><p>log.dirs</p><ul><li>指定消息数据的持久化目录 </li><li>例子：log.dirs&#x3D;&#x2F;tmp&#x2F;data 或者 log.dirs&#x3D;&#x2F;tmp&#x2F;data,&#x2F;tmp&#x2F;data2</li><li>如果服务器有多块磁盘，则推荐指定多个日志文件</li></ul><p>auto.create.topics.enable</p><ul><li>是否允许自动创建 Topic</li><li>建议设置为 false 提高创建成本让命名更加规范</li></ul><p>auto.leader.rebalance.enable </p><ul><li>是否开启 Leader 平衡策略，用于检查是否有必要重新选举</li><li>开启该功能后默认 300s 扫描一次 Broker，如果 Leader 的比例（即 Broker 上有较多的 Leader）则会发起重新选举</li><li>开启该配置能够更合理地利用集群服务器资源，但 Leader 选举会导致服务短暂不可用</li></ul><p>num.replica.fetchers（重要）</p><ul><li>指定 Follower Replica 用多少条线程拉取 Leader Replica 的数据（默认为 1 条线程）</li><li>如果 CPU 充裕可以适当地增加线程以加速拉取数据</li></ul><p>unclean.leader.election.enable （重要）</p><ul><li>是否允许非 ISR 成员参与 Leader 选举（默认值为false） </li><li>如果设置为 true，在较为极端的情况下，如 ISR 全部宕机而非 ISR 竞选成为 Leader 就会造成数据丢失</li><li>那何为 unclean 呢？指非 ISR 成员节点</li></ul><p>replica.lag.time.max.ms</p><ul><li>控制 Replica 复制滞后的最大容忍时间（默认为 10 秒）</li><li>表示当 Follower Replica 数据落后超过 10 秒就会被踢出 ISR 集合</li></ul><p>delete.topic.enable</p><ul><li>是否允许删除 topic（默认为true）</li></ul><p>log.retention.{hours|minutes|ms}</p><ul><li>设置日志文件保存时间（默认保存7天）</li></ul><p>log.retention.bytes</p><ul><li>设置日志文件的最大保留容量值</li><li>该参数和 log.retention 类似，当日志超过该值就会执行清理（默认为-1，不启用该功能）</li></ul><p>min.insync.replicas（重要）</p><ul><li>设置必须应答成功的 ISR Replica 数</li><li><strong>该配置只在 Producer 中 acks 值为 -1&#x2F;all 时才生效</strong></li><li>一次消息写入操作成功与否是取决于 ISR 成员的 ack 响应数量。譬如  Partition&#x3D;3、min.insync.replicas&#x3D;2、但当前 ISR 集合中只有 1 台，因此不能满足 min.insync.replicas 要求</li></ul><p>message.max.bytes（重要）</p><ul><li>指定 Broker 能够接收的每条消息的最大容量值（默认为1M）</li><li>建议重新设置该值，因为 Kafka Producer 往往会批量发送消息，所以超过 1 M 的情况也很常见</li></ul><h2 id="Java-kafka-Consumer"><a href="#Java-kafka-Consumer" class="headerlink" title="Java kafka Consumer"></a>Java kafka Consumer</h2><blockquote><p>注：</p><ul><li>新版（Java编写） KafkaConsumer 是单线程架构的，且不是线程安全的</li><li>从 Kafka 0.10.1 版本后发送消费者心跳包操作会由专门的心跳线程处理，而且该线程还能通过心跳包感知分区再均衡的发生</li></ul></blockquote><h3 id="Consumer-Group概念"><a href="#Consumer-Group概念" class="headerlink" title="Consumer Group概念"></a>Consumer Group概念</h3><p><strong>为什么需要消费者组？</strong></p><p>当 producer 生产消息的速度比 consumer 的消费速度快时，consumer 的消费能力就显得低下了，所以因此而无法满足时性实时消费性较高的业务场景（还与发送缓冲区有关）。而消费者组其实就是用来提高 consumer 消费能力而设计的，可以将消费者组视为一个多线程的 consumer 。</p><blockquote><p>介绍</p></blockquote><p>消费者组订阅 Topic T1，其中 T1 的 Partition 数量为4。</p><p>1）费者组中仅有1个消费者时</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/007.png"></p><p>2）消费者组有2个消费者时</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/008.png"></p><p>3）当消费者组有4个消费者时</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/009.png"></p><p>4）当消费者组中的消费者数量超过了Partition数量时（不会提高消费能力）</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/010.png"></p><p>5）当有 2 个消费者组同时订阅 Topic T1 时（消费者组之间互不影响）</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/011.png"></p><p>小结</p><ol><li>同 Consumer Group 中不同的 Consumer 在同一时刻无法消费同一个 Partition</li><li>Consumer Group 中的 Consumer 可以同时消费多个 Partition<ul><li>不能消费不属自己负责的 Partition，由分区再均衡确定消费关系</li></ul></li><li>即使 Consumer Group 的 Consumer 数量多于 Partition 数量，也不会提高消费能力</li><li>多个 Consumer Group 同时订阅同一个 Topic 时，互不干扰</li></ol><h3 id="分区再均衡"><a href="#分区再均衡" class="headerlink" title="分区再均衡"></a>分区再均衡</h3><blockquote><p>是什么？</p></blockquote><p>&amp;emsp;&amp;emsp;在消费者组的 Consumer 数量没超过 Partition 数量的情况下，每一个 Consumer 都能分配到一个或多个独自负责的 Partition 。但现在因为某些原因某个 Consumer 宕机了，这时消费者组就会根据<strong>分配策略</strong>来重新设置 Connsuemr 和 Partition 的消费关系。而这个过程就叫做分区再均衡。</p><p>注：分区再均衡和 JVM 的 STW 类似，在期间正常的 Consumer 是不能继续消费的，而需要等待分区再均衡结束。</p><blockquote><p>什么情况下会发生分区再均衡？</p></blockquote><ol><li><p>消费者组成员数量发生变化</p><ul><li>譬如有新 Consumer 加入到 Group 中，又或是有 Consumer 宕机导致从 Group 中脱离时</li><li>Broker 会作为 Consumer Group 的<code>协调器</code>，Consumer 则需要定时地主动向协调者发送心跳包（在Kafka-0.10.1版本之后有专门的线程来发送心跳包），而如果 Consumer 长时间（session.timeout.ms指定，默认10秒）没有向协调者发送心跳包的话就会被协调者视为死亡从而导致被踢出Group 而导致分区再均衡</li></ul></li><li><p>Topic 的 Partition 数量发生变化</p></li><li><p>订阅的 Topic 数量发生变化</p><ul><li>譬如 Kafka 是支持使用正则表达式匹配订阅 Topic 然后消费的</li></ul></li></ol><blockquote><p>如何尽量避免再均衡？</p></blockquote><p><strong>订阅的 Topic 数量发生变化</strong>、<strong>Topic 的 Partition 数量发生变化</strong>这两种情况是不能避免的，因为这时业务上的需要，所以我们应该关注的是<strong>消费者组成员数量发生变化</strong>这种情况。</p><p>譬如除了维护人员主动增加 Consumer 外，协调器在特定时间内如果没有收到 Consumer 的心跳包也会导致分区再均衡的发生。</p><p>为了降低这种情况的发生率，我们可以通过调节以下参数来做到：</p><ul><li>session.timeout.ms<ul><li>该值默认为 10 秒，表示协调器必须在这段时间内收到心跳包，否者就将其踢除出消费者组（导致分区再均衡）</li></ul></li><li>heartbeat.interval.ms<ul><li>用于限制 Consumer 发送心跳包的时间间隔</li><li>注意该值必须小于 session.timeout.ms 才有意义</li></ul></li><li>max.poll.interval.ms<ul><li>用于限制 Consuemr 消费消息的最长时间，该值默认为 5 分钟</li><li>如果超过了该配置的时间，协调器就会认为该 Consumer 消费能力低下（通过 Lag 值判断），从而将其踢除出消费者组（导致分区再均衡）</li><li>在 0.10.1 版本前 Consumer 是没有独立的心跳线程的，也就是说 Consumer 只有在 conmit&#x2F;poll 操作时才会发送心跳包，所以如果这时 max.poll.interval.ms 就不能超过 session.timeout.ms，因为如果心跳包一旦迟了发送就会被被踢出费者组（导致分区再均衡）</li><li>如果在消费消息期间发生了分区再均衡，那么 Consumer 在 commit 时将会发生CommitFailedException 异常，该异常是不可恢复的，它要表达的是分区再均衡导致 Parition 分配给了其它 Consumer，因此当前 Conusmer 并不能将偏移量再提交到当前 Partition。所以为了避免以上情况 Conusmer 就应该及时消费消息，例如<strong>增大max.poll.interval.ms</strong>或<strong>降低max.poll.records</strong>（一次poll所获取到的消息数量），再者就是<strong>使用多线程</strong>增加 Consumer 的消费能力</li></ul></li></ul><blockquote><p>协调者指的是什么？</p></blockquote><p>协调者（Coordinator）主要负责管理消费者组。</p><p>Coordinator 是一个专门为 Consumer Group 服务的角色（与 Group ID 对应）。</p><p>它有以下特点：</p><ul><li>每一个 Broker 都有自己的 Coordinator </li><li>负责管理如下内容<ul><li>分区再均衡</li><li>消费者偏移量</li><li>消费者组成员</li></ul></li></ul><p>那么消费者是如何确立与自己对应的 Coordinator 的呢？有以下 2 个步骤：</p><ol><li><p>确定当前消费者组所消费的 Topic 偏移量由哪一个 __consumer__offsets 的 Partition 来保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partitionId=Math.abs(groupId.hashCode() % offsetsTopicPartitionCount)</span><br></pre></td></tr></table></figure></li><li><p>找出该 Partition 的 Replica Leader 所在的 Broker，而该 Broker 就是会成为当前这个消费者组的 Coordinator 了</p></li></ol><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>bootstrap.servers</p><ul><li>kafka broker地址，host:ip，多个用逗号隔开</li></ul><p>key.deserializer</p><ul><li>指定 key 使用那种序列化器（必须使用全类名）</li></ul><p>value.deserializer</p><ul><li>指定value使用那种序列化器（必须使用全类名）</li></ul><p>group.id</p><ul><li><p>指定集群唯一消费者组的ID</p></li><li><p>建议尽量取一个与业务有关或者有意义的名字，可以提高辨析度</p></li></ul><p>session.timeout.ms（重要）</p><ul><li>指定协调器对 Consumer 停止发送心跳包这种行为的最大容忍限度（默认为10秒）</li><li>一旦超时 Consumer 就会被协调器踢出消费者组（导致分区再均衡）</li></ul><p>max.poll.interval.ms（重要）</p><ul><li><p>Consumer 处理消息的最大时间限制（两次 poll 之间的时间，默认为 5 分钟）</p></li><li><p>建议根据实际消息的大小来设置该值</p></li></ul><p>auto.offset.reset（重要）</p><ul><li>指定消费者的消费模式</li><li>提供了三种消费模式：<ul><li>latest（默认）：<ul><li>在偏移量<strong>无效时</strong>（没有提交过偏移量），会从最新插入的那条记录开始消费（即在消费者启动后插入的记录）</li><li>在偏移量<strong>有效时</strong>（已经提交过偏移量），会从最新偏移量位置开始消费（即上一次提交的 offset 位置）</li></ul></li><li>earliest：<ul><li>在偏移量<strong>无效时</strong>，会从起始位置开始消费</li><li>在偏移量<strong>有效时</strong>，会从最新偏移量位置开始消费（即上一次提交的 offset 位置）</li></ul></li><li>none：<ul><li>各个 Replica 都存在有效的 offset 时，从有效offest位置开始消费</li><li>只要有一个 Replica 不存在有效的 offset（没有提交过、已过时或已被删除），则抛出异常</li></ul></li></ul></li></ul><p>enable.auto.commit（重要）</p><ul><li>是否开启自动提交 offset 功能（默认为true，默认为 5000 ms）</li><li>为了尽量避免重复消费建议设为 false，然后改由程序来控制提</li></ul><p>auto.commit.interval.ms</p><ul><li>控制自动提交消费者偏移量的时间间隔</li><li>该配置只在 enable.auto.commit &#x3D; true 时才生效</li></ul><p>partition.assignment.strategy</p><ul><li><p>指定分区分配策略，即如何将分区分配给消费者</p></li><li><p>默认为 RangeAssignor，除此之外还有 RoundRobinAssignor、StickAssignor</p></li></ul><p>client.id</p><ul><li>设置客户端ID</li></ul><p>fetch.max.bytes（重要）</p><ul><li>指定单次获取消息数据的最大字节数</li><li>如果实际业务中消息比较大，则应该将该值适当地调高，否则无法获取数据来消费</li><li>调高该值有利于增加 Consumer 的吞吐量</li></ul><p>max.poll.records（重要）</p><ul><li>用于指定单次 poll 能够获取到的最大 record 数量（默认为500）</li><li>建议如果程序处理消息所需的时间较长（即Consumer消费能力不高的情况下），则该值应该设置得小一些（例如1），否则很容易被协调器提出消费者组导致从而导致分区再均衡</li></ul><p>heartbeat.interval.ms（重要）</p><ul><li>指定消费者发送心跳包的时间间隔（默认为 3000 ms）</li><li>该值必须必比 Broker 的 session.timeout.ms 配置小，否则没有意义。该值通常不高其于1&#x2F;3，甚至可以更低</li><li>heartbeat.interval.ms 值越低，则可以让协调器更快地检测到当前消费者是否出现故障</li></ul><h3 id="手动提交offset"><a href="#手动提交offset" class="headerlink" title="手动提交offset"></a>手动提交offset</h3><h4 id="自动提交存在的问题"><a href="#自动提交存在的问题" class="headerlink" title="自动提交存在的问题"></a>自动提交存在的问题</h4><blockquote><p>问题1：不能及时消费导致数据丢失</p></blockquote><p>譬 Consumer 消费能力较弱，导致 offset 在未完成消费前被自动提交，而这时又刚好遇上Consumer 宕机就会导致数据丢失。因为这时 offset 已经提交，所以即使发生分区再均衡，其它 Consumer 也只会根据这个 offset 继续消费。</p><blockquote><p>问题2：不能及时提交 offset 导致重复消费</p></blockquote><p>譬如 Consumer offset 自动提交的频率为 5 秒。假设在前 3 秒已经消费了不少消息，但又因为未到 5 秒，所以暂时还无法提交 offset，而这时正好遇上宕机或者分区再均衡就会导致先前 3 秒内所消费的消息会被再次被消费。</p><blockquote><p>如何解决以上两个问题呢？</p></blockquote><p>&amp;emsp;&amp;emsp;改为手动提交 offset 来解决。例如可以在真正处理完消息后才手动交 offset ，而不是在此之前或较久的之后提交。</p><h4 id="同步提交"><a href="#同步提交" class="headerlink" title="同步提交"></a>同步提交</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        consumer.commitSync(); <span class="comment">// 同步提交</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (CommitFailedException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;commit failed&quot;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步提交是一个阻塞操作，需要等待 Broker 应答后才能继续后续的操作。因此只要不是发生无法恢复的异常 commitSync() 都能提交成功，但这样无疑会降低消费者的消费吞吐量。</p><h4 id="异步提交"><a href="#异步提交" class="headerlink" title="异步提交"></a>异步提交</h4><p>用于解决同步提交导致吞吐量下降的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">consumer.commitAsync(); <span class="comment">// 异步提交</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，因为 commitAsync() 是异步的，所以并不能保证成功地将 offset 提交到 Broker。所以这时我们可以给 commitSync() 设置一个回调方法，当提交失败时让其可以进行重试操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    consumer.commitAsync(<span class="keyword">new</span> <span class="title class_">OffsetCommitCallback</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">(</span></span><br><span class="line"><span class="params">            Map&lt;TopicPartition,</span></span><br><span class="line"><span class="params">            OffsetAndMetadata&gt; offsets, </span></span><br><span class="line"><span class="params">            Exception exception)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 异常处理</span></span><br><span class="line">                <span class="comment">// 重试</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="混合提交"><a href="#混合提交" class="headerlink" title="混合提交"></a>混合提交</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        consumer.commitAsync(); <span class="comment">// 异步提交</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Unexpected error&quot;</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 同步提交，用于防止异步提交失败</span></span><br><span class="line">        consumer.commitSync();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        consumer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Kafka手动提交案例"><a href="#Spring-Kafka手动提交案例" class="headerlink" title="Spring Kafka手动提交案例"></a>Spring Kafka手动提交案例</h4><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">producer:</span></span><br><span class="line">      <span class="attr">key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="attr">value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">enable-auto-commit:</span> <span class="literal">false</span> <span class="comment"># 禁止自动提交offset</span></span><br><span class="line">      <span class="attr">max-poll-records:</span> <span class="number">100</span> <span class="comment"># 默认500条</span></span><br></pre></td></tr></table></figure><p>JavaConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConsumerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConsumerFactory&lt;String, String&gt; <span class="title function_">kafkaConsumerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 注入消费者配置</span></span><br><span class="line">        Map&lt;String, Object&gt; map = properties.buildConsumerProperties();</span><br><span class="line">        <span class="comment">// 默认允许处理消息的最大时间，默认300s</span></span><br><span class="line">        map.put(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, <span class="number">50000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultKafkaConsumerFactory</span>&lt;&gt;(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;String, String&gt;&gt; <span class="title function_">kafkaListenerContainerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = <span class="keyword">new</span> <span class="title class_">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(kafkaConsumerFactory());</span><br><span class="line">      <span class="comment">// 消费完马上提交</span></span><br><span class="line">factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE); </span><br><span class="line">      <span class="comment">// 异步提交</span></span><br><span class="line">      factory.getContainerProperties().setSyncCommits(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@KafkaListener(topics = &quot;test&quot;, groupId = &quot;test-consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listener</span><span class="params">(List&lt;String&gt; recordes, Acknowledgment ack)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理消息</span></span><br><span class="line">    <span class="keyword">for</span> (String recorde : recordes) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------:&quot;</span> + recorde);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动提交offsset</span></span><br><span class="line">    ack.acknowledge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="Zookeeper-相关"><a href="#Zookeeper-相关" class="headerlink" title="Zookeeper 相关"></a>Zookeeper 相关</h3><blockquote><p>注意</p><ul><li>下图并不适合目前较新版本的 Kafka 集群，因为在较新版本的 Kafka 中元数据是由 Broker Controller 来维护的，既其它 Broker 只需要从 Broker Controller 中获取即可而不用从 Zookeeper 中拉取。</li><li>除此之外，在 KIP-500Z 中正在考虑使用 Raft 算法来代替 Zookeeper 选举，因此在日后的版本更新中 Zookeeper 的职责可能会越来越薄弱，到最后完全移除 Zookeeper</li></ul></blockquote><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/013.png"></p><blockquote><p>保存的 Broker 集群信息 </p><p>图中<strong>直角方块</strong>代表持久性节点，而<strong>圆角方块</strong>则代表临时节点</p></blockquote><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/019.png"></p><ul><li>ids 节点维护的是 Broker 的唯一标识，节点内容为 Broker 的元信息</li><li>topics 节点维护的是每个 Topic 对应的 Partitions 信息，而数字节点表示 Partition 的编号。其中 state 节点由 Replica Leader 来维护，保存的是当前 Replica Leader 以及其它 ISR 成员的信息。但当 Replica Leader 不可用时，该节点就会被新 Replica Leader 重新创建和维护</li></ul><p>前台启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-stop.sh</span><br></pre></td></tr></table></figure><ul><li>这里多说一句，不要动不动就 <code>kill -9</code> 强制杀死 Zookeeper 进程，因为这样可能会导致 Zookeeper 无法及时处理资源，以至于下次无法正常启动。而如果发生这种情况，可以尝试将 Zookeeper 的数据删除后再重启。</li></ul><p>zkClient连接zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-shell.sh localhost:2181</span><br></pre></td></tr></table></figure><h3 id="Broker-相关"><a href="#Broker-相关" class="headerlink" title="Broker 相关"></a>Broker 相关</h3><p>前台启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h3 id="Topic-相关"><a href="#Topic-相关" class="headerlink" title="Topic 相关"></a>Topic 相关</h3><p>手动创建Topic</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic testx</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p>partitions：Topic 的分区数</p></li><li><p>replication-factor：每个分区的副本数量。注意，该值至少为1，为1时既只有 Replica Leader</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./bin/kafka-topics.sh --create --zookeeper 192.168.0.201:2181 --replication-factor 2 --partitions 2 --topic test2</span><br><span class="line">Created topic test2.</span><br><span class="line"></span><br><span class="line">&gt; ./bin/kafka-topics.sh --zookeeper 192.168.0.201:2181 --describe --topic test2</span><br><span class="line"></span><br><span class="line">Topic: test2PartitionCount: 2ReplicationFactor: 2Configs: </span><br><span class="line">Topic: test2Partition: 0Leader: 0Replicas: 0,5Isr: 0,5</span><br><span class="line">Topic: test2Partition: 1Leader: 5Replicas: 5,0Isr: 5,0</span><br></pre></td></tr></table></figure><ul><li>注意：其中 0 和 5 分别代表集群中 Broker 的 ID 值。该值可以通过配置文件配置</li><li>输出第一行的意思是：分区0的 Replica Leader 位于 Borker-0 上，其中该分区有2个副本，分别位于 Broker-0和Broker-5上（位于Broker-0上的副本其实就是Replica Leader），而该分区的同步副本集成员分别有 Broker-0 和 Broker-5 （Isr集合是包含 Replica Leader 的）</li></ul><p>查看 Broker 中有那些topic</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --zookeeper localhost:2181 --list</span><br></pre></td></tr></table></figure><p>动态修改分区数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --alter --zookeeper localhost:2181 --partitions 3 --topic testx</span><br></pre></td></tr></table></figure><p>动态修改分区的 replication-factor 数量</p><ul><li>首先需要创建一个json文件，添加上下面有关topic的元数内容，这里我将这个文件叫update-topic.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;partitions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;topic&quot;</span><span class="punctuation">:</span><span class="string">&quot;testx&quot;</span><span class="punctuation">,</span><span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;replicas&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;topic&quot;</span><span class="punctuation">:</span><span class="string">&quot;testx&quot;</span><span class="punctuation">,</span><span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;replicas&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;topic&quot;</span><span class="punctuation">:</span><span class="string">&quot;testx&quot;</span><span class="punctuation">,</span><span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;replicas&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面的意思是将对应 partition 的 replica 分别放在 brokerid 为0，1，2这三台broker上，然后使用以下命令修改 topic 的分区数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file ./update-topic.json --execute</span><br></pre></td></tr></table></figure><h3 id="生产者相关"><a href="#生产者相关" class="headerlink" title="生产者相关"></a>生产者相关</h3><p>控制台生产消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic testx </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br></pre></td></tr></table></figure><p>快速生产测试用消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-verifiable-producer.sh --broker-list localhost:9092 --topic testx --max-messages 500000 </span><br></pre></td></tr></table></figure><ul><li>上面的意思是向指定 topic 生产从0到499999个数字消息</li></ul><p>测试生产者的生产性能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-producer-perf-test.sh --topic testx --num-records 100000 --record-size 1000 --throughput 2000 --producer-props bootstrap.servers=localhost:9092</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>topic：指定测试的topic</li><li>num-records：指定这次测试需要生产的消息数量</li><li>record-size：单个消息的大小（字节）</li><li>throughput：吞吐量最大消息限制（每秒），这是一个大约值</li><li>producer-props：生产者配置参数</li></ul><p>输出结果如下</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/014.png"></p><p>最后一行是结论，意思是生产了10万条数据，每秒大概生产2千条（上面限制参数指定），平均每次延时2.08毫秒，而最大延时是318毫秒</p><p>进行第二次测试，这次添加生产者参数：acks &#x3D; 0 (默认1)，意思是生产者无需等待broker应答，这时生产者可达最高吞吐量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-producer-perf-test.sh --topic testx --num-records 100000 --record-size 1000 --throughput 2000 --producer-props bootstrap.servers=localhost:9092 acks=0</span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/015.png"></p><p>可以看到添加 acks&#x3D;0 后平均延时下降将近一半。</p><h3 id="消费者相关"><a href="#消费者相关" class="headerlink" title="消费者相关"></a>消费者相关</h3><p>控制台消息消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic testx</span><br></pre></td></tr></table></figure><ul><li>注意：–from-beginning 表示从上一次提高的offset处开始消费，而不是我们理解的从头消费</li></ul><p>查看目前有那些消费者组（列出所有消费者组id）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list</span><br></pre></td></tr></table></figure><p>查看消费者组的消费情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group testx-group --describe</span><br></pre></td></tr></table></figure><p>输出以下内容</p><p><img src="/kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/016.png"></p><h3 id="其他维护命令工具"><a href="#其他维护命令工具" class="headerlink" title="其他维护命令工具"></a>其他维护命令工具</h3><p>实时校验和观察 topic 的 replica 同步情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-replica-verification.sh --broker-list localhost:9092 --topic-white-list testx</span><br></pre></td></tr></table></figure><p>删除指定分区下特定低水位offset的消息日志</p><ul><li>首先，编写关于topic的元数据json文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;&quot;partitions&quot;:[&#123;&quot;topic&quot;: &quot;testx&quot;, &quot;partition&quot;: 2,&quot;offset&quot;: 40000&#125;],&quot;version&quot;:1&#125;&quot; &gt; offset-json-file.json  </span><br></pre></td></tr></table></figure><p>表示删除 testx 的 partition2 中低于 40000 offset 的日志。然后执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-delete-records.sh --bootstrap-server localhost:9092 --offset-json-file ./offset-json-file.json</span><br></pre></td></tr></table></figure><p>打印指定 topic 的日志文件信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-log-dirs.sh --bootstrap-server localhost:9092 --describe --topic-list testx</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brokers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;broker&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;logDirs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;logDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/xxxx/apps/kafka-test/kafka_2.12-2.3.0/data&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;partitions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testx-1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">145159606</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;offsetLag&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isFuture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testx-0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">145064262</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;offsetLag&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isFuture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testx-2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">145007959</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;offsetLag&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;isFuture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>查看日志文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-dump-log.sh --files data/testx-0/00000000000000000000.log</span><br></pre></td></tr></table></figure><p>可以查看分区文件夹中的 .index、.log、.timeindex等文件。</p><ul><li>以下为log中2条消息的日志：<ul><li>bin&#x2F;kafka-dump-log.sh –files data&#x2F;testx-0&#x2F;00000000000000000000.log</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">baseOffset: 31183 lastOffset: 31184 count: 2 baseSequence: -1 lastSequence: -1 producerId: -1 producerEpoch: -1 partitionLeaderEpoch: 0 isTransactional: false isControl: false position: 32746211 CreateTime: 1568921770388 size: 2079 magic: 2 compresscodec: NONE crc: 2715532263 isvalid: true</span><br><span class="line"></span><br><span class="line">baseOffset: 31185 lastOffset: 31185 count: 1 baseSequence: -1 lastSequence: -1 producerId: -1 producerEpoch: -1 partitionLeaderEpoch: 0 isTransactional: false isControl: false position: 32748290 CreateTime: 1568921770390 size: 1070 magic: 2 compresscodec: NONE crc: 4201538556 isvalid: true</span><br></pre></td></tr></table></figure><ul><li><p>以下为index中2条消息的日志：</p><ul><li>bin&#x2F;kafka-dump-log.sh –files data&#x2F;testx-0&#x2F;00000000000000000000.index</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">offset: 3134 position: 3269239</span><br><span class="line">offset: 3139 position: 3274528</span><br></pre></td></tr></table></figure><ul><li><p>以下为timeindex中2条消息的日志：</p><ul><li>bin&#x2F;kafka-dump-log.sh –files data&#x2F;testx-0&#x2F;00000000000000000000.timeindex</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timestamp: 1568921728315 offset: 3134</span><br><span class="line">timestamp: 1568921728321 offset: 3139</span><br></pre></td></tr></table></figure><ul><li>从上面的信息可以的出结论<ul><li>index和timeindex文件只是维度不同，但都是定位索引的（position）</li><li>index&#x2F;timeindex文件和log文件不是一一对应的，而是从索引区间来定位消息</li></ul></li></ul><p>查看topic消费到的offset</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic testx</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testx:0:468335</span><br><span class="line">testx:1:468334</span><br><span class="line">testx:2:468332</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="如何保证消息不丢失"><a href="#如何保证消息不丢失" class="headerlink" title="如何保证消息不丢失"></a>如何保证消息不丢失</h3><p>数据丢失的核心原因 Producer 没有确保 Broker 持久化日志成功。</p><p><strong>Producer配置</strong></p><ul><li><p>block.on.buffer.full &#x3D; true</p><p>消息缓冲区满后，停止接收新的消息而不抛出异常（避免异常丢失数据）</p></li><li><p>acks &#x3D; all</p><p>Producer 需要确认所有 Broker 成功应答，否则认为发送不成功，进行重试发送</p></li><li><p>retries &#x3D; Integer.MAX_VALUE</p><p>将重试次数设置到最大值</p></li><li><p>max.in.flight.requests.per.connection &#x3D; 1</p><p>因为开启了重试，所以将其设置为 1，在 Broker 没应答前不发送数据</p></li><li><p>不使用 producer.send(msg)，而是使用 producer.send(msg, callback) 手动预防失败</p></li></ul><p><strong>Broker配置</strong></p><ul><li><p>unclean.leader.election.enable &#x3D; false</p><p>避免非 ISR 成员成为为 Leader 而导致数据丢失</p></li><li><p>replication.factor 设置大于等于 3</p><p>尽量使用备份来避免 Partition&#x2F;Replica 单点故障</p></li><li><p>min.insync.replicas &#x3D;  过半节点数</p><p>表示至少有过半节点数的 Replica 写入成功才让 Leader 响应客户端</p><p>该配置只有在 acks&#x3D;all 才有效，建议设置过半节点数</p></li></ul><p><strong>Consumer配置</strong></p><ul><li>采用手动提交偏移量，避免还没消费就提交了 offset</li><li>消费者应该及时消费消息，尽量使用消费者组来提供消费能力</li></ul><h3 id="如何保证只消费1次"><a href="#如何保证只消费1次" class="headerlink" title="如何保证只消费1次"></a>如何保证只消费1次</h3><p>一条消息被多次消费有以下原因</p><ol><li>offset 没能及时提交，导致重复消费<ul><li>解决方法是手动提交偏移量，且尽量做到消费完就马上提交</li></ul></li><li>生产者重试发送，导致相同的消息发送了多条<ul><li>可以直接关闭重试发送功能，或开启 Producer 消息幂等功能</li><li>也可以代码层面解决</li></ul></li></ol><h3 id="如何解决消息乱需问题"><a href="#如何解决消息乱需问题" class="headerlink" title="如何解决消息乱需问题"></a>如何解决消息乱需问题</h3><ul><li>目前而言 Kafka 是不不支持全局（多个Partition之间）有序的，而只能保证单个 Partition 内是有序的</li><li>而且当 Producer 开启重试功能后，单个Partition 内部也是可能会乱序。这时可以将 max.in.flight.requests.per.connection 设置为 1 解决</li></ul><h3 id="关于-Producer-消息幂等性"><a href="#关于-Producer-消息幂等性" class="headerlink" title="关于 Producer 消息幂等性"></a>关于 Producer 消息幂等性</h3><p>在 Producer 方可以通过添加 enable.idempotence &#x3D; true 配置参数来实现 Producer 发送消息的幂等性。但它有以下局限：</p><ol><li>只能保证单个 Partition 消息的幂等</li><li>只能保证当前会话发送的消息的幂等</li></ol><p>注意，当开启 enable.idempotence &#x3D; true 时，它默认会设置如下配置</p><ol><li>acks &#x3D; all</li><li>retries &#x3D; Integer.MAX_VALUE</li><li>max.inflight.requests.per.connection &#x3D; 1</li></ol><h3 id="关于-Kafka-的实时性"><a href="#关于-Kafka-的实时性" class="headerlink" title="关于 Kafka 的实时性"></a>关于 Kafka 的实时性</h3><p>导致 Kafka 实时性不足的原因：</p><ul><li>生产者采用了异步 send 实现消息发送</li><li>生产者采用了 batch、buffer 相关的机制提高生了发送吞吐量</li></ul><p>如果要想提高实时性，则可以通过条件以上相关的参数来解决。又或者直接选用实时性较好的 RocketMQ 来解决。</p><h3 id="监控-Kafka-Consumer-的消费进度"><a href="#监控-Kafka-Consumer-的消费进度" class="headerlink" title="监控 Kafka Consumer 的消费进度"></a>监控 Kafka Consumer 的消费进度</h3><blockquote><p>注意：</p><ul><li>监控消费进度实质就是观察消费者组的 Lag 值。</li><li>Lag 指的是 Consumer 落后的进度。譬如生成了 1000 条消息，而 Consumer 只消费了 600 条，那么当前 Consumer 的 Lag 值就是 400，表示已经滞后了 400 条消息。所以 Lag 值越大就表示 Consumer 的处理能力越低</li></ul></blockquote><p>通常监控 Kafka 的手段有如下这些：</p><ul><li><p>kafka-consumer-groups 脚本 (推荐)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server &lt;Kafka broker 连接信息 &gt; --describe --group &lt;group 名称&gt;</span><br></pre></td></tr></table></figure></li><li><p>Kafka Consumer API</p></li><li><p>JMX（推荐）</p></li></ul><h3 id="Kafka-的-Heap-Size-应该如何设置"><a href="#Kafka-的-Heap-Size-应该如何设置" class="headerlink" title="Kafka 的 Heap Size 应该如何设置"></a>Kafka 的 Heap Size 应该如何设置</h3><ol><li>业界经验值 6G</li><li>系统正常情况下，通过手动触发 Full GC 并观察其存活的对象的总大小，再将该基础上添加 30~40% 倍来设置</li></ol><h3 id="Leader-副本状态总是为-1-如何解决"><a href="#Leader-副本状态总是为-1-如何解决" class="headerlink" title="Leader 副本状态总是为 -1 如何解决"></a>Leader 副本状态总是为 -1 如何解决</h3><p>手动删除 Zookeeper 中的**&#x2F;Controller**节点，重新选举 Controller 。</p><p>因为重新选举 Controller 后，Controller 会为所有 Topic 的分区重新刷新状态。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/48665257/why-kafka-index-files-use-memory-mapped-files-but-log-files-dont">why kafka index files use memory mapped files ,but log files don’t?</a></li><li><a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html">认真分析mmap：是什么 为什么 怎么用</a></li><li><a href="https://blog.csdn.net/future_fighter/article/details/2477434">内存映射文件</a></li><li><a href="https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner/">Apache Kafka Producer Improvements with the Sticky Partitioner</a></li><li><a href="https://www.linuxidc.com/Linux/2018-12/156118.htm">Linux Page cache和buffer cache深入理解</a></li><li>《Kafka核心源码解读》</li><li>《深入理解 Kafka》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro Linux</title>
      <link href="/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/"/>
      <url>/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</url>
      
        <content type="html"><![CDATA[<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>先前一直使用WIN10作为主系统，但因为在WIN10中使用Docker时需要开启Hyper-V功能，而且开启Hyper-V之后无法使用64bit的虚拟机系统，因此才考虑到更换系统;</p><p>在这之前也使用过诸如CentOS、Ubuntu、RedHat、Mint等Linux的发行版，因为考虑到工作和日常使用兼顾，所以原本首先考虑的是Ubuntu和Mint;</p><p>据我自己了解Ubuntu和Debian这两个发行版在国内的使用和社区都是比较活跃的，其实不论是Linux发行版也好还是其它的开源技术也好，用户人数、社区的活跃程度还是版本的迭代速度都可以正面地体现产品的稳定性，因为多人用和社区活跃的话，发现问题和修复问题的速度就相对较快因此而保证了产品的质量;</p><p>其中Ubuntu在大学时使用过，用的是gnome版本，界面不错但是使用感受并不是很好，给我的感觉是软件总是报些莫名其妙的错误，如系统崩溃…，当然可能是我自己的使用问题，它的优点是安装软件较为方便，而且国内的某些软件也支持Ubuntu和Debian等版本而无需过多的折腾，总体来说能够满足日常的使用;</p><p>至于Mint是我在youtube上看大神写代码时了解到的，界面也相当简洁和漂亮，但不管是Ubuntu还是Mint，都是基于Debian的，个人更加偏向于Mint，因为不太想折腾搞些花里胡哨的东西;</p><p>好了说到Manjaro，Manjaro是Arch Linux的衍生版，虽然我并没有用过Arch，但是看到Manjaro近来的形势相当不错，如下载排名、评价都十分优异，于是我首先在虚拟机中安装进行了尝试，直观的感受是<code>简洁</code>、<code>方便</code>、<code>软件丰富</code>（这是重点），而从近段时间作为主系统来使用的表现也相当<code>稳定</code>，所以个人非常推荐</p><h2 id="制作系统盘安装Manjaro"><a href="#制作系统盘安装Manjaro" class="headerlink" title="制作系统盘安装Manjaro"></a>制作系统盘安装Manjaro</h2><p><strong>步骤1：下载Manjaro镜像</strong></p><p><a href="https://manjaro.org/download/">https://manjaro.org/download/</a></p><p>需要说的是，Manjaro提供的丰富的界面版本（如KDE、XFCE、GNOME），根据个人喜好选择下载即可</p><p><strong>步骤2：下载Rufus用于制作系统盘</strong></p><p><a href="http://rufus.ie/">http://rufus.ie/</a></p><p>据目前的了解Rufus只支持windows，既需要在Windows上制作;</p><p><code>Rufus</code>相对于<code>老毛桃</code>、<code>大白菜</code>、<code>UltraISO</code>这些软件更加方便和简洁</p><p><strong>建议</strong></p><ol><li><p>安装参考：<a href="https://linuxhint.com/install_manjaro_linux/">https://linuxhint.com/install_manjaro_linux/</a></p></li><li><p>建议联网安装</p></li></ol><h2 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h2><p><img src="/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/001.png"></p><p>软件方面比较丰富，基本日常用的都有，而且一些windows软件可以直接通过arc构造十分方便</p><p><img src="/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/002.png"></p><p><img src="/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/003.png"></p><h2 id="初始化操作配置"><a href="#初始化操作配置" class="headerlink" title="初始化操作配置"></a>初始化操作配置</h2><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syyu</span><br></pre></td></tr></table></figure><h3 id="设置国内软件源"><a href="#设置国内软件源" class="headerlink" title="设置国内软件源"></a>设置国内软件源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank     //选择中国源并更新</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h3 id="添加Archlinuxcn软件源"><a href="#添加Archlinuxcn软件源" class="headerlink" title="添加Archlinuxcn软件源"></a>添加Archlinuxcn软件源</h3><p>sudo vim &#x2F;etc&#x2F;pacman.conf，追加一下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><h3 id="将home中的中文目录改为英文"><a href="#将home中的中文目录改为英文" class="headerlink" title="将home中的中文目录改为英文"></a>将home中的中文目录改为英文</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xdg-user-dirs-gtk</span><br><span class="line">export LANG=en_US</span><br><span class="line">xdg-user-dirs-gtk-update</span><br><span class="line">export LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><h3 id="更改登录背景壁纸"><a href="#更改登录背景壁纸" class="headerlink" title="更改登录背景壁纸"></a>更改登录背景壁纸</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O http://archibold.io/sh/archibold</span><br><span class="line">chmod +x archibold</span><br><span class="line">sudo mv archibold /usr/bin</span><br><span class="line">sudo archibold login-background [壁纸的位置]</span><br></pre></td></tr></table></figure><h3 id="安装命令工具"><a href="#安装命令工具" class="headerlink" title="安装命令工具"></a>安装命令工具</h3><p>支持ifconfig命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S net-tools</span><br></pre></td></tr></table></figure><p>支持dig、nslookup命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dnsutils</span><br></pre></td></tr></table></figure><p>支持iostat、iotop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S sysstat</span><br><span class="line">sudo pacman -S iotop</span><br></pre></td></tr></table></figure><h3 id="安装搜狗拼音"><a href="#安装搜狗拼音" class="headerlink" title="安装搜狗拼音"></a>安装搜狗拼音</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br><span class="line">sudo pacman -S fcitx-sogoupinyin</span><br><span class="line">sudo pacman -S yaourt</span><br><span class="line">yaourt -S fcitx-qt4</span><br></pre></td></tr></table></figure><h2 id="推荐软件"><a href="#推荐软件" class="headerlink" title="推荐软件"></a>推荐软件</h2><p>Plank：软件栏</p><p>Albert：搜索工具，功能如Mac Spotlight</p><p>BleanchBit：垃圾缓存清理工具</p><p>Drawing：画图工具，如Windows上的画板</p><p>Peek：GIF截图工具</p><p>深度截图：代替snipaste截图工具</p><p>深度终端：比自带的terminal功能丰富</p><p>Dconf：系统配置文件编辑器</p><p>Shadowsocks-Qt5：小飞机客户端</p><p>Conky：硬件指标监控工具</p><p>GoldenDict：代替StarDict的词典</p><p>MPV：视频播放器</p><h2 id="配置非全局网络代理"><a href="#配置非全局网络代理" class="headerlink" title="配置非全局网络代理"></a>配置非全局网络代理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">genpac --pac-proxy &quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-url=https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt --output=&quot;autoproxy.pac&quot; </span><br><span class="line"></span><br><span class="line">genpac --proxy=&quot;SOCKS5 127.0.0.1:1080&quot; -o autoproxy.pac</span><br></pre></td></tr></table></figure><p>配置上面生成的pac代理文件</p><p><img src="/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/004.png"></p><p>如果使用的是chrome浏览器需要安装以下插件（Proxy SwitchyOmega），firefox不需要</p><p><img src="/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/005.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="解决百度云盘无法登录问题"><a href="#解决百度云盘无法登录问题" class="headerlink" title="解决百度云盘无法登录问题"></a>解决百度云盘无法登录问题</h3><p>方法1：删除当前用户的baidu文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .local/share/baidu</span><br></pre></td></tr></table></figure><p>方法1拓展：方法1重启失效，既每次重启完运行都需要再次删除，那么可以将这个操作设置成开机执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy systemd-rc-local # 因为manjaro基于arch，而arch是不支持rc.local的</span><br><span class="line">sudo systemctl enable rc-local.service</span><br><span class="line">sudo touch /etc/rc.local</span><br><span class="line">sudo chmod 755 /etc/rc.local</span><br><span class="line">sudo vim /etc/rc.local</span><br><span class="line">添加如下内容</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">rm -rf /home/用户名称/.local/share/baidu</span><br></pre></td></tr></table></figure><p>方法2：使用root运行程序</p><h3 id="解决网易云音乐无法输入中文问题"><a href="#解决网易云音乐无法输入中文问题" class="headerlink" title="解决网易云音乐无法输入中文问题"></a>解决网易云音乐无法输入中文问题</h3><blockquote><p>源自网友<a href="https://forum.manjaro.org/u/kmpsliu">kmpsliu</a></p></blockquote><p>1.先安装qcef这个软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qcef</span><br></pre></td></tr></table></figure><p>2.编辑&#x2F;opt&#x2F;netease&#x2F;netease-cloud-music&#x2F;netease-cloud-music.bash，把它改成这样：<br>#!&#x2F;bin&#x2F;sh</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HERE</span>=<span class="string">&quot;$(dirname &quot;$(readlink -f &quot;$&#123;0&#125;&quot;)&quot;)&quot;</span></span><br><span class="line"><span class="attr">export</span> <span class="string">LD_LIBRARY_PATH=/usr/lib</span></span><br><span class="line"><span class="attr">export</span> <span class="string">QT_PLUGIN_PATH=&quot;$&#123;HERE&#125;&quot;/plugins</span></span><br><span class="line"><span class="attr">export</span> <span class="string">QT_QPA_PLATFORM_PLUGIN_PATH=&quot;$&#123;HERE&#125;&quot;/plugins/platforms</span></span><br><span class="line"><span class="attr">exec</span> <span class="string">&quot;$&#123;HERE&#125;&quot;/netease-cloud-music $@</span></span><br></pre></td></tr></table></figure><p>3.安装vlc这个包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S vlc</span><br></pre></td></tr></table></figure><h3 id="解决wine中的软件字体小"><a href="#解决wine中的软件字体小" class="headerlink" title="解决wine中的软件字体小"></a>解决wine中的软件字体小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env WINEPREFIX=&quot;$HOME/.deepinwine/应用&quot; winecfg</span><br></pre></td></tr></table></figure><h3 id="安装驱动导致无法进入系统界面（Started-TLP-system-startup-x2F-shutdown）"><a href="#安装驱动导致无法进入系统界面（Started-TLP-system-startup-x2F-shutdown）" class="headerlink" title="安装驱动导致无法进入系统界面（Started TLP system startup&#x2F;shutdown）"></a>安装驱动导致无法进入系统界面（Started TLP system startup&#x2F;shutdown）</h3><p>查看驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mhwd -li</span><br></pre></td></tr></table></figure><p>删除驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mhwd -f -r 驱动类型 驱动名字</span><br><span class="line">例子：mhwd -f -r pci video-vmware</span><br></pre></td></tr></table></figure><h3 id="软件降级"><a href="#软件降级" class="headerlink" title="软件降级"></a>软件降级</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S downgrade</span><br><span class="line">sudo downgrade 软件名称</span><br></pre></td></tr></table></figure><h3 id="忽略软件更新"><a href="#忽略软件更新" class="headerlink" title="忽略软件更新"></a>忽略软件更新</h3><p>在&#x2F;etc&#x2F;pacman.conf中添加忽略配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IgnorePkg=软件名称</span><br></pre></td></tr></table></figure><p>或者在软件管理中设置</p><p><img src="/Manjaro%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/006.png"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://blog.csdn.net/weixin_43968923/article/details/88768951#_2">https://blog.csdn.net/weixin_43968923/article/details/88768951#_2</a></li><li><a href="https://www.jianshu.com/p/73299b8e3f58">https://www.jianshu.com/p/73299b8e3f58</a></li><li><a href="http://tieba.baidu.com/p/5149726909">http://tieba.baidu.com/p/5149726909</a></li><li><a href="https://linux265.com/news/3544.html">https://linux265.com/news/3544.html</a></li><li><a href="https://www.jianshu.com/p/4fce765a306b">https://www.jianshu.com/p/4fce765a306b</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式的一致性与共识性</title>
      <link href="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/"/>
      <url>/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年8月20日15:03:45 — 添加 Quorum NWR 内容</li></ul><h2 id="分布式基础理论"><a href="#分布式基础理论" class="headerlink" title="分布式基础理论"></a>分布式基础理论</h2><h3 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h3><p>CAP定理在2007年7月被加州大学伯克利分校的Eric Brewer教授所提出，所以CAP定理又叫做 <strong>布鲁尔定理</strong> 。而该定理的结论是分布式系统并不能同时满足：一致性、可用性、分区容错性，而只能是三者选其二。</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/001.png"></p><blockquote><p>CAP概念理解</p></blockquote><ul><li><strong>（C）一致性：</strong>客户端在任意节点上读取同一个值所返回的结果应该是一致的。<ul><li>可以通过延迟请求应答来提高一致性。譬如在同步复制复制中，只有等待特定数量的节点同步成功才响应用户</li></ul></li><li><strong>（A）可用性：</strong>节点应该在合理的时间内返回合理的客户端请求结果，但结果不应包含异常和超时。<ul><li>可以通过 <code>主备</code>、<code>集群</code>、<code>服务体验降级（腾出资源保障核心服务）</code> 等手段来提高可用性</li></ul></li><li><strong>（P）分区容错性：</strong>即使出现网络分区，系统也依然能够提供服务。<ul><li>例如<code>熔断机制</code>就是用来提高分区容错性的</li></ul></li></ul><p>注：</p><ul><li>ACID中的一致性保证的是事务前后的数据库完整性，而CAP中的一致性强调的是状态，所以”一致性”其实并不是一个泛指</li><li>强一致性在网络环境中是很难做到的，因此存在网络的不定性因素影响</li></ul><blockquote><p>为什么三者只能选其二？</p></blockquote><ul><li>对于分布式系统而言数据通常不会只存放在单个节点上，因为在网络环境下难以避免不会出现网络分区，而一旦出现网络分区就会导致系统不可用，所以就可以得出这样的结论就是<code>分布式系统首要应该支持的就是分区容错性（P）</code>，否则分布式就没有意义了</li><li>高可用（HA）应该是一个后端开发人员经常听到的一个词了。最常见的做法就是横向扩展服务节点，但扩展节点就意味着增加了同步状态的成本，节点越多同步状态所花费的时间就越长，换句话就是系统可用性越高，那么要保证一致性就越困难，所以现今分布式系统实际上一般都只是在一致性（C）和可用性（A）之间权衡</li><li>例如 Zookeeper、Etcd、MongoDB 等分布式高可用集群采用的是 CP 架构，这与其使用的共识算法&#x2F;协议有着密切的关系，而 Cassandra、CounchDB、Redis 等则是 AP 架构</li><li>拿 Redis 来说，Redis 的高可用方案是建基于复制的基础上实现的，而复制因为网络原因又存在<strong>数据丢失</strong>以及<strong>脑裂</strong>等风险，所以它并不能很好地保证 CAP 的一致性，因此一般而言我们只会用 Redis 来做一些对一致性要求不高的功能。除此之外个人还认为这与 Redis 的设计理念有关，因为 AP 架构实质是一种可用优先的数据处理方案</li><li>值得注意的是 CP 架构的系统并不是指能够保证强一致性，它只是在可用性和一致性之间优先考虑一致性而已。譬如 Zookeeper 的<strong>过半可用机制</strong>就保证了出现网络分区后少于过半的集群不再提供服务从而保证一致性，但却降低了系统的可用性</li></ul><blockquote><p>拓展</p></blockquote><p>网络分区：指系统节点之间因为某些原因而导致不能通信</p><h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><blockquote><p>关于一致性的分类</p></blockquote><ul><li><strong>强一致性：</strong>写操作后的读操作一定能够读到上一次写入的结果（不论是在哪个节点写和读）</li><li><strong>弱一致性：</strong>写操作后的读操作可能读到也可能读不到写入的结果</li><li><strong>最终一致性：</strong>写操作后的读操作需要经过一段（短暂的）时间才能读到上一次写入的结果</li></ul><p>注：</p><ul><li>个人理解一致性其实只有两个级别，要么是<strong>强一致</strong>要么是<strong>最终一致</strong>。而所谓的<strong>弱一致</strong>、<strong>顺序一致</strong>都是只是最终一致的变种而已。例如顺序一致其实是指集群处理命令是按照 FIFO 形式进行的，而 Zookeeper 就是这种形式</li></ul><blockquote><p>基本概念</p></blockquote><ul><li><strong>BA：</strong>基本可用。当系统出现故障时，允许其适当地延长响应时间（降低系统可用性）<ul><li>例如 <code>流量削峰</code>、<code>过载保护</code>、<code>服务降级</code>、<code>延迟响应</code> 等</li></ul></li><li><strong>S：</strong>软状态。指允许对客户端展示过度状态，即并不要强求系统的数据是强一致性，允许数据在节点间出现不一致（降低系统一致性）</li><li><strong>E：</strong>最终一致性。个人理解这是对 S（软状态）的追加条件，既数据状态必须在一定时间后在所有节点上达成一致</li></ul><blockquote><p>小结</p></blockquote><p>BASE 理论其实是 CAP 的一种权衡方案。也就是说如果你不知道怎样设计 CAP 就可以参考 BASE 理论。</p><h2 id="分布式事务一致性解决方案"><a href="#分布式事务一致性解决方案" class="headerlink" title="分布式事务一致性解决方案"></a>分布式事务一致性解决方案</h2><blockquote><p>基本介绍</p></blockquote><ul><li>这里的一致性其实就是 ACID 中的一致性，即保证事务在多个服务节点之间的数据完整性</li><li>分布式事务一致性协议大体可分为两类<ul><li>强一致性协议：2PC 、3PC</li><li>最终一致性协议：TCC、可靠消息模式、Event Soucing、最大努力通知</li></ul></li><li>在上面已经提到在网络中基本上是不可能实现强一致性，但为什么我们称 2PC 和 3PC 是强一致性协议呢？这是因为它们是通过降低可用性来换取一致性来实现的，既如果不达成一致就不响应用户（可用性差）</li><li>最终一致性协议建基于 BASE理论的，它允许数据存在过渡状态，在必要做到最终一致。最终一致性协议较为适合对事务实时性不高的系统</li></ul><h3 id="强一致性方案"><a href="#强一致性方案" class="headerlink" title="强一致性方案"></a>强一致性方案</h3><h4 id="二段提交协议（2PC）"><a href="#二段提交协议（2PC）" class="headerlink" title="二段提交协议（2PC）"></a>二段提交协议（2PC）</h4><p><strong>2PC 参与者角色</strong></p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/003.png"></p><p><strong>1）事务提交分为两个阶段</strong></p><ol><li>事务预提交<ul><li>事务协调者向所有参与者发出事务预提交请求</li><li>参与者接收到预提交请求后进行事务日志记录（undo 和 redo）</li><li>各个参与者响应事务协调者后，告知事务协调者是否预提交成功</li></ul></li><li>提交事务<ul><li>事务协调者向所有参与者发出 commit&#x2F;rollback 请求（根据第一阶段的响应结果来判断发起 commit 还是 rollback）</li><li>假设参与者接收 commit 请求，它就会进行真正的事务提交（如果收到 rollback 则参与者会通过 undo 日志进行回滚操作）</li><li>各个参与者响应事务协调者</li><li>全部参与者成功提交事务，事务提交流程结束，事务协调者响应客户端提交事务成功</li></ul></li></ol><p><strong>2）2PC存在的问题</strong></p><ul><li>同步阻塞：整个 2PC 阶段被选中的资源会一直被锁定</li><li>单点问题：事务协调者存在单点故障隐患，一旦发生故障要人工干预恢复事务，维护成本较高</li><li>存在一致性问题：若果事务协调者发出 commit 请求，但因为网络而导致只有部参与者接收命令就会导致一致性问题</li><li>实现成本较大：在 Jakarta EE 中如果需要实现 JTA 事务（2PC），则需要资源管理器支持 XA 规范实现</li></ul><h4 id="三段提交协议（3PC）"><a href="#三段提交协议（3PC）" class="headerlink" title="三段提交协议（3PC）"></a>三段提交协议（3PC）</h4><p><strong>1）和 2PC 的区别</strong></p><ul><li><p>3PC 是 2PC 的进行一种改进，主要解决的是<code>减轻 2PC 同步阻塞问题</code>。</p></li><li><p>基本原理是将 2PC 的第一阶段进拆分，以及引入了<code>超时机制</code>（譬如：协调者等待超时、参与者等待超时）解决可用性问题</p></li></ul><p><strong>2）提高事务过程</strong></p><p>CanCommit（第一阶段）：</p><ol><li>事务协调者<strong>询问</strong>参与者是否可以执行事务预提交操作</li><li>参与者响应事务协调者结果</li></ol><p>PreCommit（第二阶段）：</p><ol><li>事务协调者向所有参与者发出 PreCommit 预提交请求</li></ol><ul><li>参与者接收到 PreCommit 后进行事务预提交操作（记录 undo 和 redo）</li><li>参与者响应事务协调者结果</li></ul><p>DoCommit（第三阶段）：</p><ul><li>事务协调者向所有参与者发出 DoCommit 提交事务请求</li><li>参与者接收到 DoCommit 后执行真正的事务提交</li><li>参与者响应事务协调者结果后，事务协调者响应用户</li></ul><p> <strong>3）过程中可能打断 事务的情况</strong></p><p>PreCommit（第二阶段）：预提交失败，事务参与者会做如下操作</p><ol><li>给参与者发出中断请求，让其恢复数据状态</li><li>中断整个事务并响应客户端告知其失败（因时其实还没有正式提高事务）</li></ol><p>DoCommit（第三阶段）：正式提交事务失败，事务参与者会做如下操作</p><ol><li>给参与者发出中断请求，让其恢复数据状态（避免还没提交事务的参与者继续提交事务）</li><li>给参与者发起事务回滚请求，参与者会依照 undo 记录进行回滚操作</li><li>获取到回滚反馈后中断整个事务操作，响应客户端告知其失败</li></ol><p><strong>4）3PC的优缺点</strong></p><ul><li>通过询问降低事务失败的风险，从而提高了系统的可用性</li><li>依然存在一致性问题。例如当事务协调者发出 PreCommit 之后出现了网络分区，那么参与者超时机制触发后依然会（默认）提交事务，这样就会导致数据的不一致</li><li>据个人了解目前支持 3PC 的开源库少之又少，复杂性增加之余，依然存在各种问题，所以一般只在纸上谈</li></ul><h3 id="最终一致性方案"><a href="#最终一致性方案" class="headerlink" title="最终一致性方案"></a>最终一致性方案</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><p>1）<code>查询模式</code>：为事务设置状态查询接口，在必要时可以通过该接口来确定状态</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/004.png"></p><p>2）<code>定时校对模式</code>：基于查询模式之上，通过定时任务主动检查事务状态，以修正正式（也属于补偿模式）</p><p>3）<code>补偿模式</code>：补偿的意思实质就是<strong>重试</strong>或<strong>人为恢复</strong>事务</p><ul><li>自动恢复：通过重试机制实现</li><li>通知运维：实在是无法回滚或者重试，则可以通过人工干预进行补偿（如一些系统有专门的运维模块）</li><li>技术干预：如果以上两种手段都不可行，则可以直接修改数据库进行补偿（这是最糟糕的情况）</li></ul><h4 id="可靠消息最终一只-补偿-幂等处理（本地消息表）"><a href="#可靠消息最终一只-补偿-幂等处理（本地消息表）" class="headerlink" title="可靠消息最终一只 + 补偿 + 幂等处理（本地消息表）"></a>可靠消息最终一只 + 补偿 + 幂等处理（本地消息表）</h4><blockquote><p>可靠消息实现方式：</p><ul><li>MQ自身提供可靠消息机制。如 RocketMQ 的事务消息（需要提供查询模式）</li><li>MQ支持 XA 协议。可和支持 XA 协议数据库组成 Jta 事务保证可靠性（如 ActiveMQ）</li><li>本地消息表。使用本地数据表来记录消息发送的状态，一般需要结合补偿模式一同使用</li></ul></blockquote><p>1）操作流程</p><ul><li>使用消息系统来推动整个事务流程。<ul><li>发送消息之前先将消息持久化到本地（文件或DB）并标注为<code>未发送</code>，然后再发送消息</li><li>一旦发送成功就将持久化的消息状态改为<code>已发送</code></li><li>其余消费者服务则通过监听对应的消息 Topic 来触发处理流程</li></ul></li><li>使用补偿模式来处理<code>未发送</code>的消息<ul><li>可设置一个<strong>定时任务</strong>来轮询消息状态为<code>未发送</code>的消息，让其重试发送来驱动后续的事物步骤操作</li><li>这样做的用意是避免消息发送（重试）失败或丢失，即保证消息发送的可靠性</li></ul></li></ul><p>2）消息重试发送带来的幂等问题</p><ul><li>现在的消息系统一般都支持重试机制，即消息发送失败后会重试一定的次数。但要注意的是一旦引入重试机制就可能导致消息重复发送，从而导致同一条消息被消费者服务处理多次</li></ul><p>3）解决消费者幂等问题</p><ul><li>使用防重表、防重Token等方案解决</li><li>例如选择防重表方案<ol><li>消费者在处理消息前可以先判断防重表中是否有对应的记录（可根据消息内容定制），如果有则忽略该消息，如果没有则往防重表中插入一条记录，并设置其状态为<code>正在处理</code>（自定义）</li><li>处理完成后将这条消息对应的<code>正在处理</code>记录修改为<code>已处理</code></li><li>在整个事务完成后再将防重表中对应的记录删除</li></ol></li></ul><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/006.png"></p><h4 id="TCC协议模式（补偿事务）"><a href="#TCC协议模式（补偿事务）" class="headerlink" title="TCC协议模式（补偿事务）"></a>TCC协议模式（补偿事务）</h4><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/009.png"></p><p>TCC 和 2PC 很像，也分为两个步骤：</p><ol><li>Try</li><li>Confirm &#x2F; Cancel</li></ol><p>TCC 事务中事务的提交和回滚是由TCC管理器来完成的。TCC 是一种代码侵入性较强的事务实现，它要求将原来的一个业务方法拆分为三个。譬如付费服务 pay() 要拆分成 tryPay()、confirmPay()、cancelPay() 来分别支持<code>预提交</code>、<code>确认提交</code>、<code>取消操作（回滚）</code>等，而这些方法会由 TCC 管理器自动调用。</p><blockquote><p>理解例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预付费</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryPay</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新订单状态</span></span><br><span class="line">orderService.updateOrderStatus(<span class="string">&quot;正在付费&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预付费操作</span></span><br><span class="line"><span class="comment">//1. 查看是否有足够的余额，例如还要100,那么20元商品就满足扣费要求</span></span><br><span class="line"><span class="comment">//2. 冻结等价于商品的费用，防止中途因为某些原因导致余额不足</span></span><br><span class="line">userService.freezeMoney(<span class="number">20</span>); <span class="comment">// 将商品金额保存到冻结金钱字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正式付费</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirmPay</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正式扣费，从冻结金钱中扣费</span></span><br><span class="line">userService.deductionFreezeMoney(<span class="number">20</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新订单状态</span></span><br><span class="line">orderService.updateOrderStatus(<span class="string">&quot;付费成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消付费</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancelPay</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解除冻结金钱</span></span><br><span class="line">userService.relieveFreezeMoney(<span class="number">20</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新订单状态</span></span><br><span class="line">orderService.updateOrderStatus(<span class="string">&quot;等待付费&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）TCC存在的问题</p><ul><li><p>空补偿&#x2F;空回滚</p><ul><li>意思是没有执行 try 就执行 cancel 了。出现这类问题的主要原因是因为分支服务处于某些原因而不可用，导致协调者触发回滚操作，而这时如果不可用的分支服务恢复就会导致空补偿问题</li><li>解决思路：<ul><li>因为事务管理器发起全局事务时会生成全局事务记录，而其中全局 ID 会贯穿整个分布式事务调用链，因此我们可以再额外增加一个表来记录这个全局事务 ID 和分支事务 ID 这些信息</li><li>服务在在执行完 try 后可以往这张表中插入一条记录以示 try 已经执行完，那么在执行 cancel 时就可以先检查这张表然后再确定后续的操作</li></ul></li></ul></li><li><p>幂等问题</p><ul><li>TCC 事务框架可能提供重试机制，因此需要对 try、confirm、cancel 等操作进行幂等处理</li></ul></li><li><p>悬挂问题</p><ul><li>意思是二阶段要比一阶段先执行。出现这类问题的原因是因为网络问题导致事务协调调用发生的乱序</li><li>解决思路：<ul><li>和空补偿处理思路一样</li></ul></li></ul></li></ul><p>2）开源的TCC实现</p><ul><li>Tcc-Transaction</li><li>Himly</li><li>TX-LCN</li><li>EasyTransaction</li><li>ByteTCC</li></ul><h4 id="一站式事务解决方案-Seata（默认AT模式）"><a href="#一站式事务解决方案-Seata（默认AT模式）" class="headerlink" title="一站式事务解决方案 - Seata（默认AT模式）"></a>一站式事务解决方案 - Seata（默认AT模式）</h4><p>基本介绍</p><ul><li>Seata（一站式分布式事务解决方案）是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案</li><li>Seata 支持 AT、TCC、SAGA（长事物） 和 XA 等多种模式的分布式事务实现</li></ul><p>Seata中有3个重要角色</p><ul><li>事务协调器（TC）： 维护全局事务和分支事务的状态 </li><li>事务管理器（TM）： 控制全局事务的开始、提交、回滚</li><li>资源管理器（RM）： 向 TC <code>注册分支事务 </code> 和 <code>报告分支事务状态</code>以及用于<code>管理分支事务的提交或回滚 </code>（该 RM 由 Seata 代理本地 Datasource 产生）</li></ul><p>Seata事务管理例图</p><p>一个典型的分布式事务过程</p><ol><li>TM 向 TC 申请开启一个全局事务，全局事务创建成功后会生成一个全局唯一的 XID （XID 会在微服务调用链路的上下文中传播）</li><li>RM 记录源数据被操作前后的状态到 UNDO_LOG 表中，然后在提交本地事务前向 TC 注册分支事务（主要是请求TC将分支事务纳入到指定 XID 的全局事务中），随后提交本地事务，并汇报状态给 TC。至此当所有 RM 参与者都完成后，事务的第一阶段完成，释放资源。</li><li>第二阶段，TC 让所有分支事务以完成后续操作（清除UNDO_LOG）或依赖 UNDO_LOG 进行回滚操作</li></ol><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/011.png"></p><p>与传统 2PC 的区别</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/013.png"></p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/015.png"></p><p>可以看到在 Seata 中如果第一阶段是成功的它就不会再锁定资源，相当于缩短了阻塞时间</p><p>快速入门案例</p><ul><li><a href="https://github.com/seata/seata/wiki/%E6%A6%82%E8%A7%88">https://github.com/seata/seata/wiki/%E6%A6%82%E8%A7%88</a> </li><li><a href="http://seata.io/en-us/docs/user/quickstart.html">http://seata.io/en-us/docs/user/quickstart.html</a></li></ul><h2 id="分布式共识性（针对故障容错）"><a href="#分布式共识性（针对故障容错）" class="headerlink" title="分布式共识性（针对故障容错）"></a>分布式共识性（针对故障容错）</h2><p>&amp;emsp;&amp;emsp;很多人将 Gossip、Paxos、Raft、ZAB 等算法和协议跟 2PC、3PC、TCC 等混为一谈将其统称为一致性协议。虽然这样称呼并没有什么大碍，但按个人认为这样并不利于理解他们，因为它们在于用途上并不太一样。譬如前者多见于用来解决集群节点之间的通信容错，而后者则时解决分布式事务的一致性问题，所以前者用<code>共识性</code>来形容而后者则是<code>一致性</code>这样更加贴切。</p><p>注：Gossip、Paxos、Raft、ZAB 等算法和协议也被称做<code>非拜占庭容错算法（Crash Fault Tolerance，简称CFT）</code>。原因是一般的系统并不存在<code>伪造</code>和<code>篡改</code>消息，但如果是区块链服务就可能会存在伪造数据的节点，这时就符合 <code>拜占庭将军问题</code> 这种极端情况</p><h3 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h3><blockquote><p>Gossip模拟器： <a href="https://flopezluis.github.io/gossip-simulator/">https://flopezluis.github.io/gossip-simulator/</a> </p></blockquote><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>&amp;emsp;&amp;emsp;Gossip是一个非常有趣的分布式共识性协议，因为其工作原理的缘故亦被叫做<code>流行病协议</code>、<code>谣言协议</code>。常用作<code>信息广播</code>、<code>叠加网络</code> 、<code>数据交换</code>、<code>故障检测</code>等用途。譬如 Redis 集群和 ElasticSearch 集群都用它来实现节点状态信息交换，以及 Consul 用它来管理集群成员和广播信息。</p><p>&amp;emsp;&amp;emsp;Gossip 的工作原理很简单。例如 A 节点希望与集群中的其它节点进行状态共享，那么 A 只需要定期从集群中随机选取 N（扇出数） 个节点来进行信息广播，而且在集群成员接收到 A 的信息广播后，这些节点亦需要开始定期地选取 N 个节点来广播自己得状态来延续 A 的状态传播（这就是为什么叫它流行病协议的原因）。</p><p>注：在 Gossip 中一个状态扩散到所有节点的时间复杂度为 <code>log(节点数)(底数=扇出数)</code></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>易于理解和实现</li><li>能提高集群的扩展性，但随着节点增加，达到最终一致性的时间会变长</li><li>容错能力强，即使出现网络分区或节点暂时不可用都不会影响集群的正常工作，而且待网络或节点恢复后依然能够达到最终一致性</li><li>最终一致</li></ul><h4 id="两种状态传播方案"><a href="#两种状态传播方案" class="headerlink" title="两种状态传播方案"></a>两种状态传播方案</h4><ul><li>Anti-Entropy（反熵）：传播节点自身的所有信息。有利于提高节点状态的感知度，但消息的传播和处理成本较高</li><li>Rumor-Mongering（谣言传播）：仅传播节点新接收的信息（增量传播）。需要自动检查信息是否已被过时，如果已过时则不再进行传播</li></ul><h4 id="三种行为模式"><a href="#三种行为模式" class="headerlink" title="三种行为模式"></a>三种行为模式</h4><ul><li>push模式： 传播自己接收到的新信息（可以减少网络开销）</li><li>pull模式：积极地想其它节点拉取自己的新信息</li><li>push &amp; pull模式：  传播自己接收到的新信息，并积极想其它节点拉取自己的新信息</li></ul><h4 id="Redis是如何利用Gossip的？"><a href="#Redis是如何利用Gossip的？" class="headerlink" title="Redis是如何利用Gossip的？"></a>Redis是如何利用Gossip的？</h4><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/014.png"></p><p>Redis 集群是通过 Gossip 协议来广播节点状态（包含槽位信息和节点状态）。在 Redis 集群中每一个节点都对应着不同的槽位段。例如现在 Client 连接的是 A 节点，并向其查询缓存，但 A 节点根据查询 key 计算后发现这个缓存并不在自己的槽位内，这时它就会根据先前通过 Gossip 协议交换回来的信息来通知 Client ，让其重定向到具体的节点中进行查找。</p><p>注：其实 Redis Cluster 是 Gossip 和 Raft 混用。它采用 Gossip 进行通信，用 Raft 做主从的故障转移</p><h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><h4 id="了解算法的诞生"><a href="#了解算法的诞生" class="headerlink" title="了解算法的诞生"></a>了解算法的诞生</h4><p>&amp;emsp;&amp;emsp;公元 10 世纪初，爱琴海上有一个叫做 Paxos 的小岛。该小岛商业兴旺，是当时出了名贸易的中心，而经济的发展也带来了政治的进步，譬如比较显著的就是通过议会政府取代了神权统治。虽然社会的不断进步，使得人民纷纷投身其中，但因为 Paxos 岛上的人民本身就以做生意为生，所以对于他们而已做生意才是头等大事，城市职责只是次要的。而因为这个原因，随着时间的推移，慢慢地开始越来越多公民不再愿意把自己的时间全部投入到议会事务中去，所以现在眼前需要解决的问题就是如果想要议会继续履行职责，就意味着需要有一种能够保证在议员缺席的情况下仍然能够正常运作的方案。</p><p>&amp;emsp;&amp;emsp;不久后，经大家商讨最终决定了一种全新的议会协议。初期该协议的<strong>第一个要求</strong>是每一个议员都必须随身携带一个律簿（ledger）用来记录一系列已通过的法令，而且（从提出议案开始）每个法令都要求必须带有一个独立的编号。而<strong>第二个要求</strong>是在场议员在议会议事期间律簿新增的内容必须保持一致性。例如议事期间通过了法令《132：不能随地大小便 》，那么每个在场议员的律簿就不能篡改 132 编号这条法令的内容（可以为空，但如果存在就必须一致）。后来人民慢慢发现仅仅这种程度上一致还是不足以应对复杂的情况，因为如果让每个律簿都保留空白的话也能满足一致性，所以需要另外添加一些要求来<strong>保证法令能最终通过并被记录在律簿中</strong>。而在研究出对策之前，人们发现在 Paxos 这里人其实都能做到彼此之间互相信任，所以议员们是可以做到愿意通过任何被提出的法令的。但话虽然如此，因为大家都喜欢外出游历和做生意的缘故，即使能够做到愿意通过任何被提出的法令也难免不会出现问题。例如 A 组议员通过了法令《133：禁止在城市乱涂乱画》后就离开议会了，随后 B 组议员进入，因为不知道之前发生了什么事情的原因，所以 B 组议员又通过了法令《133：允许自由的艺术表达》，此时就导致前后通过的两个相同编号的法令，既产生了冲突而导致 A 和 B 两组议员的律簿失去了一致性。因此最后人民商讨出了协议的<strong>第三个要求</strong>，就是如果商议修订法令时大多数议员都在场，并且在一个足够长的时间内没人进出议会厅的话，那么任一个被议员提议的法令都将会被通过，且每一个被通过的法令都需要出现在议会厅中每个议员的律簿上（既引入多数派概念）。</p><p>&amp;emsp;&amp;emsp;好了，Paxos 岛的故事简单说到这里，如果有兴趣继续了解下去可以阅读 Leslie Lamport 的《The Part-Time Parliamen》，但个人认为到这里已经足够了解 Paxos 算法的诞生和它所要处理的问题了。其实 Paxos 算法实质就是故事中的议会协议。</p><h4 id="Paxos特点"><a href="#Paxos特点" class="headerlink" title="Paxos特点"></a>Paxos特点</h4><ul><li>支持多个节点同时发出提案</li><li>支持 Leader 选举<ul><li>在 Paxos 中 Leader 选举并不是必须的</li><li>需要实现 Leader 选举一般是以下两种情况<ul><li>Proposer Leader</li><li>Learner Leader</li></ul></li></ul></li><li>强一致性&#x2F;最终一致性（算法实现细节不同，效果就不同）</li><li>高可用。有过半节点数概念</li></ul><h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><ul><li>议会：相当于分布式集群</li><li>议员：集群节点</li><li>公民：客户端</li><li>法令：节点状态</li></ul><h4 id="算法角色"><a href="#算法角色" class="headerlink" title="算法角色"></a>算法角色</h4><blockquote><p>注意：在 Paxos 中一个节点可以有多个身份</p></blockquote><ul><li>Proposer：负责接收和处理 Client 请求，以及发起提案的议员</li><li>Acceptor：负责接收和处理 Proposer 的 prepare、accept 请求的议员</li><li>Learner：记录通过的提案，不参与决策。相当于故事中的律簿</li></ul><h4 id="算法要求"><a href="#算法要求" class="headerlink" title="算法要求"></a>算法要求</h4><blockquote><p>提案格式：[M，V]</p><p>M为提案编号，V为提案Value</p></blockquote><p>P1：Acceptor 必须批准它收到的<strong>第一个提案</strong>，且 Acceptor <strong>可以批准多个</strong>提案。</p><p>P1a：只要 Acceptor 尚未响应过任何编号大于 Mn 的 prepare 请求，那么它就可以接受这个编号为 Mn 的提案。</p><p>P2：当提案 [M0，V0] 被选定，那么所有比编号 M0 更大且被选定的提案，其 Value 值都必须为 V0。</p><p>P2a：当提案 [M0，V0] 被选定，那么所有比编号 M0 更大且被 Acceptor 批准的提案，其值都必须为 V0。</p><p>P2b：当提案 [M0，V0] 被选定，那么之后 Proposer 产生号更大的提案其 Value 都是V0。</p><h4 id="生成提案和接受提案"><a href="#生成提案和接受提案" class="headerlink" title="生成提案和接受提案"></a>生成提案和接受提案</h4><blockquote><p>1）Proposer生成提案</p></blockquote><p>当 Proposer 生成一个 Mn 提案时，必须知道当前议会中某个<strong>将要</strong>或是<strong>已被半数批准</strong>且<strong>编号小于 Mn</strong>但<strong>为目前最大编号</strong>的提案。</p><p>除此之外，Proposer 还会要求 Acceptor 承诺不能再接受编号小于 Mn 的提案。过程如下：</p><ol><li>Proposer 选择一个新的提案编号 Mn （注意这里只是发送编号），并向 Acceptor 集合成员发送请求（该请求称为prepare请求）。当 Acceptor 接收到 prepare 请求后会有以下两种情况：<ul><li>Acceptor 向 Proposer 承诺不再会批准编号小于当前编号（Mn）的提案（既小于Mn就被认为是过时的请求）</li><li>如果 Acceptor 在这之前已经批准过提案，那么就会将编号小于 Mn 但为目前提案中编号最大的提案返回给Proposer（主要是让 Proposer 从中提取出 value 值）</li></ul></li><li>如果 Proposer 接收到半数以上的 Acceptor 响应自己发出的 prepare 请求时，Proposer 就可以生成编号为 Mn，值为 Vn 的提案了。注意这里的 Vn 是在 Acceptor 响应中得到的。不过也可能会出现这么一种情况，就是 Acceptor 在这之前并没有批准过提案，那么这时 Proposer 可以为编号为 Mn 的提案设置任意的 Value 值（即保证上面提到的 p2b）</li></ol><p>成功生成提案后 Proposer 就会将其发送给某个过半数的 Acceptor 集合，并期待他们通过提案（该请求称为 accept 请求）。需要注意的是这时接收 accept 请求的集合不一定是原来处理 prepare 的那个集合。这样之所以行的通的原因是基于<strong>集群中任意两个过半数的集合都肯定至少有一个公共的 Acceptor 成员</strong>的理论基础上实现的（这里潜在条件是 Acceptor 集合中成员的状态是一致的）</p><blockquote><p>2）Acceptor请求接收</p></blockquote><ol><li>可以在任何时候响应 prepare 请求</li><li>在不违背对 Proposer 的承诺的前提下，响应 accept 请求</li></ol><h4 id="算法陈述"><a href="#算法陈述" class="headerlink" title="算法陈述"></a>算法陈述</h4><blockquote><p>Paxos算法分为两个阶段。</p><p>第一阶段因为需要达到半数以上的 Acceptor 响应才能进入第二阶段，所以第一阶段也称为”投票阶段”。</p><p>第二阶段其实就是”提交阶段”或叫通过提案阶段</p></blockquote><p><strong>第一个阶段（投票阶段）：</strong></p><ol><li>Proposer 根据已知信息选择一个提案编号 Mn，然后向 Acceptor 集群中某一个过半子集发送一个编号为 Mn 的 perpare 请求</li><li>当 Acceptor 接收到编号为 Mn 的 prepare 请求后，如果编号大于当前已经响应过的所有 prepare 请求中的编号，Acceptor 就会向当前发出 prepare 请求的 Proposer 承诺不会再批准任何小于编号 Mn 的提案，然在再将编号小于 Mn 但为目前最大编号的提案返回给 Proposer。反之拒绝请求的同时返回目前最大的编号的提案给 Proposer （即这时 Mn 少于目前 Acceptor  已接的提案）</li></ol><p><strong>第二阶段（提交阶段）：</strong></p><ol><li>Proposer 如果得到半数以上的 Acceptor 响应，Proposer 就会再发送一个针对 [Mn，Vn] 提案的 accept 请求给某个过半的Acceptor 子集</li><li>当 Acceptor 收到 [Mn，Vn] 提案的 accept 请求后，如果 Acceptor 在这之前尚未对大于该编号的提案作出过响应，那么它就会通过这个提案，并通知 Learner 记录这个已通过的提案</li></ol><p>注意 Proposer 是可以在任何时候丢弃某个提案的。例如 Proposer 发送针对 [Mn，Vn] 的提案给 Acceptor，但是 Acceptor 在这之前已经通过了一个比编号 Mn 大的提案，那么这时 Proposer 就会丢弃该提案。与此同时 Acceptor 亦应该有义务告诉 Proposer 当前自己通过的最大编号的提案是什么，以便 Proposer 后续生成新的 prepare 请求。</p><blockquote><p>协议正常执行时</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/020.png"></p><blockquote><p>协议发生冲突时（可能会导致死循环&#x2F;活锁）</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/021.png"></p><h4 id="Learner获取已通过提案的3种方案"><a href="#Learner获取已通过提案的3种方案" class="headerlink" title="Learner获取已通过提案的3种方案"></a>Learner获取已通过提案的3种方案</h4><p><strong>方案1：</strong></p><p>一旦 Acceptor 通过了某个提案就马上发送给所有Learner。</p><p>这种方案瞬速但不高效，因为 Acceptor 需要的通信次数至少是两边节点数的乘积。</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/017.png"></p><p><strong>方案2：</strong></p><p>所有 Acceptor 在通过了某个提案后集体发送给某个<strong>主 Learner</strong>，然后由主 Learner 分发给其他Learner。</p><p>虽然这样可以减少了 Acceptor 通信上的开销，但是主 Learner 存在单点故障问题。</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/018.png"></p><p><strong>方案3（推荐）：</strong></p><p>在方案 2 的基础上让<strong>主Learner</strong>组成一个集群（解决单点问题）。</p><p>当然主 Learner 的数量肯定是少于普通 Learner 的，如果不是的话就和方案1没什么分别了。</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/019.png"></p><h4 id="从-Learner-保存已通过提案来看-Paxos-的一致性"><a href="#从-Learner-保存已通过提案来看-Paxos-的一致性" class="headerlink" title="从 Learner 保存已通过提案来看 Paxos 的一致性"></a>从 Learner 保存已通过提案来看 Paxos 的一致性</h4><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/016.png"></p><p>如图所示，只有 Learner 成功响应 Client 后，整个事务操作才算成功。那么就会有以下疑问？</p><ul><li>情况1，算法角色都是独立的服务器节点时。那么是过半 Learner 响应算成功，还是全部 Learner 响应算成功呢？<ul><li>如果过半 Learner 算成功，则 Paxos 为最终一致</li><li>如果所有 Learner 算成功，则 Paxos 为强一致</li></ul></li><li>情况2（推荐）：算法角色在服务器节点中重叠，既一个节点多个角色。<ul><li>如果没有 Leader Proposer，则 Paxos 因为过半为最终一致</li><li>如果实现了 Leader Proposer， 且要求所有节点完成同步才响应用户，则 Paxos 为强一致</li></ul></li></ul><h4 id="解决活锁问题"><a href="#解决活锁问题" class="headerlink" title="解决活锁问题"></a>解决活锁问题</h4><p>&amp;emsp;&amp;emsp;在极端的情况下可能会出现这样的现象：Proposer-1提出了编号为M1的提案，且完成了第一阶段。于此同时Proposer-2提出了编号为M2（比M1大）的提案亦完成了第一阶段。那么这时就出现问题了，因为M2通过第一阶段就意味着Acceptor向Proposer-2承诺不会再通过编号小于M2的请求，因此Proposer-1的accept请求会在第二阶段被Acceptor拒绝。这时Proposer-1就会重新进入第一阶段，提出编号为M3的提案并通过第一阶段。而这时Acceptor又承诺Proposer-1不再批准编号小于M3的提案，从而导致Proposer-2第二阶段失败。如此类推进入了死循环，而这就是活锁，即明明没有发生资源锁定，但却一直获取不到执行权的情况。</p><p>&amp;emsp;&amp;emsp;解决活锁的方案是选出一个 Leader Proposer，即只有 Leader Proposer 能发起请求，譬如 Zookeeper 就是这样做的，而这一种方案通常被称为做 <strong>Multi-Paxos</strong> （即经过第一轮的 Basic Paxos 成功得到多数派 accept 的 Proposer 就成为 Leader Proposer 以处理后续的客户端请求）。</p><p>&amp;emsp;&amp;emsp;但 Multi-Paxos 并非完美，因为选举 Leader Proposer 依然需要进行一轮 Basic Paxos ，因此仍然存在活锁问题。所以可以考虑在 Leander Proposer 的基础上进行优化，既为每个 Proposer 加上一个<strong>随机超时器</strong>，让最先超时的 Proposer 先发出请求从而避免活锁问题。但其实如果做到这种程度的话，实质和 Raft 算法就十分类似了，因为 Raft 算法就是用超时器来解决这个问题的</p><h3 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h3><blockquote><p>Raft模型理解：</p><ul><li><a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a> </li><li><a href="https://raft.github.io/">https://raft.github.io/</a></li></ul></blockquote><h4 id="算法的诞生"><a href="#算法的诞生" class="headerlink" title="算法的诞生"></a>算法的诞生</h4><p>&amp;emsp;&amp;emsp;Raft是一个以日志为核心的分布式共识协议，是 Raft 作者针对 Paxos 的改良版。意在比 Paxos 容易理解，而且性能和容错方面与 Paxos 是对等。</p><p>&amp;emsp;&amp;emsp;据了解 Raft 作者当时为了比较 Paxos 和 Raft 两种算法的<code>可理解性</code>还专门在一个班里进行过实验。他分别为班里的每个学生讲授 Paxos 和 Raft 两种算法，然后进行测试，总分为60分。Raft 算法平均得分为25.7，而 Paxos 算法平均得分为20.8。甚至在测试过后还采访了参与实验的学生，结果回答如出一辙，都表示 Raft 算法比 Paxos 更加容易理解。当然事实也的确如此，Paxos 算法确实是有些晦涩难懂。准确点来说 Paxos 其实只是一种方法论，所以如果实现起来还需开发者考虑很多因素，而这点就没有 Raft 简单这具体了。</p><p>&amp;emsp;&amp;emsp;那么 Raft 是如何提高算法的可理解性的呢？分别有两点：</p><ul><li>问题拆分：将大问题化为小问题，化繁为简</li><li>减少状态空间：减少节点主动记录的数据内容，即降低集群的不确定性。例如在 Raft 中，日志条目只能从 Leader 节点复制到非 Leader 节点，而且是单向传输的</li></ul><h4 id="Raft特点"><a href="#Raft特点" class="headerlink" title="Raft特点"></a>Raft特点</h4><ul><li>容易理解和具体</li><li>支持 Leader 选举（与 Paxos 相比，Raft中的 Leader 是必须的，用于主导节点状态日志的复制）</li><li>和 ZAB 协议一样，主节点负责读写操作，而其它节点只负责读操作</li><li>支持崩溃恢复。节点宕机重启可以重新自动加入到集群中</li><li>高可用。只要节点数过半正常就能对外提供服务（不能马上检测到，因此存在脑裂风险）</li><li>最终一致性。脑裂和过半应答导致<ul><li>如果可以在实现 Raft 时解决脑裂问题（参考ZAB），以及能做到只能从 Leader 读写的话，就能做到强一致。但如果读写都只能在 Leader 中进行的话就会降低集群的性能，所以亦可以参考<code>NWR</code>的思想来解决一致性问题的同时也能兼顾可用性</li></ul></li></ul><h4 id="问题拆分和减少状态空间"><a href="#问题拆分和减少状态空间" class="headerlink" title="问题拆分和减少状态空间"></a>问题拆分和减少状态空间</h4><blockquote><p>Raft将共识性问题拆分成以下4个小问题</p></blockquote><ul><li>Leader选举：节点集合启动后需要进行 Leader 选举，且 Leader 宕机后需要重新选举</li><li>日志复制：Leader 接收到 Client 的状态修改后会将其操作对应的日志条目复制给其它节点，并且会要求这些节点的日志必须和自己的日志在状态上保持一致</li><li>安全性：如果某节点已经将特定<strong>索引位置</strong>中的日志条目应用到状态中，那么其节点就不能在相同的索引位置下应用其它内容</li><li>成员变更<strong>：</strong>正在供服务的集群，如果需要新增、删除、更改配置等操作是不会影响正常提供服务的</li></ul><blockquote><p>减少状态空间</p></blockquote><ul><li>强Leader：<ul><li>日志条目只能从 Leader 节点复制到其它节点，所以系统的所有变更都只能通过 Leader 来进行</li><li>强 Leader 采用的是二段提交。即 Leader 接收到客户端变更状态的请求后并不会马上应用日志条目，而是将该日志条目广播出去后，并得到过半节点的响应后，Leader 会率先应用日志条目然后再要求其他节点应用日志条目</li></ul></li><li>Leader选举：Raft 使用<strong>随机超时器</strong>来开启选举阶段（解决活锁问题），即按照超时的先后来发竞选投票操作</li></ul><h4 id="算法角色-1"><a href="#算法角色-1" class="headerlink" title="算法角色"></a>算法角色</h4><ul><li><strong>Follower：</strong>跟随者。功能是参与决策（该角色是所有节点的初始化角色）</li><li><strong>Candidate：</strong>领导者候选人。功能是参与决策（发生选举超时的Follower节点）</li><li><strong>Leader：</strong>领导者。负责接收客户端请求以及日志条目的复制和应用工作</li></ul><h4 id="两个重要的超时机制"><a href="#两个重要的超时机制" class="headerlink" title="两个重要的超时机制"></a>两个重要的超时机制</h4><h5 id="选举超时"><a href="#选举超时" class="headerlink" title="选举超时"></a>选举超时</h5><ul><li>选举超时指的是 Follower 等待成为 Candidate 的这段时间。这段时间一般在150 毫秒 ~ 300毫秒之间 </li><li>一旦 Follower 成为 Candidate 就会生成一个新的选举任期（Term）并发起一轮 Leader 选举（广播来拉票），而其它非 Leader 节点接收到拉票心跳后必须向其投票支持，而率先拿到过半票的 Candidate 就会成为 Leader</li></ul><h5 id="心跳超时"><a href="#心跳超时" class="headerlink" title="心跳超时"></a>心跳超时</h5><ul><li>指 Leader 会在一定的时间间隔来广播日志条目信息，而这个时间就是心跳超时的时间</li><li>一旦心跳超时就会进入选举超时环节</li></ul><h5 id="两种超时的转换"><a href="#两种超时的转换" class="headerlink" title="两种超时的转换"></a>两种超时的转换</h5><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/023.png"></p><ol><li>集群刚启动，所有节点均为 Follower</li><li>因为一开始是没有 Leader 节点的，所以会发生选举超时节点就会从 Follower 变成 Candidate</li><li>节点成为 Candidate 后会马上发起 Leader 选举，如果发起选举后得到集群中过半的节点投票（包含自己票数），那么 Candidate 就会成为 Leader。其中 Leader 有一个任期的概念，叫做 Term。Term 代表的是当前这界选举的编号。</li></ol><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/024.png"></p><p>需要特别注意的是，如果某个 Candidate 发起选举期间发现集群中存在某个比自己更高版本的节点（以应用条目的来衡量）的话，那么 Raft 将不会允许这个 Candidate 成为 Leader，而是要求高版本的 Follower 成为 Leader。这样做的目的是避免数据覆盖而丢失数据。</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/037.gif"></p><p>从上图中可以看到 S4 节点选举超时先发起选举拉票，但它最后并没有成为Leader。这是因为 S4 只应用了 index 为 1 的条目状态，而其他节点都它应用的更多，所以 S4 在 Raft 中不能成为Leader。</p><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><p>Raft算法的通信主要由以下两种 RPC 请求组成</p><p><strong>1）RequestVote RPC：竞选阶段使用，用于拉票</strong></p><p>请求格式：候选人</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/029.png"></p><p>响应格式：投票人</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/030.png"></p><p><strong>2）AppendEntries RPC ：Leader正常通信时使用</strong></p><p>发送格式：Leader</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/031.png"></p><p>响应格式：非 Leader 节点</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/032.png"></p><h4 id="日志复制过程"><a href="#日志复制过程" class="headerlink" title="日志复制过程"></a>日志复制过程</h4><blockquote><p>状态机</p></blockquote><img src="分布式的一致性和共识性/033.png" style="zoom: 33%;" /><p>Raft 中的节点其实就是一个状态机，而日志就是状态机的标准。即通过保持日志的一致性来维持节点的节点状态一致性。</p><blockquote><p>Leader节点在复制操作日志之后宕机问题</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/027.png"></p><blockquote><p>因为网络分区而导致某个节点的任期大于大多数节点的任期</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/007.png"></p><blockquote><p>日志条目内容</p></blockquote><p>日志由有序编号（log index）的条目组成。</p><p>每个条目包含了创建时它时所处的任期号（Term）以及用于状态机执行的命令。</p><p>如果一个条目被成功复制到过半数节点，那么这个条目就可以被视为可以提交日志。</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/026.png"></p><blockquote><p>日志安全</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/028.png"></p><blockquote><p>网络分区问题（出现双Leader-“脑裂”）</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/025.png"></p><ul><li>解决脑裂可以参考 ZAB 协议，即低于过半节点就禁止对外提供服务。</li><li>又或者可以额外为 Leader 设置一个<code>健康检测周期超时</code>来统计 Follower 健康状态。期间可通过心跳包来收集状态信息，而一旦到达健康检测周期就进行一次健康节统计，如果发现健康节点数大幅度减少（相较上一次统计）就马上停止提供服务。（思想参考自 Spring Cloud Eureka 的保护机制）</li><li>除此之外也有人提出 <a href="https://mp.weixin.qq.com/s?__biz=MzI3NDIxNTQyOQ==&mid=2247484229&idx=1&sn=77d6178f182189e1fc8f042aa698f2e5&chksm=eb16242fdc61ad39d74b4af1a72253bc5ae0de42fa1d65274fd21b9f903e03e77e8d4680ee0c&scene=21">leader lease</a> 方案，有兴趣的可以了解一下</li></ul><h3 id="ZooKeeper-Atomic-Broadcast（ZAB协议）"><a href="#ZooKeeper-Atomic-Broadcast（ZAB协议）" class="headerlink" title="ZooKeeper Atomic Broadcast（ZAB协议）"></a>ZooKeeper Atomic Broadcast（ZAB协议）</h3><h4 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a>基本简介</h4><p>&amp;emsp;&amp;emsp;ZAB 协议如其名，是一个专门为 ZooKeeper 设计的协议，一开始是为了 Zookeeper <code>崩溃恢复</code>的需求而设计的。ZAB 实现了一种<code>主备模式</code>的系统架构，且可以让备份节点和主节点的状态保持一致。不难看出 ZAB 协议并不像 Paxos 和 Raft 那样，它是强耦合 Zookeeper 中的协议，并不通用。</p><h4 id="ZAB特点"><a href="#ZAB特点" class="headerlink" title="ZAB特点"></a>ZAB特点</h4><ul><li>支持 Leader 选举</li><li>支持崩溃恢复。节点宕机恢复后可以自动重新加入集群</li><li>可用性高。只要求过半节可用就能提供服务</li><li>主节点负责读写操作，其它节点只负责读操作</li><li>最终一致性。过半应答导致<ul><li>数据提交后只需过半即可进行下一步操作，也就是说极端情况下可能出现某个节点还没响应 Leader 且又没有脱离集群，而这时因为已经得到过半Follower响应，所以 ZooKeeper 就响应用户操作数据成功了，但接着进行查询时正好查询到还没响应 Leader 的这个节点，这时就会数据不一致问题</li></ul></li></ul><h4 id="协议角色"><a href="#协议角色" class="headerlink" title="协议角色"></a>协议角色</h4><blockquote><p>Observer官方介绍： <a href="https://zookeeper.apache.org/doc/current/zookeeperObservers.html">https://zookeeper.apache.org/doc/current/zookeeperObservers.html</a> </p></blockquote><p>在 ZAB 协议中存在3种角色：Leader、Follower、Observer。其中<strong>Observer单纯是用来扩展集群的连接数（读性能）而设计的</strong>。它的功能和 Follower 差不多，但<strong>它并不参与 Leader 选举</strong>，而只会默默地同步 Leader 的状态。</p><p>那为什么要用 Observer 而不直接用 Follower 来扩展呢？</p><p>官方的解释是如果<strong>添加更多的 Follower 就会引起集群的写性能下降</strong>，因为写操作需要过半才算成功写入，所以使用 Follower 来扩展就需要询问更多的 Follower 从而导致集群可用性降低。</p><p>因此到最后其实在 ZAB 协议中只有两个核心角色，它们分别是 Leader 和 Follower 。</p><blockquote><p>算法核心角色</p></blockquote><p><strong>Leader：</strong>读写请求处理、广播事务、接收转发过来的写请求</p><p><strong>Follower：</strong>备份数据<strong>、</strong>扩展读性能、转发写请求、参加选举</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/034.png"></p><h4 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h4><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/036.png"></p><p> 在 ZAB 协议中通信是以 FIFO 模型来实现的。其请求处理过程如下：</p><ol><li>Leader 接收到 Client 请求之后会将每个请求打包成 proposal 并为其分配一个<strong>全局递增的事务ID（zxid）</strong>，然后按照接收顺序广播给所有 Follower</li><li>Follower 接收到 proposal 后亦会顺序处理然并响应 Leader（即 Follower 和 Leader 用的是请求应答机制）</li><li>当 Leader 接收到<strong>过半</strong> Follower 的ACK响应后就会广播 commit 给所有 Follower，以示让其提交对应zxid的 proposal </li><li>Follower 接收到 commit 后会对 proposal 进行提交</li></ol><h4 id="节点的两种模式"><a href="#节点的两种模式" class="headerlink" title="节点的两种模式"></a>节点的两种模式</h4><ul><li>恢复模式：Leader 选举时、新节点加入时</li><li>广播模式：集群中过半节点正常提供服务时</li></ul><p>例如集群刚启动，因为还没有 Leader 的缘故所以所有节点都会进入恢复模式来选举Leader，直到选举完成。</p><p>又例如在集群正常运作期间有新节点加入，这时<strong>新节点会进入恢复模式</strong>并找到正在广播消息的 Leader 进行数据同步，直到同步完成后才会转为广播模式参与提供服务的行列中。</p><h4 id="全局事务ID（ZXID）格式"><a href="#全局事务ID（ZXID）格式" class="headerlink" title="全局事务ID（ZXID）格式"></a>全局事务ID（ZXID）格式</h4><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/040.png"></p><p><strong>Epoch：</strong></p><p>epoch 是一个时间戳。新任 Leader 会从本地查出最新的一次 proposal，取出其 ZXID 后解析出 epoch（即上一个任期）然后递增 1 作为新任期编号。当然，如果没有 proposal 就会直接用新的时间戳。</p><p>这里的 epoch 值其实相当于 Raft 中的 Term。</p><p><strong>Counter：</strong></p><p>Zookeeper 每接收一个请求就会在现有 counter 的基础上加 1。</p><p>注意，counter 是存在溢出问题的。当溢出后就会进行重新选举， 然后 counter 重新变回0 。但因为 Leader 选举其实是会导致集群短暂无法提供服务的，所以如果你对着方面有严苛的要求，也可以通过修改源码来重新调整 ZXID 中 epoch 和 counter 的比例，详情请异步到参考。</p><h4 id="简单粗暴的二阶段提交"><a href="#简单粗暴的二阶段提交" class="headerlink" title="简单粗暴的二阶段提交"></a>简单粗暴的二阶段提交</h4><p>ZAB 的二阶段提交和 2PC 的不太一样。在 ZAB 中 Leader 广播 commit 后，如果 Follower 进行 commit 失败，那么 Follower 只会断开与当前 Leader 的连接，然后再重新<strong>进入恢复模式</strong>直到同步成功后才会重新进入集群。换句话说就是 ZAB 通过恢复模式避免了回滚事务这种操作。</p><h4 id="协议陈述"><a href="#协议陈述" class="headerlink" title="协议陈述"></a>协议陈述</h4><blockquote><p>节点模式和状态</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/038.png"></p><p>两种模式实质可以细分为三个步骤</p><ul><li>发现：选举</li><li>同步：复制数据</li><li>广播：提供服务</li></ul><p>在协议中节点有三种状态</p><ul><li><p>LOOKING：处于选举阶段（集群节点的初始状态）</p></li><li><p>FOLLOWING：Follower 的状态</p></li><li><p>LEADEING：Leader 的状态</p></li></ul><blockquote><p>发现：选举过程（FastLeaderElection）</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/041.png"></p><p>如图所示，选票结构是 vote ( myid，zxid )。其中 myid 是节点在集群中的唯一标识，而 zxid 则是当前节点最后的 zxid 值。</p><p>选举步骤如下：</p><ol><li>节点进入恢复模式后会切换为 LOOKING 状态，并互相发送 vote 进行拉票</li><li>接收到 vote 后首先会对比zxid。如果自己的 zxid 比接收到的小，则将自己的投标目标改为 zxid 值最大的那个节点。而如果zxid 一样（例如集群第一次启动），就接着对比 myid 值，然后改投给 myid 最大的节点。例如上图示例中最后 Leader 将会是 Server1（1，6）。而且不难发现如果节点在第一轮投票中自己的 vote 是最大的话，那么就不会再发起投票操作了，而是等待其节点投票给自己。</li><li>经过第二次投票后，因为得到过半选票，所以 Leader 就可以确立了。这时 Leader 节点会切换为 Leading，而其他节点则切换为 Following。随后集群节点就会进入同步阶段</li></ol><p>注意：</p><ul><li>选举过程中是可能出现短暂脑裂的。譬如投票过程网络延时大，出现 A 认为 B 是 Leader，B 认为 C 是 Leader 的情况。当然，这时因为 B 知道自己不是 Leader 所以它并不会响应 A 的请求，最后 A 会断开重连再恢复。但以上说的这种情况无疑会降低集群的可用性，因此为了解决这个问题FastLeaderElection引入了<strong>FinalizeWait机制</strong>，即在投票期间节点会等待一段时间以避免延时带来不必要的问题</li></ul><blockquote><p>同步：节点状态同步</p></blockquote><p>在选举阶段中随着 Leader 的确立，周期值 epoch 也会被重新赋值</p><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/039.png"></p><ol><li>在刚诞生准 Leader 后（同步Leader节点状态前的这段时间），Leader 会在最新的 zxid 中提取出 epoch 值然后在此基础上加 1 左为新一任 Leader 的任期标识<code>new epoch</code></li><li>生成新 epoch 后 Leader 会将新 epoch 和事务状态集合打包一同广播给所有 Follower 让其复制自己的节点状态</li><li>Follower 成功接收到要求后也会通过请求应答机制响应 Leader </li><li>在这期间如果 Leader 得到过半 Follower 的响应，那么 Leader 就会继续向 Follower 发出 commit 要求，这时 Follower 就会正式将从 Leader 同步过来内容应用到自己的节点上</li></ol><blockquote><p>广播：集群处于正常服务状态</p></blockquote><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/042.png"></p><ol><li>Leader 接收到 Client 请求后将其封装为 proposal 并赋予一个全局唯一的事务id值（zxid），然后记录 log 并将其广播给 Follower</li><li>得到过半 Follower 响应后，Leader 首先是自己执行 commit proposal 操作，然后再将 commit 广播给 Follower</li><li>Follower 接收到 commit 要求后就会将 proposal 应用到当前节点中并响应 Leader</li></ol><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/035.png"></p><h3 id="Gossip、Paxos、Raft、ZAB之间的区别"><a href="#Gossip、Paxos、Raft、ZAB之间的区别" class="headerlink" title="Gossip、Paxos、Raft、ZAB之间的区别"></a>Gossip、Paxos、Raft、ZAB之间的区别</h3><p><img src="/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/043.png"></p><blockquote><p><strong>注：</strong> </p><ul><li>MongoDB 的 Master 选举以及 Redis Sentinel 的 Master 选举均使用 Raft 算法</li><li>MongoDB 可以通过调节 writeConcern、readPreference、readConcern 等参数实现强一致的 CP 架构</li><li>据了解 Redis 正在研发一个全新的集群模块，通过采用 Raft 算法实现节点间的共识，相当于提供多一种集群模式</li></ul></blockquote><ul><li>在 Paxos 中 Leader 选举并不是必须的，它只是一种优化手段</li><li>ZAB 协议和 Raft 算法其实非常相似，而较为显著的差别有如下这些<ul><li><strong>选举条件：</strong>ZAB 以 MYID 和 ZXID 作为选票，而 Raft 参考的是 Term 和 日志条目</li><li><strong>Term和Epoch生成时机：</strong>Raft 中的 Term 只代表发起选举的次数，它在节点成为候选者时产生，而且如果在当前 Term 内没有选举成功，则会直接进入下一个 Term。而 ZAB 中的 Epoch 是在选举成功之后产生的</li><li><strong>脑裂问题：</strong>ZAB 集群过半才可用，解决了脑裂问题。而 Raft 算法本身是存在脑裂问题的，出现脑裂后只能等待网络恢复才能达成最终一致性</li></ul></li></ul><h2 id="Quorum-NWR-一致性控制策略"><a href="#Quorum-NWR-一致性控制策略" class="headerlink" title="Quorum NWR 一致性控制策略"></a>Quorum NWR 一致性控制策略</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p>介绍</p></blockquote><p>Quorum NWR 是一种控制读写一致性策略，是一种以<a href="https://zh.wikipedia.org/wiki/%E9%B4%BF%E5%B7%A2%E5%8E%9F%E7%90%86">鸽巢原理</a>为理论基础的一致性解决方案。它适用于<code>有数据冗余副本的集群</code>系统。</p><ul><li>N：集群中节点的个数量</li><li>W：写操作必须等待至少 W 个副本节点都成功写入后才能响应客户端操作成功（W 不能大于 N）</li><li>R：读操作必须一次读取 R 个节点上的数据，然后进行版本比对得出最新的数据（R 不能大于 N）</li></ul><p>注：鸽巢原理是一种证明<code>存在性</code>的论述。例如上述的 W 和 R 代表鸽子，而 N 代表的是鸽笼。当 W+R &gt; N 时就必定能够读取到最新写入的数据，从而实现强一致。譬如当 N &#x3D; 5，W &#x3D; 3， R&#x3D;3，那么读操作时就必然读到一个含有最新版本数据的节点。</p><blockquote><p>一致性级别</p></blockquote><ul><li>W + R &gt; N：强一致</li><li>W + R &#x3D; N：弱一致</li><li>W + R &lt; N：最终一致</li></ul><blockquote><p>注意事项</p></blockquote><ul><li>不难看出 Quorum NWR 其实是一种通过降低可用性来提高一致性的方案</li><li>个人理解读操作一般情况下都是既可以在主节点中也可以在副本节点中完成的，所以 R 既可以是主节点也可以是副本节点</li><li>Quorum NWR 不仅是一种策略，也是一种思路，所以不同的实现方式可能存在稍微的出入，但思想是万变不离其宗的</li></ul><h3 id="最佳实践案例"><a href="#最佳实践案例" class="headerlink" title="最佳实践案例"></a>最佳实践案例</h3><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><blockquote><p>如何保证写不丢失数据？   </p></blockquote><p>通过 <code>wirteConcern</code> 设置</p><ul><li>0：只要主库写入成功就马上响应客户端，而无需关心从库是否已经成功落盘</li><li>n（少于集群节点总数但大于0）：除了主库落盘成功外，还需要等待 n 个从库落盘成功才可以响应客户端</li><li>majority：要求集群过半节点落盘成功才响应客户端</li></ul><blockquote><p>读操作控制</p></blockquote><p>  通过 <code>readPreference</code> 设置</p><ul><li>primary（默认）：只在主库中读取（会降低集群性能，以及增加主库的负载）<ul><li>注意：也就是说 MongoDB 集群其实是一个强一致的 CP 系统</li></ul></li><li>primaryPreferred：优先选择主库，如果不可用则选择从库</li><li>secondary：只在从库中读</li><li>secondaryPreferred：优先选择从库，不可用再选主库</li><li>nearest：选择距离最近的节点进行读操作（以 ping time响应速度决定）</li></ul><blockquote><p>控制读操作的隔离级别（MongoDB ACID中的隔离性实现）</p></blockquote><p>通过<code>readConcern</code>设置</p><ul><li>local（默认）：可以读到所有可用的数据<ul><li>简单说就是从当前所连接的节点上读取，所读到的数据不保证已经被多数节点持久化</li></ul></li><li>available：可以读到所有可用的数据<ul><li>3.6 版本开始支持，针对分片集群</li><li>如果使用的是复制集 local 和 available 两种配置是一样的</li></ul></li><li>majority：读取在大多数节点上已经提交成功的数据<ul><li>majority 不代表能够一定读到最新写入的数据，但可以避免脏读</li><li>该配置只建议在事务上临时设置，否则会影响集群的可用性</li></ul></li><li>linearizable：线性化读<ul><li>一定能读取到当前节点的上一个写操作的值</li></ul></li><li>snapshot：读取快照中的数据<ul><li>隔离性最强，相当于 RDBMS 中的序列化读写</li></ul></li></ul><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><blockquote><p>确保生产者消息不丢失</p></blockquote><p>在网上经常看到有说 Kafka 不可靠会导致消息丢失的说法，其实这完全是因为对 Kafka 不熟悉所致。</p><p>例如可以在 Producer 中调节 acks 参数级别，以及在 Broker 中设置 min.insync.replicas 数量来保证消息日志落盘成功</p><p>1）Producer 中 acks 的级别：</p><ul><li><p>0：Producer 完全不理会 Replica 是否已经日志落盘成功，发送完一个批消息后会马上发下一个。这时 Producer 吞吐量最高，但因为能确认日志是否落盘成功，所以存在丢失日志的风险</p></li><li><p>1（默认）：Producer 只关注 Leader Replica 是否已经日志落盘成功。该配置级别是吞吐量和安全性的折中点</p></li><li><p>-1或all：Producer 会等待集群中所有 Replica 的日志落盘成功才会发送下一个批次的消息。消息能够确保落盘成功，但吞吐量最低</p></li></ul><p>2）Broker 中的 min.insync.replicas 配置：</p><ul><li>用于设置必须应答成功的 Replica 数，亦只有满足这个值 Leader Broker 才会响应 Producer 日志落盘成功</li><li>特别注意，该配置只在 Producer 的 acks 值设置为 -1&#x2F;all 时才生效</li></ul><blockquote><p>关于 Kafka 中的 ISR 集合（in-sync replica）</p></blockquote><p>ISR 集合是 Kafka 维护的一个健康节点集合。</p><p>默认情况下所有节点都是 ISR 成员，亦只有 ISR 成员才有资格竞选成为 Leader。</p><p>除此之外，Producer 发送一条消息到 Kafka 集群，那么这条消息持久化成功与否，默认情况下是根据 ISR 成员的响应情况来判断的</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><blockquote><p>如何降低数据复制丢失和延时所带来的风险？</p></blockquote><p>&amp;emsp;&amp;emsp;因为<code>Redis高可用的基础是复制</code>，而且 Redis 高可用方案目前来说属于 AP 系统（据悉 Redis 正在开发基于 Raft 算法的一种新集群模式，而如果采用 Raft 算法，集群可用性将会降低，但会从 AP 摇身一变为 CP 系统）。</p><p>&amp;emsp;&amp;emsp;首先要给出结论：目前版本的 Redis 高可用解决方案不能完全避免数据丢失，而只能做到尽量降低丢失数据可能。在 Redis 复制机制中有如下两个关键配置项，我们可以利用它们来降低复制时丢失数据的风险。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要求复制延迟低于指定时间值（秒），否则拒绝提供写服务</span></span><br><span class="line"><span class="attr">min-replicas-max-lag</span> <span class="string">10</span></span><br><span class="line"><span class="comment"># 要求健康节点数（副本节点）要达到一定的数量，否则拒绝提供写服务</span></span><br><span class="line"><span class="attr">min-replicas-to-write</span> <span class="string">3</span></span><br></pre></td></tr></table></figure><p>以上配置项特性表面上和 Quorum NWR 不是很占边，但事实上亦属于提高读一致的操作。即通过<strong>确保副本健康节点的数量</strong>和<strong>限制网络延时</strong>来间接实现 W 功能。换句话说 min-replicas-max-lag 的值越低，以及 min-replicas-to-write 的值越大时，那么读一致性就越高。而在前面已经提到过，Redis 目前并不能完全解决<strong>复制延时</strong>和<strong>数据丢失</strong>等问题。</p><ul><li>主节点在未复制成功的前提下宕机了，然后副本节点成为主节点提供服务，这时就会造成丢失数据</li><li>通过副本节点来提高读性能时，因为网络的不定性必然会出现一致性问题</li></ul><p>个人认为，Redis 之所以没有直接支持 Quorum NWR 的原因是与其设计理念有关，因为 Redis 是一个可用性优先的系统，而如果使用 Quorum NWR 就会导致可用性降低（是哟功能 min-replicas-max-lag、min-replicas-to-write 可会一定程度降低可用性 ）。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://managementfromscratch.wordpress.com/2016/04/01/introduction-to-gossip/">INTRODUCTION TO GOSSIP</a></li><li><a href="http://www.taohui.pub/wp-content/uploads/2018/05/The_Part-Time_ParliamentPaxos%E7%AE%97%E6%B3%95%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91-3.pdf">The Part-Time Parliamen中文译文</a> </li><li>《从Paxos到Zookeeper 分布式一致性原理与实践》</li><li><a href="https://stackoverflow.com/questions/27304887/paxos-vs-two-phase-commit">Paxos vs two phase commit</a></li><li><a href="https://www.zhihu.com/question/42112507">选出Leader Proposer解决活锁</a></li><li>《云原生分布式存储基石 etcd深入解析》</li><li><a href="https://raft.github.io/">The Raft Consensus Algorithm</a></li><li><a href="https://zhuanlan.zhihu.com/p/26506491">Raft实现指南</a></li><li><a href="https://zhidao.baidu.com/question/391807382596818965.html">算法和协议的定义和区别</a></li><li><a href="https://zookeeper.apache.org/doc/r3.5.0-alpha/zookeeperInternals.html#sc_atomicBroadcast">ZooKeeper Internals</a></li><li><a href="https://issues.apache.org/jira/browse/ZOOKEEPER-2789">Reassign ZXID for solving 32bit overflow problem</a> </li><li><a href="https://www.zhihu.com/question/46855968">ZooKeeper的zxid溢出了怎么办？</a></li><li><a href="https://juejin.im/post/5af14cd2f265da0b863633e4">Raft只读操作实现要点</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引闲记</title>
      <link href="/mysql%E7%B4%A2%E5%BC%95/"/>
      <url>/mysql%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年7月1日11:01:51 — 丰富索引数据结构概念，删减多余内容</li></ul><h2 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h2><blockquote><p>简介</p></blockquote><ol><li>索引是一种用来快速定位主体（数据）且独立于主体的数据结构</li><li>不同的索引类型实现方式不同，即使是相同类型的索引在不同的数据库中也可能不同</li></ol><blockquote><p>什么时候需要索引？</p></blockquote><p>表数据量增大，搜索时间被延长时</p><blockquote><p>什么字段适合做索引？</p></blockquote><ol><li>频繁被作为查询、表连接、分组、排序等条件的字段</li><li>离散程度高的字段</li></ol><blockquote><p>什么字段不适合做索引？</p></blockquote><ol><li>频繁被修改的字段</li><li>值较大的字段</li><li>离散度低的字段</li></ol><blockquote><p>索引是不是越多越好？</p></blockquote><p>答案是否定的。原因是索引是独立的数据结构，需要花费额外的时间和磁盘空间来维护</p><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p><img src="/mysql%E7%B4%A2%E5%BC%95/8.png"></p><h2 id="常见索引数据结构"><a href="#常见索引数据结构" class="headerlink" title="常见索引数据结构"></a>常见索引数据结构</h2><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><blockquote><p>图片源自网络</p></blockquote><p><img src="/mysql%E7%B4%A2%E5%BC%95/3.png"></p><ul><li>散列表数据结构通常由<strong>数组</strong>和<strong>链表</strong>组成。散列表中的元素会根据关键字段的哈希值来计算出自己在数组中的存储位置</li><li>散列表最理想的查询时间复杂度是O(1)</li><li>如果字段的离散度非常高的话（如身份证号码），那么用散列表作为索引结构来做等值查询优势最为明显。</li><li>使用散列表作为索引数据结构时会存在以下问题：<ul><li>散列表并不支持联合索引的最佳左前缀原则。因为计算数组下标时会将多个列一同进行哈希运算，无法确分前后</li><li>因为采用哈希算法确立数组下标的原因，导致散列表存储时会乱序，所以它并是不支持<strong>区间</strong>或<strong>排序</strong>等查询操作</li><li>散列表最适合的是做简单的等值查询操作</li></ul></li></ul><h3 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h3><blockquote><p>图片源自网络</p></blockquote><p><img src="/mysql%E7%B4%A2%E5%BC%95/4.png"></p><ul><li>有序数组的特点是内存连续，所以在<strong>随机访问查询</strong>和<strong>区间查询</strong>上效率是非常高</li><li>有序数组因为下标时连续的，所以在增加删除操作时，附近的元素需要集合挪动下标，这时效率相对较低</li><li>有序数组适用<strong>读多写少</strong>、<strong>常进行区间查询</strong>的场景</li></ul><h3 id="二叉查找树、平衡二叉查找树、红黑树的区别"><a href="#二叉查找树、平衡二叉查找树、红黑树的区别" class="headerlink" title="二叉查找树、平衡二叉查找树、红黑树的区别"></a>二叉查找树、平衡二叉查找树、红黑树的区别</h3><blockquote><p> 图片源自网络</p></blockquote><p><img src="/mysql%E7%B4%A2%E5%BC%95/5.png"></p><ul><li>二叉查找树的特点是左边节点小于右边节点，因此除了能保持顺序之外，还天然支持二分查找，所以个人认为二叉查找树其实是有序数组和散列表的折中</li><li>虽然二叉查找树从综合性角度来看并不差，但它存在一定的问题。譬如在极端的情况下会退化成链表，即从O（logn）变成O（n）</li><li>针对二叉查找树的退化问题，我们可以用平衡二叉查找树来解决。所谓平衡二叉树指的是左右子树的树高不能超过1的二叉查找树</li><li>平衡二叉查找树虽然能够解决退化成链表的问题，但随着数量量增多，它所花费在处理平衡上的开销就越大，而且树高没有得到控制，这时优势就会下降，甚至可能对 CPU 造成负担</li><li>红黑树是二叉查找树和平衡二叉查找树的折中，它也是一颗平衡树，只不过它只要求黑色节点平衡</li></ul><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><blockquote><p>图片源自网络 </p></blockquote><p><img src="/mysql%E7%B4%A2%E5%BC%95/7.png"></p><ul><li>B+树的B是balance的意思，即B+Tree也是平衡树，且是棵多叉树。B+树一般树高维持在 3~4 左右，即一次查找只需 3~4 次 IO 即可</li><li>B+树的特点是普通节点不记录数据，而是由叶子节点记录，即所谓的聚簇索引，而且B+树的叶子节点从左往右呈有序递增，且每个叶子节点都包含左右两边叶子节点的引用，所以天然支持<strong>区间</strong>和<strong>排序</strong>等操作</li><li>B+树的思想是希望普通节点尽可能记录多一些子节点的信息，从而减少 IO 的次数，因为一个节点其实相当于一个内存页（16K），而一个内存页就相当于一次 IO 查询</li></ul><blockquote><p>拓展</p></blockquote><p>1）为什么 MongoDB 使用 B树而不是 B+树？</p><p><img src="/mysql%E7%B4%A2%E5%BC%95/9.png"></p><ul><li>其实 MongoDB 使用的 WiredTriger 和 InnoDB 一样使用的是 B+树</li><li>可参考 WiredTriger 手册<ul><li><a href="http://source.wiredtiger.com/3.2.1/tune_page_size_and_comp.html">http://source.wiredtiger.com/3.2.1/tune_page_size_and_comp.html</a></li><li><a href="https://mongoing.com/archives/2540">https://mongoing.com/archives/2540</a></li></ul></li></ul><p>2）什么是聚簇索引？</p><ul><li>聚簇索引是一种数据的存储方式，而并非一种索引结构。指的是数据顺序和索引顺序一样。譬如 InnoDB 中的主键就是一个聚簇索引</li></ul><h2 id="索引和约束"><a href="#索引和约束" class="headerlink" title="索引和约束"></a>索引和约束</h2><ul><li><p>使用 primary key 时，除了会创建<strong>主键索引</strong>外，还会添加<strong>unique</strong>和<strong>not null</strong>两种约束</p></li><li><p>使用 foreign key 时，会添加<strong>外键约束</strong>和创建一个<strong>普通索引</strong></p></li><li><p>使用 unique key 时，会添加<strong>唯一约束</strong>和创建一个<strong>普通索引</strong></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> address(</span><br><span class="line">a_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">a_addr <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person(</span><br><span class="line">p_id <span class="type">int</span> <span class="keyword">PRIMARY</span> KEY auto_increment, <span class="comment">-- 主键（默认约束 unique 和 not null）</span></span><br><span class="line">p_id_card <span class="type">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">UNIQUE</span>, <span class="comment">-- 方法1: 添加唯一约束且创建唯一索引</span></span><br><span class="line">p_name <span class="type">VARCHAR</span>(<span class="number">10</span>), </span><br><span class="line">p_addr <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">p_age <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY uindex_age (p_age), <span class="comment">-- 方法2: 添加唯一约束且创建唯一索引</span></span><br><span class="line"><span class="comment">-- CONSTRAINT uindex_age UNIQUE KEY (p_age), -- 方法3: 添加唯一约束且创建唯一索引</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_addr_address_a_addr <span class="keyword">FOREIGN</span> KEY(p_addr) <span class="keyword">references</span> test.address(a_addr)  <span class="comment">-- 添加外键约束且创建一个普通索引</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><p>外键是一个跨表约束机制，是一种保证数据库完整性的手段。其值可以为null，也可以重复，但要求出现的值不能超出所关联的字段值的范围。例如 student.tid（子表） 外键引用了 teacher.id（父表），现在假设 teacher.id 有 （1，2，3），那么就表示 student.tid 的值时 （1，2，3）以外的值</p><h2 id="什么是覆盖索引？"><a href="#什么是覆盖索引？" class="headerlink" title="什么是覆盖索引？"></a>什么是覆盖索引？</h2><blockquote><p>基本介绍</p></blockquote><ul><li>覆盖索引和聚簇索引一样都不是索引的类型，引准确点它其实是一种现象，即更具索引去查询数据时，从索引中得到了想要的数据</li><li>覆盖索引的效率是非常高的，因为它并不需要真正去查找数据</li><li>在日常开发中我们应该尽量少用”select *”操作，有以下两个原因：<ul><li>通常的查询操作并不会需要所有字段，所以”select *”会返回冗余数据，导致 SQL 变慢和增加网络传输开销</li><li>需要的字段越多，覆盖索引出现的几率就越低</li></ul></li></ul><blockquote><p>如何提高覆盖索引的出现率？</p></blockquote><ul><li>少用”select *”</li><li>将频经常一起出现且作为查询条件的字段设置为组合索引</li></ul><h2 id="什么是回表查询？"><a href="#什么是回表查询？" class="headerlink" title="什么是回表查询？"></a>什么是回表查询？</h2><p>回表查询指的是使用了二级（辅助）索引来去检索，但没有出现覆盖索引的情况。</p><p>出现回表的主要原因是因为二级索引的叶子节点保存的是主键的值。</p><p>回表查询经过：</p><ol><li>根据二级索引检索，得到主键值</li><li>再根据主键值查询得到记录，而这一步就叫回表查询</li></ol><h2 id="什么情况下索引会失效"><a href="#什么情况下索引会失效" class="headerlink" title="什么情况下索引会失效"></a>什么情况下索引会失效</h2><ul><li>索引值类型为<strong>字符型</strong>时，<strong>使用其值进行运算</strong>或<strong>不使用引号包裹</strong>等情况都会导致索引失效</li><li>索引值类型为<strong>字符型</strong>或为<strong>组合索引</strong>时，使用了 <strong>!&#x3D;</strong> 或 <strong>&lt;&gt;</strong> 操作就会导致索引失效</li><li>在索引列上使用了<strong>函数</strong>或进行了<strong>运算</strong>，就会导致索引失效<ul><li>注意这里不是指值，而是索引列。譬如 left(‘empId’, 5) &#x3D; 100</li></ul></li><li>使用了左模糊匹配会导致索引失效</li><li>使用<strong>组合索引</strong>时，会导致其索引失效的情况<ul><li>没有遵循最佳左前缀</li><li>使用 <strong>!&#x3D;</strong> 和 <strong>&lt;&gt;</strong> 操作</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mongoing.com/archives/2540">MongoDB Wiredtiger存储引擎实现原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请免费DV-SSL证书并使用Nginx实现HTTPS访问</title>
      <link href="/%E9%80%9A%E8%BF%87Nginx%E5%AE%9E%E7%8E%B0HTTPS%E8%AE%BF%E9%97%AE/"/>
      <url>/%E9%80%9A%E8%BF%87Nginx%E5%AE%9E%E7%8E%B0HTTPS%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="关于https"><a href="#关于https" class="headerlink" title="关于https"></a>关于https</h2><p>https其实不是什么神秘的东西，它只是在原来使用明文传输的http基础上加入了加解密的协议(SSL&#x2F;TLS)从而使得访问更加安全；</p><p>可以简单理解：https &#x3D; http + ssl&#x2F;tls + 数字证书</p><h2 id="关于DV-SSL类型的SSL证书"><a href="#关于DV-SSL类型的SSL证书" class="headerlink" title="关于DV-SSL类型的SSL证书"></a>关于DV-SSL类型的SSL证书</h2><p>ssl证书是有不同的种类的，详情可以阅读<strong>亚洲诚信</strong>中的文档：<a href="https://www.trustasia.com/doc/ssl-certificates-typies#%E6%8C%89%E7%85%A7%E9%AA%8C%E8%AF%81%E7%B1%BB%E5%9E%8B">https://www.trustasia.com/doc/ssl-certificates-typies#%E6%8C%89%E7%85%A7%E9%AA%8C%E8%AF%81%E7%B1%BB%E5%9E%8B</a></p><p>例如按照验证类型来分类证书类型的话就可以分为以下3种：</p><ul><li>域名验证ssl证书(DV-SSL)</li><li>企业验证ssl证书(OV-SSL)</li><li>增强验证ssl证书(EV-SSL)</li></ul><p>不同类容的证书分别适合不同类型的对象使用，而当前文章申请的是 DV-SSL 类型，既域名验证ssl证书，适合个人网站使用：</p><ol><li>申请 DV-SSL 类型证书时需要填写你个人网站的域名和加解密过程中使用到的私钥；</li><li>机构颁发证书后，将证书存放到站点的服务器上用于支持https访问；</li><li>配置好web服务器的https支持后就能进行https访问了；</li></ol><h2 id="腾讯云申请免费SSL证书"><a href="#腾讯云申请免费SSL证书" class="headerlink" title="腾讯云申请免费SSL证书"></a>腾讯云申请免费SSL证书</h2><blockquote><p>免费使用1年</p></blockquote><p>申请地址：<a href="https://link.jianshu.com/?t=https://console.qcloud.com/ssl">https://console.qcloud.com/ssl</a></p><h2 id="上传证书并配置Nginx"><a href="#上传证书并配置Nginx" class="headerlink" title="上传证书并配置Nginx"></a>上传证书并配置Nginx</h2><ol><li>申请完证书之后到证书的详情中将证书下载到本地，然后上传至nginx所在的服务器</li></ol><p><img src="/%E9%80%9A%E8%BF%87Nginx%E5%AE%9E%E7%8E%B0HTTPS%E8%AE%BF%E9%97%AE/1.png"></p><ol start="2"><li>配置Nginx</li></ol><blockquote><p>主要配置</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将http导向https</span></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">80;</span></span><br><span class="line">    <span class="attr">listen</span> <span class="string">[::]:80;</span></span><br><span class="line"><span class="comment">    # 填写申请证书的域名</span></span><br><span class="line">    <span class="attr">server_name</span> <span class="string">tandi.wiki www.tandi.wiki;</span></span><br><span class="line"><span class="comment">    #return 301 https://www.tandi.wiki$request_uri?;</span></span><br><span class="line">    <span class="attr">rewrite</span> <span class="string">^ https://www.tandi.wiki$request_uri?;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">listen</span>  <span class="string">443 ssl http2;</span></span><br><span class="line"><span class="comment">    # 填写申请证书的域名</span></span><br><span class="line">    <span class="attr">server_name</span>  <span class="string">tandi.wiki www.tandi.wiki;</span></span><br><span class="line">    <span class="attr">root</span><span class="string">站点的位置;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    # ssl证书配置</span></span><br><span class="line">    <span class="attr">ssl</span> <span class="string">on; # 最新版本中无需显式指定该配置</span></span><br><span class="line">    <span class="attr">ssl_certificate</span> <span class="string">/usr/share/nginx/ssl/1_www.tandi.wiki_bundle.crt;</span></span><br><span class="line">    <span class="attr">ssl_certificate_key</span> <span class="string">/usr/share/nginx/ssl/2_www.tandi.wiki.key;</span></span><br><span class="line">    <span class="attr">ssl_session_timeout</span>       <span class="string">5m;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>配置完后重启服务器或reload配置即可</p><p><img src="/%E9%80%9A%E8%BF%87Nginx%E5%AE%9E%E7%8E%B0HTTPS%E8%AE%BF%E9%97%AE/2.png"></p><h2 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h2><h3 id="TLS-1-2-握手过程（待修正）"><a href="#TLS-1-2-握手过程（待修正）" class="headerlink" title="TLS 1.2 握手过程（待修正）"></a>TLS 1.2 握手过程（待修正）</h3><p><img src="/%E9%80%9A%E8%BF%87Nginx%E5%AE%9E%E7%8E%B0HTTPS%E8%AE%BF%E9%97%AE/3.png"></p><h3 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h3><ul><li>单向加密：MD5、SHA1、SHA192、SHA256、SHA384</li><li>对称加密：DES、3DES、AES、CRC-32</li><li>非对称加密：RSA、DSA</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>推荐书籍：《图解HTTP》</li><li>推荐文章：<a href="https://www.zhihu.com/question/52493697">https://www.zhihu.com/question/52493697</a></li></ol><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型(JMM)</title>
      <link href="/jmm/"/>
      <url>/jmm/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年04月1日09:46:02 — 内容修辑</li></ul><h2 id="什么是JMM？"><a href="#什么是JMM？" class="headerlink" title="什么是JMM？"></a>什么是JMM？</h2><ul><li>JMM 全称为 Java Memory Model，即 Java 内存模型</li><li>JMM 是理解 Java 线程并发的大前提</li><li>JMM 和 JVM 运行时内存模型是两码事不要混淆</li><li>JMM 是仿CPU与内存模型所创建的，JMM出现的目的是为了屏蔽硬件和操作系统的差异，为了更好地支持跨平台</li></ul><h2 id="了解技术最好的方法是知道它为什么存在"><a href="#了解技术最好的方法是知道它为什么存在" class="headerlink" title="了解技术最好的方法是知道它为什么存在"></a>了解技术最好的方法是知道它为什么存在</h2><blockquote><p>了解</p></blockquote><p>大家都知道 CPU 是计算机的核心组件，用于实时处理数据以改变计算机状态，而内存（RAM）则用于存储计算机运行时所产生或所需要用到的数据。但因为 CPU 和 RAM 的运算速度不在同一个级别，所以为了解决这一问题科学家们就在 CPU 内部加入了高速缓存（Cache、寄存器）组件以解决两者速度上的差距。也就是说 CPU 在处理数据前需要先将 RAM 中的数据加载到高速缓存中再进行运算，等到计算结束又会将高速缓存的内容回写回 RAM 中，这就是 CPU 和 RAM 的关系。</p><p>随着科技的发展和<a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B">摩尔定律</a>的推进，CPU 的核数也随之而增加，但与此同时又带来了新的问题。譬如多个核同时操作同一个数据资源，且同时向 RAM 回写数据时，到底以那个回写结果为准？而如果不能解决这个问题的话，那么在数据回写时就会很容易出现因数据覆盖而导致状态丢失的问题出现。因此，后来科学家们通过引入<code>缓存一致性协议(MESI/MOSI/MSI/MOESI等等)</code>来解决了这一问题，即 CPU 和 RAM 交互时必须需要遵循一定的规则以确保数据的一致性。譬如 MESI 协议中将 CPU （高速缓存）的<code>缓存行</code>划分为以下 4 种类型：</p><ul><li>已修改（Modified）：表示缓存行只在当前核心有效，而如果需要保证其可见先则必须将其回写到 RAM 中，即将缓存行从 Modified 变为 Shared</li><li>独占（Exclusive）：表示缓存行和 RAM 中的状态处于一致</li><li>共享（Shared）：表示缓存行和 RAM 中的状态处于一致（没有被修改），且数据在多个核心中被应用</li><li>无效（Invalid）：缓存失效。可能是因为其他核心将 Modified 状态的缓存行成功回写到 RAM 中后导致 bus 触发缓存失效通知</li></ul><blockquote><p>拓展</p></blockquote><p>1）指令重排序</p><ul><li>为了充分地发挥 CPU 性能，CPU 通常会对输入的代码指令进行乱序执行（譬如两条不相干的指令其实是可以并行执行的，又或者某条指令导致阻塞而先越过该操作继续执行其他指令），而处理完后又会将输出结果重组以保证其输出顺序。因此需要明白 CPU 只保证代码的输出顺序而不保证其执行顺序，而这点也在 JVM 的即时编译器中被效仿。</li></ul><p>2）CPU 内部基本结构</p><p><img src="/jmm/003.png"></p><p>3）CPU 高速缓存层次结构</p><p><img src="/jmm/004.png"></p><p>4）CPU缓存的伪共享问题</p><ol><li><p>CPU读取主存的单位是缓存行</p></li><li><p>缓存行的大小有 32、64、128，而常见的 Intel&#x2F;AMD 处理器的缓存大小通常为 64 字节</p></li><li><p>同一时刻不存在多条（不同核的）线程同时访问存有相同变量的缓存行的情况。这是因为缓存一致性协议的缘故，当一条线程修改（L1&#x2F;L2）缓存行后，其余核心相同变量所在的缓存行就会被无效（Invalid），而这就是缓存的CPU伪共享问题</p></li><li><p>解决 CPU 缓存的伪共享问题可以提高缓存的并发性能，而该问题可以通过填充缓存行来解决。以 64 bit缓存行为例：</p><p>手动填充：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; <span class="comment">// 64bit系统+指针压缩优化=对象头大小为12byte</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100L</span>; <span class="comment">// 对象有用变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> b,c,d,e,f; <span class="comment">// 对象无用变量，专门用于填充</span></span><br><span class="line">    <span class="comment">// 到目前位置该对象的总大小为：12+8+40=60</span></span><br><span class="line">    <span class="comment">// 注意，但因为JVM本身会对对象进行字节填充对齐（默认为8的倍数），所以这里60个字节到最后会被填充成64个字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明式填充</p><ul><li>允许普通模块使用（存在字段时才生效）：-XX:-RestrictContended</li><li>条件对齐大小：-XX:ContendedPaddingWidth，默认填充单位为 128 个字节</li></ul><pre><code class="java">@Contendedclass A &#123; // 12个字节    private long a = 100L; // 8个字节    // 到目前位置该对象的总大小为：12+8=20    // 但因为使用了@Contended所以会增加128个字节    // 即20+128=148，但148不是8的倍数，因此会再对齐为152，即当前实例最终大小为152个字节&#125;</code></pre></li></ol><h2 id="CPU与内存模型和JMM对比"><a href="#CPU与内存模型和JMM对比" class="headerlink" title="CPU与内存模型和JMM对比"></a>CPU与内存模型和JMM对比</h2><blockquote><p>CPU与内存模型</p></blockquote><p><img src="/jmm/002.png"></p><blockquote><p>JMM</p></blockquote><p><img src="/jmm/001.png"></p><p>不难看出 JMM 大致与 CPU 和内存模型一致，其对应关系如下：</p><ul><li><p>Java线程 - 处理器</p></li><li><p>工作内存 - 高速缓存</p></li><li><p>内存操作指令 - 缓存一致性协议</p></li></ul><h2 id="JMM中工作内存和主内存是如何交互的？"><a href="#JMM中工作内存和主内存是如何交互的？" class="headerlink" title="JMM中工作内存和主内存是如何交互的？"></a>JMM中工作内存和主内存是如何交互的？</h2><ul><li><p>高速缓存为了解决数据一致性问题需要按照缓存一致性协议来操作数据，而在 JMM 中也提供了相关的协议规则</p></li><li><p>JMM 定义的 8 种原子操作指令</p><ul><li><strong>lock</strong>：将【主存】变量标记为线程独占</li><li><strong>unlock</strong>：解除【主存】变量的线程独占状态</li><li><strong>read</strong>：从【主存】中读取变量到【工作内存】</li><li><strong>load</strong>：将从【主存】 read 得到的值应用到【工作内存】的副本中</li><li><strong>use</strong>：将【工作内存】中的副本值传递给指令执行引擎</li><li><strong>assign</strong>：将指令执行引擎的结果值赋给【工作内存】中的副本</li><li><strong>store</strong>：将【工作内存】的副本值保存到【主内存】</li><li><strong>write</strong>：将从【工作内存】中 store 回来的值应用到【主存】变量中</li></ul></li><li><p>针对上面 8 种原子操作指令 JMM 又附加了额外的规定</p><ul><li>read和load、store和write 都必须按顺序执行，但可不连续</li><li>不允许 read和load、store和write 单独出现。譬如执行了 store 后必须有 write 的出现</li><li>不允许 assign 之后不执行 store和write。即变量值必须回写到主存</li><li>不允许在没有 assign 的情况下将变量值回写到主存。即回写到主存的必须是“脏”数据</li><li>变量必须在主存诞生</li><li>线程对主存变量进行 lock 操作后以及在读取之前必须先将工作内存与之对应的变量副本失效。即进入 synchronized 块前会向将相关的变量失败，以确保从主存中获取变量的最新状态</li><li>线程对主存变量进行 unlock 操作之前，必须先将工作内存的副本的值回写到主存。即退出 synchronized 块前必须将工作内存相关变量刷回主存以保证一致性</li><li>不允许对没有被 lock 的变量进行 unlock 操作，亦不允许 unlock 其他线程的 lock 变量</li></ul></li></ul><h2 id="可见性、原子性、有序性"><a href="#可见性、原子性、有序性" class="headerlink" title="可见性、原子性、有序性"></a>可见性、原子性、有序性</h2><p>可见性</p><ul><li><p>可见性指的是线程对变量的修改操作对于其他线程而言是可见的</p></li><li><p>而想要做到变量的可见性，就必须做到在线程修改完变量后马上将其工作内存中的变量副本回刷到主存中，而且在回写成功后其他线程的工作空间中的变量副本也必须马上失效</p></li><li><p>在 Java 中提供可见性实现的分别有 final、volatile、synchronized</p></li></ul><p>原子性</p><ul><li>原子性指的是将多条代码指令的执行视为不可分割的整体</li><li>在 Java 中提供原子性实现的分别有 synchronized、CAS、CopyOnWrite</li></ul><p>有序性</p><ul><li>有序性指的是程序指令在执行期间会按照语义顺序来执行</li><li>但上面已经提到 CPU 处理器和 JIT 编译器会为了提高执行性能而对代码指令进行指令重排序优化而只能保证结果的顺序，因此从严格意义上来讲程序本身在执行期间是不能保证按照语义顺序来执行的。但是，如果是单线程程序，因为本身没有并发操作的缘故，我们也可以将它“视”为语义顺序执行。而多线程因为存在并发同步的交织操作，所以无法保证其有序性</li><li>在 Java 中提供有序性实现的分别有<ul><li>synchronized：能够保证原子性，即同一时刻只有一条线程指向该代码块，因此可以视为严格的语义顺序执行</li><li>volatile：禁止对变量相关的指令进行重排序优化</li></ul></li></ul><h2 id="volatile的特殊规则"><a href="#volatile的特殊规则" class="headerlink" title="volatile的特殊规则"></a>volatile的特殊规则</h2><p>volatile所修饰的变量有以下2个特点</p><ol><li><p>变量修改对所有线程是可见的（可见性）。线程修改变量后会马上回刷到主存，且在读取变量前会先将工作空间的副本实现以读取主存最新状态的变量值</p></li><li><p>禁止 JNI 编译器和 CPU 处理器对变量相关指令进行重排序优化</p></li></ol><p>volatile 并不能保证原子性</p><ul><li>譬如 a++ 这个操作，本质是 3 个指令操作<ol><li>先读取 a 的值</li><li>进行 a+1 操作</li><li>将结果赋值给a</li></ol></li><li>所以就算 a 被 volatile 修饰保证了可见性，但因为是多项操作，即不能担保在1和2、2和3期间 a 不会被其他线程所修改，因此如果想要实现其原子性，则必须使用同步操作。譬如使用 Atomic 类进行累加、synchronized进行互斥、CAS 等操作实现</li></ul><p>如何禁止变量的指令重排序？</p><ul><li>volatile 禁止指令重排序是通过<code>同步屏障指令</code>实现的，即常听到的内存屏障</li><li>内存屏障可以禁止 CPU 处理器对指令进行重排序，可以做到让指令按照严格顺序执行的效果</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E5%8F%96%E4%B8%80%E8%87%B4%E6%80%A7">缓存一致性</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E6%AD%A5%E5%B1%8F%E9%9A%9C">同步屏障</a></li><li><a href="https://docs.roguewave.com/threadspotter/2011.2/manual_html_linux/manual_html/ch03s02.html">Cache Lines and Cache Size</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Oauth2开放授权协议实现第三方应用授权（授权码模式）</title>
      <link href="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/"/>
      <url>/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="OAuth2是什么？"><a href="#OAuth2是什么？" class="headerlink" title="OAuth2是什么？"></a>OAuth2是什么？</h2><ul><li>OAuth2 一种开放性授权协议，例如 A 系统可以利用 Oauth2 将自己的资源分享给其它企业的 B 系统使用。一个很好的例子就是第三方登录功能</li><li>OAuth2 是 OAuth1 协议的延续版本，但它并不向后兼容</li><li>Oauth2 的四种授权类型<ul><li>授权码模式</li><li>简单模式</li><li>密码模式</li><li>客户端模式</li></ul></li></ul><h2 id="什么是-JWT-Token"><a href="#什么是-JWT-Token" class="headerlink" title="什么是 JWT Token"></a>什么是 JWT Token</h2><p>我们常用的的会话保持 Token 除了有 Bearer 外还有一种叫 JWT（JSON Web Token）。这两者最大的区别在于 Bearer 需要服务端持久化，而 JWT 则不需要。除此之外，JWT 还可以负载信息而 Bearer 只是一条无意义的字符串。总的来说，Bearer 其实更类似之前的 Session 机制，它比 JWT 更加安全，而 JWT 更加方便和轻量，所以项目中使用哪个完全可以取决于自己业务上的需要。</p><h2 id="日常接触到的OAuth2"><a href="#日常接触到的OAuth2" class="headerlink" title="日常接触到的OAuth2"></a>日常接触到的OAuth2</h2><blockquote><p>第三方登录案例介绍</p></blockquote><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/001.png"></p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/002.png"></p><p>基本流程如下：</p><ol><li>在网易云页面点击微博登录</li><li>弹出微博登录页面</li><li>完成登录，返回到网易云</li></ol><p>以上流程其实就是 Oauth 2 中的授权码授权模式，流程图如下：</p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/003.png"></p><p>值得注意的是每一个使用 Oauth 2 的开放平台所使用的参数可能都可能不一样，所以如果需要接入到其中就必须详细地阅读平台的接入文档。</p><p>微博开放平台开发手册：<a href="https://open.weibo.com/wiki/%E9%A6%96%E9%A1%B5">https://open.weibo.com/wiki/%E9%A6%96%E9%A1%B5</a></p><blockquote><p>微博接入步骤</p></blockquote><p>1）从网易云网站想微博发出授权请求获取授权码，假设网易云的 client_id 为 2422564707</p><p>Get 请求：<a href="https://api.weibo.com/oauth2/authorize?client_id=2422564707&amp;response_type=code">https://api.weibo.com/oauth2/authorize?client_id=2422564707&amp;response_type=code</a> </p><p>请求过后会得到如下授权码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code</span>=<span class="string">b040688a9f0d28bbfec388885003c0b6</span></span><br></pre></td></tr></table></figure><p>2）网易云需要再利用该授权码获取微博颁发的 Token</p><p>Post 请求：<a href="https://api.weibo.com/oauth2/access_token?client_id=2422564707&amp;client_secret=*%5C*%5C*&amp;grant_type=authorization_code&amp;code=b040688a9f0d28bbfec388885003c0b6&amp;redirect_uri=http://www.tandi.wiki/oauth/wb/callback">https://api.weibo.com/oauth2/access_token?client_id=2422564707&amp;client_secret=*\*\*&amp;grant_type=authorization_code&amp;code=b040688a9f0d28bbfec388885003c0b6&amp;redirect_uri=http://www.tandi.wiki/oauth/wb/callback</a></p><p>请求过后会得到如下 JSON 串，其中 access_token 就是 Token</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.00WM_SMD_kpwdCf85334b4c90Oe49h&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;remind_in&quot;</span><span class="punctuation">:</span> <span class="string">&quot;157679999&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">157679999</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2930078244&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isRealName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3）网易云得到 Token 后就可以利用它来获取微博上关于用户的相关信息了</p><p>具体怎么获取需要参考微博开发平台的 API 手册。如下是一个使用 Token 获取信息的请求案例，即网易云每次到微博资源服务器中获取数据信息都要带上这个 Token。</p><p>Post 请求：<a href="https://api.weibo.com/oauth2/get_token_info?access_token=2.00WM_SMD_kpwdCf85334b4c90Oe49h">https://api.weibo.com/oauth2/get_token_info?access_token=2.00WM_SMD_kpwdCf85334b4c90Oe49h</a></p><p>请求过后会得到如下 JSON 串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">2930078244</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;appkey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2422564707&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;create_at&quot;</span><span class="punctuation">:</span> <span class="number">1555384675</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expire_in&quot;</span><span class="punctuation">:</span> <span class="number">157678018</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="基于SpringBoot2-x实现授权码模式"><a href="#基于SpringBoot2-x实现授权码模式" class="headerlink" title="基于SpringBoot2.x实现授权码模式"></a>基于SpringBoot2.x实现授权码模式</h2><ul><li>通过网易云的例子，已经对授权码授权模式的过程有个大概的了解了</li><li>授权码模式 Oauth 2 的四种授权模式中最复杂的一种，所以只要掌握了授权码授权模式，其他的就不在话在了</li><li>Spring Security 继承了 OAuth2 功能模块，在加载 SpringBoot 的自动配置，我们只需要简单配置一下就可以直接使用了</li></ul><h3 id="授权服务器实现"><a href="#授权服务器实现" class="headerlink" title="授权服务器实现"></a>授权服务器实现</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/004.png"></p><h4 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring security oauth2 + jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SpringSecurity配置"><a href="#SpringSecurity配置" class="headerlink" title="SpringSecurity配置"></a>SpringSecurity配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsServiceBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.userDetailsServiceBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;aaa&quot;</span>) <span class="comment">// 用户名称</span></span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;aaa&quot;</span>))  <span class="comment">// 用户密码</span></span><br><span class="line">                .roles(<span class="string">&quot;PROGRAMMER&quot;</span>, <span class="string">&quot;DBA&quot;</span>, <span class="string">&quot;USER&quot;</span>); <span class="comment">// 角色</span></span><br><span class="line">                <span class="comment">//.authorities(&quot;PROJECT_READ&quot;, &quot;PROJECT_WRITE&quot;, &quot;DB_READ&quot;, &quot;DB_WRITE&quot;, &quot;USER_INFO&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-JDK-内置的证书管理工具-keytool-实现-Token-的RSA非对称加密"><a href="#使用-JDK-内置的证书管理工具-keytool-实现-Token-的RSA非对称加密" class="headerlink" title="使用 JDK 内置的证书管理工具 keytool 实现 Token 的RSA非对称加密"></a>使用 JDK 内置的证书管理工具 keytool 实现 Token 的RSA非对称加密</h4><blockquote><p>在上面已经提到过，使用 JWT Token 时服务端是不需要存储它的，而只需要对其进行合法性校验即可。</p><p>常见的 Token 校验方式有对称加密或非对称加密两种，而当前案例使用非对称加密。</p><p>如果多个服务共享一个 Token，则这时应该保持 JWT 校验逻辑的一致性，即这些服务都应该持有校验 JWT 的公钥（秘钥由颁发 Token 的服务妥善保管）。</p></blockquote><p>1）切换到工程的 resources 目录执行以下命令生产对应 keystore </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias oauth2 -keyalg RSA -keystore oauth2.keystore -keysize 2048</span><br></pre></td></tr></table></figure><ul><li>genkey：别名</li><li>keyalg：密钥使用的算法</li><li>keystore：文件的名称</li><li>keysize：密钥的长度</li></ul><p>2）执行完上面的命令后，控制台可能会建议你再执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore oauth2.keystore -destkeystore oauth2.keystore -deststoretype pkcs12</span><br></pre></td></tr></table></figure><p>3）打印出 keystore 的私钥和公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -rfc --keystore oauth2.keystore | openssl x509 -inform pem -pubkey</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2iPQ8LpFivSrXNtw3/r0</span><br><span class="line">LCTTb2zyqnIbaZHbGYi7Qxkbqc55m2KU8H2rWnGi6FXd1XJGgzz8zCbKbICHtPs8</span><br><span class="line">sADT1MDB+I/vHxixeh/MANjZTJMLCTKb29X0sTT3XxlZQ+ZcVreuC0qezwhr5SZ9</span><br><span class="line">c4PElDs82dBj+h3c6GTvu+ywr5gsxFV2BLu/B7UgQDlTLKKzTUD0iT+NGniZnwjM</span><br><span class="line">Ta7rb7+L3bw/nf1R1v4Rmrkxg53VBoijbRocPn9luDgWWsJqTd9wX0brF/s05vIF</span><br><span class="line">pFLF5Y48oGz9ns2GYrhZNSRKo7ilpDrAOEWQ9VsuoREhwDH+94eLuMaIn/gQc0TQ</span><br><span class="line">/wIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDdzCCAl+gAwIBAgIEXqNkizANBgkqhkiG9w0BAQsFADBsMRAwDgYDVQQGEwdV</span><br><span class="line">bmtub3duMRAwDgYDVQQIEwdVbmtub3duMRAwDgYDVQQHEwdVbmtub3duMRAwDgYD</span><br><span class="line">VQQKEwdVbmtub3duMRAwDgYDVQQLEwdVbmtub3duMRAwDgYDVQQDEwdVbmtub3du</span><br><span class="line">MB4XDTE5MDgwOTIxMDYyMFoXDTE5MTEwNzIxMDYyMFowbDEQMA4GA1UEBhMHVW5r</span><br><span class="line">bm93bjEQMA4GA1UECBMHVW5rbm93bjEQMA4GA1UEBxMHVW5rbm93bjEQMA4GA1UE</span><br><span class="line">ChMHVW5rbm93bjEQMA4GA1UECxMHVW5rbm93bjEQMA4GA1UEAxMHVW5rbm93bjCC</span><br><span class="line">ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANoj0PC6RYr0q1zbcN/69Cwk</span><br><span class="line">029s8qpyG2mR2xmIu0MZG6nOeZtilPB9q1pxouhV3dVyRoM8/MwmymyAh7T7PLAA</span><br><span class="line">09TAwfiP7x8YsXofzADY2UyTCwkym9vV9LE0918ZWUPmXFa3rgtKns8Ia+UmfXOD</span><br><span class="line">xJQ7PNnQY/od3Ohk77vssK+YLMRVdgS7vwe1IEA5Uyyis01A9Ik/jRp4mZ8IzE2u</span><br><span class="line">62+/i928P539Udb+EZq5MYOd1QaIo20aHD5/Zbg4FlrCak3fcF9G6xf7NObyBaRS</span><br><span class="line">xeWOPKBs/Z7NhmK4WTUkSqO4paQ6wDhFkPVbLqERIcAx/veHi7jGiJ/4EHNE0P8C</span><br><span class="line">AwEAAaMhMB8wHQYDVR0OBBYEFATydPkmtPBS6Qs+P2eUa9qI6H5TMA0GCSqGSIb3</span><br><span class="line">DQEBCwUAA4IBAQCz6X3BFqae0aJkpLkz2Dy5tAF+4DT7+s6FEjs2rimtOsrgRIGj</span><br><span class="line">EqxMSzcb7Nw8OHJswrXjbGxw9ObBaLpNQbkuiOEeGHK5yiDImMDHDX3TgxYyCdtj</span><br><span class="line">lTrk/39vrZONnRO84mPG5qHWx2bSXNptTXp5Kky7DAYv19gjxiL8Cbp3DAymXKj8</span><br><span class="line">DeBhNfzmnTFk3SLVci7i0OTbNWK8bK5bAZ1KrddnMgSx+dW428yDswbKU5nFFEK1</span><br><span class="line">Ts7pm/CtS7qEkpGy6zaDnvlkJgB1ssAO2Umm7YlU5ze2MZIjxSNwBKiTS9y6uAed</span><br><span class="line">hBWaqsfod5NqP5Bu4hDxVJJsP/MYnIayhhdc</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><h4 id="授权服务器配置"><a href="#授权服务器配置" class="headerlink" title="授权服务器配置"></a>授权服务器配置</h4><p>CustomTokenEnhancer 用于扩展 Token 内容，默认情况下 spring security oauth2 返回的 JWT 只包含用户名称，所以如果需要添加额外的内容就需要做如下扩展操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomTokenEnhancer</span> <span class="keyword">implements</span> <span class="title class_">TokenEnhancer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OAuth2AccessToken <span class="title function_">enhance</span><span class="params">(OAuth2AccessToken accessToken, OAuth2Authentication authentication)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultOAuth2AccessToken</span> <span class="variable">customAccessToken</span> <span class="operator">=</span> (DefaultOAuth2AccessToken) accessToken;</span><br><span class="line">        <span class="comment">// 授权服务器默认返回的Token类型是Bearer</span></span><br><span class="line">        <span class="comment">// 所以最好在DefaultOAuth2AccessToken#setTokenType中设置一下</span></span><br><span class="line">        <span class="comment">// 因为虽然不修改也可，但看起来会很奇怪，显示的是bearer但用的jwt，所以建议修改</span></span><br><span class="line">        customAccessToken.setTokenType(<span class="string">&quot;jwt&quot;</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置自定义字段</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; additionalInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">// User user = (User) authentication.getUserAuthentication().getPrincipal();</span></span><br><span class="line">        additionalInfo.put(<span class="string">&quot;user_cardid&quot;</span>, <span class="string">&quot;441802199682648829&quot;</span>);</span><br><span class="line">        customAccessToken.setAdditionalInformation(additionalInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> customAccessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Oauth2AuthorizationServerConfig 是授权服务器的主要配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oauth2AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刷新令牌使用</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDetailsServiceBean&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsServiceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;authenticationManagerBean&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">accessTokenConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对称加密</span></span><br><span class="line">        <span class="comment">//jwtAccessTokenConverter.setSigningKey(&quot;secret&quot;); // secret为密钥</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非对称加密</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">alias</span> <span class="operator">=</span> <span class="string">&quot;oauth2&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;oauth2.keystore&quot;</span>;</span><br><span class="line">        <span class="type">KeyStoreKeyFactory</span> <span class="variable">keyStoreKeyFactory</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">KeyStoreKeyFactory</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(filePath), privateKey.toCharArray());</span><br><span class="line">        jwtAccessTokenConverter.setKeyPair(keyStoreKeyFactory.getKeyPair(alias));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">tokenStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(accessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 设置安全端点访问权限</span></span><br><span class="line">        security.tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>) <span class="comment">// 不设置默认会拒绝访问</span></span><br><span class="line">                .checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>) <span class="comment">//  不设置默认会拒绝访问</span></span><br><span class="line">                .allowFormAuthenticationForClients(); <span class="comment">// 支持获取令牌且无需登录</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入自定义的token扩展</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomTokenEnhancer customTokenEnhancer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 设置授权服务器端点</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将自定义的TokenEnhancer添加到链上，否则会覆盖</span></span><br><span class="line">        <span class="type">TokenEnhancerChain</span> <span class="variable">tokenEnhancerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenEnhancerChain</span>();</span><br><span class="line">        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(customTokenEnhancer, accessTokenConverter()));</span><br><span class="line"></span><br><span class="line">        endpoints</span><br><span class="line">                .authenticationManager(authenticationManager) <span class="comment">// 认证管理器对接SpringSecurity</span></span><br><span class="line">                .userDetailsService(userDetailsServiceBean) <span class="comment">// 刷新令牌需要使用其校验用户</span></span><br><span class="line">                .tokenStore(tokenStore()) <span class="comment">// 设置token store</span></span><br><span class="line">                .tokenEnhancer(tokenEnhancerChain); <span class="comment">// 添加token扩展，如果不对token扩展使用下面方式直接配置</span></span><br><span class="line"><span class="comment">//                .accessTokenConverter(accessTokenConverter());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 配置客户端注册信息</span></span><br><span class="line">    <span class="comment">// 客户端如果需要使用授权服务，那么就必须提前在该服务器上注册自己的信息</span></span><br><span class="line">    <span class="comment">// 实际开发当中，授权服务器应该有提供相应的api接口来让客户端应用进行动态注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(<span class="string">&quot;client-app&quot;</span>) <span class="comment">// 客户端appId</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;https://www.baidu.com&quot;</span>) <span class="comment">// 客户端的回调地址（既授权码返回给谁）</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;secret&quot;</span>)) <span class="comment">// 客户端密钥</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">1800</span>) <span class="comment">// Token的有效时间</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">3600</span>) <span class="comment">// 刷新Token的有效时间，一般比token大</span></span><br><span class="line">                <span class="comment">// 当前授权服务器支持的授权模式</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;refresh_token&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                .scopes(<span class="string">&quot;READ_USER_INFO&quot;</span>, <span class="string">&quot;READ_PROJECT_INFO&quot;</span>); <span class="comment">// 支持的授权域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，授权服务器的基本配置操作就完成了</p><h3 id="资源服务器实现"><a href="#资源服务器实现" class="headerlink" title="资源服务器实现"></a>资源服务器实现</h3><h4 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/005.png"></p><h4 id="相关依赖-1"><a href="#相关依赖-1" class="headerlink" title="相关依赖"></a>相关依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="资源服务器配置"><a href="#资源服务器配置" class="headerlink" title="资源服务器配置"></a>资源服务器配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oauth2ReousrceServerConfig</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">accessTokenConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line">        <span class="comment">// 对称加密</span></span><br><span class="line">        <span class="comment">//jwtAccessTokenConverter.setSigningKey(&quot;secret&quot;); // 就是 secret</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非对称加密</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">alias</span> <span class="operator">=</span> <span class="string">&quot;oauth2&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;oauth2.keystore&quot;</span>;</span><br><span class="line">        <span class="type">KeyStoreKeyFactory</span> <span class="variable">keyStoreKeyFactory</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">KeyStoreKeyFactory</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(filePath), privateKey.toCharArray());</span><br><span class="line">        jwtAccessTokenConverter.setKeyPair(keyStoreKeyFactory.getKeyPair(alias));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">tokenStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(accessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        resources.tokenStore(tokenStore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 配置security拦截请求</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/resource/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="受保护资源（模拟）"><a href="#受保护资源（模拟）" class="headerlink" title="受保护资源（模拟）"></a>受保护资源（模拟）</h4><blockquote><p>假设以下为接口的使用是受到资源服务器保护的，既正常情况下需要先在授权服务器拿到 Token 才能访问</p></blockquote><p>UserInfo：一个简单的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UserController：受到保护接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要拥有 USER 角色才能够访问</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;USER&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title function_">userInfo</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">user</span> <span class="operator">=</span> UserInfo.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .name(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(user, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要Token的授权区域在 READ_USER_INFO 才能够访问</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;#oauth2.hasScope(&#x27;READ_USER_INFO&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title function_">userInfo2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">user</span> <span class="operator">=</span> UserInfo.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .name(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>(user, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h4><p>本次测试使用 Postman 来模拟客户端，其余授权码授权模式中的角色如下</p><ul><li><p>资源拥有者：我</p></li><li><p>代理：浏览器</p></li><li><p>客户端：Postman </p></li><li><p>第三方应用：资源服务器、授权服务器（后续为了方便这里我称这个应用叫 A 平台）</p></li></ul><h4 id="授权服务器部分"><a href="#授权服务器部分" class="headerlink" title="授权服务器部分"></a>授权服务器部分</h4><p>首先，假设现在我需要 Postman 来去访问我在 A 平台上的用户信息，但因为 A 平台和 Postman 不是同一家公司的，所以如果Postman 想要访问就需要我明确地授权，因此在我有意向让 Postman 去获取我在 A 平台上信息时，Postman 就会将我重定向到 A 平台让我进行授权。</p><p>假设以下就是 Postman 的重定向定制（目的是让我授权）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/oauth/authorize?client_id=client-app&amp;response_type=code&amp;scope=READ_USER_INFO</span><br></pre></td></tr></table></figure><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/006.png"></p><p>因为我的资源时受到保护的，所以 重定向到 A 平台后会让我进行身份认证以确保确实是 A 平台的用户</p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/007.png"></p><p>点击 Authorize 确认授权</p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/008.png"></p><p>确认后 A 平台授权服务器就会将授权码返回给 Postman 在注册时填写的回调接口上。但因为当前案例没有写前端，所以就填了百度的接口，但我们需要的只是它回调携带的授权码而已。</p><h4 id="资源服务器部分"><a href="#资源服务器部分" class="headerlink" title="资源服务器部分"></a>资源服务器部分</h4><p>Postman 从回调地址上拿到授权码后，就可以使用它来获取 Token 了。</p><p>以下为获取 Token 所需的最少参数案例，建议参考 SpringSecurity Oauth2 的官方文档。</p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/009.png"></p><p>如果成功拿到 Token 就证明 Postman 已经拥有获取我在 A 平台上的信息的权利了</p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/010.png"></p><p>请求时 Token 可以放在请求头，也可以放在 URL 中（JWT 之所以使用 Base64URL 编码就是为了针对这种场景）</p><p>使用 URL 方式只需要在 URL 后加上<strong>access_token&#x3D;Token内容</strong>即可。而使用请求头则需要将 Token 添加到请求头<strong>Authorization</strong>，如下：</p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/011.png"></p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><blockquote><p>关于 code 值</p></blockquote><p>对于授权码模式中的code，如果自定义的话最好设置较短的有效时间。对于上面这个案例而言 spring security oauth2 返回的 code 是一次性的，即只能够用一次用完就消失了。以下为 RandomValueAuthorizationCodeServices 源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> OAuth2Authentication <span class="title function_">consumeAuthorizationCode</span><span class="params">(String code)</span></span><br><span class="line">    <span class="keyword">throws</span> InvalidGrantException &#123;</span><br><span class="line">    <span class="comment">// 在获取授权信息的同时删除code</span></span><br><span class="line">    <span class="type">OAuth2Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> <span class="built_in">this</span>.remove(code);</span><br><span class="line">    <span class="keyword">if</span> (auth == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidGrantException</span>(<span class="string">&quot;Invalid authorization code: &quot;</span> + code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> auth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自动授权</p></blockquote><p>如果授权码模式不想手动点击确认授权，可以在授权服务器的 client 配置处将自动授权 AutoApprove 设置为 true</p><blockquote><p>校验 Token</p></blockquote><p>如果的是 JWT，除了使用相关 API 验证之外，还可以通过网站<code>jwt.io</code>来校验观察，方便开发使用</p><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/012.png"></p><blockquote><p>刷新 Token</p></blockquote><p><img src="/%E5%9F%BA%E4%BA%8EOauth2%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E6%8E%88%E6%9D%83-%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B/013.png"></p><blockquote><p>state参数</p></blockquote><p>对于客户端应用而言，一接收到 code 就会将其用于申请 Token，但有没有想过这个 code 并不是授权服务器回调回来的，而是别有用心的人恶意转改的呢？为了解决这种情况，就可以在请求授权服务器时带上一个<strong>state</strong>标记（可以是任意值）来解决。授权服务器接收到该参数后会连同 code 一并返回，客户端只需要判断一下回调的 state 是否与当初设置的一直即可</p><h2 id="简单了解Spring-Security-OAuth2"><a href="#简单了解Spring-Security-OAuth2" class="headerlink" title="简单了解Spring Security OAuth2"></a>简单了解Spring Security OAuth2</h2><h3 id="关于自动配置"><a href="#关于自动配置" class="headerlink" title="关于自动配置"></a>关于自动配置</h3><p>1）从案例中引出如下问题</p><ol><li>Spring Security OAuth2无疑是基于SpringSecurity的，那么它们是如何建立关系的</li><li>如何维护 Token：TokenStore 和 TokenConverter</li><li>如何维护客户端注册信息：ClientDetailsService</li><li>如何处理 Oauth2 端点请求</li></ol><p>2）带着以上的疑问进入spring-security-oauth2-autoconfigure 包的自动配置类 OAuth2AutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Import(&#123; OAuth2AuthorizationServerConfiguration.class,</span></span><br><span class="line"><span class="meta">OAuth2MethodSecurityConfiguration.class, OAuth2ResourceServerConfiguration.class,</span></span><br><span class="line"><span class="meta">OAuth2RestOperationsConfiguration.class &#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(WebMvcAutoConfiguration.class)</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AutoConfiguration</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OAuth2AuthorizationServerConfiguration：授权服务器</p><p>OAuth2ResourceServerConfiguration：资源服务器</p><p>OAuth2MethodSecurityConfiguration：对授保护方法增强处理，如 Oauth2 表达式处理</p><p>OAuth2RestOperationsConfiguration：根据配置文件进行 Client 相关的条件配置</p><p>3）授权服务器自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 当使用@EnableAuthorizationServer时启动自动配置</span></span><br><span class="line"><span class="comment">// EnableAuthorizationServer注解触发以下两个配置</span></span><br><span class="line"><span class="comment">// AuthorizationServerEndpointsConfiguration.class // Oauth2端点配置</span></span><br><span class="line"><span class="comment">// AuthorizationServerSecurityConfiguration.class // SpringSecurity配置</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(EnableAuthorizationServer.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(AuthorizationServerConfigurer.class)</span> <span class="comment">// 必须没有自定义配置</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(AuthorizationServerEndpointsConfiguration.class)</span> <span class="comment">// 上下文存在该bean实例</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AuthorizationServerProperties.class)</span> <span class="comment">// 应用授权服务器配置参数</span></span><br><span class="line"><span class="meta">@Import(AuthorizationServerTokenServicesConfiguration.class)</span> <span class="comment">// 根据配置文件token参数条件进行条件配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AuthorizationServerConfiguration</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 客户注册信息，生成逻辑参考BaseClientDetailsConfiguration</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BaseClientDetails details;</span><br><span class="line">  <span class="comment">// SpringSecurity的认证管理器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"><span class="comment">// token操作类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TokenStore tokenStore;</span><br><span class="line"><span class="comment">// token维护类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AccessTokenConverter tokenConverter;</span><br><span class="line"><span class="comment">// 授权服务器配置参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AuthorizationServerProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动注入参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OAuth2AuthorizationServerConfiguration</span><span class="params">(BaseClientDetails details,</span></span><br><span class="line"><span class="params">AuthenticationConfiguration authenticationConfiguration,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;TokenStore&gt; tokenStore,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;AccessTokenConverter&gt; tokenConverter,</span></span><br><span class="line"><span class="params">AuthorizationServerProperties properties)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端注册信息配置</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">ClientDetailsServiceBuilder&lt;InMemoryClientDetailsServiceBuilder&gt;</span><br><span class="line">            .<span class="type">ClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> clients</span><br><span class="line">            <span class="comment">// 基于内存生产客户端注册信息</span></span><br><span class="line">            <span class="comment">// 参考BaseClientDetailsConfiguration</span></span><br><span class="line">.inMemory()</span><br><span class="line">            .withClient(<span class="built_in">this</span>.details.getClientId()); <span class="comment">// uuid</span></span><br><span class="line">builder.secret(<span class="built_in">this</span>.details.getClientSecret()) <span class="comment">// uuid</span></span><br><span class="line">.resourceIds(<span class="built_in">this</span>.details.getResourceIds().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">.authorizedGrantTypes(</span><br><span class="line"><span class="built_in">this</span>.details.getAuthorizedGrantTypes().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">.authorities(</span><br><span class="line">AuthorityUtils.authorityListToSet(<span class="built_in">this</span>.details.getAuthorities())</span><br><span class="line">.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">.scopes(<span class="built_in">this</span>.details.getScope().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.details.getAutoApproveScopes() != <span class="literal">null</span>) &#123;</span><br><span class="line">builder.autoApprove(</span><br><span class="line"><span class="built_in">this</span>.details.getAutoApproveScopes().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.details.getAccessTokenValiditySeconds() != <span class="literal">null</span>) &#123;</span><br><span class="line">builder.accessTokenValiditySeconds(</span><br><span class="line"><span class="built_in">this</span>.details.getAccessTokenValiditySeconds());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.details.getRefreshTokenValiditySeconds() != <span class="literal">null</span>) &#123;</span><br><span class="line">builder.refreshTokenValiditySeconds(</span><br><span class="line"><span class="built_in">this</span>.details.getRefreshTokenValiditySeconds());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.details.getRegisteredRedirectUri() != <span class="literal">null</span>) &#123;</span><br><span class="line">builder.redirectUris(</span><br><span class="line"><span class="built_in">this</span>.details.getRegisteredRedirectUri().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置端点</span></span><br><span class="line">    <span class="comment">// 参考自动配置类AuthorizationServerEndpointsConfiguration</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// tokenStore使用的内存生产，以下两个都是null</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.tokenConverter != <span class="literal">null</span>) &#123;</span><br><span class="line">endpoints.accessTokenConverter(<span class="built_in">this</span>.tokenConverter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.tokenStore != <span class="literal">null</span>) &#123; </span><br><span class="line">endpoints.tokenStore(<span class="built_in">this</span>.tokenStore);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这里可以清楚看到当授权服务器支持密码授权模式就会需要用到AuthenticationManager</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.details.getAuthorizedGrantTypes().contains(<span class="string">&quot;password&quot;</span>)) &#123;</span><br><span class="line">endpoints.authenticationManager(<span class="built_in">this</span>.authenticationManager);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端注册信息配置（绑定到授权服务器）</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取SpringSecurity中的密码编码器</span></span><br><span class="line">security.passwordEncoder(NoOpPasswordEncoder.getInstance());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 参考AuthorizationServerSecurityConfigurer</span></span><br><span class="line">  <span class="comment">// 如果上面端点配置和配置文件中没有配置则为空，但默认该端点拦截级别为&quot;denyAll()&quot;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.properties.getCheckTokenAccess() != <span class="literal">null</span>) &#123;</span><br><span class="line">security.checkTokenAccess(<span class="built_in">this</span>.properties.getCheckTokenAccess());</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 如果上面端点配置和配置文件中没有配置则为空，但默认该端点拦截级别为&quot;denyAll()&quot;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.properties.getTokenKeyAccess() != <span class="literal">null</span>) &#123;</span><br><span class="line">security.tokenKeyAccess(<span class="built_in">this</span>.properties.getTokenKeyAccess());</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 如果上面端点配置和配置文件中没有配置则为空</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.properties.getRealm() != <span class="literal">null</span>) &#123;</span><br><span class="line">security.realm(<span class="built_in">this</span>.properties.getRealm());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以INFO日志打印自动生产的客户端注册信息</span></span><br><span class="line">    <span class="comment">// 例子如下：</span></span><br><span class="line">    <span class="comment">// security.oauth2.client.client-id = 2f943783-66eb-4f27-b8ad-5b19c422891f</span></span><br><span class="line"><span class="comment">// security.oauth2.client.client-secret = 20d598a7-397c-475a-9991-ea9e57e5187c</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClientDetailsLogger</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OAuth2ClientProperties credentials;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">ClientDetailsLogger</span><span class="params">(OAuth2ClientProperties credentials)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.credentials = credentials;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="string">&quot;security.oauth2.client&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">defaultSecret</span> <span class="operator">=</span> <span class="built_in">this</span>.credentials.isDefaultSecret();</span><br><span class="line">logger.info(String.format(</span><br><span class="line"><span class="string">&quot;Initialized OAuth2 Client%n%n%s.client-id = %s%n&quot;</span></span><br><span class="line">+ <span class="string">&quot;%s.client-secret = %s%n%n&quot;</span>,</span><br><span class="line">prefix, <span class="built_in">this</span>.credentials.getClientId(), prefix,</span><br><span class="line">defaultSecret ? <span class="built_in">this</span>.credentials.getClientSecret() : <span class="string">&quot;****&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动生产的客户端注册信息</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(BaseClientDetails.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BaseClientDetailsConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OAuth2ClientProperties client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">BaseClientDetailsConfiguration</span><span class="params">(OAuth2ClientProperties client)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.client = client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;security.oauth2.client&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseClientDetails <span class="title function_">oauth2ClientDetails</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">BaseClientDetails</span> <span class="variable">details</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseClientDetails</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.client.getClientId() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// uuid</span></span><br><span class="line"><span class="built_in">this</span>.client.setClientId(UUID.randomUUID().toString());</span><br><span class="line">&#125;</span><br><span class="line">details.setClientId(<span class="built_in">this</span>.client.getClientId());</span><br><span class="line">            <span class="comment">// this.client.getClientSecret() 也是返回uuid</span></span><br><span class="line">details.setClientSecret(<span class="built_in">this</span>.client.getClientSecret());</span><br><span class="line">            <span class="comment">// 支持所有授权模式</span></span><br><span class="line">details.setAuthorizedGrantTypes(Arrays.asList(<span class="string">&quot;authorization_code&quot;</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>, <span class="string">&quot;client_credentials&quot;</span>, <span class="string">&quot;implicit&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>));</span><br><span class="line">            <span class="comment">// 默认授权为USER</span></span><br><span class="line">details.setAuthorities(</span><br><span class="line">AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;ROLE_USER&quot;</span>));</span><br><span class="line">            <span class="comment">// 回调地址</span></span><br><span class="line">details.setRegisteredRedirectUri(Collections.&lt;String&gt;emptySet());</span><br><span class="line"><span class="keyword">return</span> details;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4）oauth2端点</p><p>端点设置所在的包是 org.springframework.security.oauth2.provider.endpoint</p><p>比较重要的端点类：</p><p>@EnableAuthorizationServer &gt; AuthorizationServerEndpointsConfiguration &gt; AuthorizationEndpoint </p><p>@EnableAuthorizationServer &gt; AuthorizationServerEndpointsConfiguration &gt; TokenEndpoint</p><p>@EnableAuthorizationServer &gt; AuthorizationServerEndpointsConfiguration &gt; WhitelabelApprovalEndpoint</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《OAuth2实战》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL优化入门</title>
      <link href="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/"/>
      <url>/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>关于优化个人认为是一个比较复杂的环节，不能一概而论</p></li><li><p>数据库优化需要结合实际的使用场景，一步一个脚印地针对出现的问题来解决</p></li><li><p>优化手段有很多，如最基本的<code>SQL优化</code>、<code>表结构优化</code>、<code>数据库服务器软硬件优化</code>等等，如果站在应用层面还可以通过 <code>缓存</code> 、<code>流量削峰</code> 、 <code>请求限流</code> 、<code>资源限流</code>等方案减轻其数据库的访问压力</p></li></ul><h2 id="常用存储引擎区别"><a href="#常用存储引擎区别" class="headerlink" title="常用存储引擎区别"></a>常用存储引擎区别</h2><p><img src="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/2.png"></p><h2 id="常用数据库优化手段"><a href="#常用数据库优化手段" class="headerlink" title="常用数据库优化手段"></a>常用数据库优化手段</h2><blockquote><p>简介</p></blockquote><ul><li><p>SQL优化</p><ul><li>添加索引</li><li>进行执行计划分析优化</li><li>必要时使用存储过程</li></ul></li><li><p>加入缓存层降低数据库访问压力</p></li><li><p>表优化</p><ul><li>水平拆分</li><li>垂直（纵向）拆分</li><li>分区</li></ul></li><li><p>数据库优化</p><ul><li>水平拆分</li><li>垂直（纵向）拆分</li><li>主从复制</li><li>数据库集群</li></ul></li></ul><blockquote><p>那么什么情况下分表，什么情况下分库呢？</p></blockquote><p>个人理解一般是数据量大考虑分表，负载高就考虑分库。但能不拆就不拆，且能少拆就少拆，因为拆得越多越细会大大提高后期维护成本，所以分库分表其实是没有办法中的办法。</p><h2 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>&amp;emsp;&amp;emsp;执行计划指的是数据层对 SQL 语句的执行方案。例如在连接查询中到底是先执行左表还是先执行右表呢？这都是执行计划的一部分即<strong>执行计划 &#x3D; 执行引擎的处理方法</strong> </p><h3 id="如何看执行计划"><a href="#如何看执行计划" class="headerlink" title="如何看执行计划"></a>如何看执行计划</h3><p>使用 desc 或者 explain 关键字</p><p><img src="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/1.png"></p><p>或添加 \G 以列键值对展示方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> book \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> 行 <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">id           : <span class="number">1</span></span><br><span class="line">select_type  : SIMPLE</span><br><span class="line"><span class="keyword">table</span>        : book</span><br><span class="line">partitions   : <span class="keyword">NULL</span></span><br><span class="line">type         : index</span><br><span class="line">possible_keys: <span class="keyword">NULL</span></span><br><span class="line">key          : <span class="keyword">PRIMARY</span></span><br><span class="line">key_len      : <span class="number">4</span></span><br><span class="line"><span class="keyword">ref</span>          : <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">rows</span>         : <span class="number">251513</span></span><br><span class="line">filtered     : <span class="number">100.00</span></span><br><span class="line">Extra        : <span class="keyword">Using</span> index</span><br><span class="line"><span class="number">1</span> 行于数据集 (<span class="number">0.02</span> 秒)</span><br></pre></td></tr></table></figure><p>explain适用于以下语句：</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/explain.html">EXPLAIN</a> works with <a href="https://dev.mysql.com/doc/refman/8.0/en/select.html">SELECT</a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/delete.html">DELETE</a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/insert.html">INSERT</a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/replace.html">REPLACE</a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/update.html">UPDATE</a> statements.</li></ul><h3 id="了解执行计划"><a href="#了解执行计划" class="headerlink" title="了解执行计划"></a>了解执行计划</h3><blockquote><p>参考</p></blockquote><ul><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/optimization.html">https://dev.mysql.com/doc/refman/8.0/en/optimization.html</a></p></li><li><p><a href="https://yq.aliyun.com/articles/688754">https://yq.aliyun.com/articles/688754</a></p></li><li><p><a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></p></li></ul><blockquote><p>字段意思</p></blockquote><ul><li><p>id：查询id</p><ul><li>id相同时，由上而下执行</li><li>id不同时，大的先执行</li></ul></li><li><p>select_type：SQL 的查询类型</p></li><li><p>simple：简单查询。不包含如子查询、union等操作</p></li><li><p>primary：子查询的外层查询</p><ul><li>subquery：子查询的内层查询</li><li>union：并集查询</li></ul></li><li><p>derived：子查询中的衍生查询（表示使用了临时表）。例如使用了 in 或 union&#x2F;union all</p></li><li><p>partitions：所匹配到的分区，如果为null表示当前查询为非分区查询</p></li><li><p>table：表名</p></li><li><p>type：常见<strong>索引操作</strong>类型</p><ul><li>system：系统表主查询</li><li>const：使用了 unique 或 primary key 作为查询条件，且只返回了一个结果</li><li>eq_ref：查询的内容是唯一的</li><li><strong>ref：</strong>通过索引查询后没有进行额外的筛选操作</li><li><strong>range：</strong>进行了区间查找</li><li>index：扫描了所有索引</li><li>all：进行了全表扫描</li><li>效率：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all。一般优化到 ref、range 就不错了</li></ul></li><li><p>possible_keys：当前查询中可能使用到的索引（预测值，不准确）</p></li><li><p>key：实际使用的索引</p></li><li><p>key_len：索引长度</p><ul><li>可用该值来判断组合索引是否全用上</li><li>计算方式：<ul><li>在 MySQL 中，5.X 开始 varchar 中的值表示字符而不是字节</li><li>例如假设一张 utf8 （一个字符3个字节）的表中 msg char（20）是索引，那么 key_len 就为 3x20&#x3D;60，又因为 msg 可以为 null（规定用1个字节表示），所以从长度为 60+1&#x3D;61</li></ul></li></ul></li><li><p>rows：查询所扫描的记录数。该值越少越好</p></li><li><p>filtered：在 rows 中被过略掉的数据的百分比值。该值越大越好</p></li><li><p>extra：查询的额外信息</p><ul><li>use index：进行了覆盖索引查询。没有进行回表操作，性能最好</li><li>use index condition：存储引擎对查询的数据进行了优化（索引条件下推，即在存储引擎中筛选了部分数据，通常发生在联合索索引字段上）</li><li>using where：条件查询。如果此时使用了索引，表示存在回表操作</li><li>using temporary：使用了临时表<ul><li>通常是因为使用了索引作为条件进行查询，但没有使用相同索引条件作为分组查询条件所导致的</li><li>以下常见操作默认会使用临时表<ul><li>group by（如果与 order by 一起使用，则尽量保证用相同的列作为条件）</li><li>distinct</li><li>union</li></ul></li></ul></li><li>using join buffer：引擎使用了连接缓存</li><li>using filesort：进行了文件排序（额外排序）<ul><li>通常伴随 order by 出现。原因是使用了索引进行条件查询，但没有使用相同索引条件作为排序条件所导致的</li><li>还有一种特殊情况就是跨列使用组合索引导致的。譬如 where a1.. and a2 order by a4 操作，其中组合索引 （a1,a2,a3,ab），而在这次查询中因为 a2 到 a4 跨了列而导致 a4 失效，但 a4 又了作为了排序条件，所以 a4 相当于不属于当前使用到的组合索引，因为就需要额外的 using filesort 操作（因为索引本身有序，但搜索引擎觉得 a4 是无序的）</li></ul></li></ul></li><li><p>ref：当前表所参照的字段。例如在关联查询中该值为 null，则可能没有使用到索引</p><ul><li>const：表示索引（key）依赖的是一个常量</li><li>fucn：表索引（key）依赖的是一个函数返回的值</li></ul></li></ul><h2 id="水平拆分和垂直拆分"><a href="#水平拆分和垂直拆分" class="headerlink" title="水平拆分和垂直拆分"></a>水平拆分和垂直拆分</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/7.png"></p><p>出了以上之外，有些数据库还支持表分区的，譬如MySQL。即通过物理拆分将数据存储到不同的物理分区，并利用分区查找提高其检索效率。</p><h3 id="例子-表的水平拆分"><a href="#例子-表的水平拆分" class="headerlink" title="例子 - 表的水平拆分"></a>例子 - 表的水平拆分</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">u_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">u_name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> charset <span class="operator">=</span> utf8 ; </span><br><span class="line"><span class="comment">-- 插入用户数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(u_name) <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>),(<span class="string">&#x27;李四&#x27;</span>),(<span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户订单表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> uorder(</span><br><span class="line">o_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">u_id <span class="type">int</span>,</span><br><span class="line">o_desc <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> charset <span class="operator">=</span> utf8 ; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 批量插入模拟用订单数据</span></span><br><span class="line"><span class="comment">-- userid 用户id</span></span><br><span class="line"><span class="comment">-- produce 订单产品</span></span><br><span class="line"><span class="comment">-- num 插入数量</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_insert_data(<span class="keyword">IN</span> userid <span class="type">INT</span>,<span class="keyword">IN</span> produce <span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="keyword">IN</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> temp <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> temp <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">REPEAT</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> uorder(u_id, o_desc) <span class="keyword">values</span>(userid, CONCAT(produce,temp));</span><br><span class="line"><span class="keyword">SET</span> temp <span class="operator">=</span> temp <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">UNTIL temp<span class="operator">&gt;</span>num <span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入订单数据</span></span><br><span class="line"><span class="keyword">call</span> pro_insert_data(<span class="number">1</span>, <span class="string">&#x27;manhua&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">call</span> pro_insert_data(<span class="number">2</span>, <span class="string">&#x27;wanju&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">call</span> pro_insert_data(<span class="number">3</span>, <span class="string">&#x27;fushi&#x27;</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h4 id="拆分工作"><a href="#拆分工作" class="headerlink" title="拆分工作"></a>拆分工作</h4><p>1）现在打算对 uorder 进行拆分</p><ul><li>因为这张表的关联字段是 u_id，所以需要使用 u_id 作为分拆策略字段</li><li>因为 uorder 表中共有80条记录，所以现在打算将 uorder 拆分成 2 个，即 uorder0、uorder1，其中每张表各存 40 条记录</li><li>分区定位策略为 <strong>hash（u_id）%2</strong> 或 <strong>hash（u_id）&amp;2-1</strong></li></ul><p>2）按照策略将数据转移（可使用程序操作）到分拆表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 拆分0表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> uorder0(</span><br><span class="line">o_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">u_id <span class="type">int</span>,</span><br><span class="line">o_desc <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> charset <span class="operator">=</span> utf8 ; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 拆分1表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> uorder1(</span><br><span class="line">o_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">u_id <span class="type">int</span>,</span><br><span class="line">o_desc <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> charset <span class="operator">=</span> utf8 ; </span><br></pre></td></tr></table></figure><h4 id="使用程序测试查询"><a href="#使用程序测试查询" class="headerlink" title="使用程序测试查询"></a>使用程序测试查询</h4><p>实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;uorder0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order0</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer oId;</span><br><span class="line">    <span class="meta">@Column(name=&quot;u_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="meta">@Column(name=&quot;o_desc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String oDesc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;uorder1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order1</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer oId;</span><br><span class="line">    <span class="meta">@Column(name=&quot;u_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="meta">@Column(name=&quot;o_desc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String oDesc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository0</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Order0, Integer&gt; &#123;</span><br><span class="line">    List&lt;Order0&gt; <span class="title function_">findByUId</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository1</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Order1, Integer&gt; &#123;</span><br><span class="line">    List&lt;Order1&gt; <span class="title function_">findByUId</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository0 repository0;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository1 repository1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order0&gt; <span class="title function_">findByUId0</span><span class="params">(<span class="type">int</span> userId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository0.findByUId(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order1&gt; <span class="title function_">findByUId1</span><span class="params">(<span class="type">int</span> userId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository1.findByUId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbtestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟查找出user的id</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">      <span class="comment">// 进行取模策略计算</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">userIdMod</span> <span class="operator">=</span> userId.hashCode() % <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (userIdMod == <span class="number">0</span>) &#123;</span><br><span class="line">            service.findByUId0(userId).forEach( item -&gt; System.out.println(item));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userIdMod == <span class="number">1</span>) &#123;</span><br><span class="line">            service.findByUId1(userId).forEach( item -&gt; System.out.println(item));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;处理失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Order0(oId=<span class="number">1</span>, uId=<span class="number">2</span>, oDesc=wanju1)</span><br><span class="line">Order0(oId=<span class="number">2</span>, uId=<span class="number">2</span>, oDesc=wanju2)</span><br><span class="line">Order0(oId=<span class="number">3</span>, uId=<span class="number">2</span>, oDesc=wanju3)</span><br><span class="line">Order0(oId=<span class="number">4</span>, uId=<span class="number">2</span>, oDesc=wanju4)</span><br><span class="line">Order0(oId=<span class="number">5</span>, uId=<span class="number">2</span>, oDesc=wanju5)</span><br><span class="line">Order0(oId=<span class="number">6</span>, uId=<span class="number">2</span>, oDesc=wanju6)</span><br><span class="line">Order0(oId=<span class="number">7</span>, uId=<span class="number">2</span>, oDesc=wanju7)</span><br><span class="line">Order0(oId=<span class="number">8</span>, uId=<span class="number">2</span>, oDesc=wanju8)</span><br><span class="line">Order0(oId=<span class="number">9</span>, uId=<span class="number">2</span>, oDesc=wanju9)</span><br><span class="line">Order0(oId=<span class="number">10</span>, uId=<span class="number">2</span>, oDesc=wanju10)</span><br><span class="line">Order0(oId=<span class="number">11</span>, uId=<span class="number">2</span>, oDesc=wanju11)</span><br><span class="line">Order0(oId=<span class="number">12</span>, uId=<span class="number">2</span>, oDesc=wanju12)</span><br><span class="line">Order0(oId=<span class="number">13</span>, uId=<span class="number">2</span>, oDesc=wanju13)</span><br><span class="line">Order0(oId=<span class="number">14</span>, uId=<span class="number">2</span>, oDesc=wanju14)</span><br><span class="line">Order0(oId=<span class="number">15</span>, uId=<span class="number">2</span>, oDesc=wanju15)</span><br><span class="line">Order0(oId=<span class="number">16</span>, uId=<span class="number">2</span>, oDesc=wanju16)</span><br><span class="line">Order0(oId=<span class="number">17</span>, uId=<span class="number">2</span>, oDesc=wanju17)</span><br><span class="line">Order0(oId=<span class="number">18</span>, uId=<span class="number">2</span>, oDesc=wanju18)</span><br><span class="line">Order0(oId=<span class="number">19</span>, uId=<span class="number">2</span>, oDesc=wanju19)</span><br><span class="line">Order0(oId=<span class="number">20</span>, uId=<span class="number">2</span>, oDesc=wanju20)</span><br><span class="line">Order0(oId=<span class="number">21</span>, uId=<span class="number">2</span>, oDesc=wanju21)</span><br><span class="line">Order0(oId=<span class="number">22</span>, uId=<span class="number">2</span>, oDesc=wanju22)</span><br><span class="line">Order0(oId=<span class="number">23</span>, uId=<span class="number">2</span>, oDesc=wanju23)</span><br><span class="line">Order0(oId=<span class="number">24</span>, uId=<span class="number">2</span>, oDesc=wanju24)</span><br><span class="line">Order0(oId=<span class="number">25</span>, uId=<span class="number">2</span>, oDesc=wanju25)</span><br><span class="line">Order0(oId=<span class="number">26</span>, uId=<span class="number">2</span>, oDesc=wanju26)</span><br><span class="line">Order0(oId=<span class="number">27</span>, uId=<span class="number">2</span>, oDesc=wanju27)</span><br><span class="line">Order0(oId=<span class="number">28</span>, uId=<span class="number">2</span>, oDesc=wanju28)</span><br><span class="line">Order0(oId=<span class="number">29</span>, uId=<span class="number">2</span>, oDesc=wanju29)</span><br><span class="line">Order0(oId=<span class="number">30</span>, uId=<span class="number">2</span>, oDesc=wanju30)</span><br></pre></td></tr></table></figure><h3 id="例子-表分区"><a href="#例子-表分区" class="headerlink" title="例子 - 表分区"></a>例子 - 表分区</h3><h4 id="range分区（常用）"><a href="#range分区（常用）" class="headerlink" title="range分区（常用）"></a>range分区（常用）</h4><p>定义分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    p_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    p_name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">store_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">by</span> <span class="keyword">RANGE</span> (store_id) (</span><br><span class="line"><span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> less than (<span class="number">1000</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> less than (<span class="number">5000</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> less than (<span class="number">10000</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> less than MAXVALUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">5555</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">9999</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">4</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">11111</span>);</span><br></pre></td></tr></table></figure><p>查看分区信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PARTITION_NAME,TABLE_ROWS <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;person&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p01</span><br><span class="line">p10</span><br><span class="line">p22</span><br><span class="line">p31</span><br></pre></td></tr></table></figure><p>增加分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> (<span class="keyword">PARTITION</span> p5 <span class="keyword">VALUES</span> LESS THAN (<span class="number">20000</span>)) ;</span><br></pre></td></tr></table></figure><p>删除分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> <span class="keyword">PARTITION</span> p5 ;</span><br></pre></td></tr></table></figure><p>查看详细情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;person&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="list分区"><a href="#list分区" class="headerlink" title="list分区"></a>list分区</h4><p>定义分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    p_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    p_name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">store_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">by</span> list (store_id) (</span><br><span class="line"><span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">4</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>查看数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PARTITION_NAME,TABLE_ROWS <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;person&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p02</span><br><span class="line">p12</span><br></pre></td></tr></table></figure><h4 id="hash分区"><a href="#hash分区" class="headerlink" title="hash分区"></a>hash分区</h4><p>定义分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    p_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    p_name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">store_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">by</span> HASH (store_id)</span><br><span class="line">PARTITIONS <span class="number">4</span> ;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">4</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>查看数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PARTITION_NAME,TABLE_ROWS <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;person&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p01</span><br><span class="line">p11</span><br><span class="line">p21</span><br><span class="line">p31</span><br></pre></td></tr></table></figure><h4 id="ksy分区"><a href="#ksy分区" class="headerlink" title="ksy分区"></a>ksy分区</h4><p>定义分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    p_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    p_name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">store_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">by</span> LINEAR KEY (store_id)</span><br><span class="line">PARTITIONS <span class="number">2</span> ; </span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">3</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(p_id, p_name, store_id) <span class="keyword">values</span>(<span class="number">4</span>, <span class="string">&#x27;test&#x27;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>查看数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PARTITION_NAME,TABLE_ROWS <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;person&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p02</span><br><span class="line">p12</span><br></pre></td></tr></table></figure><h2 id="MySQL复制"><a href="#MySQL复制" class="headerlink" title="MySQL复制"></a>MySQL复制</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><ul><li><p>将一个数据库（主库）上的数据冗余到到另一个数据库（从库）中</p></li><li><p>默认情况下复制操作是异步进行的</p></li><li><p>可根据配置实现有选择性地复制具体的库或表</p></li></ul><p><img src="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/6.png"></p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>以一主一从为例</p><p><img src="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/3.png"></p><ol><li>首先从库会创建一条<strong>IO线程</strong>去读取主库的 binlog</li><li>主库在发现从库连接后，会创建一条<strong>复制处理线程</strong>来处理从库的复制请求<ul><li>首先会向本地 binlog 提交从库的信息</li><li>告知从库已经准备好复制工作</li></ul></li><li>从库读取 binlog 并将内容写入中继日志中（复制延迟主要在这里）</li><li>从库启动<strong>SQL线程</strong>将中继日志的内容入读库中</li></ol><h3 id="主从复制配置"><a href="#主从复制配置" class="headerlink" title="主从复制配置"></a>主从复制配置</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>在主库中开启 binlog</li><li>在主库中创建一个专门用来做复制的用户账号</li><li>设置从库的唯一id（server_id）</li><li>在 slave 中远程备份 master</li><li>在 slave 中恢复 master 备份的数据</li><li>使用<code>show master status</code>查看主库状态</li><li>在 slave 中执行 <code>change master to</code> 命令指向主库</li></ol><h4 id="配置案例"><a href="#配置案例" class="headerlink" title="配置案例"></a>配置案例</h4><p>为了方便，当前例子会在 Docker 容器中进行，使用的是 mysql5.7 镜像</p><p>1）启动 MySQL 容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主库</span></span><br><span class="line">docker run --name mysql57-master --expose 3306 -p 3307:3306 --privileged=<span class="literal">true</span> -v /Users/tandi/DockerMount/mysql57-master/my.cnf:/etc/mysql/my.cnf -v /Users/tandi/DockerMount/mysql57-master/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d 98455b9624a9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从库</span></span><br><span class="line">docker run --name mysql57-slave --expose 3306 -p 3308:3306 --privileged=<span class="literal">true</span> -v /Users/tandi/DockerMount/mysql57-slave/my.cnf:/etc/mysql/my.cnf -v /Users/tandi/DockerMount/mysql57-slave/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d 98455b9624a9</span><br></pre></td></tr></table></figure><p><img src="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/4.png"></p><p><img src="/%E5%85%B3%E4%BA%8EMySQL%E4%BC%98%E5%8C%96/5.png"></p><p>2）开启 master 的二进制日志记录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">log-bin</span> = <span class="string">mysql-bin-log</span></span><br></pre></td></tr></table></figure><p>3）在 master 库中创建复制用户</p><p>进入容器：docker exec -it mysql57-master &#x2F;bin&#x2F;bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave on *.* to <span class="string">&#x27;binlog_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>4）在master创建测试用数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database masterdb;</span><br><span class="line">use masterdb;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(pid <span class="type">int</span>, pname <span class="type">varchar</span>(<span class="number">10</span>)) <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(pid,pname) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure><p>5）设置 slave 的 server_id</p><p>不能与主库相同</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="string">2</span></span><br><span class="line"><span class="attr">log-bin</span> = <span class="string">mysql-bin-log</span></span><br></pre></td></tr></table></figure><p>6）在slave中远程备份master并恢复到本地</p><p>查看 master 容器ip：docker inspect mysql57-master | grep IPAddress</p><p>进入 salve 容器：docker exec -it mysql57-slave &#x2F;bin&#x2F;bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份master的数据到本地</span></span><br><span class="line">mysqldump -h 172.17.0.2 -u root -p123456 --default-character-set=utf8 masterdb &gt; dump.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建对应的数据库schema</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line">mysql&gt; create database masterdb;</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据备份文件将数据还原到数据库（从）</span></span><br><span class="line">mysql -u root -p123456 masterdb &lt; dump.sql</span><br></pre></td></tr></table></figure><p>7）查看master的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File                 | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+----------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin-log.000003 | 2664     |              |                  |                   |</span><br><span class="line">+----------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure><p>8）配置slave</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置从属关系</span></span><br><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;172.17.0.2&#x27;</span>, master_user=<span class="string">&#x27;binlog_user&#x27;</span>, master_password=<span class="string">&#x27;123456&#x27;</span>, master_log_file=<span class="string">&#x27;mysql-bin-log.000003&#x27;</span>, master_log_pos=2664;</span><br><span class="line"><span class="comment"># 意思是复制mysql-bin-log.000003，从2664开始复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动从属关系</span></span><br><span class="line">mysql&gt; start slave;</span><br></pre></td></tr></table></figure><p>9）查看slave的状态看是否配置成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br><span class="line">*************************** 1. 行 ***************************</span><br><span class="line">Slave_IO_State               : Waiting for master to send event</span><br><span class="line">Master_Host                  : 172.17.0.2 </span><br><span class="line">Master_User                  : binlog_user</span><br><span class="line">Master_Port                  : 3306</span><br><span class="line">Connect_Retry                : 60</span><br><span class="line">Master_Log_File              : mysql-bin-log.000003</span><br><span class="line">Read_Master_Log_Pos          : 1881</span><br><span class="line">Relay_Log_File               : 5742231876e9-relay-bin.000002</span><br><span class="line">Relay_Log_Pos                : 606</span><br><span class="line">Relay_Master_Log_File        : mysql-bin-log.000003</span><br><span class="line">Slave_IO_Running             : Yes</span><br><span class="line">Slave_SQL_Running            : Yes</span><br></pre></td></tr></table></figure><h4 id="测试主从复制"><a href="#测试主从复制" class="headerlink" title="测试主从复制"></a>测试主从复制</h4><p>1）在 master 中创建一个数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use masterdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> person(pid, pname) <span class="keyword">values</span>(<span class="number">100</span>, <span class="string">&#x27;测试用户&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2）到 slave 中查看是否有复制到数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use masterdb;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> person <span class="keyword">where</span> pid <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------------+</span></span><br><span class="line"><span class="operator">|</span> pid  <span class="operator">|</span> pname        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span>  <span class="operator">|</span> 测试用户 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------------+</span></span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>应该先备份 master 数据，如果不进行备份就只能同步到在<code>start slave</code>开始的数据，而不能同步到之前的操作</li><li>从节点在恢复 master 数据之前，应该使用相同的 schema 来创建库和表结构，否则可能会导致同步失败</li><li>同步失败解决参考：<a href="https://blog.csdn.net/xiaoxinla/article/details/7679578">https://blog.csdn.net/xiaoxinla/article/details/7679578</a></li></ul><h3 id="使用MyCat实现读写分离"><a href="#使用MyCat实现读写分离" class="headerlink" title="使用MyCat实现读写分离"></a>使用MyCat实现读写分离</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>通过 MyCat 来代理 master 和 slave 两个数据节点。这对于程序而言是无感知的，程序只需要正常执行 sql 操作即可，因为数据库中间件可以屏蔽数据库层的复杂性。</p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><p>官网：<a href="http://www.mycat.io/">http://www.mycat.io/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.mycat.io/1.6.7.1/Mycat-server-1.6.7.1-release-20190213150257-mac.tar.gz</span><br><span class="line">tar -zxvf Mycat-server-1.6.7.1-release-20190213150257-mac.tar.gz</span><br></pre></td></tr></table></figure><h4 id="模拟环境说明"><a href="#模拟环境说明" class="headerlink" title="模拟环境说明"></a>模拟环境说明</h4><table><thead><tr><th>服务器</th><th>本地机器 ip:port</th><th>docker ip:port</th></tr></thead><tbody><tr><td>mysql-master</td><td>127.0.0.1:3307</td><td>172.17.0.2:3306</td></tr><tr><td>mysql-slave</td><td>127.0.0.1:3308</td><td>172.17.0.3:3306</td></tr><tr><td>mycat</td><td>127.0.0.1:8066</td><td></td></tr></tbody></table><h4 id="配置MyCat的读写分离策略"><a href="#配置MyCat的读写分离策略" class="headerlink" title="配置MyCat的读写分离策略"></a>配置MyCat的读写分离策略</h4><p>server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:server <span class="keyword">SYSTEM</span> <span class="string">&quot;server.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mycat配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nonePasswordLogin&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useHandshakeV10&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useGlobleTableCheck&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;subqueryRelationshipCheck&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorBufferPoolType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;handleDistributedTransactions&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useOffHeapForMerge&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryPageSize&quot;</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spillsFileBufferSize&quot;</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useStreamOutput&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;systemReserveMemorySize&quot;</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strictTxIsolation&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mycat端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serverPort&quot;</span>&gt;</span>8066<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mycat用户配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;mroot&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>mycat_masterdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;muser&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>mycat_masterdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>schema.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mycat schemas --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;mycat_masterdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mycat datanodes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;masterdb&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据库节点配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">balance:</span></span><br><span class="line"><span class="comment">0：不用读写分离</span></span><br><span class="line"><span class="comment">1：读操作发送到当前writeHost下的readHost和备用writHost</span></span><br><span class="line"><span class="comment">2：writeHost和readHost共同分摊读操作</span></span><br><span class="line"><span class="comment">3：所有读操作都发送给writeHost下的readHost，比较合适与一主多从</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;3&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;2&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 心跳测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>show slave status<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 写库（master） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;mysql57-master&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 读库（slave） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;mysql57-slave&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动MyCat"><a href="#启动MyCat" class="headerlink" title="启动MyCat"></a>启动MyCat</h4><blockquote><p>.&#x2F;bin&#x2F;mycat stop 停止</p><p>.&#x2F;bin&#x2F;mycat restart 重启</p><p>.&#x2F;bin&#x2F;mycat console 打印日志</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mycat start</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><p><strong>JpaTrasactionConfig</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &quot;com.td.dbtest.jpa&quot;, enableDefaultTransactions = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaTransactionConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jpa默认的事务管理对读操作添加了readOnly=true事务</span></span><br><span class="line"><span class="comment">     * 而MyCat只要是处于事务的sql都会走write库，所以需要修改参数 enableDefaultTransactions = false</span></span><br><span class="line"><span class="comment">     * 除此之外，还可以在sql前添加 /*balance*\/ 来解决</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.NOT_SUPPORTED)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        repository.save(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:8066/mycat_masterdb?useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">mroot</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbtestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findTest</span><span class="params">()</span> &#123;</span><br><span class="line">        service.findAll().forEach( item -&gt; System.out.println(item) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setPId(<span class="number">10001</span>);</span><br><span class="line">        person.setPName(<span class="string">&quot;batman&quot;</span>);</span><br><span class="line">        service.save(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li>默认情况下 MySQL 的最大 max_connections 为 100，所以可以在配置文件中添加 max_connections&#x3D;600 来提高其并发连接数</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL日志</title>
      <link href="/mysql%E6%97%A5%E5%BF%97/"/>
      <url>/mysql%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年07月1日15:05:58 — 修改对InnoDB日志的理解</li><li>2020年4月27日10:51:17 — 日志输出定向到 table 相关内容</li></ul><h2 id="MySQL中的日志"><a href="#MySQL中的日志" class="headerlink" title="MySQL中的日志"></a>MySQL中的日志</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><img src="/mysql%E6%97%A5%E5%BF%97/006.png"></p><h3 id="二进制-归档-日志"><a href="#二进制-归档-日志" class="headerlink" title="二进制(归档)日志"></a>二进制(归档)日志</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>记录修改数据的操作</p><h4 id="查看是否开启"><a href="#查看是否开启" class="headerlink" title="查看是否开启"></a>查看是否开启</h4><p>二进制日志默认是关闭的，需要手动开启</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 是否开启</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 输出二进制日志文件的名字</span></span><br><span class="line"><span class="keyword">show</span> <span class="type">binary</span> logs;</span><br></pre></td></tr></table></figure><p><img src="/mysql%E6%97%A5%E5%BF%97/1.png"></p><h4 id="开启日志"><a href="#开启日志" class="headerlink" title="开启日志"></a>开启日志</h4><p>官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html">https://dev.mysql.com/doc/refman/8.0/en/replication-options-binary-log.html</a> </p><p>1）在 mysql 的 ini 文件中添加或修改配置（Mysql 5.7）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">log-bin</span> = <span class="string">mysql-bin-log</span></span><br></pre></td></tr></table></figure><p>2）重启 mysql 服务</p><p><img src="/mysql%E6%97%A5%E5%BF%97/2.png"></p><p><img src="/mysql%E6%97%A5%E5%BF%97/3.png"></p><p>3）然后可以看到在目录中会多了日志文件</p><p><img src="/mysql%E6%97%A5%E5%BF%97/4.png"></p><p>其中 000001 这个后缀会随着 mysql 的重启而递增。</p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>在此之前我在数据库中做了如下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test;</span><br><span class="line">Query OK, 1 rows affected (0.01 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Query OK, 0 rows affected (0.01 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table book(id int primary key auto_increment, bname varchar(30) not null);</span><br><span class="line">Query OK, 0 rows affected (0.04 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into book(bname) values(&#x27;book1&#x27;),(&#x27;book2&#x27;);</span><br><span class="line">Query OK, 2 rows affected (0.01 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from book;</span><br><span class="line">Query OK, 2 rows affected (0.02 秒)</span><br></pre></td></tr></table></figure><p>进入 docker 容器使用 mysql 提供的 mysqlbinlog 来读取二进制日志中的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名称 bin/sh</span><br></pre></td></tr></table></figure><p>读取二进制文件内容</p><blockquote><p>其中 &#x2F;var&#x2F;lib&#x2F;mysql 是mysql的挂载点</p><p>非 docker 容器 mysql 省略该步骤，直接在命令行中使用 mysqlbinlog 即可</p></blockquote><p><img src="/mysql%E6%97%A5%E5%BF%97/5.png"></p><p>二进制内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/*!50530</span> <span class="string">SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;</span></span><br><span class="line"><span class="attr">/*!50003</span> <span class="string">SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;</span></span><br><span class="line"><span class="attr">DELIMITER</span> <span class="string">/*!*/;</span></span><br><span class="line"><span class="comment"># at 4</span></span><br><span class="line"><span class="comment">#190627 13:27:37 server id 1  end_log_pos 123 CRC32 0x369d3ff8 Start: binlog v 4, server v 5.7.25-log created 190627 13:27:37</span></span><br><span class="line"><span class="comment"># Warning: this binlog is either in use or was not closed properly.</span></span><br><span class="line"><span class="attr">BINLOG</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="attr">ScQUXQ8BAAAAdwAAAHsAAAABAAQANS43LjI1LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="attr">AAAAAAAAAAAAAAAAAAAAAAAAEzgNAAgAEgAEBAQEEgAAXwAEGggAAAAICAgCAAAACgoKKioAEjQA</span></span><br><span class="line"><span class="attr">Afg/nTY</span>=<span class="string"></span></span><br><span class="line"><span class="attr">&#x27;/*!*/;</span></span><br><span class="line"><span class="comment"># at 123</span></span><br><span class="line"><span class="comment">#190627 13:27:37 server id 1  end_log_pos 154 CRC32 0x02688b4d Previous-GTIDs</span></span><br><span class="line"><span class="comment"># [empty]</span></span><br><span class="line"><span class="comment"># at 154</span></span><br><span class="line"><span class="comment">#190627 13:35:25 server id 1  end_log_pos 219 CRC32 0xf0c8f17a Anonymous_GTIDlast_committed=0sequence_number=1rbr_only=no</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;/*!*/;</span></span><br><span class="line"><span class="comment"># at 219</span></span><br><span class="line"><span class="comment">#190627 13:35:25 server id 1  end_log_pos 313 CRC32 0xdcf0f957 Querythread_id=5exec_time=0error_code=0</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">TIMESTAMP=1561642525/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@session.pseudo_thread_id=5/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@session.sql_mode=1436549152/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;</span></span><br><span class="line"><span class="attr">/*!\C</span> <span class="string">utf8 *//*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@session.lc_time_names=0/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@session.collation_database=DEFAULT/*!*/;</span></span><br><span class="line"><span class="attr">create</span> <span class="string">database test</span></span><br><span class="line"><span class="attr">/*!*/;</span></span><br><span class="line"><span class="comment"># at 313</span></span><br><span class="line"><span class="comment">#190627 13:36:25 server id 1  end_log_pos 378 CRC32 0x038e1709 Anonymous_GTIDlast_committed=1sequence_number=2rbr_only=no</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;/*!*/;</span></span><br><span class="line"><span class="comment"># at 378</span></span><br><span class="line"><span class="comment">#190627 13:36:25 server id 1  end_log_pos 532 CRC32 0x40de115b Querythread_id=5exec_time=0error_code=0</span></span><br><span class="line"><span class="attr">use</span> <span class="string">`test`/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">TIMESTAMP=1561642585/*!*/;</span></span><br><span class="line"><span class="attr">create</span> <span class="string">table book(id int primary key auto_increment, bname varchar(30) not null)</span></span><br><span class="line"><span class="attr">/*!*/;</span></span><br><span class="line"><span class="comment"># at 532</span></span><br><span class="line"><span class="comment">#190627 13:37:21 server id 1  end_log_pos 597 CRC32 0xd8c55e1b Anonymous_GTIDlast_committed=2sequence_number=3rbr_only=yes</span></span><br><span class="line"><span class="attr">/*!50718</span> <span class="string">SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;/*!*/;</span></span><br><span class="line"><span class="comment"># at 597</span></span><br><span class="line"><span class="comment">#190627 13:37:21 server id 1  end_log_pos 669 CRC32 0x715d874a Querythread_id=5exec_time=0error_code=0</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">TIMESTAMP=1561642641/*!*/;</span></span><br><span class="line"><span class="attr">BEGIN</span></span><br><span class="line"><span class="attr">/*!*/;</span></span><br><span class="line"><span class="comment"># at 669</span></span><br><span class="line"><span class="comment">#190627 13:37:21 server id 1  end_log_pos 719 CRC32 0xbd1b94bd Table_map(创建了表): `test`.`book` mapped to number 103</span></span><br><span class="line"><span class="comment"># at 719</span></span><br><span class="line"><span class="comment">#190627 13:37:21 server id 1  end_log_pos 776 CRC32 0x4ce16b91 Write_rows(写入了数据): table id 103 flags: STMT_END_F</span></span><br><span class="line"></span><br><span class="line"><span class="attr">BINLOG</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="attr">kcYUXRMBAAAAMgAAAM8CAAAAAGcAAAAAAAEABHRlc3QABGJvb2sAAgMPAh4AAL2UG70</span>=<span class="string"></span></span><br><span class="line"><span class="attr">kcYUXR4BAAAAOQAAAAgDAAAAAGcAAAAAAAEAAgAC//wBAAAABWJvb2sx/AIAAAAFYm9vazKRa+FM</span></span><br><span class="line"><span class="attr">&#x27;/*!*/;</span></span><br><span class="line"><span class="comment"># at 776</span></span><br><span class="line"><span class="comment">#190627 13:37:21 server id 1  end_log_pos 807 CRC32 0xdf835904 Xid = 15</span></span><br><span class="line"><span class="attr">COMMIT/*!*/;</span></span><br><span class="line"><span class="comment"># at 807</span></span><br><span class="line"><span class="comment">#190627 13:50:29 server id 1  end_log_pos 872 CRC32 0x8318128e Anonymous_GTIDlast_committed=3sequence_number=4rbr_only=yes</span></span><br><span class="line"><span class="attr">/*!50718</span> <span class="string">SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;/*!*/;</span></span><br><span class="line"><span class="comment"># at 872</span></span><br><span class="line"><span class="comment">#190627 13:50:29 server id 1  end_log_pos 944 CRC32 0x65902211 Querythread_id=9exec_time=0error_code=0</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">TIMESTAMP=1561643429/*!*/;</span></span><br><span class="line"><span class="attr">BEGIN</span></span><br><span class="line"><span class="attr">/*!*/;</span></span><br><span class="line"><span class="comment"># at 944</span></span><br><span class="line"><span class="comment">#190627 13:50:29 server id 1  end_log_pos 994 CRC32 0x29ddc805 Table_map: `test`.`book` mapped to number 103</span></span><br><span class="line"><span class="comment"># at 994</span></span><br><span class="line"><span class="comment">#190627 13:50:29 server id 1  end_log_pos 1051 CRC32 0xa331f579 Delete_rows(删除了数据): table id 103 flags: STMT_END_F</span></span><br><span class="line"></span><br><span class="line"><span class="attr">BINLOG</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="attr">pckUXRMBAAAAMgAAAOIDAAAAAGcAAAAAAAEABHRlc3QABGJvb2sAAgMPAh4AAAXI3Sk</span>=<span class="string"></span></span><br><span class="line"><span class="attr">pckUXSABAAAAOQAAABsEAAAAAGcAAAAAAAEAAgAC//wBAAAABWJvb2sx/AIAAAAFYm9vazJ59TGj</span></span><br><span class="line"><span class="attr">&#x27;/*!*/;</span></span><br><span class="line"><span class="comment"># at 1051</span></span><br><span class="line"><span class="comment">#190627 13:50:29 server id 1  end_log_pos 1082 CRC32 0x1ffda4cc Xid = 34</span></span><br><span class="line"><span class="attr">COMMIT/*!*/;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">@@SESSION.GTID_NEXT= &#x27;AUTOMATIC&#x27; /* added by mysqlbinlog */ /*!*/;</span></span><br><span class="line"><span class="attr">DELIMITER</span> <span class="string">;</span></span><br><span class="line"><span class="comment"># End of log file</span></span><br><span class="line"><span class="attr">/*!50003</span> <span class="string">SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;</span></span><br><span class="line"><span class="attr">/*!50530</span> <span class="string">SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</span></span><br></pre></td></tr></table></figure><h4 id="根据二进制日志恢复数据"><a href="#根据二进制日志恢复数据" class="headerlink" title="根据二进制日志恢复数据"></a>根据二进制日志恢复数据</h4><p>1）先删除表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from book;</span><br><span class="line">Query OK, 2 rows affected (0.02 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from book;</span><br><span class="line">空的数据集 (0.01 秒)</span><br></pre></td></tr></table></figure><p>2）恢复 <code>delete from book;</code>前的数据</p><p>在恢复之前我们需要到二进制日志文件中找到删除数据命令的时间点，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">#190627 13:50:29 server id 1  end_log_pos 1051 CRC32 0xa331f579 Delete_rows(删除了数据): table id 103 flags: STMT_END_F</span><br><span class="line"></span><br><span class="line">BINLOG &#x27;</span><br><span class="line">pckUXRMBAAAAMgAAAOIDAAAAAGcAAAAAAAEABHRlc3QABGJvb2sAAgMPAh4AAAXI3Sk=</span><br><span class="line">pckUXSABAAAAOQAAABsEAAAAAGcAAAAAAAEAAgAC//wBAAAABWJvb2sx/AIAAAAFYm9vazJ59TGj</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到时间点是：190627 13:50:29（2019-06-27 13:50:29）</p><p>3）用同样的方法，找到要恢复数据的起点时间（如果不设置起点默认从 mysql 启动位置开始恢复）</p><p>时间点是：190627 13:37:21（2019-06-27 13:37:21）</p><p>4）使用 mysqlbinlog 命令恢复数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --start-datetime=<span class="string">&quot;2019-06-27 13:37:21&quot;</span> --stop-datetime=<span class="string">&quot;2019-06-27 13:50:29&quot;</span> mysql-bin-log.000001 mysql-bin-log.000002 | mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p><img src="/mysql%E6%97%A5%E5%BF%97/6.png"></p><p>5）查看结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from book;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | bname |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | book1 |</span><br><span class="line">| 2  | book2 |</span><br><span class="line">+----+-------+</span><br><span class="line">2 行于数据集 (0.02 秒)</span><br></pre></td></tr></table></figure><h3 id="通用查询日志"><a href="#通用查询日志" class="headerlink" title="通用查询日志"></a>通用查询日志</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>记录用户的所有操作，包括启动关闭服务器、查询、更新等信息</p><h4 id="查看是否开启-1"><a href="#查看是否开启-1" class="headerlink" title="查看是否开启"></a>查看是否开启</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%general_log%&#x27;;</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| Variable_name    | Value                           |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">| general_log      | OFF                             |</span><br><span class="line">| general_log_file | /var/lib/mysql/8ddb8a0a85bb.log |</span><br><span class="line">+------------------+---------------------------------+</span><br><span class="line">2 行于数据集 (0.02 秒)</span><br></pre></td></tr></table></figure><h4 id="开启日志-1"><a href="#开启日志-1" class="headerlink" title="开启日志"></a>开启日志</h4><p>1）在 ini 配置文件添加如下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># General</span></span><br><span class="line"><span class="comment"># close 0, open 1, default 0</span></span><br><span class="line"><span class="attr">general-log</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">general_log_file</span>=<span class="string">&quot;general-log&quot;</span></span><br></pre></td></tr></table></figure><p>2）重启服务</p><p><img src="/mysql%E6%97%A5%E5%BF%97/7.png"></p><h4 id="观察日志"><a href="#观察日志" class="headerlink" title="观察日志"></a>观察日志</h4><p>在观察之前我做了如下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Query OK, 0 rows affected (0.01 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from book;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | bname |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | book1 |</span><br><span class="line">| 2  | book2 |</span><br><span class="line">+----+-------+</span><br><span class="line">2 行于数据集 (0.02 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from book where id = 1;</span><br><span class="line">Query OK, 1 rows affected (0.01 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from book;</span><br><span class="line">+----+-------+</span><br><span class="line">| id | bname |</span><br><span class="line">+----+-------+</span><br><span class="line">| 2  | book2 |</span><br><span class="line">+----+-------+</span><br><span class="line">1 行于数据集 (0.01 秒)</span><br></pre></td></tr></table></figure><p>查看日志日志内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysqld, Version: 5.7.25-log (MySQL Community Server (GPL)). started with:</span><br><span class="line">Tcp port: 0  Unix socket: (null)</span><br><span class="line">Time                 Id Command    Argument</span><br><span class="line">2019-06-27T14:22:34.444592Z    2 Connectroot@172.17.0.1 on  using TCP/IP</span><br><span class="line">2019-06-27T14:22:34.541845Z    2 QuerySET NAMES utf8</span><br><span class="line">2019-06-27T14:22:34.543328Z    2 Queryshow variables like &#x27;profiling&#x27;</span><br><span class="line">2019-06-27T14:22:34.547288Z    2 QuerySHOW DATABASES</span><br><span class="line">2019-06-27T14:22:34.581636Z    2 Queryselect SCHEMA_NAME, DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME from INFORMATION_SCHEMA.SCHEMATA</span><br><span class="line">2019-06-27T14:23:48.931701Z    3 Connectroot@172.17.0.1 on  using TCP/IP</span><br><span class="line">2019-06-27T14:23:48.933825Z    3 QuerySET NAMES utf8</span><br><span class="line">2019-06-27T14:23:58.266696Z    3 Queryuse test</span><br><span class="line">2019-06-27T14:24:04.615456Z    3 Queryselect * from book</span><br><span class="line">2019-06-27T14:24:24.029207Z    3 Querydelete from book where id = 1</span><br><span class="line">2019-06-27T14:24:27.554610Z    3 Queryselect * from book</span><br></pre></td></tr></table></figure><p>从上面可以看到，数据在什么时候做了些什么操作都是一目了然</p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><ul><li><p>记录超过指定时间的 SQL 语句</p></li><li><p>可以利用慢查询日志定位<strong>执行时间长</strong>、<strong>效率低</strong> 的语句，从而可以做到有针对性地优化</p></li></ul><h4 id="查看是否开启-2"><a href="#查看是否开启-2" class="headerlink" title="查看是否开启"></a>查看是否开启</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%query%&#x27;;</span><br><span class="line">+------------------------------+-------------------+</span><br><span class="line">| Variable_name                | Value             |</span><br><span class="line">+------------------------------+-------------------+</span><br><span class="line">| slow_query_log               | OFF               |</span><br><span class="line">+------------------------------+-------------------+</span><br><span class="line">13 行于数据集 (0.02 秒)</span><br></pre></td></tr></table></figure><h4 id="开启日志-2"><a href="#开启日志-2" class="headerlink" title="开启日志"></a>开启日志</h4><h5 id="方式1：配置文件开启"><a href="#方式1：配置文件开启" class="headerlink" title="方式1：配置文件开启"></a>方式1：配置文件开启</h5><p>1）在 mysql 配置文件中添加如下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slow-query-log</span></span><br><span class="line"><span class="comment"># close 0, open 1, default 0</span></span><br><span class="line"><span class="attr">slow-query-log</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span> = <span class="string">&quot;my_slow-query-log&quot;</span></span><br><span class="line"><span class="comment"># 超过 2s 的查询都会被记录</span></span><br><span class="line"><span class="attr">long_query_time</span> = <span class="string">2</span></span><br></pre></td></tr></table></figure><p>2）重启服务</p><p><img src="/mysql%E6%97%A5%E5%BF%97/8.png"></p><h5 id="方式2：设置全局变量开启"><a href="#方式2：设置全局变量开启" class="headerlink" title="方式2：设置全局变量开启"></a>方式2：设置全局变量开启</h5><p>1）查看是否开启了慢查询日志</p><p><img src="/mysql%E6%97%A5%E5%BF%97/001.png"></p><p>2）开启慢查询日志</p><p><img src="/mysql%E6%97%A5%E5%BF%97/002.png"></p><p> 3）将日志的输出定向为 Table 中，因为默认是输出到 file 的</p><p><img src="/mysql%E6%97%A5%E5%BF%97/003.png"></p><p>拓展</p><ul><li>查看mysql中有哪些用于记录日志的 Table</li></ul><p><img src="/mysql%E6%97%A5%E5%BF%97/004.png"></p><h4 id="观察日志-1"><a href="#观察日志-1" class="headerlink" title="观察日志"></a>观察日志</h4><p>1）在此之前我使用存储过程往 book 表添加 250000 条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_insert_data(<span class="keyword">IN</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> temp <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> temp <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">REPEAT</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book(bname) <span class="keyword">values</span>(CONCAT(<span class="string">&#x27;book&#x27;</span>,temp));</span><br><span class="line"><span class="keyword">SET</span> temp <span class="operator">=</span> temp <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">UNTIL temp<span class="operator">&gt;</span>num <span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Query OK, 0 rows affected (0.01 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; call pro_insert_data(250000);</span><br><span class="line">Lost connection to MySQL server during query</span><br><span class="line"></span><br><span class="line">mysql&gt; select count(1) from book;</span><br><span class="line">+----------+</span><br><span class="line">| count(1) |</span><br><span class="line">+----------+</span><br><span class="line">| 250001   |</span><br><span class="line">+----------+</span><br><span class="line">1 行于数据集 (0.05 秒)</span><br></pre></td></tr></table></figure><p>可以看到已经成功插入了250000条数据</p><p>2）执行更新操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> book <span class="keyword">set</span> bname <span class="operator">=</span> <span class="string">&#x27;asasf5461werw321sdfqwasd&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">250001</span> <span class="keyword">rows</span> affected (<span class="number">3.55</span> 秒)</span><br></pre></td></tr></table></figure><p>在上面我们将慢查询定义为了 2s，可以看到当前这个更新操作已经超过了2s</p><p>3）查看慢查询日志</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysqld,</span> <span class="string">Version: 5.7.25-log (MySQL Community Server (GPL)). started with:</span></span><br><span class="line"><span class="attr">Tcp</span> <span class="string">port: 0  Unix socket: (null)</span></span><br><span class="line"><span class="attr">Time</span>                 <span class="string">Id Command    Argument</span></span><br><span class="line"><span class="comment"># Time: 2019-06-27T15:14:08.200753Z</span></span><br><span class="line"><span class="comment"># User@Host: root[root] @  [172.17.0.1]  Id:     4</span></span><br><span class="line"><span class="comment"># Query_time: 3.541587  Lock_time: 0.022101 Rows_sent: 0  Rows_examined: 250001</span></span><br><span class="line"><span class="attr">use</span> <span class="string">test;</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">timestamp=1561648448;</span></span><br><span class="line"><span class="attr">update</span> <span class="string">book set bname = &#x27;asasf5461werw321sdfqwasd&#x27;;</span></span><br></pre></td></tr></table></figure><p>可以看到 update 这条 sql 执行时长为：3.541587 秒，锁时为：0.022101 秒，该操作涉及到的记录数：250001 条。</p><p>除此之外，还可以使用 mysqldumpslow 、pt-query-digest 脚本工具查询慢查询日志</p><p>拓展：使用函数直接制造慢查询</p><p><img src="/mysql%E6%97%A5%E5%BF%97/005.png"></p><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>用于记录 mysql 运行过程中的错误，默认是开启的。但可以通过配置文件指定日志的生成路径和名字</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">log_error</span> = <span class="string">&quot;error_log&quot;</span></span><br></pre></td></tr></table></figure><h2 id="InnoDB的redo、redo"><a href="#InnoDB的redo、redo" class="headerlink" title="InnoDB的redo、redo"></a>InnoDB的redo、redo</h2><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>redo log是InnoDB中事务日志的组成部分，用于记录数据页的修改情况。</p><p>与 binlog 对比</p><ul><li>binlog 是 Server 层面的日志，用于记录修改数据的操作，在事务提交之前写入磁盘</li><li>redo log 是 InnoDB 层面的日志，用于记录数据页的修改情况。其内容会在事务期间不断写入日志缓冲区中国年，并（默认）每隔 1s 刷新到磁盘上对应的日志文件中</li><li>redo log 属于 binlog 的写前日志。即修改操作之前就会先记录，以防在写 binlog 前宕机恢复数据的场景。</li></ul><h3 id="undo-log段"><a href="#undo-log段" class="headerlink" title="undo log段"></a>undo log段</h3><ul><li>undo log 段主要用来给事务回滚提供版本依据，以及实现 MVCC 的快照读操作</li><li>功能和 redo log 相反，它会在记录被修改之前记录下其当前的版本状态</li><li>undo log 没有对应的物理日志文件，它是数据库特定的一个内存段</li></ul><h3 id="查看redo和undo"><a href="#查看redo和undo" class="headerlink" title="查看redo和undo"></a>查看redo和undo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like &#x27;%engine%&#x27;;</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| Variable_name                    | Value  |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">| default_storage_engine           | InnoDB |  默认引擎用的是InnoDB就会开启 redo 和 undo</span><br><span class="line">| default_tmp_storage_engine       | InnoDB |</span><br><span class="line">| disabled_storage_engines         |        |</span><br><span class="line">| internal_tmp_disk_storage_engine | InnoDB |</span><br><span class="line">+----------------------------------+--------+</span><br><span class="line">4 行于数据集 (0.01 秒)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global variables like &#x27;%innodb_log%&#x27;;</span><br><span class="line">+-----------------------------+----------+</span><br><span class="line">| Variable_name               | Value    |</span><br><span class="line">+-----------------------------+----------+</span><br><span class="line">| innodb_log_buffer_size      | 16777216 | 缓冲区大少</span><br><span class="line">| innodb_log_checksums        | ON       |</span><br><span class="line">| innodb_log_compressed_pages | ON       |</span><br><span class="line">| innodb_log_file_size        | 50331648 | redolog和undolog文件大小</span><br><span class="line">| innodb_log_files_in_group   | 2        |</span><br><span class="line">| innodb_log_group_home_dir   | ./       | redolog和undolog所在位置：lb_logfile*的文件</span><br><span class="line">| innodb_log_write_ahead_size | 8192     |</span><br><span class="line">+-----------------------------+----------+</span><br><span class="line">7 行于数据集 (0.01 秒)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS理解</title>
      <link href="/CAS%E7%90%86%E8%A7%A3/"/>
      <url>/CAS%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul><li>CAS(Compare And Swap)是比对和交换的意思，现在所谓的无锁编程解决同步问题就是通过CAS来完成的。</li><li>从代码行为的角度来看，CAS其实就是一个乐观锁。</li><li>在CAS的加持下编程人员无需显式地处理资源的同步问题，因为CAS操作本质是一个CPU原子指令（Atomic::cmpxchg），所以CAS操作解决同步问题实质上是利用CPU来实现的。</li><li>在Java中有个名为 sun.misc.Unsafe 的类提供以上说到的 CAS 操作。该类上的方法几乎全都被 native 所修饰，因此可以得知 Unsafe 大量使用的本地方法来实现其自身的功能。</li></ul><h2 id="用代码来理解CAS的过程"><a href="#用代码来理解CAS的过程" class="headerlink" title="用代码来理解CAS的过程"></a>用代码来理解CAS的过程</h2><blockquote><p>在上面已经提到过 CAS 其实是一个CPU指令，所以以下代码仅用来理解操作流程而并非是一个安全的同步操作解决方案。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CAS</span> &#123;</span><br><span class="line"><span class="comment">// 内存值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CAS</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较交换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 标记值（实质叫期望值，但不好理解，我觉得，其实就是更新之前获取的value值，即乐观锁中的version）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 期望结果，即将value值改为该值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compareAndSwap</span><span class="params">(<span class="type">int</span> e, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)&#123; <span class="comment">// 自旋</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> get();</span><br><span class="line">            <span class="keyword">if</span> (v == e) &#123;</span><br><span class="line">                <span class="built_in">this</span>.value = n;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">CAS</span> <span class="variable">cas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CAS</span>(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在修改前获取到的version(当前内存值)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> cas.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 期望结果</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行比较交换</span></span><br><span class="line">        cas.compareAndSwap(e, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，以上就是CAS的操作。可以看到 CAS 通过对比内存中的 value 值 和 事先查出来的 value 来判断是否可以进行更改操作。</p><h2 id="JUC包下的同步类"><a href="#JUC包下的同步类" class="headerlink" title="JUC包下的同步类"></a>JUC包下的同步类</h2><blockquote><p>以 AtomicInteger源码为例子</p></blockquote><p>AtomicInteger中的CAS操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在 compareAndSet 方法中实质调用的是 unsafe 这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br></pre></td></tr></table></figure><p>已经很明确，Java中的 CAS 操作就是用 Unsafe 类来实现的，而 Unsafe 在上面已经提到过，它里面的方法基本上都被 native 所修饰，即均为本地方法（C&#x2F;C++实现），如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var1：对象本身</span></span><br><span class="line"><span class="comment">// var2: 值所在的指针</span></span><br><span class="line"><span class="comment">// var4: version值</span></span><br><span class="line"><span class="comment">// var5: 希望执行后得到的结果值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4, <span class="type">int</span> var5)</span>;</span><br></pre></td></tr></table></figure><h2 id="关于-Unsafe-类"><a href="#关于-Unsafe-类" class="headerlink" title="关于 Unsafe 类"></a>关于 Unsafe 类</h2><p>&amp;emsp;&amp;emsp;Unsafe 位于 sun.misc 包下，我们可以从它的源码注释中了解到它。得知该类主要是负责完成一些较为低级别和非安全的操作，譬如它可以直接操作系统资源。</p><p>&amp;emsp;&amp;emsp;正常情况下 Unsafe 类是不能被用户程序直接使用的，它会在运行时抛出 java.lang.SecurityException: Unsafe 异常。其原因可以在类注释中找到答案，在 Unsafe 类注释中表明，Unsafe 的使用是受到限制的，它要求显式调用 Unsafe 的类必须是受到信任的。那么什么情况下是类是受信任的呢？以下为获取 Unsafe 实例的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 返回当前调用该方法的Class实例</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">var0</span> <span class="operator">=</span> Reflection.getCallerClass();</span><br><span class="line">    <span class="comment">// 判断其类加载器是否持有系统域权限，如果没有则直接抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何使用 Unsafe 类呢？从上面源码中我们得知，在获取 Unsafe 实例时是需要判断其类加载器权限的，所以可以将类分配给 BootstrapClassLoader 来加载，因为 BootstrapClassLoader 是双亲委派模型中最顶层的类加载器，有着最高权限。当然这样实属有些不切实际，因此还有另一种方式，就是使用反射来直接调用 Unsafe 的 theUnsafe 字段来绕开权限校验。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe)field.get(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Unsafe 常用方法</p></blockquote><p><img src="/CAS%E7%90%86%E8%A7%A3/001.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年4月15日21:30:51 — 丰富有关 Unsafe 类的内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM常用调优参数与垃圾回收器相关内容</title>
      <link href="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/"/>
      <url>/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年5月11日 16:40:05 — 丰富垃圾回收器内容</li></ul><h2 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h2><p>基本说明<br>1）有-XX的为临时参数，可能会随着Java版本升级而改变或被删除<br>2）有-XX的参数如果赋值的时候需要使用&#x3D;</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-XX:+PrintGC（JDK9被移除） &#x2F; -Xlog:gc</td><td>打印GC信息(建议通过java -Xlog:help查看说明)</td></tr><tr><td>-XX:+PrintGCDetails &#x2F; -Xlog:gc*</td><td>打印GC详细信息。可通过-Xlog:gc*:file&#x3D;&#x2F;tmp&#x2F;gc.log设置保存到文件</td></tr><tr><td>-XX:+PrintVMOptions</td><td>打印JVM的显式接收到的参数（启动时传入）</td></tr><tr><td>-XX:+PrintCommandLineFlags</td><td>打印JVM的显式和隐式接收到的配置参数</td></tr><tr><td>-XX:+PrintFlagsFinal</td><td>打印JVM所有能够设置的配置参数</td></tr><tr><td>-XX:+PrintGCApplicationConcurrentTime</td><td>打印GC执行期间用户应用执行时间</td></tr><tr><td>-XX:+PrintGCApplicationStoppedTime</td><td>打印GC执行期间用户应用停顿的时间</td></tr><tr><td>-Xms</td><td>指定堆的最小值内存。默认为主存的1&#x2F;64</td></tr><tr><td>-Xmx</td><td>指定堆的最大值内存。默认为主存的1&#x2F;4</td></tr><tr><td>-Xss</td><td>指定Java栈内存大小</td></tr><tr><td>-Xmn</td><td>指定新生代内存大小（一般为堆的1&#x2F;3或者1&#x2F;4）</td></tr><tr><td>-XX:NewRatio</td><td>指定新生代和老年代的比例，如-XX:NewRatio&#x3D;老年代&#x2F;新生代</td></tr><tr><td>-XX:NewSize</td><td>指定新生代初始化大小</td></tr><tr><td>-XX:MaxNewSize</td><td>指定新生代最大大小</td></tr><tr><td>-XX:PermSize</td><td>指定永久代初始化内存(默认20.75MB，大量类的应用该值尽量设置大一些，如128、192或更多)</td></tr><tr><td>-XX:MaxPermSize</td><td>指定永久代最大内存(默认82MB)</td></tr><tr><td>-XX:MetaspaceSize</td><td>指定永久代初始化内存(默认20.75MB，大量类的应用该值尽量设置大一些，如128、192或更多)；</td></tr><tr><td>-XX:MaxMetaspaceSize</td><td>指定永久代最大内存（默认没有限制，即直到主存耗尽；但设置阈值后一旦耗尽就出现OOM）</td></tr><tr><td>-XX:SurvivorRatio</td><td>指定新生代的eden和from&#x2F;to的比例，如-XX:SurvivorRatio&#x3D;eden&#x2F;s区</td></tr><tr><td>-XX:MaxDirectMemorySize</td><td>指定最大可用的直接内存大小</td></tr><tr><td>-XX:HeapDumpOnOutOfMemoryError</td><td>指定发OOM导出相关信息</td></tr><tr><td>-XX:HeapDumpPath</td><td>指定发 -XX:HeapDumpOnOutOfMemoryError 文件导出路径（使用MAT工具或jstack分析）</td></tr><tr><td>-XX:PrintHeapAtGC</td><td>打印GC时堆的信息（jdk9或以上可使用-Xlog:gc*）</td></tr><tr><td>-XX:-UseTLAB</td><td>禁用TLAB策略(线程本地分配缓冲区)，即不为线程预先分配内存，默认开启</td></tr><tr><td>-XX:TLABSize</td><td>指定TLAB的内存大小</td></tr><tr><td>-XX:+DisableExplicitGC</td><td>禁用程序的Runtime.getRuntime().gc()&#x2F;System.gc()，因为该操作会触发Full GC</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>指定对象从新生代进入老年代的年龄，默认为15</td></tr><tr><td>-XX:PretenureSizeThreshold</td><td>指定”大对象“阀值</td></tr><tr><td>–XX:TargetSurvivorRatio</td><td>该值默认为50，用于幸存者区域满时重新计算晋升年纪。需要注意的是该值越大，计算出来的晋升年龄就越大（不会超过MaxTenuringThreshold）。换个角度说就是当幸存者区域满时，增大该值可以让对象在幸存者区域逗留更久，即这时的晋升率会降低，反之晋升率越高。</td></tr><tr><td>-XX:+UseAdaptiveSizePolicy</td><td>JVM将会动态调整Java堆中各个区域的大小以MaxDirectMemorySize及进入老年代的年龄，此时–XX:NewRatio和-XX:SurvivorRatio将会失效，而JDK1.8是默认开启 -XX:+UseAdaptiveSizePolicy 配置项的</td></tr><tr><td>-XX:+UseStringDeduplication</td><td>开启字符串去重（只适用G1垃圾回收器）。开启该功能后 JVM 会在 GC 期间做响应的去重操作</td></tr><tr><td>-XX:StringDeduplicationAgeThreshold</td><td>字符串需要经历指定次数才会被列为关注对象（默认为3次）。即默认情况下只有经过 3 次 GC 的字符串才会进行去重操作</td></tr><tr><td>-XX:+TraceClassLoading</td><td>打印类加载器的加载信息</td></tr><tr><td>-XX:MinHeapFreeRatio</td><td>GC 过后如果可用空间少于该阈值则触发扩容，默认为百分之40</td></tr><tr><td>-XX:+ShowCodeDetailsInExceptionMessages</td><td>展示详细的异常信息（JDK14新增）</td></tr></tbody></table><h2 id="即时编译器相关"><a href="#即时编译器相关" class="headerlink" title="即时编译器相关"></a>即时编译器相关</h2><h3 id="client模式"><a href="#client模式" class="headerlink" title="client模式"></a>client模式</h3><ul><li><p>client编译器也称为c1编译器</p></li><li><p>比c2编译器更快启动，且编译速度更快</p></li><li><p>着重低延时，一般用于客户端程序，如GUI程序</p></li><li><p>使用启动参数<code>-client</code>指定</p></li></ul><h3 id="server模式"><a href="#server模式" class="headerlink" title="server模式"></a>server模式</h3><ul><li>server编译器也称为c2编译器</li><li>因为需要预热（以方法为单位观察其调用次数高的进行编译，热点代码），所以开启编译比c1慢</li><li>也因为有预热的原因，所以对执行的代码更佳了解，编译出来的代码更加高效</li><li>64位虚拟机默认，也使用启动参数<code>-server</code>指定</li><li>需要注意的是，64位虚拟机不能手动设置-client模式，也就是执行使用server模式</li></ul><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>在Java8开始，默认使用混合模式进行即时编译。</p><p>查看模式：<code>java -version </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_231&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br></pre></td></tr></table></figure><p>混合模式下有4种编译等级</p><ol start="0"><li>解析执行代码</li><li>简单c1编译代码</li><li>受限c1编译代码</li><li>完全c1编译代码</li><li>c2编译代码</li></ol><p>注：多数情况下方法的第一次编译都是3，但如果方法频繁被调用就会进行4</p><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>修改jvm编译模式</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>java -Xint</td><td>单模式执行（解析执行）</td></tr><tr><td>java -Xcomp</td><td>单模式执行（编译执行）</td></tr></tbody></table><p>即使编译器参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-XX:+PrintCompileThreshodl</td><td>打印JIT日志</td></tr><tr><td>-XX:CompileThreshodl</td><td>指定编译阀值。既方法调用次数超过该值就进行JIT编译，client模式默认1500，server模式默认10000</td></tr><tr><td>-XX:+TieredComilation</td><td>开启即时编译器的多级编译（jdk1.7用）</td></tr><tr><td>-XX:ReservedCodeCacheSize</td><td>指定即时编译器代码缓存大小。64位Java8默认240M、64位Java7默认48M（开启分层编译默认为96M）。需要注意的是，一旦代码缓存耗尽，即时编译器就不会再编译，所以如果机器有足够的内存，可以尽量分配大一些，例如1G~2G</td></tr><tr><td>-XX:InitialCodeCacheSize</td><td>指定即时编译器代码缓存初始化大小</td></tr></tbody></table><h2 id="垃圾收集器相关"><a href="#垃圾收集器相关" class="headerlink" title="垃圾收集器相关"></a>垃圾收集器相关</h2><h3 id="垃圾回收前置知识"><a href="#垃圾回收前置知识" class="headerlink" title="垃圾回收前置知识"></a>垃圾回收前置知识</h3><h4 id="根节点枚举"><a href="#根节点枚举" class="headerlink" title="根节点枚举"></a>根节点枚举</h4><ul><li>查找出用于可达性分析的 GC Root 集合</li><li>哪些引用能够做 GC Root (可通过MAT工具查看)<ul><li>全局实例<ul><li>常量实例</li><li>类静态成员实例</li><li>ClassLoader</li></ul></li><li>JNI实例</li><li>线程实例</li><li>栈帧中局部变量表中应用的实例</li><li>锁对象实例</li></ul></li><li>该过程会发生短暂的 STW</li></ul><h4 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h4><ul><li>用户线程需要达到某个点才会停下来让 GC 回收，该点被称为安全点</li><li>常见安全点有哪些<ul><li>方法调用时</li><li>循环调转时</li><li>异常跳转时</li></ul></li><li>线程停中断的方式<ul><li>抢占式中断：系统控制所有用户线程到达安全点后停下</li><li>主动式中断（Java使用）：设置中断标识。用户线程运行时需要不断检查该标识来判断是否需要主动中断</li></ul></li></ul><h4 id="记忆集（RS）"><a href="#记忆集（RS）" class="headerlink" title="记忆集（RS）"></a>记忆集（RS）</h4><ul><li>用于记录从非收集区域指向当前收集区域的引用集合的抽象数据结构</li><li>Hotspot中记忆集的实现叫卡表，可以简单将其理解为一个标识数组</li><li>卡表由一个个卡页组成，而每个卡页则管理着一条快内存（512byte），当卡页发存在非收集区域指向当前收集区域的引用时，对应卡表的位置状态就会改为1（默认0）以表示存在跨区引用</li><li>卡表（卡页）的维护由写屏障来完成。可以将写屏障理解为一个AOP操作，当对象存在跨区引用时，写屏障就会将其记录到卡表中</li></ul><h4 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h4><ul><li>实现并发的可达性分析<ul><li>白色：表示当前对象还没被GC访问过，但如果分析结束对象还是白色则表示该对象不可达</li><li>黑色：表示当前对象以及其所有引用都已经被GC访问过了，这种对象是绝对存活的对象，因此无需再进行第二次扫描</li><li>灰色：表示当前对象已经被GC访问过，但其引用还没被GC扫描</li></ul></li><li>三色标记会存在漏标的问题，漏标发生后会导致对象<code>被消失</code>。会出现漏标的情况有以下2种：<ul><li>受到用户线程<code>并发插入引用</code></li><li>受到用户线程<code>并发删除引用</code></li></ul></li><li>漏标问题解决方案<ul><li>增量更新（针对黑色对象）：在扫描对象引用的同时，记录下被用户线程<code>并发插入</code>的引用，然后等分析过后再重新从新增了引用的黑色节点开始扫描。例如 CMS 的 remark 阶段</li><li>原始快照 snapshot-at-the-beginning （针对灰色对象）：在扫描对象引用的同时，记录下被用户线程<code>并发删除</code>的引用，然后等分析过后再重新从删除了引用的灰色节点开始扫描。例如 G1 的 remark 阶段</li></ul></li></ul><h3 id="常用GC配置和介绍"><a href="#常用GC配置和介绍" class="headerlink" title="常用GC配置和介绍"></a>常用GC配置和介绍</h3><blockquote><p>基本介绍和相关调优参数</p></blockquote><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/009.png"></p><p>注意： CMS 中的 -XX:CMSInitiatingOccupancyFraction 要配合 -XX:+UseCMSInitiatingOccupancyOnly 使用，否则运行一段时间后 OccupancyFraction 值会自动调节。</p><blockquote><p>CMS 收集过程</p></blockquote><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/010.png"></p><p>注：在 Java 14 中 CMS 已经被移除</p><blockquote><p>G1 收集过程</p></blockquote><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/011.png"></p><p>G1的（逻辑分代）区域类型：</p><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/012.png"></p><ul><li>E：新生代Region</li><li>S：幸存者Region</li><li>O：老年代Region</li><li>H：大对象Region（默认如果对象大小超过普通Region一半就会存放到这里）</li><li>灰色区域：可用Region空间</li></ul><h3 id="其它较为新颖的GC"><a href="#其它较为新颖的GC" class="headerlink" title="其它较为新颖的GC"></a>其它较为新颖的GC</h3><h4 id="Epsilon收集器（JDK11）"><a href="#Epsilon收集器（JDK11）" class="headerlink" title="Epsilon收集器（JDK11）"></a>Epsilon收集器（JDK11）</h4><ol><li>Epsilon垃圾回收器的目标是控制内存分配，但是不执行任何实际的垃圾回收工作。</li><li>它提供一个完全消极的 GC 实现，分配有限的内存资源，最大限度的降低内存占用和内存吞吐延迟时间。</li><li>用途：性能测试、内存压力测试、vm接口测试、极度短暂job任务、延时改进、吞吐量改进</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-XX:+UseEpsilonGC</td><td>启用Epsilon GC</td></tr></tbody></table><h4 id="Shenandoah收集器（JDK12）"><a href="#Shenandoah收集器（JDK12）" class="headerlink" title="Shenandoah收集器（JDK12）"></a>Shenandoah收集器（JDK12）</h4><ol><li>着重停顿，处于实验阶段，和G1一样采用分区算法管理内存</li><li>和G1一样与应用线程并发工作</li><li>Shenandoah是Redhat开发的，在商用版JDK中并没有Shenandoah。换句话说Shenandoah只在OpenJDK中出现</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-XX:+UseShenandoahGC</td><td>开启ShenandoahGC</td></tr><tr><td>-XX:+AlwaysPreTouch</td><td>使用所有可用的内存分页，减少系统运行停顿，为避免运行时性能损失</td></tr><tr><td>-XX:+UseTransparentHugePages</td><td>提高大堆的性能，同时建议在Linu上使用</td></tr></tbody></table><h3 id="GC性能指标"><a href="#GC性能指标" class="headerlink" title="GC性能指标"></a>GC性能指标</h3><ul><li>吞吐量 &#x3D; 应用程序执行时间 &#x2F; 运行总时间</li><li>执行频率：一段特定时间GC触发的频率，越少越好</li><li>反应速度：从对象成为垃圾到被回收的时间</li><li>暂停时间，越短越好</li></ul><h3 id="手动触发FullGC的方法"><a href="#手动触发FullGC的方法" class="headerlink" title="手动触发FullGC的方法"></a>手动触发FullGC的方法</h3><ul><li>System.gc()</li><li>jcmd 进程号 GC.run</li><li>Jconsole内存面板“执行GC”按钮</li></ul><h2 id="锁相关配置"><a href="#锁相关配置" class="headerlink" title="锁相关配置"></a>锁相关配置</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-XX:+UseSpinning</td><td>开启自旋锁（jdk1.6或更高版本默认开启）</td></tr><tr><td>-XX:PreBlockSpin</td><td>指定自旋次数（默认为10次），当线程自旋到这个阀值都没有获取到锁的话就会挂起（挂起并不会释放资源）</td></tr><tr><td>-XX:+UseBiasedLocking</td><td>开启偏向锁（默认开启），关闭偏向锁 -XX:-UseBiasedLocking</td></tr><tr><td>-XX:+BiasedLockingStartupDelay</td><td>指定偏向锁的启用延时时间（默认为4秒），可以设置为0，既伴随JVM启动就马上启用 -XX:+BiasedLockingStartupDelay&#x3D;0</td></tr><tr><td>-XX:+UseHeavyMonitors</td><td>直接启用重量级锁</td></tr><tr><td>-XX:+DoEscapeAnalysis</td><td>开启内存逃逸分析</td></tr><tr><td>-XX:+EliminateLocks</td><td>开启锁消除（需要server模式支持）</td></tr></tbody></table><h2 id="监控工具"><a href="#监控工具" class="headerlink" title="监控工具"></a>监控工具</h2><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h4><p>查看正在运行的 JVM 进程号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jps -l</span><br><span class="line">2112</span><br><span class="line">11476 jdk.jcmd/sun.tools.jps.Jps</span><br><span class="line">14840 org.jetbrains.jps.cmdline.Launcher</span><br></pre></td></tr></table></figure><h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><p>根据 PID 输出虚拟机运行时信息（譬如垃圾回收信息）</p><ul><li>jstat -class -t PID [定时检测时间ms] [n，表示抓取多少次]：显示指定 PID 程序的类加载相关信息</li><li>jstat -gcutil PID [定时检测时间ms] [n，表示抓取多少次]：显示指定 PID 程序的GC相关信息</li><li>jstat -compiler PID [定时检测时间ms] [n，表示抓取多少次]：显示指定 PID 程序的 JIT 编译相关信息</li></ul><blockquote><p>例子：以下表示每隔 1s 查询一次</p></blockquote><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/005.png"></p><p>S0：幸存者0内存使用率，既from区</p><p>S1：幸存者1内存使用率，既to区</p><p>E：eden区内存使用率</p><p>O：老年代内存使用率</p><p>M：方法区内存使用率</p><p>CCS：压缩类内存使用率</p><p>YGC：新生代GC，既然 Minor GC 次数</p><p>YGCT：执行新生代 GC 所消耗的时间</p><p>FGC：Full GC 次数</p><p>FGCT：Full GC 所消耗的时间</p><p>CGT：GC操作总共消耗的时间</p><h4 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h4><p>根据 PID 输出线程栈信息（线程状态，死锁信息）</p><ul><li>jstack -l PID</li></ul><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/006.png"></p><ul><li>jstack -m PID：打印包含 native 方法在内的线程栈信息。不推荐普通场景使用，因为可能会导致挂起内核线程从而引起bug。例如类加载死锁时可以用 jstack -m 来观察死锁信息，因为在 JVM 成面来是看不到类加载死锁的，看到的只是等待锁，即线程处于 BLOCKED 状态而不会检测到死锁信息</li></ul><h4 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h4><p>根据 PID 输出当前JVM配置信息</p><ul><li>jinfo PID：包含 环境变量参数、JVM flags、JVM 参数 <ul><li>环境变量参数：JVM通过系统环境变量读取到的配置</li><li>JVM flags：当前 PID 进程所显示指定的 JVM 配置项，例如 -XX:+UseParallelGC、-XX:+PrintGC 等</li><li>JVM 参数：例如 -Xms700m 、-Xmx700m 、-Dfile.encoding&#x3D;GBK -Duser.language&#x3D;zh 等</li></ul></li><li>jinfo -flags PID：单纯当前 PID 进程所显示指定的 JVM 配置项</li><li>jinfo -flag 配置项 PID：动态修改或添加 JVM 配置项，例如 <img src="JVM调优笔记/007.png" style="zoom: 50%;" /></li></ul><h4 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h4><p>查根据 PID 输出堆信息</p><ul><li><p>jmap -heap PID：打印指定 PID 程序的堆信息（JDK1.8）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$ ./jmap -heap 14840</span><br><span class="line">Attaching to process ID 14840, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.231-b11</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 0</span><br><span class="line">   MaxHeapFreeRatio         = 100</span><br><span class="line">   MaxHeapSize              = 734003200 (700.0MB)</span><br><span class="line">   NewSize                  = 42467328 (40.5MB)</span><br><span class="line">   MaxNewSize               = 244318208 (233.0MB)</span><br><span class="line">   OldSize                  = 85458944 (81.5MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = 31981568 (30.5MB)</span><br><span class="line">   used     = 8321008 (7.9355316162109375MB)</span><br><span class="line">   free     = 23660560 (22.564468383789062MB)</span><br><span class="line">   26.01813644659324% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = 5242880 (5.0MB)</span><br><span class="line">   used     = 3776608 (3.601654052734375MB)</span><br><span class="line">   free     = 1466272 (1.398345947265625MB)</span><br><span class="line">   72.0330810546875% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = 5242880 (5.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 5242880 (5.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   capacity = 85458944 (81.5MB)</span><br><span class="line">   used     = 90128 (0.0859527587890625MB)</span><br><span class="line">   free     = 85368816 (81.41404724121094MB)</span><br><span class="line">   0.1054635077166411% used</span><br><span class="line"></span><br><span class="line">6629 interned Strings occupying 548592 bytes.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>jmap -dump:format&#x3D;b,live,file&#x3D;文件名 PID：导出指定 PID 程序的dump（可使用mat工具分析）</p><ul><li>-dump:表示将堆信息进行转存，其中format&#x3D;b是参数，即二进制形式。live参数表示只抓取存活对象的信息（因此会触发FullGC）。file参数用于执行输出文件</li><li>注意，如果抛出com.sun.tools.attach.AttachNotSupportedException，则可以添加 -XX:+StartAttachListener 配置项解决</li></ul></li><li><p>jmap -histo:[对象状态] PID：查看对象信息，histo包含选项：live（存活对象）、all、file（dump文件）</p></li></ul><h3 id="图形化工具"><a href="#图形化工具" class="headerlink" title="图形化工具"></a>图形化工具</h3><h4 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h4><p>提供诸如线程、内存、类、MBean、JVM等监控。</p><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/004.png"></p><p>如果想要远程监控，则需要添加以下 JVM 启动参数：</p><ul><li>-Djava.rmi.server.hostname&#x3D;机器ip</li><li>-Dcom.sun.management.jmxremote&#x3D;true</li><li>-Dcom.sun.management.jmxremote.port&#x3D;暴露的端口号</li><li>-Dcom.sun.management.jmxremote.ssl&#x3D;false</li><li>-Dcom.sun.management.jmxremote.authenticate&#x3D;false</li></ul><h4 id="JVisualVM"><a href="#JVisualVM" class="headerlink" title="JVisualVM"></a>JVisualVM</h4><p>提供各种插件，例如GC、dump分析、线程监、MBean。可以直接查看线程和内存的dump。</p><img src="JVM调优笔记/002.png" style="zoom:50%;" /><p>如果想要远程监控，则需要添加以下 JVM 启动参数：</p><ul><li>-Djava.rmi.server.hostname&#x3D;机器ip</li><li>-Dcom.sun.management.jmxremote&#x3D;true</li><li>-Dcom.sun.management.jmxremote.port&#x3D;暴露的端口号</li><li>-Dcom.sun.management.jmxremote.ssl&#x3D;false</li><li>-Dcom.sun.management.jmxremote.authenticate&#x3D;false</li></ul><h4 id="JMC（推荐）"><a href="#JMC（推荐）" class="headerlink" title="JMC（推荐）"></a>JMC（推荐）</h4><p>下载地址：<a href="https://jdk.java.net/jmc/">https://jdk.java.net/jmc/</a></p><p>主要用来监控CPU和内存，以及可以观察IO的等待事件（譬如数据库连接）</p><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/003.png"></p><p>注：如果使用的 JDK 版本较高，则建议先检查是否支持 JMC 监控，以及不要用自带的旧版本</p><ul><li>-Djava.rmi.server.hostname&#x3D;机器ip</li><li>-Dcom.sun.management.jmxremote&#x3D;true</li><li>-Dcom.sun.management.jmxremote.port&#x3D;暴露的端口号</li><li>-Dcom.sun.management.jmxremote.ssl&#x3D;false</li><li>-Dcom.sun.management.jmxremote.authenticate&#x3D;false</li></ul><h4 id="JProfiler"><a href="#JProfiler" class="headerlink" title="JProfiler"></a>JProfiler</h4><p>下载地址：<a href="https://www.ej-technologies.com/products/jprofiler/overview.html">https://www.ej-technologies.com/products/jprofiler/overview.html</a></p><p>JProfiler是一个收费的可视化<strong>性能</strong>监控工具。提供各种实时监控功能</p><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/001.png"></p><h4 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h4><p>下载地址：<a href="http://www.eclipse.org/mat/">http://www.eclipse.org/mat/</a></p><p>可用于观察内存占用，以及引用情况（提供内存泄露分析报告信息）</p><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/013.png"></p><p><img src="/JVM%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0/014.png"></p><h3 id="拓展：查看当前版本JVM所支持的配置"><a href="#拓展：查看当前版本JVM所支持的配置" class="headerlink" title="拓展：查看当前版本JVM所支持的配置"></a>拓展：查看当前版本JVM所支持的配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">➜</span>  <span class="string">~ java -XX:+PrintFlagsFinal --version</span></span><br><span class="line"><span class="attr">[Global</span> <span class="string">flags]</span></span><br><span class="line">      <span class="attr">int</span> <span class="string">ActiveProcessorCount                     = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveSizeDecrementScaleFactor         = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveSizeMajorGCDecayTimeScale        = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveSizePolicyCollectionCostMargin   = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveSizePolicyInitializingSteps      = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveSizePolicyOutputInterval         = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveSizePolicyWeight                 = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveSizeThroughPutPolicy             = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">AdaptiveTimeWeight                       = 25                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AggressiveHeap                           = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AggressiveOpts                           = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AliasLevel                               = 3                                      &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AlignVector                              = false                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">AllocateHeapAt                           =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AllocateInstancePrefetchLines            = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AllocatePrefetchDistance                 = 192                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AllocatePrefetchInstr                    = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AllocatePrefetchLines                    = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AllocatePrefetchStepSize                 = 64                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AllocatePrefetchStyle                    = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AllowJNIEnvProxy                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AllowNonVirtualCalls                     = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AllowParallelDefineClass                 = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AllowUserSignalHandlers                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AllowVectorizeOnDemand                   = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AlwaysActAsServerClassMachine            = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AlwaysCompileLoopMethods                 = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AlwaysLockClassLoader                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AlwaysPreTouch                           = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AlwaysRestoreFPU                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AlwaysTenure                             = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ArrayCopyLoadStoreMaxElem                = 8                                      &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AssertOnSuspendWaitFailure               = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">AssumeMP                                 = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">AutoBoxCacheMax                          = 128                                    &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">BCEATraceLevel                           = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">BackgroundCompilation                    = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">BaseFootPrintEstimate                    = 268435456                                 &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">BiasedLockingBulkRebiasThreshold         = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">BiasedLockingBulkRevokeThreshold         = 40                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">BiasedLockingDecayTime                   = 25000                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">BiasedLockingStartupDelay                = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">BindGCTaskThreadsToCPUs                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">BlockLayoutByFrequency                   = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">BlockLayoutMinDiamondPercentage          = 20                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">BlockLayoutRotateLoops                   = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">BranchOnRegister                         = false                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">BytecodeVerificationLocal                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">BytecodeVerificationRemote               = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">C1OptimizeVirtualCallProfiling           = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">C1ProfileBranches                        = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">C1ProfileCalls                           = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">C1ProfileCheckcasts                      = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">C1ProfileInlinedCalls                    = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">C1ProfileVirtualCalls                    = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">C1UpdateMethodData                       = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CICompilerCount                          = 4                                         &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CICompilerCountPerCPU                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CITime                                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSAbortSemantics                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSAbortablePrecleanMinWorkPerIteration  = 100                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CMSAbortablePrecleanWaitMillis           = 100                                    &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CMSBitMapYieldQuantum                    = 10485760                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSBootstrapOccupancy                    = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSClassUnloadingEnabled                 = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSClassUnloadingMaxInterval             = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSCleanOnEnter                          = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CMSConcMarkMultiple                      = 32                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSConcurrentMTEnabled                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSCoordinatorYieldSleepCount            = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSEdenChunksRecordAlways                = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSExpAvgFactor                          = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSExtrapolateSweep                      = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSIncrementalSafetyFactor               = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSIndexedFreeListReplenish              = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CMSInitiatingOccupancyFraction           = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSIsTooFullPercentage                   = 98                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">CMSLargeCoalSurplusPercent               = 0.950000                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">CMSLargeSplitSurplusPercent              = 1.000000                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSLoopWarn                              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSMaxAbortablePrecleanLoops             = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CMSMaxAbortablePrecleanTime              = 5000                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CMSOldPLABMax                            = 1024                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CMSOldPLABMin                            = 16                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSOldPLABNumRefills                     = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSOldPLABReactivityFactor               = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSOldPLABResizeQuicker                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSOldPLABToleranceFactor                = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPLABRecordAlways                      = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSParallelInitialMarkEnabled            = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSParallelRemarkEnabled                 = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSParallelSurvivorRemarkEnabled         = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSPrecleanDenominator                   = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSPrecleanIter                          = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSPrecleanNumerator                     = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPrecleanRefLists1                     = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPrecleanRefLists2                     = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPrecleanSurvivors1                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPrecleanSurvivors2                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSPrecleanThreshold                     = 1000                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPrecleaningEnabled                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPrintChunksInDump                     = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSPrintObjectsInDump                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSRemarkVerifyVariant                   = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSReplenishIntermediate                 = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CMSRescanMultiple                        = 32                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSSamplingGrain                         = 16384                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSScavengeBeforeRemark                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSScheduleRemarkEdenPenetration         = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CMSScheduleRemarkEdenSizeThreshold       = 2097152                                   &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSScheduleRemarkSamplingRatio           = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">CMSSmallCoalSurplusPercent               = 1.050000                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">CMSSmallSplitSurplusPercent              = 1.100000                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSSplitIndexedFreeListBlocks            = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CMSTriggerInterval                       = -1                                     &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSTriggerRatio                          = 80                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CMSWaitDuration                          = 2000                                   &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSWorkQueueDrainThreshold               = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CMSYield                                 = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMSYieldSleepCount                       = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CMSYoungGenPerWorker                     = 67108864                               &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMS_FLSPadding                           = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMS_FLSWeight                            = 75                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMS_SweepPadding                         = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMS_SweepTimerThresholdMillis            = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CMS_SweepWeight                          = 75                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CalculateClassFingerprint                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CheckJNICalls                            = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ClassUnloading                           = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ClassUnloadingWithConcurrentMark         = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ClipInlining                             = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">CodeCacheExpansionSize                   = 65536                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CompactFields                            = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CompactStrings                           = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CompilationPolicyChoice                  = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line"><span class="attr">ccstrlist</span> <span class="string">CompileCommand                           =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">CompileCommandFile                       =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line"><span class="attr">ccstrlist</span> <span class="string">CompileOnly                              =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CompileThreshold                         = 10000                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">CompileThresholdScaling                  = 1.000000                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CompilerThreadHintNoPreempt              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CompilerThreadPriority                   = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">CompilerThreadStackSize                  = 1024                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">CompressedClassSpaceSize                 = 1073741824                                &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">uint</span> <span class="string">ConcGCThreads                            = 3                                         &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ConditionalMoveLimit                     = 3                                   &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ContendedPaddingWidth                    = 128                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CrashOnOutOfMemoryError                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CreateCoredumpOnCrash                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">CriticalJNINatives                       = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DTraceAllocProbes                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DTraceMethodProbes                       = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DTraceMonitorProbes                      = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">Debugging                                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DeoptimizeRandom                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DisableAttachMechanism                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DisableExplicitGC                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DisplayVMOutputToStderr                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DisplayVMOutputToStdout                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DoEscapeAnalysis                         = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DoReserveCopyInSuperWord                 = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DontCompileHugeMethods                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DontYieldALot                            = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">DumpLoadedClassList                      =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DumpReplayDataOnError                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">DumpSharedSpaces                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EagerXrunInit                            = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">EliminateAllocationArraySizeLimit        = 64                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EliminateAllocations                     = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EliminateAutoBox                         = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EliminateLocks                           = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EliminateNestedLocks                     = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EnableContended                          = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EnableDynamicAgentLoading                = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">ErgoHeapSizeLimit                        = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">ErrorFile                                =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line"> <span class="attr">uint64_t</span> <span class="string">ErrorLogTimeout                          = 120                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">ErrorReportServer                        =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">EscapeAnalysisTimeout                    = 20.000000                              &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">EstimateArgEscape                        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ExecutingUnitTests                       = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ExitOnOutOfMemoryError                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ExplicitGCInvokesConcurrent              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ExtendedDTraceProbes                     = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">ExtraSharedClassListFile                 =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">FLSAlwaysCoalesceLarge                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">FLSCoalescePolicy                        = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">FLSLargestBlockCoalesceProximity         = 0.990000                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">FailOverToOldVerifier                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">FieldsAllocationStyle                    = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">FilterSpuriousWakeups                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">FlightRecorder                           = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">FlightRecorderOptions                    =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ForceNUMA                                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ForceTimeHighResolution                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">FreqInlineSize                           = 325                                    &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">G1ConcMarkStepDurationMillis             = 10.000000                                 &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">G1ConcRSHotCardLimit                     = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1ConcRSLogCacheSize                     = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1ConcRefinementGreenZone                = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1ConcRefinementRedZone                  = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">G1ConcRefinementServiceIntervalMillis    = 300                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">uint</span> <span class="string">G1ConcRefinementThreads                  = 10                                        &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1ConcRefinementThresholdStep            = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1ConcRefinementYellowZone               = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">G1ConfidencePercent                      = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1HeapRegionSize                         = 1048576                                   &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">G1HeapWastePercent                       = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">G1MixedGCCountTarget                     = 8                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">G1RSetRegionEntries                      = 256                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1RSetScanBlockSize                      = 64                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">G1RSetSparseRegionEntries                = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">G1RSetUpdatingPauseTimePercent           = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">uint</span> <span class="string">G1RefProcDrainInterval                   = 1000                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">G1ReservePercent                         = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">G1SATBBufferEnqueueingThresholdPercent   = 60                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1SATBBufferSize                         = 1024                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">G1UpdateBufferSize                       = 256                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">G1UseAdaptiveConcRefinement              = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">G1UseAdaptiveIHOP                        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">GCDrainStackTargetSize                   = 64                                        &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">GCHeapFreeLimit                          = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">GCLockerEdenExpansionPercent             = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">GCLockerInvokesConcurrent                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">GCPauseIntervalMillis                    = 201                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">uint</span> <span class="string">GCTaskTimeStampEntries                   = 200                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">GCTimeLimit                              = 98                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">GCTimeRatio                              = 12                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">HeapBaseMinAddress                       = 2147483648                             &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">HeapDumpAfterFullGC                      = false                                  &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">HeapDumpBeforeFullGC                     = false                                  &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">HeapDumpOnOutOfMemoryError               = false                                  &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">HeapDumpPath                             =                                        &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">HeapFirstMaximumCompactionCount          = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">HeapMaximumCompactionInterval            = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">HeapSearchSteps                          = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">HeapSizePerGCThread                      = 43620760                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">IgnoreEmptyClassPaths                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">IgnoreUnrecognizedVMOptions              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">IncreaseFirstTierCompileThresholdAt      = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">IncrementalInline                        = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">InitialBootClassLoaderMetaspaceSize      = 4194304                                   &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">InitialCodeCacheSize                     = 2555904                                &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">InitialHeapSize                          = 268435456                                 &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">InitialRAMFraction                       = 64                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">InitialRAMPercentage                     = 1.562500                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">InitialSurvivorRatio                     = 8                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">InitialTenuringThreshold                 = 7                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">InitiatingHeapOccupancyPercent           = 45                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">Inline                                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">InlineDataFile                           =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">InlineSmallCode                          = 2000                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">InlineSynchronizedMethods                = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">InsertMemBarAfterArraycopy               = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">InteriorEntryAlignment                   = 16                                  &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">InterpreterProfilePercentage             = 33                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">JavaMonitorsInStackTrace                 = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority10_To_OSPriority             = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority1_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority2_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority3_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority4_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority5_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority6_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority7_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority8_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">JavaPriority9_To_OSPriority              = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">LIRFillDelaySlots                        = false                               &#123;C1 pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">LargePageHeapSizeThreshold               = 134217728                                 &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">LargePageSizeInBytes                     = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">LiveNodeCountInliningCutoff              = 40000                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">LoopMaxUnroll                            = 16                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">LoopOptsCount                            = 43                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">LoopPercentProfileLimit                  = 30                                  &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">LoopStripMiningIter                      = 1000                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">LoopStripMiningIterShortLoop             = 100                                    &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">LoopUnrollLimit                          = 60                                  &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">LoopUnrollMin                            = 4                                      &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">LoopUnswitching                          = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ManagementServer                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MarkStackSize                            = 4194304                                   &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MarkStackSizeMax                         = 16777216                                  &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">uint</span> <span class="string">MarkSweepAlwaysCompactCount              = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MarkSweepDeadRatio                       = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxBCEAEstimateLevel                     = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxBCEAEstimateSize                      = 150                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line"> <span class="attr">uint64_t</span> <span class="string">MaxDirectMemorySize                      = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">MaxFDLimit                               = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MaxGCMinorPauseMillis                    = 18446744073709551615                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MaxGCPauseMillis                         = 200                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MaxHeapFreeRatio                         = 70                                     &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MaxHeapSize                              = 4294967296                                &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxInlineLevel                           = 9                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxInlineSize                            = 35                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxJNILocalCapacity                      = 65536                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxJavaStackTraceDepth                   = 1024                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxJumpTableSize                         = 65000                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxJumpTableSparseness                   = 5                                      &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxLabelRootDepth                        = 1100                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxLoopPad                               = 11                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MaxMetaspaceExpansion                    = 5451776                                   &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MaxMetaspaceFreeRatio                    = 70                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MaxMetaspaceSize                         = 18446744073709547520                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MaxNewSize                               = 2576351232                                &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxNodeLimit                             = 80000                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line"> <span class="attr">uint64_t</span> <span class="string">MaxRAM                                   = 137438953472                           &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MaxRAMFraction                           = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">MaxRAMPercentage                         = 25.000000                                 &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxRecursiveInlineLevel                  = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MaxTenuringThreshold                     = 15                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxTrivialSize                           = 6                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MaxVectorSize                            = 32                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MetaspaceSize                            = 21807104                               &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">MethodFlushing                           = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MinHeapDeltaBytes                        = 1048576                                   &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MinHeapFreeRatio                         = 40                                     &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MinInliningThreshold                     = 250                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MinJumpTableSize                         = 10                                  &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MinMetaspaceExpansion                    = 339968                                    &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MinMetaspaceFreeRatio                    = 40                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MinRAMFraction                           = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">double</span> <span class="string">MinRAMPercentage                         = 50.000000                                 &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">MinSurvivorRatio                         = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">MinTLABSize                              = 2048                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MonitorBound                             = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">MonitorInUseLists                        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">MultiArrayExpandLimit                    = 6                                      &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">NUMAChunkResizeWeight                    = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">NUMAInterleaveGranularity                = 2097152                                   &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">NUMAPageScanRate                         = 256                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">NUMASpaceResizeRate                      = 1073741824                                &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">NUMAStats                                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">NativeMemoryTracking                     = off                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">NeedsDeoptSuspend                        = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">NeverActAsServerClassMachine             = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">NeverTenure                              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">NewRatio                                 = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">NewSize                                  = 1363144                                   &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">NewSizeThreadIncrease                    = 5320                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">NmethodSweepActivity                     = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">NodeLimitFudgeFactor                     = 2000                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">NonNMethodCodeHeapSize                   = 5836300                                &#123;pd product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">NonProfiledCodeHeapSize                  = 122910970                              &#123;pd product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">NumberOfLoopInstrToAlign                 = 4                                      &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ObjectAlignmentInBytes                   = 8                                    &#123;lp64_product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">OldPLABSize                              = 1024                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">OldPLABWeight                            = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">OldSize                                  = 5452592                                   &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">OmitStackTraceInFastThrow                = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line"><span class="attr">ccstrlist</span> <span class="string">OnError                                  =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line"><span class="attr">ccstrlist</span> <span class="string">OnOutOfMemoryError                       =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">OnStackReplacePercentage                 = 140                                    &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">OptimizeFill                             = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">OptimizePtrCompare                       = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">OptimizeStringConcat                     = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">OptoBundling                             = false                               &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">OptoLoopAlignment                        = 16                                     &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">OptoRegScheduling                        = true                                &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">OptoScheduling                           = false                               &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">PLABWeight                               = 75                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PSChunkLargeArrays                       = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">      <span class="attr">int</span> <span class="string">ParGCArrayScanChunk                      = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">ParGCDesiredObjsFromOverflowList         = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ParGCTrimOverflow                        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ParGCUseLocalOverflow                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">ParallelGCBufferWastePct                 = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">uint</span> <span class="string">ParallelGCThreads                        = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">ParallelOldDeadWoodLimiterMean           = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">ParallelOldDeadWoodLimiterStdDev         = 80                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ParallelRefProcBalancingEnabled          = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ParallelRefProcEnabled                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PartialPeelAtUnsignedTests               = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PartialPeelLoop                          = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PartialPeelNewPhiDelta                   = 0                                      &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">PausePadding                             = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PerBytecodeRecompilationCutoff           = 200                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PerBytecodeTrapLimit                     = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PerMethodRecompilationCutoff             = 400                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PerMethodTrapLimit                       = 100                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PerfAllowAtExitRegistration              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PerfBypassFileSystemCheck                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PerfDataMemorySize                       = 32768                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PerfDataSamplingInterval                 = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">PerfDataSaveFile                         =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PerfDataSaveToFile                       = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PerfDisableSharedMem                     = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PerfMaxStringConstLength                 = 1024                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">PreTouchParallelChunkSize                = 1073741824                                &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PreferInterpreterNativeStubs             = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PrefetchCopyIntervalInBytes              = 576                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PrefetchFieldsAhead                      = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PrefetchScanIntervalInBytes              = 576                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PreserveAllAnnotations                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PreserveFramePointer                     = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">PretenureSizeThreshold                   = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintClassHistogram                      = false                                  &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintCodeCache                           = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintCodeCacheOnCompilation              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintCommandLineFlags                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintCompilation                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintConcurrentLocks                     = false                                  &#123;manageable&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintExtendedThreadInfo                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintFlagsFinal                          = true                                      &#123;product&#125; &#123;command line&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintFlagsInitial                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintFlagsRanges                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintGC                                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintGCDetails                           = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintHeapAtSIGBREAK                      = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintJNIResolving                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintSafepointStatistics                 = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PrintSafepointStatisticsCount            = 300                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">PrintSafepointStatisticsTimeout          = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintSharedArchiveAndExit                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintSharedDictionary                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintStringTableStatistics               = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintTieredEvents                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintVMOptions                           = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintVMQWaitTime                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">PrintWarnings                            = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">ProcessDistributionStride                = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ProfileInterpreter                       = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ProfileIntervals                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ProfileIntervalsTicks                    = 100                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ProfileMaturityPercentage                = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ProfileVM                                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">ProfiledCodeHeapSize                     = 122910970                              &#123;pd product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ProfilerPrintByteCodeStatistics          = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ProfilerRecordPC                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">PromotedPadding                          = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">QueuedAllocationWarningCount             = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">      <span class="attr">int</span> <span class="string">RTMRetryCount                            = 5                                    &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RangeCheckElimination                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ReassociateInvariants                    = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ReduceBulkZeroing                        = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ReduceFieldZeroing                       = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ReduceInitialCardMarks                   = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ReduceSignalUsage                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">RefDiscoveryPolicy                       = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RegisterFinalizersAtInit                 = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RelaxAccessControlCheck                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">ReplayDataFile                           =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RequireSharedSpaces                      = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">ReservedCodeCacheSize                    = 251658240                              &#123;pd product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ResizeOldPLAB                            = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ResizePLAB                               = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ResizeTLAB                               = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RestoreMXCSROnJNICalls                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RestrictContended                        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RestrictReservedStack                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RewriteBytecodes                         = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">RewriteFrequentPairs                     = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">SafepointTimeout                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">SafepointTimeoutDelay                    = 10000                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ScavengeBeforeFullGC                     = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">SegmentedCodeCache                       = true                                      &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">SelfDestructTimer                        = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">SharedArchiveConfigFile                  =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">SharedArchiveFile                        =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">SharedBaseAddress                        = 34359738368                               &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">SharedClassListFile                      =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">SharedSymbolTableBucketSize              = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ShowMessageBoxOnError                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ShrinkHeapInSteps                        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">SoftRefLRUPolicyMSPerMB                  = 1000                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">SplitIfBlocks                            = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">StackRedPages                            = 1                                      &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">StackReservedPages                       = 1                                      &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">StackShadowPages                         = 20                                     &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">StackTraceInThrowable                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">StackYellowPages                         = 2                                      &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">StartAggressiveSweepingAt                = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">StartAttachListener                      = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">StartFlightRecording                     =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">StressLdcRewrite                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">StringDeduplicationAgeThreshold          = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">StringTableSize                          = 65536                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">SuperWordLoopUnrollAnalysis              = true                                &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">SuperWordReductions                      = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">SuppressFatalErrorMessage                = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">SurvivorPadding                          = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">SurvivorRatio                            = 8                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">SuspendRetryCount                        = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">SuspendRetryDelay                        = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TLABAllocationWeight                     = 35                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TLABRefillWasteFraction                  = 64                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">TLABSize                                 = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">TLABStats                                = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TLABWasteIncrement                       = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TLABWasteTargetPercent                   = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TargetPLABWastePct                       = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TargetSurvivorRatio                      = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TenuredGenerationSizeIncrement           = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TenuredGenerationSizeSupplement          = 80                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TenuredGenerationSizeSupplementDecay     = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ThreadLocalHandshakes                    = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ThreadPriorityPolicy                     = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ThreadPriorityVerbose                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ThreadStackSize                          = 1024                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">ThresholdTolerance                       = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier0BackedgeNotifyFreqLog               = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier0InvokeNotifyFreqLog                 = 7                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier0ProfilingStartPercentage            = 200                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier23InlineeNotifyFreqLog               = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier2BackEdgeThreshold                   = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier2BackedgeNotifyFreqLog               = 14                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier2CompileThreshold                    = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier2InvokeNotifyFreqLog                 = 11                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3AOTBackEdgeThreshold                = 120000                                    &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3AOTCompileThreshold                 = 15000                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3AOTInvocationThreshold              = 10000                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3AOTMinInvocationThreshold           = 1000                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3BackEdgeThreshold                   = 60000                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3BackedgeNotifyFreqLog               = 13                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3CompileThreshold                    = 2000                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3DelayOff                            = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3DelayOn                             = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3InvocationThreshold                 = 200                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3InvokeNotifyFreqLog                 = 10                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3LoadFeedback                        = 5                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier3MinInvocationThreshold              = 100                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier4BackEdgeThreshold                   = 40000                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier4CompileThreshold                    = 15000                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier4InvocationThreshold                 = 5000                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier4LoadFeedback                        = 3                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">Tier4MinInvocationThreshold              = 600                                       &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">TieredCompilation                        = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TieredCompileTaskTimeout                 = 50                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TieredRateUpdateMaxTime                  = 25                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TieredRateUpdateMinTime                  = 1                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TieredStopAtLevel                        = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">TimeLinearScan                           = false                                  &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">ccstr</span> <span class="string">TraceJVMTI                               =                                           &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">TraceSuspendWaitFailures                 = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TrackedInitializationLimit               = 50                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">TransmitErrorReport                      = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">TrapBasedNullChecks                      = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">TrapBasedRangeChecks                     = false                               &#123;C2 pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TypeProfileArgsLimit                     = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">TypeProfileLevel                         = 111                                    &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TypeProfileMajorReceiverPercent          = 90                                     &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TypeProfileParmsLimit                    = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">TypeProfileWidth                         = 2                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">UnguardOnExecutionViolation              = 0                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UnlinkSymbolsALot                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAES                                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">UseAVX                                   = 2                                    &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveGCBoundary                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveGenerationSizePolicyAtMajorCollection  = true                             &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveGenerationSizePolicyAtMinorCollection  = true                             &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveNUMAChunkSizing               = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveSizeDecayMajorGCCost          = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveSizePolicy                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveSizePolicyFootprintGoal       = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAdaptiveSizePolicyWithSystemGC        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseAddressNop                            = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseBASE64Intrinsics                      = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseBMI1Instructions                      = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseBMI2Instructions                      = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseBiasedLocking                         = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseBimorphicInlining                     = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseBsdPosixThreadCPUClocks               = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCLMUL                                 = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCMSBestFit                            = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCMSInitiatingOccupancyOnly            = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCMoveUnconditionally                  = false                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCodeAging                             = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCodeCacheFlushing                     = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCompiler                              = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCompressedClassPointers               = true                                 &#123;lp64_product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCompressedOops                        = true                                 &#123;lp64_product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseConcMarkSweepGC                       = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCondCardMark                          = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCountLeadingZerosInstruction          = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCountTrailingZerosInstruction         = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCountedLoopSafepoints                 = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseCounterDecay                          = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseDivMod                                = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseDynamicNumberOfCompilerThreads        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseDynamicNumberOfGCThreads              = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseFMA                                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseFPUForSpilling                        = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseFastJNIAccessors                      = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseFastStosb                             = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseG1GC                                  = true                                      &#123;product&#125; &#123;ergonomic&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseGCOverheadLimit                       = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseGCTaskAffinity                        = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseHeavyMonitors                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseHugeTLBFS                             = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseInlineCaches                          = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseInterpreter                           = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseJumpTables                            = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLWPSynchronization                    = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLargePages                            = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLargePagesInMetaspace                 = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLargePagesIndividualAllocation        = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLegacyJNINameEscaping                 = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLoopCounter                           = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLoopInvariantCodeMotion               = true                                   &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseLoopPredicate                         = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseMaximumCompactionOnSystemGC           = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseMembar                                = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseNUMA                                  = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseNUMAInterleaving                      = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseNewLongLShift                         = false                                &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseOSErrorReporting                      = false                                  &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseOnStackReplacement                    = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseOnlyInlinedBimorphic                  = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseOprofile                              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseOptoBiasInlining                      = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UsePSAdaptiveSurvivorSizePolicy          = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseParallelGC                            = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseParallelOldGC                         = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UsePerfData                              = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UsePopCountInstruction                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseProfiledLoopPredicate                 = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseRDPCForConstantTableBase              = false                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseRTMDeopt                              = false                                &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseRTMLocking                            = false                                &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSHA                                   = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSHM                                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">UseSSE                                   = 4                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSSE42Intrinsics                       = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSerialGC                              = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSharedSpaces                          = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSignalChaining                        = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseStoreImmI16                           = false                                &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseStringDeduplication                   = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSubwordForMaxVector                   = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseSuperWord                             = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseTLAB                                  = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseThreadPriorities                      = true                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseTypeProfile                           = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseTypeSpeculation                       = true                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseUnalignedLoadStores                   = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseVectorCmov                            = false                                  &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseXMMForArrayCopy                       = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseXMMForObjInit                         = false                                &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseXmmI2D                                = false                                &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseXmmI2F                                = false                                &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseXmmLoadAndClearUpper                  = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">UseXmmRegToRegMoveAll                    = true                                 &#123;ARCH product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">VMThreadHintNoPreempt                    = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">VMThreadPriority                         = -1                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">VMThreadStackSize                        = 1024                                   &#123;pd product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ValueMapInitialSize                      = 11                                     &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ValueMapMaxLoopSize                      = 8                                      &#123;C1 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">intx</span> <span class="string">ValueSearchLimit                         = 1000                                   &#123;C2 product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">VerifyMergedCPBytecodes                  = true                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">VerifySharedSpaces                       = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">YoungGenerationSizeIncrement             = 20                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">YoungGenerationSizeSupplement            = 80                                        &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">    <span class="attr">uintx</span> <span class="string">YoungGenerationSizeSupplementDecay       = 8                                         &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">   <span class="attr">size_t</span> <span class="string">YoungPLABSize                            = 4096                                      &#123;product&#125; &#123;default&#125;</span></span><br><span class="line">     <span class="attr">bool</span> <span class="string">ZeroTLAB                                 = false                                     &#123;product&#125; &#123;default&#125;</span></span><br><span class="line"><span class="attr">java</span> <span class="string">11.0.9 2020-10-20 LTS</span></span><br><span class="line"><span class="attr">Java(TM)</span> <span class="string">SE Runtime Environment 18.9 (build 11.0.9+7-LTS)</span></span><br><span class="line"><span class="attr">Java</span> <span class="string">HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.9+7-LTS, mixed mode)</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《JVM G1源码分析和调优》</li><li>《深入理解Java虚拟机》</li><li><a href="https://docs.oracle.com/javase/9/tools/java.htm#JSWOR624">Java命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Step7+PLCsim+NetToPLCsim仿真PLC以太网通信</title>
      <link href="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/"/>
      <url>/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>最近在做一个污水处理厂的自动控制系统，个人负责开发实现一个OPCUA协议的SERVER来去操作Siemens PLC(可编程控制器)。</p><p>起因是原本从甲方那借来的S7300型号的SiemensPLC真机被拿回去了。所以就没有了plc拿来对自己写好的代码进行验证和测试，就想着能不能模拟一台PLC出来代替真机做实验。</p><p>因为先前并又没接触过自动化这方面的知识，网上对于PLC仿真以太网通讯的文章也甚少，所以有些举步维艰的感觉，但最后经过自己一段时间的摸索发现其实也并不是什么麻烦事。而且个人比较反感折腾配置环境相关的事情，所以以此文章将PLC仿真以太网通讯的过程记录下来，希望帮到有需要的人，而避免将时间浪费在不必要的事情上。</p><h2 id="相关软件和测试项目"><a href="#相关软件和测试项目" class="headerlink" title="相关软件和测试项目"></a>相关软件和测试项目</h2><p>Step7：<a href="http://www.laozhoucontrol.com/m/?post=19">http://www.laozhoucontrol.com/m/?post=19</a> &#x2F;<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=764161">https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=764161</a></p><p>NetToPLCsim：<a href="https://dl.pconline.com.cn/download/2279152.html">https://dl.pconline.com.cn/download/2279152.html</a></p><p>测试用plc项目：<a href="https://github.com/tandi960505/plc">https://github.com/tandi960505/plc</a></p><p>Snap7(或其它sdk)：<a href="http://snap7.sourceforge.net/">http://snap7.sourceforge.net/</a></p><p>注：</p><ol><li>Step7 安装可能比较麻烦，网站查阅一下资料即可</li><li>如果 Snap7 官网不能访问，可以用我上传到 Github 的项目(<a href="https://github.com/tandi960505/Moka7)%EF%BC%8C%E5%B0%86%E5%85%B6%E6%8B%89%E4%B8%8B%E8%BD%BD%E6%B5%8B%E8%AF%95%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8%E5%85%B6%E5%AE%83">https://github.com/tandi960505/Moka7)，将其拉下载测试或者使用其它</a> SDK 来操作 PLC 也可以</li></ol><h2 id="仿真PLC配置"><a href="#仿真PLC配置" class="headerlink" title="仿真PLC配置"></a>仿真PLC配置</h2><p>导入项目到step7</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/1.png"></p><p>打开plcsim，这就是plc的仿真机</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/2.png"></p><p>将当前项目下载到仿真机上</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/3.png"></p><p>接下来以管理员身份打开NetToPLCsim进行配置，将仿真的plc地址和端口映射到当前主机上</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/4.png"></p><p>点击ok后，再点击NetToPLCsim菜单栏上的tools</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/5.png"></p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/6.png"></p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/7.png"></p><p>点击start server运行NetToPLCsim</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/8.png"></p><p>至此仿真plc的以太网通讯就配置完成了，是不是很简单…</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>你可以像我一样，先再cmd中使用telnet来看看主机上的102端口是否已经开放</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/9.png"></p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/10.png"></p><p>接下来使用程序来连接plc做测试操作，首先启动plc仿真机</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/11.png"></p><p>启动仿真机后，下图可以观察到DB1.2这个地址下的值不断在递增</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/12.png"></p><p>最后使用snap7来操作plc仿真机，看看是否已经可以接通可用</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/13.png"></p><p>完.</p><h2 id="拓展内容"><a href="#拓展内容" class="headerlink" title="拓展内容"></a>拓展内容</h2><p>附上一张 Siemens S7-300 PLC 真机照片</p><p><img src="/%E4%BD%BF%E7%94%A8Step7+PLCsim+NetToPLCsim%E4%BB%BF%E7%9C%9FPLC%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%80%9A%E4%BF%A1/14.png"></p><p>plc是可扩展的，功能模块通过插拔式添加或者移除；在最左边这块就是以太网模块，即有了这个以太网模块plc就可以直接使用tcpip协议和上位机进行直接通讯；</p><p>另外，如果plc的cpu类型带有PN&#x2F;PD，那么无需这个以太网模块可以直接使用tcpip协议和上位机进行直接通讯，其实就是相当于内置了一个网线端口；</p><p>再是，型号比较新的西门子plc，如s7-1500是自带OPCUA-SERVER的</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 物联网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本地缓存</title>
      <link href="/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
      <url>/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="什么是本地缓存？"><a href="#什么是本地缓存？" class="headerlink" title="什么是本地缓存？"></a>什么是本地缓存？</h2><p>本地缓存又称为进程缓存，顾名思义本地缓存是与应用处于统一进程同一空间的。这点与分布式缓存形成了鲜明的对比。</p><h2 id="缓存的意义"><a href="#缓存的意义" class="headerlink" title="缓存的意义"></a>缓存的意义</h2><p>不论是本地缓存还是分布式缓存，其主要目的都是为了减少不必要的数据库访问。因为从系统角度来看往往较早出现瓶颈的地方都是数据库。这么说的原因有两个，一是因为 JDBC 操作是阻塞式的，二是因为数据库存在大量的磁盘IO操作，而且连接数上也存在局限（受限于所在操作系统tcp最大连接数 ulimit -n）。那么从以上两点来看，降低数据库访问压力是势在必行的事情，而缓存就能有效地做到这点。</p><h2 id="使用本地缓存需要注意的问题"><a href="#使用本地缓存需要注意的问题" class="headerlink" title="使用本地缓存需要注意的问题"></a>使用本地缓存需要注意的问题</h2><ul><li><strong>缓存一致性问题：</strong>举个例子，假设现在系统使用Nginx进行反向代理实现负载均衡，既将原来的单个节点横向扩展成多个节点，那么这时对于本地缓存而言因为它是线程独立的，所以每个节点上的本地缓存内容都可能不一样，这是使用本地缓存时要注意的</li><li><strong>缓存对象的存活时间：</strong>使用本地缓存时要避免缓存堆积从而占用内存空间，因此应该使用特定的缓存清空策略来定期去除那些<code>无用缓存</code></li><li><strong>微服务不建议使用本地缓存：</strong>因为本地缓存存在一致性问题，所以本地缓存会让微服务节点带上状态。鉴于微服务设计原则因此并不推荐在微服务中使用本地缓存（微服务应该是无状态的）</li></ul><h2 id="缓存驱逐策略"><a href="#缓存驱逐策略" class="headerlink" title="缓存驱逐策略"></a>缓存驱逐策略</h2><p>FIFO(first in first out)</p><ul><li>先进先出算法。通过一个带有长度限制的 FIFO 队列实现，当队列满了的时候再往队中添加缓存的话，那么队列头的缓存就会率先被剔除</li></ul><p>LRU(least recently used)</p><ul><li>最少使用算法。可以使用k-v节点形成固定长度的队列，再使用头插法将超出容量的尾部缓存剔除</li></ul><p>LFU(less frequently used)</p><ul><li>最不常用算法。可以根据缓存的被使用次数来判断，通过清除哪些使用次数较少的缓存来释放内存空间</li></ul><h2 id="SpringBoot本地缓存API"><a href="#SpringBoot本地缓存API" class="headerlink" title="SpringBoot本地缓存API"></a>SpringBoot本地缓存API</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动本地缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 启用本地缓存</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认会将方法参数列表作为缓存对象的key</span></span><br><span class="line"><span class="comment">// 如可有多个参数的话，也可以使用key参数来指定</span></span><br><span class="line"><span class="comment">// @Cacheable(cacheNames = &quot;findById&quot;, key=&quot;#id&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;findById&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;Person&gt; <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> personRepository.findById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;findAll&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> personRepository.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存条件age&gt;100</span></span><br><span class="line"><span class="meta">@Cacheable(value=&quot;getPerson&quot;, key=&quot;#name&quot;, condition=&quot;#age&gt;100&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">getPerson</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name, age); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age==100不缓存</span></span><br><span class="line"><span class="meta">@Cacheable(value=&quot;getPerson2&quot;, unless=&quot;#age==100&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">getPerson2</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name, age); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和@Cacheable区别在于@CachePut会保证方法体执行</span></span><br><span class="line"><span class="comment">// 当@Cacheable发现传入的参数有缓存会直接返回缓存而不会执行方法体</span></span><br><span class="line"><span class="meta">@CachePut(value=&quot;getPerson3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">getPerson3</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;into getPerson3()&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name, age); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清楚指定cacheNames的缓存对象</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;remove&quot;)</span></span><br><span class="line"><span class="comment">// 清除在cacheNames在特定key的缓存对象</span></span><br><span class="line"><span class="comment">// @CacheEvict(cacheNames = &quot;remove&quot;, key = &quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    personRepository.deleteById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有缓存</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanCache</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>Spring本地缓存默认采用JDK动态代理来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(CachingConfigurationSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCaching &#123;</span><br><span class="line">    <span class="comment">// 采用的切面模式</span></span><br><span class="line">AdviceMode <span class="title function_">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存方式是 key-value 形式（SpringBoot默认情况下会使用 ConcurrentHashMap 来保存缓存对象）</p><p><img src="/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/001.png"></p><h3 id="SpringBoot-Cache整合Redis（分布式缓存）"><a href="#SpringBoot-Cache整合Redis（分布式缓存）" class="headerlink" title="SpringBoot Cache整合Redis（分布式缓存）"></a>SpringBoot Cache整合Redis（分布式缓存）</h3><h4 id="整合案例"><a href="#整合案例" class="headerlink" title="整合案例"></a>整合案例</h4><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>整合配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring cache 整合 redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// k-v序列化器</span></span><br><span class="line">        <span class="keyword">final</span> RedisSerializationContext.<span class="type">SerializationPair</span> <span class="variable">serializeKeys</span> <span class="operator">=</span></span><br><span class="line">                RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getStringSerializer());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> RedisSerializationContext.<span class="type">SerializationPair</span> <span class="variable">serializeValues</span> <span class="operator">=</span></span><br><span class="line">                RedisSerializationContext.SerializationPair.fromSerializer(redisTemplate.getValueSerializer());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Redis缓存配置</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">defaultCacheConfiguration</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .serializeKeysWith(serializeKeys)</span><br><span class="line">                .serializeValuesWith(serializeValues)</span><br><span class="line">                .disableCachingNullValues() <span class="comment">// 禁止缓存null值</span></span><br><span class="line">                .entryTtl(Duration.ofHours(<span class="number">1</span>)); <span class="comment">// 统一缓存1个小时</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据缓存配置构造出管缓存理器</span></span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">redisCacheManager</span> <span class="operator">=</span> RedisCacheManager.RedisCacheManagerBuilder</span><br><span class="line">                .fromConnectionFactory(redisTemplate.getConnectionFactory())</span><br><span class="line">                .cacheDefaults(defaultCacheConfiguration)</span><br><span class="line">                .transactionAware()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试用实体</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ThreadLocalRandom</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(cacheNames = &quot;findById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">findById</span><span class="params">(String id, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .name(<span class="string">&quot;Sam-&quot;</span> + random.nextInt())</span><br><span class="line">                .age(age)</span><br><span class="line">                .address(<span class="string">&quot;广东省广州市xxx&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>存在问题</p></blockquote><ul><li>存在局限性，无法根据需要来独立设置缓存的过期时间</li></ul><h4 id="自定义缓存注解-解决-Cacheble局限"><a href="#自定义缓存注解-解决-Cacheble局限" class="headerlink" title="自定义缓存注解 - 解决@Cacheble局限"></a>自定义缓存注解 - 解决@Cacheble局限</h4><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>自定义缓存注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CustomCache &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;cacheKey&quot;)</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    String <span class="title function_">cacheKey</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">expires</span><span class="params">()</span>; <span class="comment">// 单位:秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注解处理类（切面类）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCacheAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(customCache)&quot;)</span> <span class="comment">// 拦截注解 TestAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">(CustomCache customCache)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut(customCache)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint, CustomCache customCache)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化和反序列化工具：Gson</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表达式解析器 和 参数列表变量名发现器</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ParameterNameDiscoverer</span> <span class="variable">nameDiscoverer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalVariableTableParameterNameDiscoverer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前切入点方法</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前切入点方法的参数列表变量名称和值</span></span><br><span class="line">        String[] params = nameDiscoverer.getParameterNames(method);</span><br><span class="line">        <span class="keyword">final</span> Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建表达式解析目标（根对象）</span></span><br><span class="line">        <span class="comment">// 注意，如果根对象经常变动则不建议使用解析上下万，因为解析上下文会缓存值，如果根对象不变则建议使用解析上下文</span></span><br><span class="line">        Map&lt;String, Object&gt; methodParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">            methodParams.put(params[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造解析上下文</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        EvaluationContext context = new StandardEvaluationContext();</span></span><br><span class="line"><span class="comment">        for (int len = 0; len &lt; params.length; len++) &#123;</span></span><br><span class="line"><span class="comment">            context.setVariable(params[len], args[len]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">el</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            el = <span class="string">&quot;&quot;</span>.equals(customCache.value())?customCache.cacheKey():customCache.value();</span><br><span class="line">            expression = parser.parseExpression(el);<span class="comment">// 解析表达式</span></span><br><span class="line">            condition = expression.getValue(methodParams, String.class);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;解析异常，当前注解的表达式为：&quot;</span> + el);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EvaluationException e2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;求值异常，当前注解的表达式为：&quot;</span> + el);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否已经存在缓存</span></span><br><span class="line">        <span class="keyword">if</span> (redisTemplate.hasKey(condition)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;从缓存中获取, ttl = &quot;</span> + redisTemplate.getExpire(condition));</span><br><span class="line">            jsonObject = (String)redisTemplate.opsForValue().get(condition);</span><br><span class="line">            <span class="keyword">return</span> gson.fromJson(jsonObject, Person.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;从数据库中获取&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行完切入点方法所返回的值</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">methodInvokeResult</span> <span class="operator">=</span> (Person)proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将方法返回结果缓存</span></span><br><span class="line">        jsonObject = gson.toJson(methodInvokeResult);</span><br><span class="line">        redisTemplate.opsForValue().set(condition, jsonObject, customCache.expires(), TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> methodInvokeResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ThreadLocalRandom</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以ID值作为缓存key</span></span><br><span class="line">    <span class="comment">// 注意：[&#x27;id&#x27;] 是用于获取 map 中的值的表达式</span></span><br><span class="line">    <span class="comment">// 如果是从表达式上下文中获取格式应该是 #id</span></span><br><span class="line">    <span class="meta">@CustomCache(cacheKey = &quot;[&#x27;id&#x27;]&quot;, expires = 120)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">findById</span><span class="params">(String id, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .name(<span class="string">&quot;Sam-&quot;</span> + random.nextInt())</span><br><span class="line">                .age(age)</span><br><span class="line">                .address(<span class="string">&quot;广东省广州市xxx&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用的本地缓存"><a href="#常用的本地缓存" class="headerlink" title="常用的本地缓存"></a>常用的本地缓存</h2><h3 id="ConcurrentHashMap（SpringBoot默认）"><a href="#ConcurrentHashMap（SpringBoot默认）" class="headerlink" title="ConcurrentHashMap（SpringBoot默认）"></a>ConcurrentHashMap（SpringBoot默认）</h3><p>如果没有添加第三方 Cache 依赖的话，SpringBoot 默认会启动 SimpleCacheConfiguration 来对CacheManager做初始化操作</p><p><img src="/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/002.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(CacheManager.class)</span></span><br><span class="line"><span class="meta">@Conditional(CacheCondition.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleCacheConfiguration</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CacheProperties cacheProperties;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CacheManagerCustomizers customizerInvoker;</span><br><span class="line">SimpleCacheConfiguration(CacheProperties cacheProperties, CacheManagerCustomizers customizerInvoker) &#123;</span><br><span class="line"><span class="built_in">this</span>.cacheProperties = cacheProperties;</span><br><span class="line"><span class="built_in">this</span>.customizerInvoker = customizerInvoker;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ConcurrentMapCacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ConcurrentMapCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcurrentMapCacheManager</span>();</span><br><span class="line">List&lt;String&gt; cacheNames = <span class="built_in">this</span>.cacheProperties.getCacheNames();</span><br><span class="line"><span class="keyword">if</span> (!cacheNames.isEmpty()) &#123;</span><br><span class="line">cacheManager.setCacheNames(cacheNames);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.customizerInvoker.customize(cacheManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EhCache"><a href="#EhCache" class="headerlink" title="EhCache"></a>EhCache</h3><p>Ehcache是目前比较流行的纯 Java 开源缓存框架。它的特点主要体现在配置简单、结构清晰 和 功能强大。是一个非常轻量级的缓存实现。例如我们常使用的ORM框架 Hibernate 就默认使用EhCache来做二级缓存</p><blockquote><p>在SpringBoot中使用EhCache</p></blockquote><p>1）添加依赖并添加@EnableCaching</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）在类路径下添加 ehcache.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 指定一个文件目录，当Ehcache把数据写到硬盘上时，将把数据写到这个文件目录下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;java.io.tmpdir&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设定缓存的默认数据过期策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设定具体的命名缓存的数据过期策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;person1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">eternal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;perosn2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;4000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>cache标签配置参数：</strong></p><ul><li><strong>name：</strong>缓存名称</li><li><strong>maxElementsInMemory：</strong>内存中最大缓存对象数</li><li><strong>maxElementsOnDisk：</strong>硬盘中最大缓存对象数，若是0表示无穷大</li><li><strong>eternal：</strong>true表示对象永不过期，此时会忽略timeToIdleSeconds和timeToLiveSeconds属性，<code>默认为false</code></li><li><strong>overflowToDisk：</strong>true表示当内存缓存的对象数目达到了maxElementsInMemory界限后，会把溢出的对象写到硬盘缓存中。<code>注意：如果缓存的对象要写入到硬盘中的话，则该对象必须实现了Serializable接口才行</code></li><li><strong>diskSpoolBufferSizeMB：</strong>磁盘缓存区大小，默认为30MB。每个Cache都应该有自己的一个缓存区</li><li><strong>diskPersistent：</strong>是否缓存虚拟机重启期数据</li><li><strong>diskExpiryThreadIntervalSeconds：</strong>磁盘失效线程运行时间间隔，默认为120秒</li><li><strong>timeToIdleSeconds：</strong> 设定允许对象处于空闲状态的最长时间，以秒为单位。当对象自从最近一次被访问后，如果处于空闲状态的时间超过了timeToIdleSeconds属性值，这个对象就会过期，EHCache将把它从缓存中清空。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地处于空闲状态</li><li><strong>timeToLiveSeconds：</strong>设定对象允许存在于缓存中的最长时间，以秒为单位。当对象自从被存放到缓存中后，如果处于缓存中的时间超过了 timeToLiveSeconds属性值，这个对象就会过期，Ehcache将把它从缓存中清除。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地存在于缓存中。timeToLiveSeconds必须大于timeToIdleSeconds属性，才有意义</li><li>**<code>memoryStoreEvictionPolicy：</code>**当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。可选策略有：<code>LRU（最近最少使用，默认策略）</code>、FIFO（先进先出）、LFU（最少命中次数）</li></ul><p>3）使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;person1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;Person&gt; <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> personRepository.findById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;person2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> personRepository.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Caffeine（推荐）"><a href="#Caffeine（推荐）" class="headerlink" title="Caffeine（推荐）"></a>Caffeine（推荐）</h3><blockquote><p>简介</p></blockquote><p>本质上来说 Caffeine 是用 Java 8 重写 Guava Cache 的产物。在性能方面 Caffeine 毋庸置疑是目前最高效的本地缓存实现。</p><p><img src="/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/003.png"></p><p>Caffeine 采用一种名为 Window TinyLFU（LRU+LFU结合）的缓存驱逐策略来释放内存占用空间。它的基本原理是先用一种叫 CountMin Sketch 的机制过滤缓存（主要是记录下命中次数较高的缓存），然后当 Window TinyLFU 要剔除缓存时会先到 CountMin Sketch 中检查，看看 CountMin Sketch 中有没有命中次数高于当前正要剔除的缓存的缓存，如果有就将其纳入到正式缓存中（可以看到 CountMin Sketch 其实起着缓冲的作用）。这样做的好处是能够保证在缓存的对象都是高命中的热点数据。</p><p><img src="/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/004.png"></p><p>除了 CountMin Sketch 机制之外，Window TinyLFU 还用 Segmented LRU 来管理缓存。例如上图所示，绿色部分被称为试用段（probationary segment），紫色部分就是上面提到的 CountMin Sketch ，而红色部分叫保护段（protected segment）。其中保护段的上限为整个 Segmented LRU 的80%。当处于 probationary segment 的缓存对象被连续访问，它就会在 CountMin Sketch 得到晋升 protected segment 的机会，而因为 protected segment 上限可以达到整个 Segmented LRU 的80%，所以在后续的访问中缓存会被不断晋升直到80%这个临界点，这时缓存对象可能因为不满足继续停留就会被驱逐出 Segmented LRU 而回到 probationary segment中，而有资格停留的缓存对象则会继续晋升直到够条件被驱逐为止。这样做的原因是确保热点缓存长期驻留在 Segmented LRU 内，而将那么相对来说较为冷门的缓存驱逐出 Segmented LRU</p><p><strong>SpringBoot中使用Caffeine</strong></p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Caffeine</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">caffeine</span></span><br><span class="line">    <span class="attr">cache-names:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">person1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">person2</span></span><br><span class="line">    <span class="attr">caffeine:</span></span><br><span class="line">      <span class="attr">spec:</span> <span class="string">maximumSize=100,expireAfterWrite=60s</span></span><br></pre></td></tr></table></figure><p><strong>Caffeine配置说明：</strong></p><ul><li>initialCapacity&#x3D;[integer]: 初始的缓存空间大小</li><li>maximumSize&#x3D;[long]: 缓存的最大数量</li><li>maximumWeight&#x3D;[long]: 缓存的最大权重</li><li>expireAfterAccess&#x3D;[duration]: 最后一次写入或访问后经过固定时间过期</li><li>expireAfterWrite&#x3D;[duration]: 最后一次写入后经过固定时间过期</li><li>refreshAfterWrite&#x3D;[duration]: 创建缓存或者最近一次更新缓存后经过固定的时间间隔，刷新缓存</li><li>weakKeys:  打开key的弱引用，优化GC回收</li><li>weakValues：打开value的弱引用，优化GC回收</li><li>softValues：打开value的软引用，优化GC回收</li><li>recordStats：开发统计功能</li></ul><p><strong>注意：</strong></p><ul><li>expireAfterWrite和expireAfterAccess同事存在时，以expireAfterWrite为准。</li><li>maximumSize和maximumWeight不可以同时使用</li><li>weakValues和softValues不可以同时使用</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html">Design Of A Modern Cache</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公共基础服务之Prometheus监控入门</title>
      <link href="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/"/>
      <url>/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="应用的监控方式有那些？"><a href="#应用的监控方式有那些？" class="headerlink" title="应用的监控方式有那些？"></a>应用的监控方式有那些？</h2><p>Logging：系统日志，最常用的监控手段，特点是结构化、离散、文本形式</p><p>Tracing：请求链追踪，监控微服务架构下请求在多个节点之间的调用流程</p><p>Metrics：度量&#x2F;指标，即单位时间内应用系统的指标，支持聚合运算、图形展示</p><p>Healthchecks：健康检查，专门用于检查应用功能是否可用（健康）的endpoint</p><h2 id="简单了解一下时间序列数据库"><a href="#简单了解一下时间序列数据库" class="headerlink" title="简单了解一下时间序列数据库"></a>简单了解一下时间序列数据库</h2><ul><li>时间序列数据，通俗点说就是某个时间点所产生的数据</li><li>时间序列数据库指的就是用于保存一系列有序的时间点指标数据的数据库</li><li>比较流行的时间序列数据库有如<code>InfluxDB</code>、RRDtool、Kdb+、<code>Prometheus</code></li></ul><h2 id="关于Prometheus"><a href="#关于Prometheus" class="headerlink" title="关于Prometheus"></a>关于Prometheus</h2><ul><li>一款开源监控(Metrics)工具，本质是 golang 实现的一款时间序列数据库（TSDB）</li><li>支持多维度监控（标签，既即使Metrics一样但标签不同的话也是不同的时间序列数据）和Metrics的拉模式</li><li>支持告警功能</li><li>社区活跃，有各种的exporters（相当与agent，作用是无需修改被监控系统的情况下获取起Metrics信息）</li><li>单机性能优异，每秒可消费百万级别的时间序列和上千的targets（监控目标）</li></ul><h2 id="Prometheus架构"><a href="#Prometheus架构" class="headerlink" title="Prometheus架构"></a>Prometheus架构</h2><blockquote><p>以下为官网给出的架构图</p></blockquote><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/001.png"></p><p>从架构图中可以简单了解到如下内容：</p><ul><li>支持 pull 形式获取 metrics 数据，如拉取 exporters、pushgateway</li><li>除了支持将监控目标配置到本地之外还支持服务发现的形式来动态获取监控目标。如（DNS、Consul、K8s）</li><li>支持当某个指标到得设定阀值时将告警信息推送给Alertmanager（主要作用是将告警信息分类去重以及转发到特定的目标，如email、钉钉）</li><li>支持使用 PromQL 来查询 Prometheus 所监控的系统应用的指标</li><li>支持不同的UI界面，如自带的 Prometheus web UI 还有比较流行的 Grafana 并支持 API 形式获取监控指标</li><li>通过 TSDB 将时间序列数据持久化到磁盘上</li></ul><h2 id="Prometheus支持的Metrics种类"><a href="#Prometheus支持的Metrics种类" class="headerlink" title="Prometheus支持的Metrics种类"></a>Prometheus支持的Metrics种类</h2><ul><li><strong>Counter(计数器)：</strong><ul><li>始终增加</li><li>http请求数、浏览数等等</li></ul></li><li><strong>Gauge(测量仪)</strong><ul><li>当前值的一个快照测量，可增加可减少</li><li>磁盘使用率、用户在线人数</li></ul></li><li><strong>Histogram(直方图&#x2F;柱状图)</strong><ul><li>通过分桶（bucket）方式统计样本</li><li>分析数据分布情况</li></ul></li><li><strong>Summary(汇总统计)</strong><ul><li>根据样本统计出百分比</li><li>分析数据分布情况</li></ul></li></ul><h2 id="关于metrics和metrics采集方式"><a href="#关于metrics和metrics采集方式" class="headerlink" title="关于metrics和metrics采集方式"></a>关于metrics和metrics采集方式</h2><p><strong>1）metrics说明</strong></p><p>以prometheus的 <code>/metrics</code>下的一个metrics为例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prometheus_http_request_duration_seconds_bucket&#123;handler=&quot;/&quot;,le=&quot;0.1&quot;&#125;</span><br></pre></td></tr></table></figure><p>prometheus_http_request_duration_seconds_bucket</p><ul><li>metrics名称</li></ul><p>{handler&#x3D;”&#x2F;“,le&#x3D;”0.1”}：</p><ul><li>其中handler和le在prometheus称之为标签（维度）</li></ul><p><strong>2）metrics采集方式</strong></p><p>prometheus支持两种pull方式：</p><ul><li>直接采集：如SpringBoot中的Actuator或prometheus模块可以直接提供metrics的采集endpoint</li><li>间接采集：如MySQL一样已经成型的产品，可以通过对用的exporters来进行简介采集</li></ul><h2 id="Prometheus搭建"><a href="#Prometheus搭建" class="headerlink" title="Prometheus搭建"></a>Prometheus搭建</h2><p>官网下载地址：<a href="https://prometheus.io/download/">https://prometheus.io/download/</a>，解压如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  prometheus-2.12.0-rc.0.linux-amd64 ll</span><br><span class="line">总用量 130M</span><br><span class="line">drwxr-xr-x 2 tandi tandi 4.0K  8月 15 03:36 console_libraries</span><br><span class="line">drwxr-xr-x 2 tandi tandi 4.0K  8月 15 03:36 consoles</span><br><span class="line">drwxr-xr-x 5 tandi tandi 4.0K  8月 18 15:00 data</span><br><span class="line">-rw-r--r-- 1 tandi tandi  12K  8月 15 03:36 LICENSE</span><br><span class="line">-rw-r--r-- 1 tandi tandi 2.8K  8月 15 03:36 NOTICE</span><br><span class="line">-rwxr-xr-x 1 tandi tandi  81M  8月 15 01:44 prometheus</span><br><span class="line">-rw-r--r-- 1 tandi tandi 1.2K  8月 18 12:55 prometheus.yml</span><br><span class="line">-rwxr-xr-x 1 tandi tandi  49M  8月 15 01:46 promtool</span><br></pre></td></tr></table></figure><p>prometheus.yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局参数配置</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment"># 需要注意的是，如果刷新和统计频率过于频繁会对当前机器造成性能问题</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment"># 刷新频率</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># 统计频率</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 告警配置</span></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控规则</span></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控目标配置</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">  <span class="comment"># 默认访问目标uri&#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># 默认使用协议 &#x27;http&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure><p>启动prometheus，访问 localhost:9090</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prometheus</span><br></pre></td></tr></table></figure><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/002.png"></p><h2 id="监控例子-MySQL监控"><a href="#监控例子-MySQL监控" class="headerlink" title="监控例子 - MySQL监控"></a>监控例子 - MySQL监控</h2><p>&amp;emsp;&amp;emsp;在上面已经提到过，Prometheus 支持两种 metrics 采集方式：直接采集、间接采集。因为 MySQL 是一个成型的产品，所以这里采用间接采集 metrics，即需要使用 exporter。</p><p>MySQL 的 exporter 下载地址：<a href="https://github.com/prometheus/mysqld_exporter/releases">https://github.com/prometheus/mysqld_exporter&#x2F;releases</a></p><p><strong>1）解压如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  mysqld_exporter-0.12.1.linux-amd64 ll</span><br><span class="line">总用量 15M</span><br><span class="line">-rw-r--r-- 1 tandi tandi 12K  7月 29 20:47 LICENSE</span><br><span class="line">-rwxr-xr-x 1 tandi tandi 15M  7月 29 20:36 mysqld_exporter</span><br><span class="line">-rw-r--r-- 1 tandi tandi  65  7月 29 20:47 NOTICE</span><br></pre></td></tr></table></figure><p><strong>2）在 mysqld_exporter 根目录添加用于访问MySQL的配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="comment"># mysql所在ip</span></span><br><span class="line"><span class="attr">host</span>=<span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># mysql用户密码</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root </span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p><strong>3）启动exporter</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  mysqld_exporter-0.12.1.linux-amd64 ./mysqld_exporter --config.my-cnf=<span class="string">&quot;my.cnf&quot;</span></span><br></pre></td></tr></table></figure><p>启动成功后会输出如下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INFO[0000] Starting mysqld_exporter (version=0.12.1, branch=HEAD, revision=48667bf7c3b438b5e93b259f3d17b70a7c9aff96)  <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:257&quot;</span></span><br><span class="line">INFO[0000] Build context (go=go1.12.7, user=root@0b3e56a7bc0a, <span class="built_in">date</span>=20190729-12:35:58)  <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:258&quot;</span></span><br><span class="line">INFO[0000] Enabled scrapers:                             <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:269&quot;</span></span><br><span class="line">INFO[0000]  --collect.global_status                      <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[0000]  --collect.global_variables                   <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[0000]  --collect.slave_status                       <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[0000]  --collect.info_schema.innodb_cmp             <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[0000]  --collect.info_schema.innodb_cmpmem          <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[0000]  --collect.info_schema.query_response_time    <span class="built_in">source</span>=<span class="string">&quot;mysqld_exporter.go:273&quot;</span></span><br><span class="line">INFO[0000] Listening on :9104        </span><br></pre></td></tr></table></figure><p><strong>4）在prometheus配置文件中将mysqld_exporter配置为监控目标</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控目标配置</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">  <span class="comment"># 默认访问目标uri&#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class="line">    <span class="comment"># 默认使用协议 &#x27;http&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># ########################  MySQL监控 ########################</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">    <span class="comment"># scrape_interval: 5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="comment"># 9104是Exporter端口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9104&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>5）重启prometheus访问 <a href="http://localhost:9090/targets">http://localhost:9090/targets</a> 如果mysql为up表示已经配置成功，可通过 <a href="http://localhost:9090/graph">http://localhost:9090/graph</a> 进行PromQL进行指标查询</strong></p><h2 id="监控例子-Linux"><a href="#监控例子-Linux" class="headerlink" title="监控例子 - Linux"></a>监控例子 - Linux</h2><p>Linux同样是成形产品，所以需要exporter。监控Linux的exporter下载地址：<a href="https://github.com/prometheus/node_exporter/releases">https://github.com/prometheus/node_exporter&#x2F;releases</a></p><p><strong>1）解压如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  node_exporter-0.18.1.linux-amd64 ll</span><br><span class="line">总用量 17M</span><br><span class="line">-rw-r--r-- 1 tandi tandi 12K  6月  5 00:50 LICENSE</span><br><span class="line">-rwxr-xr-x 1 tandi tandi 17M  6月  5 00:41 node_exporter</span><br><span class="line">-rw-r--r-- 1 tandi tandi 463  6月  5 00:50 NOTICE</span><br></pre></td></tr></table></figure><p><strong>2）启动exporter</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  node_exporter-0.18.1.linux-amd64 ./node_exporter</span><br></pre></td></tr></table></figure><p>启动成功会打印如下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">INFO[0000] Starting node_exporter (version=0.18.1, branch=HEAD, revision=3db77732e925c08f675d7404a8c46466b2ece83e)  <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:156&quot;</span></span><br><span class="line">INFO[0000] Build context (go=go1.12.5, user=root@b50852a1acba, <span class="built_in">date</span>=20190604-16:41:18)  <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:157&quot;</span></span><br><span class="line">INFO[0000] Enabled collectors:                           <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:97&quot;</span></span><br><span class="line">INFO[0000]  - arp                                        <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - bcache                                     <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - bonding                                    <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - conntrack                                  <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - cpu                                        <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - cpufreq                                    <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - diskstats                                  <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - edac                                       <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - entropy                                    <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - filefd                                     <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - filesystem                                 <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - hwmon                                      <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - infiniband                                 <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - ipvs                                       <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - loadavg                                    <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - mdadm                                      <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - meminfo                                    <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - netclass                                   <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - netdev                                     <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - netstat                                    <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - nfs                                        <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - nfsd                                       <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - pressure                                   <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - sockstat                                   <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - <span class="built_in">stat</span>                                       <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - textfile                                   <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - time                                       <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - timex                                      <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - <span class="built_in">uname</span>                                      <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - vmstat                                     <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - xfs                                        <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000]  - zfs                                        <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:104&quot;</span></span><br><span class="line">INFO[0000] Listening on :9100                            <span class="built_in">source</span>=<span class="string">&quot;node_exporter.go:170&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3）在prometheus配置文件中将node_exporter配置为监控目标</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控目标配置</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># MySQL监控</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9104&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Linux监控</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9100&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>4) 重启prometheus访问 <a href="http://localhost:9090/targets">http://localhost:9090/targets</a> 如果linux为up表示已经配置成功，可通过 <a href="http://localhost:9090/graph">http://localhost:9090/graph</a> 进行PromQL进行指标查询</strong></p><h2 id="搭建Dashbord-Grafana"><a href="#搭建Dashbord-Grafana" class="headerlink" title="搭建Dashbord - Grafana"></a>搭建Dashbord - Grafana</h2><p>Grafana 提供更加丰富的图形界面来展示 Prometheus 数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.grafana.com/oss/release/grafana-6.3.3.linux-amd64.tar.gz </span><br><span class="line">tar -zxvf grafana-6.3.3.linux-amd64.tar.gz </span><br></pre></td></tr></table></figure><p><strong>1）解压如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  grafana-6.3.3 ll</span><br><span class="line">总用量 52K</span><br><span class="line">drwxr-xr-x  2 tandi tandi 4.0K  8月 15 17:34 bin</span><br><span class="line">drwxr-xr-x  3 tandi tandi 4.0K  8月 18 11:04 conf</span><br><span class="line">drwxr-xr-x  5 tandi tandi 4.0K  8月 18 15:48 data</span><br><span class="line">-rw-r--r--  1 tandi tandi  12K  8月 15 17:24 LICENSE</span><br><span class="line">-rw-r--r--  1 tandi tandi  108  8月 15 17:24 NOTICE.md</span><br><span class="line">drwxr-xr-x 13 tandi tandi 4.0K  8月 15 17:34 public</span><br><span class="line">-rw-r--r--  1 tandi tandi 6.0K  8月 15 17:24 README.md</span><br><span class="line">drwxr-xr-x  9 tandi tandi 4.0K  8月 18 12:05 scripts</span><br><span class="line">drwxr-xr-x  3 tandi tandi 4.0K  8月 15 17:34 tools</span><br><span class="line">-rw-r--r--  1 tandi tandi    5  8月 15 17:34 VERSION</span><br></pre></td></tr></table></figure><p>对与 Grafana 默认配置参数使用 sqlite3 来保存，但亦可以通过 conf 文件夹下的配置文件配置成通过 MySQL 来保存。</p><p>**2）启动 Grafana **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  bin ./grafana-server    </span><br><span class="line">...</span><br><span class="line">INFO[08-18|12:58:56] HTTP Server Listen                       logger=http.server address=0.0.0.0:3000 protocol=http subUrl= socket=</span><br></pre></td></tr></table></figure><p>访问 localhost:3000 默认帐号密码 <code>admin/admin</code></p><h3 id="配置-Prometheus-的-Dashboard"><a href="#配置-Prometheus-的-Dashboard" class="headerlink" title="配置 Prometheus 的 Dashboard"></a>配置 Prometheus 的 Dashboard</h3><p>添加数据源 Prometheus</p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/003.png"></p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/004.png"></p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/005.png"></p><p>配置完成后返回主页就会看到对应的 Dashboard 选项，点击进入如下：</p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/006.png"></p><blockquote><p>注：比较推荐到 <a href="https://grafana.com/grafana/dashboards?direction=asc&orderBy=name&dataSource=prometheus">grafana_dashboards</a> 中找对应数据源的仪表盘模板。优点是只需简单地导入配置而无需手动制作</p></blockquote><h3 id="配置-MySQL-的-Dashboard"><a href="#配置-MySQL-的-Dashboard" class="headerlink" title="配置 MySQL 的 Dashboard"></a>配置 MySQL 的 Dashboard</h3><p>除了上面手动配置数据源的方式，Grafana 还支持导入 json 来配置 Dashboard。因为已经完成了prometheus监控了 MySQL 的配置，现在只需要导入 json 即可。</p><p>mysql-dashboard 的 json 下载地址：<a href="https://github.com/percona/grafana-dashboards"> https://github.com/percona/grafana-dashboards </a></p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/007.png"></p><p>可以看到，这里提供 Prometheus 监控 MySQL 和 MongoBD 后在 Grafana 上使用 Dashboard 的 json 脚本。</p><p><strong>导入json</strong></p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/008.png"></p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/009.png"></p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/010.png"></p><h3 id="配置-Linux-的-Dashboard-手动添加"><a href="#配置-Linux-的-Dashboard-手动添加" class="headerlink" title="配置 Linux 的 Dashboard - 手动添加"></a>配置 Linux 的 Dashboard - 手动添加</h3><p>右上角保存</p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/011.png"></p><p><img src="/%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E4%B9%8BPrometheus%E7%9B%91%E6%8E%A7%E5%85%A5%E9%97%A8/012.png"></p><h2 id="PromSQL"><a href="#PromSQL" class="headerlink" title="PromSQL"></a>PromSQL</h2><p>因为使用比较简单所以建议参考官方文档即可</p><p><a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">https://prometheus.io/docs/prometheus/latest/querying/basics/</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM入门</title>
      <link href="/jvm%E6%B7%B1%E5%85%A5/"/>
      <url>/jvm%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年10月23日22:53:01 — 删除即时编译器和GC相关内容</li></ul><h2 id="JDK包含什么"><a href="#JDK包含什么" class="headerlink" title="JDK包含什么"></a>JDK包含什么</h2><p><img src="/jvm%E6%B7%B1%E5%85%A5/1.png"></p><h2 id="类的基本结构"><a href="#类的基本结构" class="headerlink" title="类的基本结构"></a>类的基本结构</h2><p>类结构本身比较复杂，需要单开一篇文章，但如果只是为了了解类加载过程，那么简单了解一下就可以了</p><h3 id="一个简单的-Java-类"><a href="#一个简单的-Java-类" class="headerlink" title="一个简单的 Java 类"></a>一个简单的 Java 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiJvm</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello jvm!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">Q:什么是字面量？ </span><br><span class="line">A:可以简单理解为直接以值的形式出现在代码中的标记</span><br><span class="line"></span><br><span class="line">Q:什么是符号引用？</span><br><span class="line">A:类和接口的全限定名称、字段名称和描述、方法名称和描述</span><br><span class="line"></span><br><span class="line">Compiled from <span class="string">&quot;HiJvm.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiJvm</span></span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span> <span class="comment">// jdk1.8</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 常量池：可以简单为是一个用来存储类信息数据的容器</span></span><br><span class="line"><span class="comment">// 常量池会在类加载阶段转移到内存中，且在解析操作中符号引用会被解析为直接引用</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">8.</span>#<span class="number">25</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">7.</span>#<span class="number">26</span>         <span class="comment">// HiJvm.num1:I</span></span><br><span class="line">   #<span class="number">3</span> = Fieldref           #<span class="number">27.</span>#<span class="number">28</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">4</span> = String             #<span class="number">29</span>            <span class="comment">// hello jvm!!!</span></span><br><span class="line">   #<span class="number">5</span> = Methodref          #<span class="number">30.</span>#<span class="number">31</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   #<span class="number">6</span> = Fieldref           #<span class="number">7.</span>#<span class="number">32</span>         <span class="comment">// HiJvm.num2:I</span></span><br><span class="line">   #<span class="number">7</span> = Class              #<span class="number">33</span>            <span class="comment">// HiJvm</span></span><br><span class="line">   #<span class="number">8</span> = Class              #<span class="number">34</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">9</span> = Utf8               num1</span><br><span class="line">  #<span class="number">10</span> = Utf8               I</span><br><span class="line">  #<span class="number">11</span> = Utf8               num2</span><br><span class="line">  #<span class="number">12</span> = Utf8               num3</span><br><span class="line">  #<span class="number">13</span> = Utf8               ConstantValue</span><br><span class="line">  #<span class="number">14</span> = Integer            <span class="number">3</span></span><br><span class="line">  #<span class="number">15</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">16</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">17</span> = Utf8               Code</span><br><span class="line">  #<span class="number">18</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">19</span> = Utf8               getNum</span><br><span class="line">  #<span class="number">20</span> = Utf8               ()I</span><br><span class="line">  #<span class="number">21</span> = Utf8               sayHi</span><br><span class="line">  #<span class="number">22</span> = Utf8               &lt;clinit&gt;</span><br><span class="line">  #<span class="number">23</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">24</span> = Utf8               HiJvm.java</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 字段或方法的部分符号引用</span></span><br><span class="line">  #<span class="number">25</span> = NameAndType        #<span class="number">15</span>:#<span class="number">16</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">26</span> = NameAndType        #<span class="number">9</span>:#<span class="number">10</span>         <span class="comment">// num1:I</span></span><br><span class="line">  #<span class="number">27</span> = Class              #<span class="number">35</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">28</span> = NameAndType        #<span class="number">36</span>:#<span class="number">37</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">29</span> = Utf8               hello jvm!!!</span><br><span class="line">  #<span class="number">30</span> = Class              #<span class="number">38</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">31</span> = NameAndType        #<span class="number">39</span>:#<span class="number">40</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">32</span> = NameAndType        #<span class="number">11</span>:#<span class="number">10</span>        <span class="comment">// num2:I</span></span><br><span class="line">  #<span class="number">33</span> = Utf8               HiJvm</span><br><span class="line">  #<span class="number">34</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">35</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">36</span> = Utf8               out</span><br><span class="line">  #<span class="number">37</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">38</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">39</span> = Utf8               println</span><br><span class="line">  #<span class="number">40</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> num2;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC <span class="comment">//访问符号，表示num2被public static修饰</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> num3;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL <span class="comment">//访问符号</span></span><br><span class="line">    ConstantValue: <span class="type">int</span> <span class="number">3</span>  <span class="comment">// 常量的值，所以为什么准备阶段可以直接赋值是因为ConstantValue就在class文件中</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认构造方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HiJvm</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span>   </span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: iconst_1</span><br><span class="line">         <span class="number">6</span>: putfield      #<span class="number">2</span>                  <span class="comment">// Field num1:I</span></span><br><span class="line">         <span class="number">9</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">2</span>: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">100</span></span><br><span class="line">         <span class="number">2</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">7</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"> <span class="number">3</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String hello jvm!!!</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line"> <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当类中存在静态成员时，编译器会自动生成一个statis&#123;&#125;,用于初始化阶段初始化静态变量（类变量）</span></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: iconst_2</span><br><span class="line">         <span class="number">1</span>: putstatic     #<span class="number">6</span>                  <span class="comment">// Field num2:I</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于代码块和构造方法"><a href="#关于代码块和构造方法" class="headerlink" title="关于代码块和构造方法"></a>关于代码块和构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiJvm</span> &#123;</span><br><span class="line"><span class="comment">// 代码块</span></span><br><span class="line">&#123; System.out.println(<span class="string">&quot;code area1&quot;</span>);&#125;</span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HiJvm</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;construct method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123; System.out.println(<span class="string">&quot;code area2&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HiJvm</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">7</span>: ldc           #<span class="number">3</span>                  <span class="comment">// String code area1</span></span><br><span class="line">         <span class="number">9</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">12</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">15</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String code area2</span></span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">20</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">23</span>: ldc           #<span class="number">6</span>                  <span class="comment">// String construct method</span></span><br><span class="line">        <span class="number">25</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">28</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">7</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">4</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出代码块优先于构造器的初始化，且按照定义的顺序执行</p><h3 id="静态块"><a href="#静态块" class="headerlink" title="静态块"></a>静态块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiJvm</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">aaa</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;static code area1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">bbb</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HiJvm</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;construct method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;static code area2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> aaa;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> bbb;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">HiJvm</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">7</span>: ldc           #<span class="number">3</span>                  <span class="comment">// String construct method</span></span><br><span class="line">         <span class="number">9</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">12</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态代码块：静态代码块在初始化阶段运行，比构造方法先打印</span></span><br><span class="line"><span class="comment">// 结论：</span></span><br><span class="line"><span class="comment">//1.静态成员是按照定义顺序执行的</span></span><br><span class="line"><span class="comment">//2.不论有多少个static&#123;&#125;都会按顺序编译成1个，然后按顺序将其它静态成员包含进来</span></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: iconst_1</span><br><span class="line">         <span class="number">1</span>: putstatic     #<span class="number">5</span>                  <span class="comment">// Field aaa:I</span></span><br><span class="line">         <span class="number">4</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">7</span>: ldc           #<span class="number">6</span>                  <span class="comment">// String static code area1</span></span><br><span class="line">         <span class="number">9</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">12</span>: iconst_2</span><br><span class="line">        <span class="number">13</span>: putstatic     #<span class="number">7</span>                  <span class="comment">// Field bbb:I</span></span><br><span class="line">        <span class="number">16</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">19</span>: ldc           #<span class="number">8</span>                  <span class="comment">// String static code area2</span></span><br><span class="line">        <span class="number">21</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">16</span>: <span class="number">16</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">24</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><p>1）类定义的执行优先顺序</p><p>常量(final) &gt; 静态成员（静态变量和静态代码块，顺序执行） &gt; 普通成员(变量和代码块，顺序执行) &gt; 构造方法（普通成员就是在构造方法中初始化的）</p><p>2）初始化时机</p><ul><li>常量(final)：类加载的【准备阶段】</li><li>静态成员：类加载的【初始化阶段】</li><li>普通成员、构造方法：实例化时（new）</li></ul><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p><img src="/jvm%E6%B7%B1%E5%85%A5/2.png"></p><p>加载</p><ul><li>通过类加载器将 Class 转为二进制字节流，并将其中的静态存储结构（常量池）转化成运行时常量池，最后在堆中生成一个对应的 Class 实例，该实例用将作为作为方法区的入口</li></ul><p>连接</p><ol><li><p>验证：对字节码流进行校验（魔数、版本号、符号引用等等）</p></li><li><p>准备：给类成员分配内存并初始化</p><ol><li><p>普通成员（static）</p><img src="jvm深入/3.png" style="zoom:67%;" /></li><li><p>常量（static final）：因为常量在编译时就已经可以确认值所以在准备阶段，就可以直接赋予源码中定义的值</p></li></ol></li><li><p>解析：将静态存储结构中的符号引用解析为直接引用</p></li></ol><p>初始化</p><ul><li><p>初始化阶段是整个类加载过程的最后一个阶段</p></li><li><p>主要是对实例变量和类成员进行赋值</p></li><li><p>以下几种情况会导致类初始化</p><ul><li>类实例化</li><li>子类实例化</li><li>类静态成员被调用（包含子类.父类静态成员）</li><li>通过 Class.forName() 方法加载类</li></ul></li><li><p>以下几种情况不会导致类初始化</p><ul><li>当子类引用父类的静态成员时，只初始化父类，而不会初始化当前子类</li><li>访问常量</li><li>通过类名获取Class对象，不会触发类的初始化（A.class）</li><li>通过 ClassLoader 默认的 loadClass 方法加载类，也不会触发类初始化</li></ul></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>在《深入理解Java虚拟机》中有句这样的话，”比较两个类是否’相等‘，只有在这两个类是有同一个类加载器加载的前提下才有意义”。也就是说即使是同一个class文件，但是由不同的类加载器加载，产生出来的实例都是属于不同派系的。</p><p><img src="/jvm%E6%B7%B1%E5%85%A5/4.png"></p><ul><li><p>启动类加载器：用于加载 JVM 的依赖</p></li><li><p>扩展类加载器：用于加载 JAVA_HOME\lib\ext 目录下的依赖</p></li><li><p>应用程序类加载器：用于 classpath 下的依赖</p></li></ul><p>首先，双亲委派模型并不是一定要遵守的，而之所以建议遵守主要目的是为了防止同一个 Class 文件被不同的类加载器多次加载而导致生成多个 Class 实例。因为如果像 Object 这种顶级被加载多次，就会导致程序混乱而崩溃，这并不是一般人乐意见到的。</p><h2 id="Java-Virtual-Machine"><a href="#Java-Virtual-Machine" class="headerlink" title="Java Virtual Machine"></a>Java Virtual Machine</h2><ul><li>它是 Java 一次编译到处运行的基础</li><li>Java 通过编译器将源码编译成 JVM 识别的字节码（这是一种中间码，介乎于机器码和高级语言之间）来运行 Java 程序，而不是像 C&#x2F;C++ 那样直接编译成机器码运行</li><li>目前除了 Java 之外，还有 Kotlin、Groovy、Scala 等都基于 JVM 的，所以不要认为 JVM 只能运行 Java 程序。准确点说 JVM 识别的是字节码而不是具体语言，只不过 JVM 是从 Java 中诞生而已</li></ul><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><p><img src="/jvm%E6%B7%B1%E5%85%A5/5.png"></p><p>1）线程共享区域</p><ol><li><p>方法区</p><ul><li>方法区会在虚拟机启动时创建</li><li>用于存放已加载的：类信息（类成员、方法信息）、JIT 编译产生的机器码</li></ul></li><li><p>运行时常量池</p><ul><li>Class 被加载时会将字节码中的常量池信息转化为运行时常量池保存到内存中以提供给后续实例使用</li></ul></li><li><p>堆内存</p><ul><li>用于给对象分配内存</li></ul></li></ol><p>2）线程独占区域</p><ol><li><p>程序计数器</p><ul><li>记录程序下一条将要执行的指令位置</li></ul></li><li><p>虚拟机栈</p><ul><li><p>用于执行方法和存储变量、</p></li><li><p>栈内存属于对堆内存，虽然受到 JVM 参数限制，但这部分空间时由系统来分配和回收的</p></li><li><p>栈内存由一个个栈帧组成，而没调用一个方法就会生成一个栈帧。栈帧结构如下</p><ul><li><p>局部变量表</p></li><li><p>动态连接</p></li><li><p>常量池指针</p></li><li><p>方法出口</p></li><li><p>操作数栈（因为Java没有寄存器，所以参数传递使用操作数栈来完成）</p><p><img src="/jvm%E6%B7%B1%E5%85%A5/12.png"></p></li></ul></li></ul></li><li><p>本地方法栈</p><ul><li>本地方法栈和虚拟机栈功能是一样的，区别只在于本地方法栈针对的是 native 方法</li><li>native 方法是本地方法，由 C++ 实现</li><li>在当前Hotspot虚拟机中，虚拟机栈和本地方法栈是没有区分的</li></ul></li></ol><h2 id="JVM是如何给对象分配内存的"><a href="#JVM是如何给对象分配内存的" class="headerlink" title="JVM是如何给对象分配内存的"></a>JVM是如何给对象分配内存的</h2><h3 id="何时得知对象的大小？"><a href="#何时得知对象的大小？" class="headerlink" title="何时得知对象的大小？"></a>何时得知对象的大小？</h3><ul><li>对象所需的内存大小在类加载过程完成后就可以得知（对象头+内定义）。</li></ul><h3 id="内存分配的两种方案"><a href="#内存分配的两种方案" class="headerlink" title="内存分配的两种方案"></a>内存分配的两种方案</h3><p>指针碰撞</p><ul><li>使用<strong>分界点指示器</strong>记录指针位置，通过挪动指针来分配内存</li><li>这种分配方式分配出来的空间是规整的</li></ul><p>空闲列表</p><ul><li>通过维护一个<strong>空闲列表</strong>来分配内存。这个空闲列表记录了哪些内存是可用的，在分配空间时，在这个列表中选出一块足够大的空间来分配给对象</li><li>这种分配方式分配的内存时不规整的</li></ul><p>使用哪种内存分配方式取决于 GC 用的回收算法。例如标记-复制、标记-整理用的是指针碰撞，而标记-清除则用的是空闲列表。</p><h3 id="堆内存分配时如何保证线程安全？"><a href="#堆内存分配时如何保证线程安全？" class="headerlink" title="堆内存分配时如何保证线程安全？"></a>堆内存分配时如何保证线程安全？</h3><p>因为堆时线程共享的所以如果不做任何处理的话它并不是线程安全的。</p><p>在 JVM 中使用一种叫 TLAB（线程本地分配缓存）的机制来解决线程并发申请内存的问题。开启 TLAB 后，虚拟机会为每条线程在堆中预先分配一小块内存，那么当线程需要申请内存创建对象时，就可以在预先分配好的区域内创建了，而等到内存不足时才会再向虚拟机申请。</p><h3 id="内存逃逸分析"><a href="#内存逃逸分析" class="headerlink" title="内存逃逸分析"></a>内存逃逸分析</h3><p>内存逃逸分析是 JIT 编译时的优化手段，即判断在方法中创建的对象实例有没有被外部引用的可能。如果没有则直接在栈内存中分配。上面已经提到，栈内存属于对外内存，由系统管理，分配和回收的效率都非常高，所以这样做的好处是可以降低 GC 负担以及堆内存占用量。</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="什么是垃圾？"><a href="#什么是垃圾？" class="headerlink" title="什么是垃圾？"></a>什么是垃圾？</h3><p>在 Java 中内存是有 GC 自动管理的。而当一个对象没有任何引用时，就会被视为“垃圾”，即表示它所占用的内存可以被 GC 回收。</p><h3 id="如何确认对象没有引用？"><a href="#如何确认对象没有引用？" class="headerlink" title="如何确认对象没有引用？"></a>如何确认对象没有引用？</h3><p>1）引用计数器算法</p><ul><li>使用计数器来记录对象实例是否有引用，即当计数器为 0 时就表示该对象所占用的内存可以被回收了</li><li>优点是实现起来简单，但存在无用对象循环引用的情况，所以回收效率一般</li></ul><p>2）可达性分析算法（根搜索算法）</p><ul><li><p>先选出对象代表集合（GC Root），然后再从集合成员中延伸引用，如果延伸不到，则可视为”垃圾“</p><p><img src="/jvm%E6%B7%B1%E5%85%A5/9.png"></p></li><li><p>可以作为 GC Root 的对象实例（可通过MAT工具查看）：</p><ul><li>全局实例<ul><li>常量实例</li><li>类静态成员实例</li><li>ClassLoader</li></ul></li><li>JNI实例</li><li>线程实例</li><li>栈帧中局部变量表中应用的实例</li><li>锁对象实例</li></ul></li></ul><p>目前 Hotspot 中默认用的是可达性分析算法。</p><h3 id="对象的4种引用"><a href="#对象的4种引用" class="headerlink" title="对象的4种引用"></a>对象的4种引用</h3><p>强引用</p><ul><li>基本上都是强引用，因为其他3中需要实现特定抽象类</li><li>特点是 GC 即使抛出 OOM 都不会回收其内存</li></ul><p>软引用</p><ul><li>需要继承了 SoftReference 抽象类</li><li>当这类实例丢失强引用后，会在 GC 发现内存不足时被回收（即第一次GC后发现依然不够足够的空间分配就会回收软引用）</li><li>作用：可以用来做缓存</li></ul><p>弱引用</p><ul><li>需要继承了 WaekReference 抽象类</li><li>当这类实例丢失强引用后，会被 GC 回收</li><li>作用：临时实例</li></ul><p>虚引用</p><ol><li>需要继承了 PhantomReference 抽象类</li><li>虚引用不对实例产生任何副作用，即如果丢失强引用则随时被回收</li><li>作用：监听实例被回收</li></ol><h3 id="对象的自我拯救"><a href="#对象的自我拯救" class="headerlink" title="对象的自我拯救"></a>对象的自我拯救</h3><p>当一个象被 GC 认为不可达过时 GC 会对其进行第 1 次标记，然后会根据这个对象<strong>是否有实现 finalize 方法</strong>或 <strong>是否已经调用过 finalize 方法</strong>作为条件判断。</p><ul><li>情况1：没有实现 finalize，等待回收</li><li>情况2：有实现 finalize 但已经调用且没有”自救（从finalize中重新复制给外面的变量）”，等待回收</li><li>情况3：有实现 finalize 且没有被调用过，则将其包装为 FinalReference 实例并添加到 F-Queue 队列中，然后让一条名为 Finalizer 的线程回调其 finalize，等待下一次标记</li></ul><p>注意：由于 Finalizer 是一条单一的线程，而虚拟机为了避免其阻塞，所以一旦遇到一个执行时间较长的 finalize 就可能会被丢弃。因此不建议将 finalize 视为析构函数来对待。</p><h3 id="垃圾回收算法-1"><a href="#垃圾回收算法-1" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><blockquote><p>标记-清除</p></blockquote><p><img src="/jvm%E6%B7%B1%E5%85%A5/6.png"></p><ul><li>先对存活对象进行标记，然后清理其余内存</li><li>特点是高效，但存在内存碎片化问题</li><li>该算法由 CMS 垃圾回收器实现</li></ul><blockquote><p>标记-复制</p></blockquote><p><img src="/jvm%E6%B7%B1%E5%85%A5/7.png"></p><ul><li>先将内存一分为二（可以更多），然后只使用其中的一半来存储对象实例</li><li>在回收时会先标记存活对象，然后将其复制到另一边，最后再清理之前的那一边</li><li>特点是高效，且有整理内存操作，所以在后续使用时内存会相对规整，但内存使用率不高</li><li>该算法常用在新生代区域回收</li></ul><blockquote><p>标记-整理</p></blockquote><p><img src="/jvm%E6%B7%B1%E5%85%A5/8.png"></p><ul><li>先对存活对象实例进行标记，然后清理其余内存，最后将存活的对象实例整理到一边</li><li>特点是空间利用率高，且没有内存碎片化问题，但相对效率较低</li><li>该算法常用在老年代区域回收</li></ul><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p><img src="/jvm%E6%B7%B1%E5%85%A5/10.png"></p><ul><li><p>目前 JVM 中的 GC 基本上都是基于分代回收策略的基础上实现的。</p></li><li><p>即将堆内存分为<strong>新生代</strong>和<strong>老年代</strong>。而新生代又分为 Eden 和 两个 Survivor 区域</p></li><li><p>新生代和老年代的内存占有比例是 1：2，而 Eden 和 Survivor 则是 8:1:1</p></li><li><p>其中两个 Survivor 区域又叫 from 和 to，或 s0 和 s1</p></li></ul><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><ul><li><p>几乎所有对象都 Eden 分配内存，除了大对象以及逃逸分析之外</p></li><li><p>经过专门人员调查研究发现，其实大部分对象实例都是“朝生暮死”的，所以新生代采用的是<strong>复制算法</strong>，这也是为什么将新生代分为 Eden 区和 Survivor 区的原因</p></li><li><p>个人理解之所以有两块 Survivor 区的主要因为是为了提高 Eden 区的使用率，既即使是在 Survivor 中存活下来了也不用拷贝回 Eden 区，而且本身很多对象是“朝生暮死”的，所以能经历多次 GC 的并不多，所以用两块较小的内存来负责拷贝工作从设计来说显然更加合理</p></li><li><p>每个对象实例都有对应的对象头，其中就保留了一个年龄计数器（默认15，可通过 +XX:MaxTenuringThreshold 设置）。即每经历一次 GC 如果没被回收该值就会加一，直到满足 MaxTenuringThreshold 值就会晋升到老年代。除此之外，如果 Survivor  区已经达到了指定的使用率（-XX:TargetSurvivorRatio），则 GC 会重新计算当前存活实例的晋升年龄（不会超过MaxTenuringThreshold），然后再将超过该年龄的存活对象实例晋升到老年代。最后，还有一种特别情况，就是当对象实例比较大时（-XX:PretenureSizeThreshold）会直接在老年代分配</p></li></ul><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><ul><li>用于存放大岁数以及占用内存较大的对象实例</li><li>因为在老年代中的对象都是些长寿对象，所以 GC 并不频繁，因此大多数 GC 会同过实现标记-整理算法来管理这块内存</li></ul><h2 id="Young-GC-和-Full-GC"><a href="#Young-GC-和-Full-GC" class="headerlink" title="Young GC 和 Full GC"></a>Young GC 和 Full GC</h2><ul><li>Young GC 是对 GC 回收新生代的称呼，而 Full GC 则对 GC 回收一整块堆内存以及方法区的称呼</li><li>Young GC 执行时机<ol><li>当 Eden 区没有充足的空间前，会判断老年代是否有足够大的空间来容纳当前新生代中的所有存活实例</li><li>如果有则执行 Young GC，否则继续判断老年代是否有能容量历届平均值的对象空间</li><li>如果有则执行 Young GC，否则执行 Full GC</li></ol></li><li>Full GC 执行时机<ul><li>当老年代、方法区无法分配内存时会</li><li>显示调用 System.gc() 或 Runtime.gc()</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Spring的事务管理</title>
      <link href="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年4月5日 02:53:25 — 增加 AOP 事务织入源码分析 和 事务失效情况 等内容</li></ul><h2 id="知识小回顾"><a href="#知识小回顾" class="headerlink" title="知识小回顾"></a>知识小回顾</h2><ul><li>Spring支持两种事务定义，分别为：编程式事务 和 声明式事务</li><li>声明式事务使用 Spring AOP 实现，而 Spring AOP 原理则是通过判断方法是否包含 Advisor 来生成动态代理</li><li>Spring除了抽象事务之外，还针对不同的ORM技术提供了各自的事务管理器，而事务管理器的作用其实就是ORM技术对事务getTransaction、commit、rollback等操作，用于配合 Spring AOP 实现事务织入操作</li></ul><h2 id="Spring对事务的抽象"><a href="#Spring对事务的抽象" class="headerlink" title="Spring对事务的抽象"></a>Spring对事务的抽象</h2><h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p>事务管理器抽象 - 事务的基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> &#123;</span><br><span class="line">    <span class="comment">// 获取事务</span></span><br><span class="line">    TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span></span><br><span class="line">            <span class="keyword">throws</span> TransactionException;</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><p>事务定义信息抽象 - 当前事务的元数据，作为 TransactionStatus 的配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务的传播行为</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRED</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_SUPPORTS</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_MANDATORY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_REQUIRES_NEW</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NOT_SUPPORTED</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NEVER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">PROPAGATION_NESTED</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务的隔离级别</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 使用数据库默认级别</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_UNCOMMITTED</span> <span class="operator">=</span> Connection.TRANSACTION_READ_UNCOMMITTED; <span class="comment">// 读未提交</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_READ_COMMITTED</span> <span class="operator">=</span> Connection.TRANSACTION_READ_COMMITTED; <span class="comment">// 读已提交</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_REPEATABLE_READ</span> <span class="operator">=</span> Connection.TRANSACTION_REPEATABLE_READ; <span class="comment">// 可重复度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ISOLATION_SERIALIZABLE</span> <span class="operator">=</span> Connection.TRANSACTION_SERIALIZABLE; <span class="comment">// 序列化读取</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务默认不超时</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">TIMEOUT_DEFAULT</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 获取事务的传播行为</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getPropagationBehavior</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取事务的隔离级别</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getIsolationLevel</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取事务的超时时间定义</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getTimeout</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 是否为只读事务</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">()</span>;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>事务状态抽象 - 当前事务的状态，事务管理器需要根据 TransactionStatus 信息操作事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction;</span><br><span class="line"><span class="keyword">import</span> java.io.Flushable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionStatus</span> <span class="keyword">extends</span> <span class="title class_">SavepointManager</span>, Flushable &#123;</span><br><span class="line">    <span class="comment">// 是否为一个新的事务</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isNewTransaction</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 是否有保存点</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasSavepoint</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 将事务设置为不可提交</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setRollbackOnly</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 当前事务是否为一个不可提交的事务</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRollbackOnly</span><span class="params">()</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 事务是否以结束</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCompleted</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-AOP事务织入源码浅析"><a href="#Spring-AOP事务织入源码浅析" class="headerlink" title="Spring AOP事务织入源码浅析"></a>Spring AOP事务织入源码浅析</h2><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><p>model类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面类 - 用于分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAdvisor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(org.springframework.transaction.annotation.Transactional)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------- info before --------------&quot;</span>);</span><br><span class="line">        <span class="type">DemogApplication</span> <span class="variable">demogApplication</span> <span class="operator">=</span> (DemogApplication)AopContext.currentProxy();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前代理实例：&quot;</span> + demogApplication);</span><br><span class="line">        System.out.println(joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------- info around start--------------&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------- info around end--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------- info after --------------&quot;</span>);</span><br><span class="line">        System.out.println(joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span> <span class="comment">// 暴露当前代理</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemogApplication</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepo personRepo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemogApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> Person.builder()</span><br><span class="line">                .id(<span class="number">1</span>)</span><br><span class="line">                .name(<span class="string">&quot;sam&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        personRepo.save(person); <span class="comment">// ====================</span></span><br><span class="line"></span><br><span class="line">        System.out.println(personRepo.getOne(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码阅读小知识点"><a href="#源码阅读小知识点" class="headerlink" title="源码阅读小知识点"></a>源码阅读小知识点</h3><ul><li>Spring AOP 依靠 动态代理 + 方法拦截器（位于org.aopalliance.intercept，并继承了Advice接口） 来织入 Advisor 逻辑。大致过程是通过生命周期中的 BeanPostProcessor#postProcessAfterInitialization 方法判断是否存在相关的 Advisor ，如果存在则返回包含 TransactionInterceptor 的 Bean 代理，而 TransactionInterceptor 主要工作是执行目标方法时对其进行拦截并织入 Advisor 逻辑</li><li>用户自定义的 JpaRepository 会被容器封装成一个 FactoryBean</li><li>反射中 Method 是 AnnotatedElement 的实现</li><li>Advisor 相当于一个切面中的方法</li><li>一个切入点表达式 Pointcut 会对应生成一个 MethodMatcher 用于匹配是否需要织入操作（可参考 JdkRegexpMethodPointcut ）</li><li>MethodMatcher 用于匹配方法签名（cacheKey）从而得到需要织入 Advisce 的方法（Method&#x2F;AnnotatedElement），而 AOP 操作需要使用特定的解析器将 Method 上的 @Transactional 注解的元信息封装为 TransactionAttributeSource</li><li>TransactionAttributeSource 可用来获取 TransactionAttribute（出现异常时判断是否需要回滚）</li><li>AnnotationAwareAspectJAutoProxyCreator 提供用于获取 Advisors 和 创建代理 的功能</li><li>Jpa 使用的 EntityManager 会在容器初始化期间，Singleton Bean实例化之前优先被创建（LocalContainerEntityManagerFactoryBean 实现了接口 LoadTimeWeaverAware 得到的特殊待遇）</li></ul><h3 id="源码浅析"><a href="#源码浅析" class="headerlink" title="源码浅析"></a>源码浅析</h3><h4 id="EntityManager实例化时机"><a href="#EntityManager实例化时机" class="headerlink" title="EntityManager实例化时机"></a>EntityManager实例化时机</h4><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/4.png"></p><ul><li>可以看到 LocalContainerEntityManagerFactoryBean 实现了一个优先级别较高的接口 LoadTimeWeaverAware</li></ul><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/3.png"></p><ul><li>实例化操作实际位于容器 refresh 期间中的 AbstractApplicationContext#finishBeanFactoryInitialization 方法</li></ul><h4 id="AOP代理的创建过程"><a href="#AOP代理的创建过程" class="headerlink" title="AOP代理的创建过程"></a>AOP代理的创建过程</h4><ul><li>AOP 代理并不是在实例化时创建的，而是初始化时通过 BeanPostProcessor 的后处理方法回调判断创建的。分别是 AnnotationAwareAspectJAutoProxyCreator 和 AbstractAdvisingBeanPostProcessor。前者是处理 AspectJ 注解场景，后者则是 Spring AOP。（当前案例是前者）</li></ul><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/5.png"></p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/6.png"></p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/7.png"></p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/8.png"></p><p>以下为创建代理实例的主要逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createProxy</span><span class="params">(Class&lt;?&gt; beanClass, </span></span><br><span class="line"><span class="params">                             <span class="meta">@Nullable</span> String beanName,</span></span><br><span class="line"><span class="params">                             <span class="meta">@Nullable</span> Object[] specificInterceptors, </span></span><br><span class="line"><span class="params">                             TargetSource targetSource)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代理工厂</span></span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">proxyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">    proxyFactory.copyFrom(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">                proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将对应的Advisor切面（方法为单位）设置到工厂</span></span><br><span class="line">    Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    proxyFactory.addAdvisors(advisors);</span><br><span class="line">    proxyFactory.setTargetSource(targetSource);</span><br><span class="line">    customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成代理实例</span></span><br><span class="line">    <span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getProxy 方法实质调用了 DefaultAopProxyFactory#createAopProxy ，如下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAopProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">AopProxyFactory</span>, Serializable &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException &#123;</span><br><span class="line">        <span class="comment">// 1. 是否配置了优化（默认为false）</span></span><br><span class="line">        <span class="comment">// 2. 设置了ProxyTargetClass=ture</span></span><br><span class="line">        <span class="comment">// 3. 没有实现接口</span></span><br><span class="line">        <span class="comment">// 以上随便满足一条则采用Cglib，否则使用JDK动态代理</span></span><br><span class="line">        <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">            Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">            <span class="comment">// 如果目标本身是一个接口或代理类（从内存中生成的类），则重新选择JDK动态代理</span></span><br><span class="line">            <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjenesisCglibAopProxy</span>(config); <span class="comment">// 返回Cglib动态代理实例（继承形式）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config); <span class="comment">// 返回JDK动态代理实例（抽象接口形式）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="是如何获取-Advisors-的？"><a href="#是如何获取-Advisors-的？" class="headerlink" title="是如何获取 Advisors 的？"></a>是如何获取 Advisors 的？</h4><p>获取 Advisor 的代码位置如下</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/8.png"></p><p>重启debug，在以下位置重新打断点观察</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/9.png"></p><p>Advisors 从获取到执行的大致流程：</p><ol><li><p>一开始某个 Bean 实例化后进入初始化阶段的调用 BeanPostProcessor 后置方法流程，这时会有一个叫 AnnotationAwareAspectJAutoProxyCreator 的 InstantiationAwareBeanPostProcessor 判断当前 Bean 是否有必胜返回一个 AOP 代理。判断的依据是根据当前 Bean 的 Class 来查找看看是否存在对应的 Advisors 。如果有这生成AOP代理，没有这不生成 。</p></li><li><p>如果是第一次查找 Advisors，则会通过 BeanFactoryUtils.beanNamesForTypeIncludingAncestors(<br>  this.beanFactory, <code>Advisor.class</code>, true, false) 从容器中匹配到一个叫 org.springframework.transaction.config.internalTransactionAdvisor 的 BeanName，然后通过 beanFactory.getBean(beanName, Advisor.class) 拿到对应的实例，而这个实例就是 BeanFactoryTransactionAttributeSourceAdvisor</p></li><li><p>BeanFactoryTransactionAttributeSourceAdvisor 是一个 AOP 通知，它包含着一个切入点表达式（TransactionAttributeSourcePointcut），用于通过 pointcut#matches(method，class) 方法来判断是否要需要织入通知。而且 TransactionAttributeSourcePointcut 中存放了一个 TransactionAttributeSource，而 TransactionAttributeSource 中存在两个解析器，分别是 SpringTransactionAnnotationParser 和 JtaTransactionAnnotationParser，作用是解析 @Transactional 注解。既找到 Advisor 后，也并不是马上返回给上层，而是先通过 pointcut#matches(method，class) 来判断是否需要织入，如果需要才将当前  Advisor 返回给上层，然后配置到 ProxyFactory 中用于创建 AOP 代理时添加进代理</p></li><li><p>最后，当请求到来时 AOP 代理会先接触请求。以 Cglib 代理代理为例，它会先获取出所有 advisors ，然后从中筛选出 PointcutAdvisor（Advisor advisor : advisors），并通过 matches(targetMethod，targetMethodClass) 进行匹配，匹配成功（既matches结果为ture）就会通过 DefaultAdvisorAdapterRegistry#getInterceptors(advisor) 返 advisor 对应的 Interceptor 用于对目标方法进行织入（返回结果会被缓存起来）。既如果这里的 advisor 是 BeanFactoryTransactionAttributeSourceAdvisor，那么就会返回 TransactionInterceptor</p></li></ol><h4 id="Repository是何时被实例化的？"><a href="#Repository是何时被实例化的？" class="headerlink" title="Repository是何时被实例化的？"></a>Repository是何时被实例化的？</h4><p>实现 FactoryBean 接口是创建 Bean 实例的一种方式，它有如下优点</p><ul><li>屏蔽 Bean 实例化过程的复杂性</li><li>只有真正调用 getObject 方法时才会真正实例化，所以有延时加载的效果</li></ul><p>通常一些第三方库要接入 Spring Framework 时，都会通过实现 FactoryBean 来构建一个关键组件实例。例如 MyBatis 的 SqlSessionFactoryBean 和 MapperFactoryBean、Hibernate 的 LocalSessionFactoryBean、Ehcache 的 EhCacheManagerFactoryBean、还有接下来的自定义 Repository 接口也是。</p><p>FactoryBean接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取实际的Bean(T)实例</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 获取实例的实际类型</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line">    <span class="comment">// 是否单例。可以看到默认为true，即默认FactoryBean在单个容器中是单例的</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 Repository 的实例化过程：</p><p>用户自定义 JpaRepository 实质会被封装成一个 FactoryBean（JpaRepositoryFactoryBean）。那 JpaRepositoryFactoryBean#getObject 是什么时候被调用的呢？</p><p>因此可以将断点打在 JpaRepositoryFactoryBean <code>构造器</code>和 <code>getObject() 方法</code>上进行观察其触发时机。</p><p>接着启动程序，发现先是进入了 JpaRepositoryFactoryBean 构造器。</p><p>然后观察其调用栈，看看是从哪儿开始调用的？</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/14.png"></p><p>可以看到是 JpaRepositoryFactoryBean 先被实例化。</p><p>接着进入下一个断点观看其调用栈信息</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/13.png"></p><p>发现只要依赖了 Repository 的 Bean 被实例化，那么就会触发其 FactoryBean 的 getObject() 返回一个代理实例，而因为 Repository 本身是一个接口，所以这里采用的是 JDK 动态代理</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/12.png"></p><p>值得注意的是，其实这里的 Controller 也是一个 AOP 代理实例，因为用了@Tansactional，而因为 Controller 没有实现接口，所以它是一个 Cglib 之类代理。</p><p>Repository 的代理实例是如何构成：</p><p>经过观察发现，在  FactoryBean 的 getObject() 实质调用的是  this.repository.get()，而 <code>this.repository</code> 实质是一个 Lazy 实例。而这个 Lazy 是在容器启动时注册 BeanDefinition 时被创建的</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/11.png"></p><p>也就是说，Repository 接口本身会在容器启动时生成对应的 Lazy 实例，而在 Repository 创建实例时，就会将 Lazy 作为参数构建一个 JpaRepositoryFactoryBean，但值得注意的是 JpaRepositoryFactoryBean 中的 this.repository 并不是直接使用 Lazy ，而是通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.repository = Lazy.of(() -&gt; </span><br><span class="line"><span class="built_in">this</span>.factory.getRepository(repositoryInterface, repositoryFragmentsToUse));</span><br></pre></td></tr></table></figure><p>返回的，而 factory.getRepository() 的主要的作用就是将 Advisors 添加到ProxyFactory，然后在用 ProxyFactory 创建当前具体 Repository （当前例子是personRepo接口）的 AOP 代理。</p><p>具体参考：RepositoryFactorySupport#getRepository()</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/10.png"></p><p>最后如果有其它 Bean 依赖了该 Repository 时，就会通过 FactoryBean#getObject 操作 Lazy 返回代理</p><h4 id="事务拦截器（通知）织入的事务逻辑"><a href="#事务拦截器（通知）织入的事务逻辑" class="headerlink" title="事务拦截器（通知）织入的事务逻辑"></a>事务拦截器（通知）织入的事务逻辑</h4><p>TransactionInterceptor#invoke -&gt;  TransactionAspectSupport#invokeWithinTransaction</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">invokeWithinTransaction</span><span class="params">(Method method, <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass,</span></span><br><span class="line"><span class="params">                                         <span class="keyword">final</span> InvocationCallback invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the transaction attribute is null, the method is non-transactional.</span></span><br><span class="line">    <span class="comment">// 获取当前事务的元数据，即 TransactionAttribute。如果不存在则无需添加事务</span></span><br><span class="line">    <span class="comment">// 而TransactionAttribute是的获取方式先前也稍微提到过，就是通过TransactionAttributeSource</span></span><br><span class="line">    <span class="comment">// 中两个Parser解析器通过对当前Method上的@Transactional注解解析出来了的</span></span><br><span class="line">    <span class="type">TransactionAttributeSource</span> <span class="variable">tas</span> <span class="operator">=</span> getTransactionAttributeSource();</span><br><span class="line">    <span class="comment">// TransactionAttribute中包含诸如传播行为和隔离级别的配置信息，即TransactionDefinition中的信息</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TransactionAttribute</span> <span class="variable">txAttr</span> <span class="operator">=</span> (tas != <span class="literal">null</span> ? tas.getTransactionAttribute(method, targetClass) : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取事务管理器</span></span><br><span class="line">    <span class="comment">// 事务管理器是需要手动配置的，用SpringBoot则自动配置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TransactionManager</span> <span class="variable">tm</span> <span class="operator">=</span> determineTransactionManager(txAttr);</span><br><span class="line">    <span class="type">PlatformTransactionManager</span> <span class="variable">ptm</span> <span class="operator">=</span> asPlatformTransactionManager(tm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析出Method的拦截标识</span></span><br><span class="line">    <span class="comment">// 例如：pub.tandi.ddd_demo.controller.TestController.hi</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">joinpointIdentification</span> <span class="operator">=</span> methodIdentification(method, targetClass, txAttr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (txAttr == <span class="literal">null</span> || !(ptm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 【重点】使用当前的事务管理器实现来【开始事务】</span></span><br><span class="line">        <span class="comment">// TransactionInfo中封装了以下内容</span></span><br><span class="line">        <span class="comment">// * PlatformTransactionManager - 当前orm的事务管理器</span></span><br><span class="line">        <span class="comment">// * TransactionAttribute - @Transactional的元数据</span></span><br><span class="line">        <span class="comment">// * joinpointIdentification - 当前需要织入事务的目标方法签名</span></span><br><span class="line">        <span class="comment">// * transactionStatus - 事务的状态，用于控制事务commit和rollback</span></span><br><span class="line">        <span class="type">TransactionInfo</span> <span class="variable">txInfo</span> <span class="operator">=</span> createTransactionIfNecessary(ptm, txAttr, joinpointIdentification);</span><br><span class="line"></span><br><span class="line">        Object retVal;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行目标方法（事务内的操作）</span></span><br><span class="line">            retVal = invocation.proceedWithInvocation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">// 当前目标方法执行异常，进行【事务回滚】</span></span><br><span class="line">            completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//清除事务信息</span></span><br><span class="line">            cleanupTransactionInfo(txInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有发生异常，进行【事务提交】</span></span><br><span class="line">        commitTransactionAfterReturning(txInfo);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring提供的事务管理器"><a href="#Spring提供的事务管理器" class="headerlink" title="Spring提供的事务管理器"></a>Spring提供的事务管理器</h2><h3 id="常用的事务管理器"><a href="#常用的事务管理器" class="headerlink" title="常用的事务管理器"></a>常用的事务管理器</h3><ul><li>DataSourceTransactionManager：MyBatis、JDBC使用</li><li>JpaTransactionManager：JPA使用</li><li>HibernateTransactionManager：Hibernate使用</li><li>JmsTransactionManager：JMS规范使用</li><li>JtaTransactionManager：JTA规范使用</li></ul><h3 id="JpaTransactionManager"><a href="#JpaTransactionManager" class="headerlink" title="JpaTransactionManager"></a>JpaTransactionManager</h3><p>声明式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        repository.save(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编程式</p><blockquote><p>编程式事务的优点在于可以进行局部事务而不用整个方法都使用事务。事务尽快结束就意味着数据库连接可以更快被释放。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceCode</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Person person)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 事务定义</span></span><br><span class="line">        <span class="type">DefaultTransactionDefinition</span> <span class="variable">transactionDefinition</span> </span><br><span class="line">            <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>();</span><br><span class="line">      transactionDefinition <span class="comment">// 隔离级别</span></span><br><span class="line">          .setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</span><br><span class="line">        transactionDefinition <span class="comment">// 传播行为</span></span><br><span class="line">            .setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据事务定义获取事务</span></span><br><span class="line">        <span class="type">TransactionStatus</span> <span class="variable">transactionStatus</span> </span><br><span class="line">            <span class="operator">=</span> transactionManager.getTransaction(transactionDefinition);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            repository.save(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            transactionManager.commit(transactionStatus);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            transactionManager.rollback(transactionStatus);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 Spring 提供的 TransactionTemplate 来代替直接使用 TransactionManager。</p><h3 id="JmsTransactionManager"><a href="#JmsTransactionManager" class="headerlink" title="JmsTransactionManager"></a>JmsTransactionManager</h3><h4 id="jms事务注意"><a href="#jms事务注意" class="headerlink" title="jms事务注意"></a>jms事务注意</h4><ul><li><p>jms 和其他事务稍有不同，jms的事务是通过 session 来管理的，即每一个 session 就相当于一个事务</p></li><li><p>默认情况下 jms 并不受 @Transactional 标签控制，也就是说即使方法报错也不会回滚，这是因为 jms 提供了两种事务管理方式：</p><ol><li>什么都不配置，默认使用 sesssion 进行管理（jms原生事务）</li><li>依赖外部管理事务，如<code>JmsTransactionManager</code>、<code>JtaTransactionManager</code>等等</li></ol></li></ul><h4 id="使用JmsTransactionManager控制jms事务"><a href="#使用JmsTransactionManager控制jms事务" class="headerlink" title="使用JmsTransactionManager控制jms事务"></a>使用JmsTransactionManager控制jms事务</h4><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJms</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsListenerContainerFactory&lt;DefaultMessageListenerContainer&gt; <span class="title function_">msgFactory</span><span class="params">(ConnectionFactory connectionFactory,</span></span><br><span class="line"><span class="params">                                                                                   DefaultJmsListenerContainerFactoryConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="type">DefaultJmsListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJmsListenerContainerFactory</span>();</span><br><span class="line">        factory.setReceiveTimeout(<span class="number">10000L</span>);</span><br><span class="line">        configurer.configure(factory, connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JmsTransactionManager</span>(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsTemplate <span class="title function_">jmsTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JmsTemplate</span>(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonJmsServiceAnnotation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;person:msg:new&quot;, containerFactory = &quot;msgFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerPerson</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;into PersonJmsServiceAnnotation.listenerPerson() ......&quot;</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savePerson</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;into PersonJmsServiceAnnotation.savePerson() ......&quot;</span>);</span><br><span class="line">        template.convertAndSend(<span class="string">&quot;person:msg:new&quot;</span>, person.toString());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>; <span class="comment">// 测试回滚</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JmsController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonJmsServiceAnnotation personJmsServiceAnnotation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savePerson</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;into JmsController.savePerson() ......&quot;</span>);</span><br><span class="line">        personJmsServiceAnnotation.savePerson(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>日志</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 继承springboot的日志配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/base.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.transaction&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.jms&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;javax.transaction&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;javax.jms&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/1.png"></p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/2.png"></p><h3 id="JtaTransactionManager"><a href="#JtaTransactionManager" class="headerlink" title="JtaTransactionManager"></a>JtaTransactionManager</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><p>JTA 事务是 X&#x2F;A 协议（2PC）的实现，可以保证两个数据源的强一致性</p></li><li><p>JakartaEE规范根据DTP（分布式事务处理模型）定制了 TX 协议（应用管理器和事务管理器）和 XA 协议（事务管理器和资源管理器）两种规范。即如果想在 Java 中实现二段提交，则至少需要一个事务管理器和一个资源管理器。而且资源管理器必须支持 XA 协议（譬如 MySQL 中 InnoDB 的 redo log 和 bin log）</p></li><li><p>Spring 中的 JtaTransactionManager 只是一个事务管理器的接口规范，而不是具体实现。如果想要在 Spring 中使用 JTA 事务，则可以依赖如下实现：</p><ul><li>atomikos</li><li>bitronix</li></ul></li></ul><p>如何判断是否需要 JTA 事务？</p><ul><li>两个支持 X&#x2F;A 协议的数据源需要实现强一致性</li></ul><p>JTA事务的弊端？</p><ol><li>事务时间长：协调者需要等待一阶段提交（预提交）中所有的事务参与者的响应才能进行下一阶段工作</li><li>造成资源锁定：资源在整个2PC阶段被锁定</li><li>虽然能够保证多个数据源的强一致性，但会降低系统的可用性和吞吐量</li></ol><h4 id="接口规范"><a href="#接口规范" class="headerlink" title="接口规范"></a>接口规范</h4><p><strong>TransactionManager</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取事务状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStatus</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取一个事务同时开启事务</span></span><br><span class="line">    <span class="keyword">public</span> Transaction <span class="title function_">getTransaction</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 继续之前挂起了的事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resume</span><span class="params">(Transaction tobj)</span>;</span><br><span class="line">    <span class="comment">// 回滚</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 将事务设置为只读</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRollbackOnly</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 设置超时时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTransactionTimeout</span><span class="params">(<span class="type">int</span> seconds)</span>;</span><br><span class="line">    <span class="comment">// 挂起一个事务</span></span><br><span class="line">    <span class="keyword">public</span> Transaction <span class="title function_">suspend</span><span class="params">()</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Xid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.transaction.xa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Xid</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAXGTRIDSIZE</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAXBQUALSIZE</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// 获取格式化后的标识id</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getFormatId</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取一个全局事务的事务标识id</span></span><br><span class="line">    <span class="type">byte</span>[] getGlobalTransactionId();</span><br><span class="line">    <span class="comment">// 获取一个事务分支标识id</span></span><br><span class="line">    <span class="type">byte</span>[] getBranchQualifier();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XAResource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.transaction.xa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">XAResource</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">forget</span><span class="params">(Xid xid)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line">     <span class="comment">// 是否在同一个事务管理器中</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSameRM</span><span class="params">(XAResource xares)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line">    Xid[] recover(<span class="type">int</span> flag) <span class="keyword">throws</span> XAException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让资源管理器回滚 xid 这个事务参与者的事务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(Xid xid)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line">    <span class="comment">// 让资源管理器提交 xid 这个事务参与者的事务(一阶段/二阶段)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(Xid xid, <span class="type">boolean</span> onePhase)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前XAResource实例的超时时间</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">setTransactionTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line">    <span class="comment">// 获取当前XAResource实例的超时时间</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getTransactionTimeout</span><span class="params">()</span> <span class="keyword">throws</span> XAException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉资源管理器准备 xid 事务参与者的全局事务的工作</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">prepare</span><span class="params">(Xid xid)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line">    <span class="comment">// 开始 xid 事务参与者的事务处理工作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Xid xid, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line">    <span class="comment">// 结束 xid 事务参与者的事务处理工作</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(Xid xid, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> XAException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下为2pc的事务状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMENDRSCAN</span> <span class="operator">=</span> <span class="number">0x00800000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMFAIL</span> <span class="operator">=</span> <span class="number">0x20000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMJOIN</span> <span class="operator">=</span> <span class="number">0x00200000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMNOFLAGS</span> <span class="operator">=</span> <span class="number">0x00000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMONEPHASE</span> <span class="operator">=</span> <span class="number">0x40000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMRESUME</span> <span class="operator">=</span> <span class="number">0x08000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMSTARTRSCAN</span> <span class="operator">=</span> <span class="number">0x01000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMSUCCESS</span> <span class="operator">=</span> <span class="number">0x04000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">TMSUSPEND</span> <span class="operator">=</span> <span class="number">0x02000000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">XA_RDONLY</span> <span class="operator">=</span> <span class="number">0x00000003</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">XA_OK</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用例子-DB-MQ"><a href="#使用例子-DB-MQ" class="headerlink" title="使用例子 - DB+MQ"></a>使用例子 - DB+MQ</h4><p><strong>模拟场景</strong></p><ul><li>使用 JtaTransactionManager 来保证 DB 和 JMS 两个数据源的一致性</li><li>使用 Atomikos 第三方库实现 JTA 事务管理器</li></ul><p><strong>主要代码</strong></p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jms --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring data jpa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jta实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># pinGlobalTxToPhysicalConnection用于对接第三方事务管理器实现</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?pinGlobalTxToPhysicalConnection=true</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;person:msg:new&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">personHandle</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;产生了一条person消息：&#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">twopcSave</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        repository.save(person);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>; <span class="comment">// 模拟错误</span></span><br><span class="line">        template.convertAndSend(<span class="string">&quot;person:msg:new&quot;</span>, person.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringData提供的链式事务管理器"><a href="#SpringData提供的链式事务管理器" class="headerlink" title="SpringData提供的链式事务管理器"></a>SpringData提供的链式事务管理器</h2><p>在 spring data commons 中提供了一个叫 ChainedTransactionManager 的事务管理器。</p><p>我们可以利用它对多事务管理器进行编排。通俗点说就是按指定的顺序来提交事务，且可以做到当一个事务提交失败后在该事务后面的所有事务将会被回滚，而不会继续提交事务。</p><p>ChainedTransactionManager#commit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException &#123;</span><br><span class="line">    <span class="type">MultiTransactionStatus</span> <span class="variable">multiTransactionStatus</span> <span class="operator">=</span> (MultiTransactionStatus) status;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">commit</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">Exception</span> <span class="variable">commitException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PlatformTransactionManager</span> <span class="variable">commitExceptionTransactionManager</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历事务链，按顺序进行提交</span></span><br><span class="line">    <span class="keyword">for</span> (PlatformTransactionManager transactionManager : reverse(transactionManagers)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (commit) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                multiTransactionStatus.commit(transactionManager);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                commit = <span class="literal">false</span>;</span><br><span class="line">                commitException = ex;</span><br><span class="line">                commitExceptionTransactionManager = transactionManager;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 回滚后续事务</span></span><br><span class="line">            multiTransactionStatus.rollback(transactionManager);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ChainedTransactionManager 使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/ss&quot;</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/ss&quot;</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title function_">entityManagerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">LocalContainerEntityManagerFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalContainerEntityManagerFactoryBean</span>();</span><br><span class="line">    factoryBean.setDataSource(dataSource()); <span class="comment">// dataSource</span></span><br><span class="line">    factoryBean.setPackagesToScan(<span class="string">&quot;wiki.td.entity&quot;</span>);</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    prop.setProperty(<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;hibernate.show_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    prop.setProperty(<span class="string">&quot;hibernate.format_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    factoryBean.setJpaProperties(prop);</span><br><span class="line">    factoryBean.setPersistenceProvider(<span class="keyword">new</span> <span class="title class_">HibernatePersistenceProvider</span>());</span><br><span class="line">    <span class="keyword">return</span> factoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式事务管理器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">chainedTransactionManager</span><span class="params">(EntityManagerFactory entityManagerFactory)</span> &#123;</span><br><span class="line">    <span class="comment">// JPA事务</span></span><br><span class="line">    <span class="type">JpaTransactionManager</span> <span class="variable">jpaTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JpaTransactionManager</span>();</span><br><span class="line">    jpaTransactionManager.setEntityManagerFactory(entityManagerFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataSource事务</span></span><br><span class="line">    <span class="type">PlatformTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    dataSourceTransactionManager.setDataSource(dataSource2());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链式事务管理器</span></span><br><span class="line">    <span class="type">ChainedTransactionManager</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransactionManager</span>(dataSourceTransactionManager，jpaTransactionManager);</span><br><span class="line">    <span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与2PC的区别</p><ul><li>ChainedTransactionManager 并不能做到 2PC 的效果，它只能保证链中的一个事务出错，其后续的事务都回滚，但已经提交了的事务是不会回滚的</li></ul><h2 id="导致事务失效的几种情况"><a href="#导致事务失效的几种情况" class="headerlink" title="导致事务失效的几种情况"></a>导致事务失效的几种情况</h2><h3 id="类没有被代理"><a href="#类没有被代理" class="headerlink" title="类没有被代理"></a>类没有被代理</h3><ul><li>Bean 没有被容器管理</li><li>使用了父子容器，但 @EnableAspectJAutoProxy 在父容器中配置，而切面的应用目标却在子容器中管理（譬如 Controller ），这时需要将 @EnableAspectJAutoProxy 配置在子容器配置类上，因为父容器无法访问子容器资源，反过来就可以</li></ul><h3 id="Transactional标注在非public方法上"><a href="#Transactional标注在非public方法上" class="headerlink" title="@Transactional标注在非public方法上"></a>@Transactional标注在非public方法上</h3><ul><li><p>在上面的源码分析中我们已经得知是如何织入事务的了。大概过程就是先找到上下文的所有 Advisors，然后通过切入点表达式匹配出符合的目标。但在这个过程中还有一个潜在条件，就是 @Transactional 所标注的目标必须是 public 的</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/26.png"></p></li><li><p>@Transactional 除了可以标注在类方法上，还可以标注在类上、接口上</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/27.png"></p></li><li><p>有些人可能会有疑问，@Transactional 标注在接口方法上时，为什么会生效？</p><ul><li><p>如果定义在接口上，会采用 JDK 动态代理来织入事务操作</p></li><li><p>在 Java 接口中的抽象方法其实默认修饰符为 <code>public abstract</code> 而不是 default 。如下：</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/28.png"></p></li></ul></li></ul><h3 id="事务方法被非代理方法调用"><a href="#事务方法被非代理方法调用" class="headerlink" title="事务方法被非代理方法调用"></a>事务方法被非代理方法调用</h3><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Test&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span>&#123;</span><br><span class="line">        t2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 事务操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>以上失效情况很好理解，因为 t1 方法没有被 @Transactional 标注，即不会有 TransactionAttributeSource 信息，因此该方法并不会织入事务，简单说就是没有被代理</p></li><li><p>解决方案有以下两种：</p><ul><li><p>添加@Transactional注解到 t1 方法上</p></li><li><p>通过<code>暴露当前代理实例</code>，使用代理实例来调用，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Test&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//t2();</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">proxy</span> <span class="operator">=</span> (Test)AopContext.currentProxy();</span><br><span class="line">        proxy.t2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 事务操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="手动处理了异常而没有设置回滚标记"><a href="#手动处理了异常而没有设置回滚标记" class="headerlink" title="手动处理了异常而没有设置回滚标记"></a>手动处理了异常而没有设置回滚标记</h3><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> Test&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;<span class="comment">// 异常点</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 手动捕获了异常而没有设置事务回滚点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>无法回滚是因为织入的事务是通过设置回滚标记（TransactionStatus#setRollbackOnly）来实现回滚操作的，而又因为 Spring AOP 在代理方法中已经织入了处理异常回滚的代码，所以如果自己捕获了异常，就导致没法设置回滚标识。简单说就是既提交不了又不能回滚。</p></li><li><p>解决方法有2种：</p><ul><li><p>将异常抛出不处理，但要求异常必须是 RuntimeException 和 Error 两种，既检测异常（如IOException）是不会被处理的。个人理解 Spring 这样做原因可能是认为检测异常应该编译时就被处理</p></li><li><p>在 catch 设置 TransactionStatus#setRollbackOnly ，但需要暴露代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须暴露当前代理类，@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line">TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="事务方法抛出了非运行时异常"><a href="#事务方法抛出了非运行时异常" class="headerlink" title="事务方法抛出了非运行时异常"></a>事务方法抛出了非运行时异常</h3><p>从下图中可以看到，Spring 事务只会在遇到 RuntimeException 以及 Error 时才会设置回滚标识，所以如果抛出的是 IOException、ClassNotFoundException 或其他非 RuntimeException 的话是不能回滚的。</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/29.png"></p><p>解决方法是手动设置回滚异常类型 @Transactional(rollbackFor &#x3D; Exception.class)</p><h3 id="嵌套事务操作时设置了错误的传播行为"><a href="#嵌套事务操作时设置了错误的传播行为" class="headerlink" title="嵌套事务操作时设置了错误的传播行为"></a>嵌套事务操作时设置了错误的传播行为</h3><p>Spring支持的事务传播方式回顾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Propagation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须使用事务（默认）</span></span><br><span class="line">    <span class="comment">// 优先考虑加入到当前事务中，如果当前环境没有开启事务则自己开启一个新的事务</span></span><br><span class="line">    REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支持事务</span></span><br><span class="line">    <span class="comment">// 优先考虑加入到当前事务中，如果当前环境没有开启事务则不使用事务</span></span><br><span class="line">    SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 强制使用事务</span></span><br><span class="line">    <span class="comment">// 优先考虑加入到当前事务中，如果当前环境没有开启事务则抛异常</span></span><br><span class="line">    MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须开启新的事务</span></span><br><span class="line">    <span class="comment">// 如果当前存在事务环境，则先挂起当前事务，然后开启一个新的事务环境来执行当前操作</span></span><br><span class="line">    REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不支持事务</span></span><br><span class="line">    <span class="comment">// 如果当前存在事务环境，则先挂起当前事务，然后直接执行当前操作</span></span><br><span class="line">    NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 强制不支持事务</span></span><br><span class="line">    <span class="comment">// 如果当前存在事务环境，则会抛异常，反之直接执行当前操作</span></span><br><span class="line">    NEVER(TransactionDefinition.PROPAGATION_NEVER),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须使用事务(针对JTA事务)</span></span><br><span class="line">    <span class="comment">// 优先考虑加入到当前事务中，如果当前环境没有开启事务则使用PROPAGATION_REQUIRED模式执行</span></span><br><span class="line">    <span class="comment">// 但该模式只适用于 DataSourceTransactionManager 事务管理器类型</span></span><br><span class="line">    NESTED(TransactionDefinition.PROPAGATION_NESTED);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套事务使用了如下传播方式：</p><ul><li>PROPAGATION_SUPPORTS</li><li>PROPAGATION_NOT_SUPPORTED</li><li>PROPAGATION_NEVER</li></ul><h3 id="数据库（引擎）不支持事务"><a href="#数据库（引擎）不支持事务" class="headerlink" title="数据库（引擎）不支持事务"></a>数据库（引擎）不支持事务</h3><p>例如MySQL中除了InnoDB，基本上都不支持事务操作。</p><p><img src="/%E5%85%B3%E4%BA%8Espring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/30.png"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><blockquote><p>同步事务</p></blockquote><p>如果在 Spring 事务中需要进行同步处理，则<code>同步块范围必须大于事务范围(应该至少包裹着当前事务方法所在的宿主方法域)</code>，否则无法实现同步。这是因为事务代理是环绕着目标方法来进行管理的，既如果同步锁使用在事务方法上，那么就会出现方法执行完了同步锁被释放但事务还没提交的情况，而又因为默认 Bean 是 Singleton 域，所以并发操作资源实就无法做到同步，这时只需将同步锁加在 Controller 上即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/67041662">Spring AOP中的JDK和CGLib动态代理哪个效率更高？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis高可用解决方案</title>
      <link href="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方为Redis提供了两个高可用解决方案，分别是：<code>Replica</code> 和 <code>Cluster</code></p><p>其中 Replica 能够解决<code>单点故障</code>、<code>实时备份</code>和<code>负载均衡</code>等问题。而 Sentinel 和 Cluster 均基于 Replica。</p><h2 id="Replica"><a href="#Replica" class="headerlink" title="Replica"></a>Replica</h2><blockquote><p>Redis版本：5.0.5</p><p>Replica存在问题：无法做到故障转移</p></blockquote><h3 id="建立复制的3种方法"><a href="#建立复制的3种方法" class="headerlink" title="建立复制的3种方法"></a>建立复制的3种方法</h3><h4 id="方法1：配置文件"><a href="#方法1：配置文件" class="headerlink" title="方法1：配置文件"></a>方法1：配置文件</h4><p>以下使用3个节点来做主从复制操作</p><ul><li>redis01（主节点）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure><ul><li>redis02</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">port 6380</span><br><span class="line">replicaof 127.0.0.1 6379 # 复制目标</span><br><span class="line">replica-read-only yes # 从库只读，默认</span><br></pre></td></tr></table></figure><ul><li>redis03</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br><span class="line">port 6381</span><br><span class="line">replicaof 127.0.0.1 6379 # 复制目标</span><br><span class="line">replica-read-only yes # 从库只读，默认</span><br></pre></td></tr></table></figure><ul><li><p>启动顺序：redis01 -&gt; redis02 和 redis03</p></li><li><p>测试复制</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接上主节点6379</span></span><br><span class="line">➜  redis-replica redis01/bin/redis-cli </span><br><span class="line">127.0.0.1:6379&gt; set person:name zhangsan</span><br><span class="line">OK               </span><br><span class="line">127.0.0.1:6379&gt; get person:name</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接上从节点6380</span></span><br><span class="line">➜  redis-replica redis01/bin/redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; get person:name # 获取到主节点写入的数据</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6380&gt; set person:name2 lisi # 因为是从节点所以无法写入</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica.</span><br></pre></td></tr></table></figure><h4 id="方法2：启动参数（推荐）"><a href="#方法2：启动参数（推荐）" class="headerlink" title="方法2：启动参数（推荐）"></a>方法2：启动参数（推荐）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-server redis.conf</span><br><span class="line">bin/redis-server --port 6380 --replicaof 127.0.0.1 6379</span><br><span class="line">bin/redis-server --port 6381 --replicaof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><h4 id="方法3：使用命令"><a href="#方法3：使用命令" class="headerlink" title="方法3：使用命令"></a>方法3：使用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-replica redis01/bin/redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; replicaof 127.0.0.1 6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="查看主从复制信息"><a href="#查看主从复制信息" class="headerlink" title="查看主从复制信息"></a>查看主从复制信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从节点</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:9</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:84</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:86faaec0bb925d960589ab10cdc5552b33df81f9</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:84</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:29</span><br><span class="line">repl_backlog_histlen:56</span><br><span class="line">127.0.0.1:6380&gt; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主节点</span>                      </span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=266,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=266,lag=1</span><br><span class="line">master_replid:86faaec0bb925d960589ab10cdc5552b33df81f9</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:266</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:266</span><br></pre></td></tr></table></figure><h3 id="断开复制"><a href="#断开复制" class="headerlink" title="断开复制"></a>断开复制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-replica redis01/bin/redis-cli -p 6381</span><br><span class="line">127.0.0.1:6381&gt; replicaof no one # 从节点断开复制</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master # 断开复制后，节点晋升回主节点，可提供读写服务</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:9cc30a694d9593eec57d0af180b66889721abfa7</span><br><span class="line">master_replid2:86faaec0bb925d960589ab10cdc5552b33df81f9</span><br><span class="line">master_repl_offset:588</span><br><span class="line">second_repl_offset:589</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:253</span><br><span class="line">repl_backlog_histlen:336</span><br></pre></td></tr></table></figure><h3 id="复制的过程"><a href="#复制的过程" class="headerlink" title="复制的过程"></a>复制的过程</h3><ol><li><strong>保存主节点信息</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从节点</span></span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line">...</span><br><span class="line">master_host:127.0.0.1  # 主节点地址</span><br><span class="line">master_port:6379 # 主节点端口</span><br><span class="line">master_link_status:up # 连接状态（up/down）</span><br><span class="line">master_sync_in_progress:0 # 从节点是否正在进行全量复制（大于0表示是）</span><br><span class="line">master_repl_offset:4958 # 复制偏移量</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>主从建立socket连接</strong></li></ol><p>从节点内部有一个定时任务，作用是每隔1秒检测发现是否有新的主节点。</p><p>当发现有新的主节点后，从节点就会建立一个端口为 24555 的套接字来接收主节点发送过来的数据。</p><ol start="3"><li><strong>发送ping命令</strong></li></ol><p>成功建立socket连接之后，从节点会使用ping命令首次和主节点通信。</p><p>目的如下：</p><ul><li>检测主从节点之间的套接字是否可用</li><li>检测主节点是否可以接收处理命令</li></ul><p><code>注意：如果ping命令后没有收到pong命令（每隔1秒轮询），则从节点会先断开socket连接，等到下次定时任务启动再建立。</code></p><ol start="4"><li><strong>权限验证</strong></li></ol><p>如果主节点设置了<code>requirepass</code>参数，既表示需要进行密码验证。这时从节点必须设置<code>masterauth</code> 参数来设置连接密码。</p><ol start="5"><li><strong>同步数据集</strong></li></ol><p>在成功通信后，主节点会将自己所持有的数据全部复制（发送）给从节点（通过复制命令psync）。</p><p>包含2种复制情况：</p><ul><li><p><strong>全量复制：</strong>当数据量大时，会对主节点和网络造成很大的开销</p><ol><li><code>第一次连接上主节点时，注意这时主节点会生成RDB快照文件并发送给从节点</code></li><li>主节点运行 ID 改变时（例如重启。可以通过debug reload重启加载 redis 而不改变运行ID）</li><li>复制积压缓冲区没有从节点需要的数据。譬如主从断开时间较长，期间主节点进行了大量写操作而导致缓冲区后写入的内容覆盖了早写入的内容</li></ol></li><li><p><strong>增量复制</strong></p><ol><li>由于网络原因最近的数据没有成功同步（譬如断网或从节点宕机），而主节点复制积压缓冲区存在该命令（通过对比复制偏移量再次同步这部分数据）</li></ol></li></ul><ol start="6"><li><strong>命令持续复制</strong></li></ol><p>主节点会将当前接受到的写命令实时复制给从节点的同时会将发送内容记录在<code>复制积压缓冲区</code>。</p><p>复制积压缓冲区相当于是一个主节点用来暂存稍后需要发送的增量数据的地方，它是一个环形结构的缓冲区，大小通过 repl_backlog_size 配置。</p><p>值得注意的是因为是环形结构，所以即使缓冲区被写满主节点也会正常继续写入，这时就会导致新旧写入的内容被新写入的内容所覆盖。因此<code>复制积压缓冲区大小不宜过小，因为如果从节点故障恢复后发现主节点中并没有它确实的数据（通过对比主从的复制偏移量得知），就会触发全量复制，既主节点这时需要生成 RDB 文件并传输给从节点，因此复制效率会降低之余还会影响主节点性能</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制积压缓冲区信息</span></span><br><span class="line">repl_backlog_active:1 # 是否开启，0为关闭</span><br><span class="line">repl_backlog_size:1048576 # 【重要】：复制积压缓冲区大小</span><br><span class="line">repl_backlog_first_byte_offset:1 # 起始偏移量</span><br><span class="line">repl_backlog_histlen:11482 # 存储在积压缓冲区的有效大小</span><br></pre></td></tr></table></figure><h3 id="关于Redis复制的使用问题"><a href="#关于Redis复制的使用问题" class="headerlink" title="关于Redis复制的使用问题"></a>关于Redis复制的使用问题</h3><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><blockquote><p>注意：其实不推荐直接使用复制来做读写分离，而是应该尽量考虑 Redis 集群</p></blockquote><p>读写分离可以解决Redis的高负载问题，通常在读多写少的场景使用，通过<code>主节点写</code>，<code>从节点读</code>解决。</p><p>Redis读写分离存在以下问题：</p><ul><li><strong>复制数据延迟</strong></li></ul><p>复制延迟在网络上是一个不可避免的问题，延迟程序取决与<code>网络速度</code>和<code>命令阻塞程度</code></p><ul><li><strong>读到过期数据</strong></li></ul><p>存在这个问题是因为Redis的删除策略：<code>惰性删除</code>、<code>定时删除</code></p><p><code>惰性删除</code>：主节点在获取key的时候会检查key是否过期，如果过期则删除key并将删除命令同步给从节点。</p><p><code>定时删除</code>：除了惰性删除，Redis内部还维护了一个定时任务，用于轮询检测并删除过期的key，删除后会通过主节点同步删除命令给从节点。</p><p>那么就可能会发生这么一种情况，在某时刻大量key失效，主节点无法及时将删除命令同步给从节点，而这是用户在从节点对某个过期（将要被删除）的key进行了访问，这就造成了读到过期数据的问题。</p><ul><li><strong>节点故障</strong></li></ul><p>Redis复制有个非常大的缺点，就是无法做到故障转移，且在主从复制中从节点通常为了避免导致数据不一致而被设置成只读。因为在上述基础上可能会出现以下情况：</p><ol><li><p>主节点故障：用户无法写入，只能进行读操作</p></li><li><p>从节点故障：读写分离下用户无法读取数据</p></li></ol><p>之所以会出现上述两个问题的主要原因是<code>用户无法感知节点停止服务</code></p><h4 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h4><p>在复制中从节点配置是可以和主节点不一致的，比如通常的做法是：<code>主节点关闭AOF备份，而在从节点上开启，这样做可以提高主节点的性能，而且主从复制也是备份的一种</code>。</p><p>除此之外，从<code>Reids 5</code>开始提供参数<code>replica-ignore-maxmemory</code>来决定从节点是否忽略<code>maxmemory剔除策略，默认为yes</code>，既表示从节点不会自己剔除key，而必须通过主节点同步操作来删除。这样做的用意是<code>保证从节点不会因为maxmemory策略而导致数据与主节点不一致</code>。同样由于这个原因，从节点的 maxmemory 一般比主节点的 maxmemory 要大，因为从节点不会 maxmemory 剔除数据。</p><h4 id="复制风暴问题"><a href="#复制风暴问题" class="headerlink" title="复制风暴问题"></a>复制风暴问题</h4><p><code>复制风暴指的是主节点在短时间内和多个从节点建立连接从而引起大量全量复制</code>。复制风暴会导致主节点 CPU 急剧升高，以及内存和宽带被大量消耗，从而降低主节点吞吐量。</p><p>针对该问题 Redis 的做法是主节点为从节点生成 RDB 时，如果这时有多个从节点发起全量复制请求，那么这些从节点将共享当前生成的这个 RDB 文件，通过这种方式可以大大降低主节点的性能开销。</p><blockquote><p>如何避免复制风暴？</p></blockquote><ol><li>减少主节点上的从节点数，改用树结构</li></ol><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/003.png"></p><ol start="2"><li>避免多个主节点部署在同一台机器上</li></ol><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/002.png"></p><h3 id="复制常用配置"><a href="#复制常用配置" class="headerlink" title="复制常用配置"></a>复制常用配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主节点位置</span></span><br><span class="line"><span class="attr">replicaof</span> <span class="string">&lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="comment"># 从节点是否只读</span></span><br><span class="line"><span class="attr">replica-read-only</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 复制超时，如果数据量很大，该值适当调高</span></span><br><span class="line"><span class="attr">repl-timeout</span> <span class="string">60</span></span><br><span class="line"><span class="comment"># 主节点密码</span></span><br><span class="line"><span class="attr">masterauth</span> <span class="string">&lt;master-password&gt;</span></span><br><span class="line"><span class="comment"># 积压缓冲区大小</span></span><br><span class="line"><span class="attr">repl-backlog-size</span> <span class="string">1mb</span></span><br><span class="line"><span class="comment"># 在没有从节点的情况下多久释放复制积压缓冲区</span></span><br><span class="line"><span class="attr">repl-backlog-ttl</span> <span class="string">3600</span></span><br><span class="line"><span class="comment"># 选举优先级别，范围在 0-100。数字越低，优先级越高</span></span><br><span class="line"><span class="attr">replica-priority</span> <span class="string">100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 延迟低于10s的从节点被视为健康节点</span></span><br><span class="line"><span class="attr">min-replicas-max-lag</span> <span class="string">10</span></span><br><span class="line"><span class="comment"># 健康节点至少有三个时，主节点才会向从节点进行写操作。（前提是从节点数超过3个）</span></span><br><span class="line"><span class="comment"># 除吃之外，该配置还可以解决脑裂问题</span></span><br><span class="line"><span class="attr">min-replicas-to-write</span> <span class="string">3</span></span><br></pre></td></tr></table></figure><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><h3 id="是什么有什么用？"><a href="#是什么有什么用？" class="headerlink" title="是什么有什么用？"></a>是什么有什么用？</h3><blockquote><p>如图所示，Sentinel 是用来监控 Redis 的复制模式的。</p></blockquote><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/004.png"></p><p>Sentinel 其实是 Redis 的一种特殊节点，功能如下：</p><ul><li>发现故障</li><li>故障转移</li><li>通知客户端程序</li></ul><p>Sentinel 节点可以监控<code>数据节点</code> 以及 <code>监管其他Sentinel节点</code>，其操作如下：</p><ul><li>检测节点<code>是否可达</code>，不可达时则对该节点做<code>下线标示</code></li><li>检测到<code>数据主节点不可达时</code>，Sentinel 节点之间会进行投票，在大多数 Sentinel节点都认定该数据主节点不可达时，<code>Sentinel领导者节点</code>就会发起<code>故障转移</code>操作并<code>通知客户端</code></li></ul><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/005.png"></p><h3 id="搭建使用"><a href="#搭建使用" class="headerlink" title="搭建使用"></a>搭建使用</h3><p>案例环境：</p><ul><li>数据节点 3 个</li><li>Sentinel 节点 3 个</li></ul><p>在搭建 Sentinel 之前，需要给 Sentinel 一个监控目标。因此当前案例沿用上面主从复制的配置搭建一个 1 主 2 从的模型给 Sentinel 监控。</p><blockquote><p>Sentinel 的配置文件和普通数据节点一样，可以在 Redis 源码文件中找到模板</p></blockquote><ul><li><strong>sentinel01</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">port 26381</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mymaster：数据主节点的名称，自定义</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">127.0.0.1：数据主节点的ip</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6379：数据主节点的port</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2：判断数据主节点客观下线时所需要的最少的Sentinel节点，即quorum值</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Sentinel发出ping时，目标必须在30s内回应，否则会被主观下线</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">适当地调小该值可以让哨兵更快地发现故障，但也不能过小，譬如连短暂网络波动都不允许的话，就导致哨兵误操作从而引发集群不可用</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br></pre></td></tr></table></figure><ul><li><strong>sentinel02</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port 26380</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br></pre></td></tr></table></figure><ul><li><strong>sentinel03</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port 26381</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br></pre></td></tr></table></figure><ul><li><strong>启动Sentinel</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis01/bin/redis-sentinel redis01/sentinel.conf</span><br><span class="line">redis02/bin/redis-sentinel redis02/sentinel.conf</span><br><span class="line">redis03/bin/redis-sentinel redis03/sentinel.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者使用以下方式启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bin/redis-server sentinel.conf --sentinel</span></span><br></pre></td></tr></table></figure><p> 注意，当 Sentinel 节点启动后其下所属的配置文件就会发生编号，以 sentinel01 为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">port 26381</span><br><span class="line"></span><br><span class="line">sentinel myid d15ff199f291f4c6ef5308f27f32e29fe7b92520</span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel config-epoch mymaster 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Generated by CONFIG REWRITE</span></span><br><span class="line">dir &quot;/home/tandi/apps/redis-sentinel&quot;</span><br><span class="line">protected-mode no</span><br><span class="line">sentinel leader-epoch mymaster 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已知数据节点主节点上的从节点</span></span><br><span class="line">sentinel known-replica mymaster 127.0.0.1 6380</span><br><span class="line">sentinel known-replica mymaster 127.0.0.1 6381</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已知其余的sentinel节点</span></span><br><span class="line">sentinel known-sentinel mymaster 127.0.0.1 26379 02131b4181217dd09aa4c711dea62cfd9cd82fbb</span><br><span class="line">sentinel known-sentinel mymaster 127.0.0.1 26380 87776bb454ad2b904af3a649a6abfa03e8f24b69</span><br><span class="line">sentinel current-epoch 0</span><br></pre></td></tr></table></figure><ul><li>使用客户单查看 sentinel 信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-replica redis01/bin/redis-cli -p 26379 info sentinel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取被监控的主节点信息</span></span><br><span class="line">sentinel masters</span><br><span class="line">sentinel master 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取指定从节点的信息</span></span><br><span class="line">sentinel replicas 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取指定的Sentinel集合信息（不包含当前Sentinel节点）</span></span><br><span class="line">sentinel sentinels 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取主节点的ip和port</span></span><br><span class="line">sentinel get-master-addr-by-name 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新发现从节点和Sentinel节点</span></span><br><span class="line">sentinel reset 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（重要）强制故障转移(更换数据主节点)</span></span><br><span class="line">sentinel failover 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">（重要）检查当前Sentinel的quorum数是否达到配置要求</span></span><br><span class="line">sentinel ckquorum 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消监控</span></span><br><span class="line">sentinel remove 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定监控目标</span></span><br><span class="line">sentinel monitor 主节点名称 ip port quornum</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">动态设置Sentinel配置</span></span><br><span class="line">sentinel set 主节点名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">节点用于交换下线判断信息</span></span><br><span class="line">sentinel is-master-down-by-addr</span><br></pre></td></tr></table></figure><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h4 id="3个定时任务"><a href="#3个定时任务" class="headerlink" title="3个定时任务"></a>3个定时任务</h4><p>每隔 10 秒：Sentinel 节点会获取一次<code>info replication</code>信息以感知是否有新的数据节点加入到主从模型中。</p><p>每隔 2 秒：Sentinel 节点会订阅<code>__sentinel__：hello</code>频道并向其发送<code>对数据主节点判断</code>以及<code>自己当前的 sentinel 信息</code>。</p><p>每隔 1 秒：Sentinel 节点会向<code>数据节点</code>和<code>其他Sentinel节点</code>发送 ping 命令以检测节点是否可达。</p><h4 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h4><blockquote><p>主观下线</p></blockquote><p>当 Sentinel 节点去 ping 其他节点时，如果该节点没有 <code>down-after-milliseconds</code> 内响应，这是 Sentinel 节点就会对其做下线标记，而这种标记是非常主观的，因为这时无法确认其他 Sentinel 成员节点无法 ping 通该节点</p><blockquote><p>客观下线</p></blockquote><p><code>在数据节点被标记为主观下线后，且该节点又是主节点的话</code>。这时标记主观下线的 Sentinel 节点就会使用命令<code>sentinel is-master-down-by-addr</code>向其它 Sentinel 成员节点发起仲裁，要求其它 Sentinel 成员节点对主节点进行主观下线判断，并收集其信息对该主节点进行客观下线判断，当主观下线数量满足 <code>quorum</code> 时，则主节点就会被标记为客观下线。既这时 Sentinel 都认为主节点不能正常提供服务了，因此 Sentinel 会做故障转移，以及通知客户端。</p><h4 id="Sentinel故障转移过程"><a href="#Sentinel故障转移过程" class="headerlink" title="Sentinel故障转移过程"></a>Sentinel故障转移过程</h4><blockquote><p>注意：哨兵集群时通过对主节点进行 info 操作来获取到从节点集合的</p></blockquote><ol><li><p>选择一个能够胜任从节点当主节点。首先会以<code>优先级</code>进行评选，其次通过<code>复制偏移量</code>，既复制数据较多的做主节点，如果以上都无法确认，则最后<code>runid 最小的作为主节点</code></p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/006.png"></p></li><li><p>向该从节点执行<code>replicaof no one</code>命令以断开原来的主从关系，此时节点会自动晋升为主节点从而恢复写服务</p></li><li><p>再向其余的从节点发起主节点变更</p></li><li><p>将原来主节点变更为从节点，并在其恢复后让其作为新主节点的从节点</p></li></ol><h3 id="关于-Sentinel-领导者故障问题"><a href="#关于-Sentinel-领导者故障问题" class="headerlink" title="关于 Sentinel 领导者故障问题"></a>关于 Sentinel 领导者故障问题</h3><p>Sentinel 节点通信是通过发布&#x2F;订阅机制来实现的，而领导者节点选举则采用<code>Raft算法</code>。其中领导者节点主要负责当数据主节点故障时对数据节点集群做<code>故障转移</code>以及<code>通知客户端</code>的工作。</p><p>在 Raft 算法中有两种超时机制，分别是<code>选举超时</code>和<code>心跳超时</code>。当领导者故障时，先发生心跳超时的从节点，会率先进入选举超时倒数，而一旦正式选举超时，该节点就会发起领导者选举投票，只要节点票数超过集群节点数的一半（包含自己那票）就可以当选这界选举的领导者，而当选举完毕后 Sentinel 集群就会恢复运作。</p><p>需要补充一点的是在Raft算法中，率先发起选举的节点会将自己的选票投给自己，而接收到拉票请求的节点，则必须投给当前拉票的节点。譬如，在 3 个节点的集群中，主节点宕机后率先发出拉票请求的节点将会成为主节点。</p><p>当然，如果是普通存储系统中的数据节点使用 Raft 算法的话，其实在拉票时应该还需要判断集群节点的数据偏移量，这时偏移量大的节点会成为领导者而不是率先发起拉票请求的节点。但因为 Sentinel 集群并不存储数据，因此个人理解并没有这个条件（有待证实）。</p><h3 id="Java版客户端"><a href="#Java版客户端" class="headerlink" title="Java版客户端"></a>Java版客户端</h3><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>操作例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJedisSentinel</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">masterName</span> <span class="operator">=</span> <span class="string">&quot;mymaster&quot;</span>;</span><br><span class="line">    <span class="comment">// 哨兵集群</span></span><br><span class="line">    Set&lt;String&gt; sentinels = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    sentinels.add(<span class="string">&quot;127.0.0.1:26379&quot;</span>);</span><br><span class="line">    sentinels.add(<span class="string">&quot;127.0.0.1:26380&quot;</span>);</span><br><span class="line">    sentinels.add(<span class="string">&quot;127.0.0.1:26381&quot;</span>);</span><br><span class="line">    <span class="comment">// 连接池参数设置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">GenericObjectPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericObjectPoolConfig</span>();</span><br><span class="line">    config.setMaxTotal(<span class="number">30</span>); <span class="comment">// 最大连接数</span></span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>); <span class="comment">// 最大空闲连接数</span></span><br><span class="line">    config.setNumTestsPerEvictionRun(<span class="number">5</span>); <span class="comment">// 每次释放连接的最大数目</span></span><br><span class="line">    config.setTimeBetweenEvictionRunsMillis(<span class="number">30000</span>); <span class="comment">// 释放连接的扫描间隔（毫秒）</span></span><br><span class="line">    config.setMaxWaitMillis(<span class="number">1500</span>); <span class="comment">// 获取连接的最大等待时间（毫秒）</span></span><br><span class="line">    config.setTestOnBorrow(<span class="literal">true</span>); <span class="comment">// 获取连接时候检查有效性, 默认false</span></span><br><span class="line">    config.setTestWhileIdle(<span class="literal">true</span>); <span class="comment">// 空闲时检查有效性, 默认false</span></span><br><span class="line">    config.setBlockWhenExhausted(<span class="literal">false</span>); <span class="comment">// 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">JedisSentinelPool</span> <span class="variable">jedisSentinelPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisSentinelPool</span>(masterName, sentinels, config);</span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">resource</span> <span class="operator">=</span> jedisSentinelPool.getResource();</span><br><span class="line">    resource.set(<span class="string">&quot;person:name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    System.out.println(resource.get(<span class="string">&quot;person:name&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面不难看出使用 Sentinel 集群后我们并不需要填写数据节点为地址，既 Sentinel 充当着服务发现的角色，这点类似于 RocketMQ 的 NameServer 服务</p><h4 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h4><blockquote><p>依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:26379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:26380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:26381</span></span><br></pre></td></tr></table></figure><blockquote><p>操作例子</p></blockquote><p>因为用的是Spring Boot，所以和普通的连接操作一样使用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //操作hash</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForHash();</span></span><br><span class="line"><span class="comment">        //操作list</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForList();</span></span><br><span class="line"><span class="comment">        //操作set</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForSet();</span></span><br><span class="line"><span class="comment">        //操作有序set</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForZSet();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//操作字符串</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;person:name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;person:name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExecuteMethod</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">execute</span> <span class="operator">=</span> stringRedisTemplate.execute((RedisConnection connection) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> connection.set(<span class="string">&quot;hi&quot;</span>.getBytes(), <span class="string">&quot;test setnx&quot;</span>.getBytes(),</span><br><span class="line">                              Expiration.seconds(<span class="number">30</span>),</span><br><span class="line">                              RedisStringCommands.SetOption.SET_IF_ABSENT);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(execute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LettuceConnectionFactory lettuceConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定主节点的从节点ip和port</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RedisSentinelConnection</span> <span class="variable">sentinelConnection</span> <span class="operator">=</span> lettuceConnectionFactory.getSentinelConnection();</span><br><span class="line">    <span class="type">RedisSentinelConfiguration</span> <span class="variable">sentinelConfiguration</span> <span class="operator">=</span> lettuceConnectionFactory.getSentinelConfiguration();</span><br><span class="line"></span><br><span class="line">    System.out.println(sentinelConnection.slaves(() -&gt; <span class="string">&quot;mymaster&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ul><li>Sentinel 功能只对主节点进行故障转移，所以在 Sentinel 模式下应该尽量使用一主多从模型，且尽量做到有两个以上的从节点以避免从节点宕机后主节点也宕机导致没有从节点替换的极端情况</li><li>在 Sentinel 模式下实现读写分离的思路是，应用程序需要获取所有从节点地址，然后实现从节点池来完成从节点读操作，但这无疑是加大了集群的维护成本，所以并不推荐使用，因此建议使用 Cluster 模式。Cluster 拥有去中心化的特性，而且也基于主从模型，所以在吞吐量和维护成本上都要比 Sentinel 要有优势</li></ul><h2 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h2><h3 id="关于数据分区策略-负载均衡算法"><a href="#关于数据分区策略-负载均衡算法" class="headerlink" title="关于数据分区策略 - 负载均衡算法"></a>关于数据分区策略 - 负载均衡算法</h3><p>在了解Redis Cluster之前，需要理解什么是数据分区策略。掌握数据分区策略对于理解Redis Cluster的数据分布和故障转移有很大的帮助。</p><p>常见的数据分区策略有<code>哈希取模</code>、<code>一致性哈希</code>，例如MySQL中还支持诸如<code>range</code>和<code>ksy</code>等策略，而Redis Cluster使用的则是<code>虚拟槽</code>。</p><h4 id="哈希取模"><a href="#哈希取模" class="headerlink" title="哈希取模"></a>哈希取模</h4><p>哈希取模指的是从数据中选取一个适合的key进行哈希运算，并取模数据存储节点的数量后按照该结果来选择对应的数据存储节点来存取数据。</p><p>公式：<code>hash(key) % n</code>，当节点间数为2的n次幂时可以使用<code>hash(key) &amp; (n-1)</code>来代替前一种方式可以提高计算效率，其中n为集群节点数</p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/007.png"></p><p>哈希取模策略通常使用在分库分表上。但必须强调一下它的缺点，就是如果想要扩展节点数量，那么就需要重新将数据分配，这是一个相当大的代价，所以通常使用哈希取模策略进行分区前都应该预计充足的库表数量，确保在往后一段时间来都够用。而如果确实需要扩容的话，通常都是翻倍扩容。</p><h4 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h4><p>一致性哈希的思想是，先计算出存储节点的token值（例如哈希值），这个token值位于0到2的32次幂范围。而0到2的32次幂形成了一个闭合的hash环，用于确立数据应该落在那个token值对应的存储节点上，如下：</p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/008.png"></p><p>图中的例子有4个数据存储节点，那么数据的存储位置需要以下步骤来确立：</p><ol><li>使用数据的key计算出哈希值</li><li>根据哈希值来查找存储节点；例如哈希值位于node1和node2之间，则需要按照<code>顺时针选择原则</code>，即这时数据存储节点应该是node2</li></ol><p>相较于哈希取模，一致性哈希在<code>增加</code>或<code>删减</code>节点时，只会影响到原来存储在<code>左边</code>或<code>右边</code>节点的数据，再加上Hash函数的离散，从而大大降低了因扩容和缩容后导致数据不命中的数据范围。</p><p>其中Redis客户端Jedis提供的<code>ShardedJedis</code>就使用一致性哈希来进行分片操作的。除此之外Google Guava也同样提供一致性哈希的实现。</p><p><strong>一致性哈希存在的问题：</strong></p><p>1）增加和减少节点时，会影响左边或右边节点的数据命中。这时需要<code>人工解决</code>或<code>舍弃这部分数据</code>。也因此，<code>一致性哈希通常用在分布式缓存中</code>，因为数据足够离散，所以这部分数据其实对整体来说影响并不大。</p><p>2）当节点数量少，节点数量发生变化就会对数据造成大影响，因为数据不够离散。这时体现不到一致性哈希的价值，因此不推荐使用。</p><h4 id="虚拟槽"><a href="#虚拟槽" class="headerlink" title="虚拟槽"></a>虚拟槽</h4><p>虚拟槽和一致性哈希类似，不过它不是做成hash环，而是<code>哈希槽</code>。在Redis Cluster中有<code>16384</code>个槽（0~16383）。</p><p>集群中的每个节点都负责维护部分槽和槽做映射的数据。</p><p>数据通过公式<code>slot = CRC16(key) &amp; 16383</code>来决定存储的槽位。这样的好处是，做到了数据与数据存储节点之间的解耦，因此有利于以后的数据迁移。也可以简单理解，<code>数据存储节点 - 虚拟槽 - 数据</code>。</p><p>假设集群中有3个数据存储节点，如下图：</p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/009.png"></p><p>那么当扩展节点时，只需要将原来节点负责的槽位转移给新增节点即可，如下：</p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/010.png"></p><blockquote><p><strong>需要强调的是，对于Redis Cluster而言，扩容和缩容是非常灵活的，在此期间不会影响对外服务。</strong></p></blockquote><h3 id="Redis-Cluster搭建"><a href="#Redis-Cluster搭建" class="headerlink" title="Redis Cluster搭建"></a>Redis Cluster搭建</h3><h4 id="搭建步骤说明"><a href="#搭建步骤说明" class="headerlink" title="搭建步骤说明"></a>搭建步骤说明</h4><ol><li>准备节点</li><li>节点握手</li><li>分配槽位</li></ol><h4 id="手动搭建"><a href="#手动搭建" class="headerlink" title="手动搭建"></a>手动搭建</h4><blockquote><p>案例使用 6 个节点：3个数据节点、3个备份节点</p></blockquote><ol><li><strong>准备节点</strong></li></ol><p>[ node1-6 ]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6380 6381 6382 6383 6384</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启配置</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><p>[ 启动节点 ]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis01/bin/redis-server redis01/cluster.conf</span><br><span class="line">redis02/bin/redis-server redis02/cluster.conf</span><br><span class="line">redis03/bin/redis-server redis03/cluster.conf</span><br><span class="line">redis04/bin/redis-server redis04/cluster.conf</span><br><span class="line">redis05/bin/redis-server redis05/cluster.conf</span><br><span class="line">redis06/bin/redis-server redis06/cluster.conf</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>节点握手</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  redis01 bin/redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">dc7c7c5a61088460a5f81245f1a5b39641385637 :6379@16379 myself,master - 0 0 0 connected</span><br></pre></td></tr></table></figure><blockquote><p>cluster nodes命令：查看当前节点感知到的其它集群成员。</p><p>其中dc7c7c5a61088460a5f81245f1a5b39641385637为集群节点id。集群节点id不会因为重启导致改变，而是随着集群初始化而创建，以后亦可重用。</p></blockquote><p>可以看到目前6379节点只能感知到自己。</p><p><strong>使用以下命令进行节点握手：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6380</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6381</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6382</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6383</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6384</span><br></pre></td></tr></table></figure><p>在此查看感知节点，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">8c20fd831a27ee5c0891d6897c3b8404cd944691 127.0.0.1:6382@16382 master - 0 1571062568000 5 connected</span><br><span class="line">0a210a34f512f71d1d35895ccbaba8558eea601d 127.0.0.1:6384@16384 master - 0 1571062570279 4 connected</span><br><span class="line">6fab7a12e935b1a40c1bbae5c0b77142da71c89d 127.0.0.1:6380@16380 master - 0 1571062569276 0 connected</span><br><span class="line">a42be3d966c22da0e0a5d0206be459cf46dddec6 127.0.0.1:6381@16381 master - 0 1571062567000 2 connected</span><br><span class="line">36fa72da040b9c9497df65f91d4ea1e3ae4454f0 127.0.0.1:6383@16383 master - 0 1571062568273 3 connected</span><br><span class="line">dc7c7c5a61088460a5f81245f1a5b39641385637 127.0.0.1:6379@16379 myself,master - 0 1571062568000 1 connected</span><br></pre></td></tr></table></figure><p>可以看到已经感知到了其他的成员节点。过程如下：</p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/011.png"></p><p>当6379感知到其余5个节点后，其余5个节点就通过6379作为桥梁感知到大家的存在。</p><ol start="3"><li><strong>分配槽位</strong></li></ol><p>集群在分配槽位之前是不可提供服务的，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; set name zhangsan</span><br><span class="line">(error) CLUSTERDOWN Hash slot not served</span><br><span class="line">127.0.0.1:6380&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用如下命令分配槽位：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli -h 127.0.0.1 -p 6379 cluster addslots &#123;0..5461&#125;</span><br><span class="line">bin/redis-cli -h 127.0.0.1 -p 6380 cluster addslots &#123;5462..10922&#125;</span><br><span class="line">bin/redis-cli -h 127.0.0.1 -p 6381 cluster addslots &#123;10923..16383&#125;</span><br></pre></td></tr></table></figure><p>再查看以下进群信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok # 可以看到集群已经启动</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据集群节点id，将其余3个节点设置为备份节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli -h 127.0.0.1 -p 6382 cluster replicate dc7c7c5a61088460a5f81245f1a5b39641385637</span><br><span class="line">bin/redis-cli -h 127.0.0.1 -p 6383 cluster replicate 6fab7a12e935b1a40c1bbae5c0b77142da71c89d</span><br><span class="line">bin/redis-cli -h 127.0.0.1 -p 6384 cluster replicate a42be3d966c22da0e0a5d0206be459cf46dddec6</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>测试集群</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; set person:name zhangsan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get person:name</span><br><span class="line">&quot;zhangsan&quot;</span><br></pre></td></tr></table></figure><h4 id="redis-trib-rb搭建（Redis-5-x开始已经不推荐）"><a href="#redis-trib-rb搭建（Redis-5-x开始已经不推荐）" class="headerlink" title="redis-trib.rb搭建（Redis 5.x开始已经不推荐）"></a>redis-trib.rb搭建（Redis 5.x开始已经不推荐）</h4><blockquote><p>说明</p></blockquote><p>除了手动搭建集群之外，Redis还提供了比较简单的搭建方法，就是使用ruby脚本来搭建。</p><p>该脚本位于Redis源码包的src文件夹下。但新版本的Redis已经不推荐使用该方法来搭建，所有的集群搭建功能已经迁移到了redis-cli。</p><blockquote><p>下载配置ruby环境</p></blockquote><p>ubuntu环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装ruby</span></span><br><span class="line">sudo apt install ruby rubygems-integration</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载redis脚本</span></span><br><span class="line">sudo gem install redis</span><br></pre></td></tr></table></figure><blockquote><p>复制redis的ruby脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-cluster cp ../redis-5.0.5/src/redis-trib.rb .</span><br><span class="line">➜  redis-cluster ll</span><br><span class="line">总用量 4.0K</span><br><span class="line">drwxrwx--- 1 root vboxsf    0 10月 20 12:02 redis01</span><br><span class="line">drwxrwx--- 1 root vboxsf    0 10月 20 12:02 redis02</span><br><span class="line">drwxrwx--- 1 root vboxsf    0 10月 20 12:02 redis03</span><br><span class="line">drwxrwx--- 1 root vboxsf    0 10月 20 12:02 redis04</span><br><span class="line">drwxrwx--- 1 root vboxsf    0 10月 20 12:02 redis05</span><br><span class="line">drwxrwx--- 1 root vboxsf    0 10月 20 12:02 redis06</span><br><span class="line">drwxrwx--- 1 root vboxsf    0 10月 20 12:02 redis07</span><br><span class="line">-rwxrwx--- 1 root vboxsf 3.6K 10月 21 11:03 redis-trib.rb</span><br></pre></td></tr></table></figure><blockquote><p>运行脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  redis-cluster ./redis-trib.rb       </span><br><span class="line">WARNING: redis-trib.rb is not longer available!</span><br><span class="line">You should use redis-cli instead.</span><br><span class="line"></span><br><span class="line">All commands and features belonging to redis-trib.rb have been moved</span><br><span class="line">to redis-cli.</span><br><span class="line">In order to use them you should call redis-cli with the --cluster</span><br><span class="line">option followed by the subcommand name, arguments and options.</span><br><span class="line"></span><br><span class="line">Use the following syntax:</span><br><span class="line">redis-cli --cluster SUBCOMMAND [ARGUMENTS] [OPTIONS]</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">redis-cli --cluster info 127.0.0.1:7000</span><br><span class="line"></span><br><span class="line">To get help about all subcommands, type:</span><br><span class="line">redis-cli --cluster help</span><br></pre></td></tr></table></figure><p>可以看出，ruby脚本已经不被推荐使用，而是推荐使用<code>redis-cli --cluster</code>。</p><p>所以该搭建方法到此为止。例子查看之前的文章： <a href="https://www.cnblogs.com/tandi19960505/p/7690020.html">https://www.cnblogs.com/tandi19960505/p/7690020.html</a> </p><h4 id="新命令搭建"><a href="#新命令搭建" class="headerlink" title="新命令搭建"></a>新命令搭建</h4><blockquote><p>搭建</p></blockquote><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/013.png"></p><p><strong>例子：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 --cluster-replicas 1</span><br></pre></td></tr></table></figure><p>意思是在集群中每个主节点有1个备份，也就是说6个节点中，3个主3个从</p><p>使用该方式配置可以自动分配槽位，所以推荐这种方式来配置集群</p><blockquote><p>扩容</p></blockquote><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/014.png"></p><p><strong>例子：添加节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster add-node 127.0.0.1:6385 127.0.0.1:6384 </span><br></pre></td></tr></table></figure><p>其中 127.0.0.1:6384 是现任集群成员，指定成员的目的其实很明确，因为 Redis Cluster 采用的集群共识算法是 Gossip ，所以这里就是通过 127.0.0.1:6384 作为集群入口媒介，此后 127.0.0.1:6384 会新成员信息广播给集群中的其他成员，最后达到最终一致。</p><p>注意：新添加的节点是不会主动分配槽的</p><p><strong>例子：为新添加的节点分配槽位</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1:6385</span><br></pre></td></tr></table></figure><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/015.png"></p><blockquote><p>缩容</p></blockquote><p>删除从节点：</p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/016.png"></p><p>删除主节点：</p><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/017.png"></p><p>注意：应该先将主节点上的槽分给其他主节点然后再删除</p><h3 id="节点扩容"><a href="#节点扩容" class="headerlink" title="节点扩容"></a>节点扩容</h3><ol><li><strong>运行新节点</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cluster redis07/bin/redis-server redis07/cluster.conf</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>节点握手</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli -p 6379 cluster meet 127.0.0.1 6385</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者,前面为新节点，后面为meet节点</span></span><br><span class="line">redis-cli --cluster add-node 127.0.0.1:6385 127.0.0.1:6379</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>槽和数据迁移</strong></li></ol><p>步骤1：目标节点执行<code>cluster setslot &#123;slot&#125; importing &#123;sourceNodeId&#125; </code>，表示目标节点准备接收slot；</p><p>步骤2：源节点执行<code> cluster setslot&#123;slot&#125; migrating &#123;targetNodeId&#125;</code>，表示源节点准备导出slot；</p><p>步骤3：源节点执行<code>cluster getkeysinslot &#123;slot&#125; &#123;count&#125;</code>，每执行一次就可以获取slot中count个key数据；</p><p>步骤4：源节点执行<code>migrate &#123;targetIP&#125; &#123;targetPort&#125; key 0 &#123;timeout&#125;</code>，使用管道将<code>步骤3</code>得到的key发送给目标节点进行保存；</p><p>步骤5：重复3-4步骤直到slot所有key都发送给目标节点；</p><p>步骤6：所有集群节点执行<code>cluster setslot &#123;slot&#125; node &#123;targetNodeId&#125; </code>，达到告诉集群成员节点得知slot的变动；</p><blockquote><p>推荐文章： <a href="https://enpsl.top/2019/01/23/2019-01-23-redis-cluster-operator/">https://enpsl.top/2019/01/23/2019-01-23-redis-cluster-operator/</a> </p></blockquote><h3 id="存取数据流程"><a href="#存取数据流程" class="headerlink" title="存取数据流程"></a>存取数据流程</h3><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/012.png"></p><p>客户端存取数据时可以随机选取节点进行操作，然后根据 key 哈希计算判断是否应在当前节点进行操作，如果不是，当前节点会通过 MOVED 命令要求客户端重新发送请求到正确的节点间中进行操作</p><blockquote><p>查看某个 key 所在的槽位</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster keyslot person:name</span><br><span class="line">(integer) 7582</span><br></pre></td></tr></table></figure><h3 id="Java版客户端-1"><a href="#Java版客户端-1" class="headerlink" title="Java版客户端"></a>Java版客户端</h3><h4 id="Jedis-1"><a href="#Jedis-1" class="headerlink" title="Jedis"></a>Jedis</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJedisCluster</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 集群节点</span></span><br><span class="line">    Set&lt;HostAndPort&gt; nodes = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    nodes.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    nodes.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6380</span>));</span><br><span class="line">    nodes.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6381</span>));</span><br><span class="line">    nodes.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6382</span>));</span><br><span class="line">    nodes.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6383</span>));</span><br><span class="line">    nodes.add(<span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6384</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接池参数设置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">GenericObjectPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericObjectPoolConfig</span>();</span><br><span class="line">    config.setMaxTotal(<span class="number">30</span>); <span class="comment">// 最大连接数</span></span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>); <span class="comment">// 最大空闲连接数</span></span><br><span class="line">    config.setNumTestsPerEvictionRun(<span class="number">5</span>); <span class="comment">// 每次释放连接的最大数目</span></span><br><span class="line">    config.setTimeBetweenEvictionRunsMillis(<span class="number">30000</span>); <span class="comment">// 释放连接的扫描间隔（毫秒）</span></span><br><span class="line">    config.setMaxWaitMillis(<span class="number">1500</span>); <span class="comment">// 获取连接的最大等待时间（毫秒）</span></span><br><span class="line">    config.setTestOnBorrow(<span class="literal">true</span>); <span class="comment">// 获取连接时候检查有效性, 默认false</span></span><br><span class="line">    config.setTestWhileIdle(<span class="literal">true</span>); <span class="comment">// 空闲时检查有效性, 默认false</span></span><br><span class="line">    config.setBlockWhenExhausted(<span class="literal">false</span>); <span class="comment">// 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true</span></span><br><span class="line"></span><br><span class="line">    <span class="type">JedisCluster</span> <span class="variable">cluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(nodes, config);</span><br><span class="line"></span><br><span class="line">    cluster.set(<span class="string">&quot;person:name&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(cluster.get(<span class="string">&quot;person:name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sprig-Data-Redis"><a href="#Sprig-Data-Redis" class="headerlink" title="Sprig Data Redis"></a>Sprig Data Redis</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6381</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6382</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6383</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:6384</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LettuceConnectionFactory lettuceConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定主节点的从节点ip和port</span></span><br><span class="line"><span class="comment">//    @Test</span></span><br><span class="line"><span class="comment">//    public void test() &#123;</span></span><br><span class="line"><span class="comment">//        RedisSentinelConnection sentinelConnection = lettuceConnectionFactory.getSentinelConnection();</span></span><br><span class="line"><span class="comment">//        List&lt;RedisServer&gt; slaves = (List&lt;RedisServer&gt;) sentinelConnection.slaves(() -&gt; &quot;mymaster&quot;);</span></span><br><span class="line"><span class="comment">//        System.out. println(sentinelConnection.slaves(() -&gt; &quot;mymaster&quot;));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        StringRedisTemplate template = new StringRedisTemplate();</span></span><br><span class="line"><span class="comment">//        template.setConnectionFactory(lettuceConnectionFactory);</span></span><br><span class="line"><span class="comment">//        template.afterPropertiesSet();</span></span><br><span class="line"><span class="comment">//        template.opsForValue().set(&quot;person:name&quot;, &quot;lise&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(template.opsForValue().get(&quot;person:name&quot;));</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //操作hash</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForHash();</span></span><br><span class="line"><span class="comment">        //操作list</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForList();</span></span><br><span class="line"><span class="comment">        //操作set</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForSet();</span></span><br><span class="line"><span class="comment">        //操作有序set</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForZSet();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//操作字符串</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;person:name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;person:name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExecuteMethod</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">execute</span> <span class="operator">=</span> stringRedisTemplate.execute((RedisConnection connection) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> connection.set(<span class="string">&quot;hi&quot;</span>.getBytes(), <span class="string">&quot;test setnx&quot;</span>.getBytes(),</span><br><span class="line">                              Expiration.seconds(<span class="number">30</span>),</span><br><span class="line">                              RedisStringCommands.SetOption.SET_IF_ABSENT);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(execute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于Redis高可用丢失数据问题"><a href="#关于Redis高可用丢失数据问题" class="headerlink" title="关于Redis高可用丢失数据问题"></a>关于Redis高可用丢失数据问题</h2><p>需要强调一下的是 Redis 构建出来的高可用架构是一个 AP 系统，既它并不能保证数据的一致性，因此会存储数据丢失问题。例如<code>延迟复制情况下Master宕机后Replica晋升为Master</code> 或出现<code>网络分区</code>时就会导致数据丢失。</p><blockquote><p>延时复制导致数据丢失</p></blockquote><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/018.png"></p><blockquote><p>网络分区导致脑裂后丢失数据</p></blockquote><p><img src="/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/019.png"></p><p>因为出现网络分区，特定时间内哨兵无法通知 client-1 原 Master 已经被客观下线</p><blockquote><p>如何解决数据丢失？</p></blockquote><p>结论：目前而言 Redis 的高可用解决方案不能避免数据丢失，只能是尽量降低丢失数据的量。</p><p>在 Redis 主从中有如下两个关键配置，可以利用其特定尽量减少数据丢失的量</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要求复制延迟低于指定时间值（秒），否则拒绝提供写服务</span></span><br><span class="line"><span class="attr">min-replicas-max-lag</span> <span class="string">10</span></span><br><span class="line"><span class="comment"># 要求健康节点数（副本节点）要达到一定的数量，否则拒绝提供写服务</span></span><br><span class="line"><span class="comment"># 可解决脑裂问题</span></span><br><span class="line"><span class="attr">min-replicas-to-write</span> <span class="string">3</span></span><br></pre></td></tr></table></figure><ul><li>上面配置的意思是在主从复制中，必须有3个健康节点连接上Master且其复制的延时值不大于10秒，如果不满足条件则拒绝客户端的写服务</li></ul><p>多说一句，Redis 高可用属于 AP 架构，既可用性优先设计，因此尽量不要使用 Redis 来实现分布式锁。而官方所建议的 RedLock （即过半数则上锁成功）方案，其实在高并发场景性能也一般，甚至可能出现活锁而导致一直加锁不成功的极端情况。所以，如果需要实现分布式锁，则应该使用一致性优先的 CP 系统，譬如 ZooKeeper、Etcd 等</p><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年10月22日 14:40:20 — 添加集群相关内容</li><li>2020年5月9日 12:14:58 — 添加关于数据丢失问题的相关内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章解决Redis的基本使用</title>
      <link href="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年10月22日 21:06:17 — 添加关于Redis内存碎片问题内容</li><li>2019年10月22日 22:35:05 — 添加关于Stream数据类型内容（redis5.x）</li><li>2019年10月29日10:05:26 — 添加缓存双写一致性问题解决方案</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>推荐入门书籍：《Redis开发与运维》和《Redis实战》</p><p>Redis 命令参考：<a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></p><p>Redis 文档：<a href="http://www.redis.cn/documentation.html">http://www.redis.cn/documentation.html</a></p><p>Lua入门：<a href="https://moonbingbing.gitbooks.io/openresty-best-practices/">https://moonbingbing.gitbooks.io/openresty-best-practices/</a></p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>Redis是一款C语言开发的键值对NoSQL</p><p>Redis具有以下特性：</p><ul><li>开源</li><li>基于内存</li><li>单线程</li><li>支持多种数据类型</li><li>基于 epoll 的多路复用IO模型</li><li>跨平台且支持多种语言客户端</li></ul><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h3><blockquote><p>官网地址：<a href="https://redis.io/">https://redis.io/</a></p></blockquote><p><strong>[下载并解压]</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz # 下载redis源码包</span><br><span class="line">tar -zxvf redis-5.0.5.tar.gz -C ~/apps/   # 解压到指定位置</span><br></pre></td></tr></table></figure><p><strong>[安装]</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~/apps/redis-5.0.5 # 切换到解压的目录下</span><br><span class="line">make # 编译源码（需要gcc-c++提供编译支持）</span><br><span class="line">mkdir ～/app/redis # 创建一个用于存放安装内容的文件夹</span><br><span class="line">make install PREFIX=/home/用户名称/apps/redis  #　安装到该文件夹下，注意要绝对路径</span><br><span class="line">cp redis.conf ../redis # 将配置文件复制一份给安装好的redis</span><br></pre></td></tr></table></figure><h3 id="服务端的3种启动方式"><a href="#服务端的3种启动方式" class="headerlink" title="服务端的3种启动方式"></a>服务端的3种启动方式</h3><p><strong>[默认启动]</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-server</span><br></pre></td></tr></table></figure><p><strong>[配置启动]</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server --port 7777</span><br></pre></td></tr></table></figure><p><strong>[配置文件启动] - 推荐</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-server redis.conf # 可以在配置文件种添加 daemonize yes 配置以后台形式运行</span><br></pre></td></tr></table></figure><h3 id="停止服务端"><a href="#停止服务端" class="headerlink" title="停止服务端"></a>停止服务端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli shutdown</span><br></pre></td></tr></table></figure><h3 id="客户端连接服务端"><a href="#客户端连接服务端" class="headerlink" title="客户端连接服务端"></a>客户端连接服务端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli # 或者添加参数指定： -h localhost -p 6379</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">string类型基本操作</span></span><br><span class="line">localhost:6379&gt; set name zhangsan # 设置一个string类型的key value</span><br><span class="line">OK</span><br><span class="line">localhost:6379&gt; get name # 根据key来获取value</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line">localhost:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="实时监控"><a href="#实时监控" class="headerlink" title="实时监控"></a>实时监控</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/redis-cli monitor</span><br></pre></td></tr></table></figure><h2 id="常用key命令"><a href="#常用key命令" class="headerlink" title="常用key命令"></a>常用key命令</h2><ul><li>keys：打印符合给定pattern的key</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys na*</span><br><span class="line">1) &quot;name&quot;</span><br></pre></td></tr></table></figure><ul><li><p>scan、sscan、hscan、zscan 等命令可用于代替较为耗时的范围操作（譬如 keys、lrange、smembers 等等），其区别如下：</p><ul><li>keys、lrange、smembers 等范围操作实时性强，但阻塞时间也长</li><li>scan 系列命令阻塞时间短，但有以下两个缺点<ol><li>如果发生了rehash，同一个元素可能会被返回多次，所以去重操作需要应用程序解决</li><li>不能保证返回数据集合的实时性。譬如操作中途数据被新增或修改，scan命令可能无法马上感知到</li></ol></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scan 0</span><br><span class="line">1) &quot;17&quot;</span><br><span class="line">2)  1) &quot;key:12&quot;</span><br><span class="line">    2) &quot;key:8&quot;</span><br><span class="line">    3) &quot;key:4&quot;</span><br><span class="line">    4) &quot;key:14&quot;</span><br><span class="line">    5) &quot;key:16&quot;</span><br><span class="line">    6) &quot;key:17&quot;</span><br><span class="line">    7) &quot;key:15&quot;</span><br><span class="line">    8) &quot;key:10&quot;</span><br><span class="line">    9) &quot;key:3&quot;</span><br><span class="line">    10) &quot;key:7&quot;</span><br><span class="line">    11) &quot;key:1&quot;</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; scan 17</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;key:5&quot;</span><br><span class="line">   2) &quot;key:18&quot;</span><br><span class="line">   3) &quot;key:0&quot;</span><br><span class="line">   4) &quot;key:2&quot;</span><br><span class="line">   5) &quot;key:19&quot;</span><br><span class="line">   6) &quot;key:13&quot;</span><br><span class="line">   7) &quot;key:6&quot;</span><br><span class="line">   8) &quot;key:9&quot;</span><br><span class="line">   9) &quot;key:11&quot;</span><br></pre></td></tr></table></figure></li></ul><ul><li>dbsize：查询当前 Redis 中有多少key</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name1 zhangsan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name2 lisi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><ul><li>exists：检查指定 key 是否存在</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists name1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; exists name3</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><ul><li>del：删除指定的key</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del name1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; exists name1</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><ul><li>expire 和 pexpire：设置 key 的过期时间，单位默认为 s 和 ms</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire name2 30</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pexpire name1 10000</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><ul><li>persist：清除 key 的过期设定</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name1 zhangsan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire name1 60</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name1</span><br><span class="line">(integer) 57</span><br><span class="line">127.0.0.1:6379&gt; persist name1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name1</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure><ul><li>ttl 和 pttl：返回key的存活时间，ttl返回s，pttl返回ms</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name1 zhangsan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire name1 30</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name1</span><br><span class="line">(integer) 23</span><br><span class="line">127.0.0.1:6379&gt; pttl name1</span><br><span class="line">(integer) 20462</span><br></pre></td></tr></table></figure><ul><li>flushdb 和 flushall：删除当前db的所有key和删除所有db的所有key</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; flushall</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>rename：修改key的名字</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; set name1 zhangsam</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; rename name1 name100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name100&quot;</span><br></pre></td></tr></table></figure><ul><li>type：查看key的数据类型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; type name100</span><br><span class="line">string</span><br></pre></td></tr></table></figure><ul><li>object encoding：查看数据类型的内部编码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; object encoding name100</span><br><span class="line">&quot;embstr&quot;</span><br></pre></td></tr></table></figure><h2 id="Redis支持的-6-种数据类型"><a href="#Redis支持的-6-种数据类型" class="headerlink" title="Redis支持的 6 种数据类型"></a>Redis支持的 6 种数据类型</h2><blockquote><p>图片源自：《Redis开发与运维》</p></blockquote><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/001.png"></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><blockquote><p>基于<code>动态字符串</code></p><ul><li>长度根据保存字符串而定，一般为8、16、32、64个字节</li><li>可保存二进制字节流</li><li>在 Redis 中所有key都是动态字符串类型</li><li>Redis 没有沿用C语言的字符串是因为想构建一个可修改的字符串，譬如append操作</li></ul></blockquote><ul><li>set 和 get：设置和取值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name1 zhangsan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line">&quot;zhangsan&quot;</span><br></pre></td></tr></table></figure><ul><li>append：追加值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; append name1 -helloworld</span><br><span class="line">(integer) 19</span><br><span class="line">127.0.0.1:6379&gt; get name1</span><br><span class="line">&quot;zhangsan-helloworld&quot;</span><br></pre></td></tr></table></figure><ul><li>incr：自增</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num1 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr num1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;2&quot;</span><br></pre></td></tr></table></figure><ul><li>decr：自减</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; decr num1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;1&quot;</span><br></pre></td></tr></table></figure><ul><li>incrby 和 decrby：增加和自减指定的值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num1 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incrby num1 90</span><br><span class="line">(integer) 100</span><br><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; decrby num1 80</span><br><span class="line">(integer) 20</span><br><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;20&quot;</span><br></pre></td></tr></table></figure><ul><li>setnx：只有当 key 不存在的时候才会设置成功</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; setnx num1 100</span><br><span class="line">(integer) 0 # 因为num1存在所以设置结果为0（false）</span><br><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;1&quot;</span><br></pre></td></tr></table></figure><ul><li>setex：强制设入值并指定超时时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; setex num1 60 1000 # 存在则覆盖</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get num1</span><br><span class="line">&quot;1000&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl num1</span><br><span class="line">(integer) 52</span><br></pre></td></tr></table></figure><ul><li>mset 和 mget：批量设置和批量获取</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mset name1 zhangsam name2 lisi name3 wangwu</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget name1 name2 name3</span><br><span class="line">1) &quot;zhangsam&quot;</span><br><span class="line">2) &quot;lisi&quot;</span><br><span class="line">3) &quot;wangwu&quot;</span><br></pre></td></tr></table></figure><ul><li>strlen：值长</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget name1 name2 name3</span><br><span class="line">1) &quot;zhangsam&quot;</span><br><span class="line">2) &quot;lisi&quot;</span><br><span class="line">3) &quot;wangwu&quot;</span><br><span class="line">127.0.0.1:6379&gt; strlen name1</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; strlen name2</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><ul><li>getset：设置新值并返回旧值（覆盖式）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getset name4 zhaoliu</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; getset name4 zhaoliu</span><br><span class="line">&quot;zhaoliu&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset name4 zhaoliu1</span><br><span class="line">&quot;zhaoliu&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset name4 zhaoliu2</span><br><span class="line">&quot;zhaoliu1&quot;</span><br></pre></td></tr></table></figure><ul><li>setrange 和 getrange：获取和设置指定下标的字符（覆盖式）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name helloworld</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange name 0 4</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange name 5 zhangsan</span><br><span class="line">(integer) 13</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;hellozhangsan&quot;</span><br></pre></td></tr></table></figure><h3 id="list（有序）"><a href="#list（有序）" class="headerlink" title="list（有序）"></a>list（有序）</h3><blockquote><p>基于<code>双向链表</code>或<code>压缩列表</code></p><ul><li>压缩队列是一种节约内存的特殊双端链表。两端操作为O(1)，push&#x2F;pop</li><li>双向链表最优操作为O(1)（push&#x2F;pop），平均为O(n)</li><li>集合元素较多，或元素长度较长时使用双向链表</li></ul></blockquote><ul><li>rpush 和 lpush：向右插入值和向左插入值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush nums 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpush nums 0</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpush nums 4</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br></pre></td></tr></table></figure><ul><li>linsert：在指定元素前或后插入元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert nums before 0 hello # before/after</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;0&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">6) &quot;4&quot;</span><br></pre></td></tr></table></figure><ul><li>lindex：获取指定下标的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lindex nums 0</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><ul><li>llen：获取列表的长度</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; llen nums</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><ul><li>rpop 和 lpop：弹出右边和弹出左边的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;0&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">6) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop nums</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop nums</span><br><span class="line">&quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">4) &quot;3&quot;</span><br></pre></td></tr></table></figure><ul><li>lrem：删除指定的元素<ul><li>count &gt; 0 ：从头起删除count个</li><li>count &lt; 0 ：从尾起删除count个</li><li>count &#x3D; 0 ：删除所有</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush nums 1 1 1 2 2 2 3 3 3</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; lrem nums 3 2 # 从头开始删除3个2</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;1&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;3&quot;</span><br><span class="line">6) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem nums -3 3 # 从尾开始删除3个3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;1&quot;</span><br></pre></td></tr></table></figure><ul><li>ltrim：修剪列表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush nums 1 1 1 2 2 2 3 3 3</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; ltrim nums 3 5 # 保留下标从[3,5]的元素</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;2&quot;</span><br></pre></td></tr></table></figure><ul><li>lset：修改指定下标的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset nums 0 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;2&quot;</span><br></pre></td></tr></table></figure><ul><li>blpop 和 brpop：<code>阻塞式</code>弹出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; blpop nums 60 # 阻塞式弹出（左），超时时间为60s</span><br><span class="line">1) &quot;nums&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; brpop nums 60 # 阻塞式弹出（右），超时时间为60s</span><br><span class="line">1) &quot;nums&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange nums 0 -1</span><br><span class="line">1) &quot;2&quot;</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><blockquote><ol><li>基于<code>散列表</code>或<code>压缩列表</code></li><li>压缩队列是一种节约内存的特殊双端链表。两端操作为O(1)，push&#x2F;pop</li><li>散列表最优的情况下时间复杂度为O(1)</li><li>集合元素较少，或元素长度较短时使用压缩列表</li></ol></blockquote><ul><li>hset 和 hget：设置和获取值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset person:1 name zhangsan # 设置person1的name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset person:1 age 23 # 设置person1的age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget person:1 name</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget person:1 age</span><br><span class="line">&quot;23&quot;</span><br></pre></td></tr></table></figure><ul><li>hdel：删除指定key的属性</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget person:1 age</span><br><span class="line">&quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; hdel person:1 age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget person:1 age</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><ul><li>hlen：获取指定key的属性长度</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hlen person:1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset person:1 age 23</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hlen person:1</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><ul><li>hmset 和 hmget：批量设入属性和获取属性</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset person:1 name zhangsan age 23</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget person:1 name age</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;23&quot;</span><br></pre></td></tr></table></figure><ul><li>hexists：判断指定key的属性是否存在</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmget person:1 name age</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; hexists person:1 name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hexists person:1 city</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><ul><li>hkeys：获取指定key的所有属性名称</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys person:1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br></pre></td></tr></table></figure><ul><li>hvals：获取指定key的所有属性值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys person:1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals person:1</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;23&quot;</span><br></pre></td></tr></table></figure><ul><li>hincrby：指定属性自增</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys person:1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt; hincrby person:1 age 10</span><br><span class="line">(integer) 33</span><br><span class="line">127.0.0.1:6379&gt; hget person:1 age</span><br><span class="line">&quot;33&quot;</span><br></pre></td></tr></table></figure><ul><li>hstrlen：值长</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hget person:1 age</span><br><span class="line">&quot;33&quot;</span><br><span class="line">127.0.0.1:6379&gt; hstrlen person:1 age</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote><p>基于<code>散列表</code>或<code>整数集合</code></p><ul><li>散列表最优的情况下时间复杂度为O(1)</li><li>集合只有正数或集合不大时，使用整数集合</li></ul></blockquote><ul><li>sadd 和 smembers 和 sismember：添加元素、列出所有元素、是否存在某个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; sismember myset c</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><ul><li>srem：移除集合中的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;b&quot;</span><br><span class="line">4) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; srem myset b</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;a&quot;</span><br></pre></td></tr></table></figure><ul><li>scard：获取集合当前元素个数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a b c d</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure><ul><li>srandmember：随机返回集合中指定个数的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; srandmember myset 2</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; srandmember myset 2</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;b&quot;</span><br></pre></td></tr></table></figure><ul><li>spop：随机弹出一个集合元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line">&quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;a&quot;</span><br></pre></td></tr></table></figure><ul><li>sinter：求集合之间的交集</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a b c d e</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 e d f g</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; sinter myset myset2</span><br><span class="line">1) &quot;d&quot;</span><br><span class="line">2) &quot;e&quot;</span><br></pre></td></tr></table></figure><ul><li>sunion：求集合之间的并集（去重）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a b c d e</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 e d f g</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; sunion myset myset2</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;g&quot;</span><br><span class="line">4) &quot;a&quot;</span><br><span class="line">5) &quot;b&quot;</span><br><span class="line">6) &quot;f&quot;</span><br><span class="line">7) &quot;e&quot;</span><br></pre></td></tr></table></figure><ul><li>sdiff：求集合之间的差集</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a b c d e</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 e d f g</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; sdiff myset myset2</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br></pre></td></tr></table></figure><ul><li>smove：将一个元素移动到另外的集合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a b c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 b</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset2</span><br><span class="line">1) &quot;b&quot;</span><br></pre></td></tr></table></figure><h3 id="zset（有序）"><a href="#zset（有序）" class="headerlink" title="zset（有序）"></a>zset（有序）</h3><blockquote><p>基于<code>压缩列表</code>或<code>跳表</code></p><ul><li><p>压缩队列是一种节约内存的特殊双端链表。两端操作为O(1)，push&#x2F;pop</p></li><li><p>跳表的平均操作为O(logn)，最差时为O(n)</p></li><li><p>集合元素较多或元素较长，使用跳表</p></li></ul></blockquote><ul><li>zadd 和 zrange：添加元素、返回指定下标区间的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myzset 1 a 2 b 3 c # 排序分数越小越靠前</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;c&quot;</span><br></pre></td></tr></table></figure><ul><li>zcard：返回集合元素的个数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard myzset</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><ul><li>zscore：返回元素的排序分数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myzset 10 a 1 b 2 c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; zscore myzset a</span><br><span class="line">&quot;10&quot;</span><br></pre></td></tr></table></figure><ul><li>zincrby：增加元素的分数（没有元素先创建）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore myzset b</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; zincrby myzset 10 b</span><br><span class="line">&quot;12&quot;</span><br><span class="line">127.0.0.1:6379&gt; zscore myzset b</span><br><span class="line">&quot;12&quot;</span><br></pre></td></tr></table></figure><ul><li>zrevrange：获取指定下标范围分数从高到低排序的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zincrby likecount 2 num1  # 文章编号为num1的文章获取了2个赞</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; zincrby likecount -1 num1  # 文章编号为num1的文章减少了1个赞</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd likecount 1 num2 # 文章编号为num2的文章获取了1个赞</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zincrby likecount 1 num1  # 文章编号为num1的文章减少了1个赞</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrevrange likecount 0 9 # 按照分数的排序获取0到9下标的元素</span><br><span class="line">1) &quot;num1&quot;</span><br><span class="line">2) &quot;num2&quot; </span><br></pre></td></tr></table></figure><ul><li>zcount：返回指定分数范围的元素个数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount myzset 0 5</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><ul><li>zrangebyscore：返回指定分数范围的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount myzset 0 5</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore myzset 0 5</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;d&quot;</span><br></pre></td></tr></table></figure><ul><li>zremrangebyscore：删除指定分数范围的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zremrangebyscore myzset 0 5</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore myzset 0 5</span><br><span class="line">(empty list or set)</span><br></pre></td></tr></table></figure><ul><li>zrank：返回元素的排序下标</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myzset 10 a 1 b 2 c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; zscore myzset a</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrank myzset a</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><ul><li>zrem：删除指定的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem myzset a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange myzset 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;c&quot;</span><br></pre></td></tr></table></figure><ul><li>zpopmax&#x2F;bzpopmax：删除并返回最高分值得元素</li></ul><p>格式：zpopmax key [count]</p><p>count表示返回个数，因为可能会存在几个一样高分的元素，默认1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zpopmax myzset</span><br><span class="line">1) &quot;b&quot;</span><br></pre></td></tr></table></figure><p>zpopmin&#x2F;bzpopmin：删除并返回最低分值得元素，和zpopmax用法一样</p><h3 id="stream（redis-5-x）"><a href="#stream（redis-5-x）" class="headerlink" title="stream（redis 5.x）"></a>stream（redis 5.x）</h3><blockquote><p>在 Redis 中除了 List 能够实现消息队列功能之外，还提供了 stream 来实现</p></blockquote><p><strong>添加stream</strong></p><p>格式：xadd key ID field string</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用自动生成<span class="built_in">id</span>：*</span></span><br><span class="line">127.0.0.1:6379&gt; xadd test:person * name zhangsan</span><br><span class="line">&quot;1571756285397-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; xadd test:person * age 18</span><br><span class="line">&quot;1571756296247-0&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义<span class="built_in">id</span></span></span><br><span class="line">127.0.0.1:6379&gt; xadd test2:person 0-1 name lisi age 19</span><br><span class="line">&quot;0-1&quot;</span><br></pre></td></tr></table></figure><p><strong>查看指定 key 的 stream 数量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xlen test:person</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><p><strong>按照 key 和 id 删除一个 stream</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xdel test2:person 0-1</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p><strong>读取指定 stream 后的 1 个或多个 stream</strong></p><p>格式：xread [COUNT count] [BLOCK ms] streams key [key…] id [id…]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看key为<span class="built_in">test</span>:person且<span class="built_in">id</span>为1571756285397-0后的stream</span></span><br><span class="line">127.0.0.1:6379&gt; xread streams test:person 1571756285397-0</span><br><span class="line">1) 1) &quot;test:person&quot;</span><br><span class="line">   2) 1) 1) &quot;1571756296247-0&quot;</span><br><span class="line">         2) 1) &quot;age&quot;</span><br><span class="line">            2) &quot;18&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加一个stream</span></span><br><span class="line">127.0.0.1:6379&gt; xadd test:person * city qy</span><br><span class="line">&quot;1571757314013-0&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看key为<span class="built_in">test</span>:person且<span class="built_in">id</span>为1571756285397-0后的stream</span></span><br><span class="line">127.0.0.1:6379&gt; xread streams test:person 1571756285397-0</span><br><span class="line">1) 1) &quot;test:person&quot;</span><br><span class="line">   2) 1) 1) &quot;1571756296247-0&quot;</span><br><span class="line">         2) 1) &quot;age&quot;</span><br><span class="line">            2) &quot;18&quot;</span><br><span class="line">      2) 1) &quot;1571757314013-0&quot;</span><br><span class="line">         2) 1) &quot;city&quot;</span><br><span class="line">            2) &quot;qy&quot;    </span><br><span class="line">            </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定数量的stream</span></span><br><span class="line">127.0.0.1:6379&gt; xread COUNT 1 streams test:person 1571756285397-0</span><br><span class="line">1) 1) &quot;test:person&quot;</span><br><span class="line">   2) 1) 1) &quot;1571756296247-0&quot;</span><br><span class="line">         2) 1) &quot;age&quot;</span><br><span class="line">            2) &quot;18&quot;</span><br></pre></td></tr></table></figure><p><strong>读取指定范围的 stream</strong></p><p>格式：xrange key startid endid</p><p>特殊字符：+表示最大，-表示最小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看从1571756285397-0到1571756296247-0</span></span><br><span class="line">127.0.0.1:6379&gt; xrange test:person 1571756285397-0 1571756296247-0</span><br><span class="line">1) 1) &quot;1571756285397-0&quot;</span><br><span class="line">   2) 1) &quot;name&quot;</span><br><span class="line">      2) &quot;zhangsan&quot;</span><br><span class="line">2) 1) &quot;1571756296247-0&quot;</span><br><span class="line">   2) 1) &quot;age&quot;</span><br><span class="line">      2) &quot;18&quot;</span><br><span class="line">      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从1571756285397-0开始查看</span></span><br><span class="line">127.0.0.1:6379&gt; xrange test:person 1571756285397-0 +</span><br><span class="line">1) 1) &quot;1571756285397-0&quot;</span><br><span class="line">   2) 1) &quot;name&quot;</span><br><span class="line">      2) &quot;zhangsan&quot;</span><br><span class="line">2) 1) &quot;1571756296247-0&quot;</span><br><span class="line">   2) 1) &quot;age&quot;</span><br><span class="line">      2) &quot;18&quot;</span><br><span class="line">      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有</span></span><br><span class="line">127.0.0.1:6379&gt; xrange test:person - +</span><br><span class="line">1) 1) &quot;1571756285397-0&quot;</span><br><span class="line">   2) 1) &quot;name&quot;</span><br><span class="line">      2) &quot;zhangsan&quot;</span><br><span class="line">2) 1) &quot;1571756296247-0&quot;</span><br><span class="line">   2) 1) &quot;age&quot;</span><br><span class="line">      2) &quot;18&quot;</span><br></pre></td></tr></table></figure><p><strong>创建生产者（消息为stream）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">城市名称为 广州</span></span><br><span class="line">127.0.0.1:6379&gt; xadd city * name guangzhou</span><br><span class="line">&quot;1571757812063-0&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">城市名称为 清远</span></span><br><span class="line">127.0.0.1:6379&gt; xadd city * name qingyuan</span><br><span class="line">&quot;1571757817679-0&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">城市名称为 佛山</span></span><br><span class="line">127.0.0.1:6379&gt; xadd city * name foshan</span><br><span class="line">&quot;1571757823298-0&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建城市组</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 组名为 guangdongsheng</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 当前（生产者）组包含了<span class="built_in">id</span>为1571757812063-0之后的所有city消息（stream）</span></span><br><span class="line">127.0.0.1:6379&gt; xgroup create city guangdongsheng 1571757812063-0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>消费 stream</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定生产者组所生成的消息（stream）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;：表示最近（未被消费）的信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zhangsan：消费者名称，自定义</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">streams city：表示只查看key为city的消息（stream）</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup group guangdongsheng zhangsan streams city &gt;</span><br><span class="line">1) 1) &quot;city&quot;</span><br><span class="line">   2) 1) 1) &quot;1571757817679-0&quot;</span><br><span class="line">         2) 1) &quot;name&quot;</span><br><span class="line">            2) &quot;qingyuan&quot;</span><br><span class="line">      2) 1) &quot;1571757823298-0&quot;</span><br><span class="line">         2) 1) &quot;name&quot;</span><br><span class="line">            2) &quot;foshan&quot;</span><br><span class="line">            </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">消费指定<span class="built_in">id</span>后的消息（stream）</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup group guangdongsheng zhangsan streams city 1571757812063-0</span><br><span class="line">1) 1) &quot;city&quot;</span><br><span class="line">   2) 1) 1) &quot;1571757817679-0&quot;</span><br><span class="line">         2) 1) &quot;name&quot;</span><br><span class="line">            2) &quot;qingyuan&quot;</span><br><span class="line">      2) 1) &quot;1571757823298-0&quot;</span><br><span class="line">         2) 1) &quot;name&quot;</span><br><span class="line">            2) &quot;foshan&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以看出消息只要被消费一次后就会被删除</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup group guangdongsheng zhangsan streams city &gt;</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再生产（添加）一条key为city的stream</span></span><br><span class="line">127.0.0.1:6379&gt; xadd city * name shenzhen</span><br><span class="line">&quot;1571758247531-0&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以看到消费者可以消费到刚生产的stream。</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup group guangdongsheng zhangsan streams city &gt;</span><br><span class="line">1) 1) &quot;city&quot;</span><br><span class="line">   2) 1) 1) &quot;1571758247531-0&quot;</span><br><span class="line">         2) 1) &quot;name&quot;</span><br><span class="line">            2) &quot;shenzhen&quot;</span><br><span class="line">            </span><br><span class="line">127.0.0.1:6379&gt; xadd city * name shenzhen2</span><br><span class="line">&quot;1571759438214-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; xadd city * name shenzhen3</span><br><span class="line">&quot;1571759440128-0&quot;</span><br><span class="line">127.0.0.1:6379&gt; xadd city * name shenzhen4</span><br><span class="line">&quot;1571759442164-0&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">消费1条stream，但这里需要注意它并不是消费最新的那条stream</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup COUNT 1 group guangdongsheng zhangsan streams city &gt;</span><br><span class="line">1) 1) &quot;city&quot;</span><br><span class="line">   2) 1) 1) &quot;1571759438214-0&quot;</span><br><span class="line">         2) 1) &quot;name&quot;</span><br><span class="line">            2) &quot;shenzhen2&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">阻塞消费，表示如果拿不到数据就等待BLOCK毫秒，超时还拿不到才退出</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup COUNT 1 BLOCK 10000 group guangdongsheng zhangsan streams city &gt;</span><br><span class="line">(nil)</span><br><span class="line">(10.01s)</span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul><li>help：命令帮组手册</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; help</span><br><span class="line">redis-cli 5.0.5</span><br><span class="line">To get help about Redis commands type:</span><br><span class="line">      &quot;help @&lt;group&gt;&quot; to get a list of commands in &lt;group&gt;</span><br><span class="line">      &quot;help &lt;command&gt;&quot; for help on &lt;command&gt;</span><br><span class="line">      &quot;help &lt;tab&gt;&quot; to get a list of possible help topics</span><br><span class="line">      &quot;quit&quot; to exit</span><br><span class="line">127.0.0.1:6379&gt; help keys</span><br><span class="line"></span><br><span class="line">  KEYS pattern</span><br><span class="line">  summary: Find all keys matching the given pattern</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br></pre></td></tr></table></figure><ul><li>memory usage：查看key占的字节大小</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; memory usage test:person</span><br><span class="line">(integer) 1057</span><br></pre></td></tr></table></figure><ul><li>select：切换数据库。默认情况下redis有16个db默认启用db0（配置文件属性databases指定）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; select 15</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[15]&gt; select 16</span><br><span class="line">(error) ERR DB index is out of range</span><br></pre></td></tr></table></figure><ul><li>ping：测试服务端，服务端会回复pong表示正常</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><ul><li>config：实时配置redis服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印当前redis服务端的所有配置</span></span><br><span class="line">config get *</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置配置</span></span><br><span class="line">config set 属性名称 属性值</span><br></pre></td></tr></table></figure><ul><li>slowlog：慢查询查询</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; slowlog len # 查看慢查询日志信息</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; slowlog get 5 # 获取n条慢查询日志</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; SLOWLOG RESET # 重置慢查询日志</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>lastsave：返回最近一次成功持久化数据的时间（UNIX 时间戳）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LASTSAVE</span><br><span class="line">(integer) 1570740724</span><br></pre></td></tr></table></figure><ul><li>info 命令查看运行信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; INFO</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Server</span></span><br><span class="line">redis_version:2.5.9</span><br><span class="line">redis_git_sha1:473f3090</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">os:Linux 3.3.7-1-ARCH i686</span><br><span class="line">arch_bits:32</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">gcc_version:4.7.0</span><br><span class="line">process_id:8104</span><br><span class="line">run_id:bc9e20c6f0aac67d0d396ab950940ae4d1479ad1</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:7</span><br><span class="line">uptime_in_days:0</span><br><span class="line">lru_clock:1680564</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">client_longest_output_list:0</span><br><span class="line">client_biggest_input_buf:0</span><br><span class="line">blocked_clients:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Memory</span></span><br><span class="line">used_memory:439304</span><br><span class="line">used_memory_human:429.01K</span><br><span class="line">used_memory_rss:13897728</span><br><span class="line">used_memory_peak:401776</span><br><span class="line">used_memory_peak_human:392.36K</span><br><span class="line">used_memory_lua:20480</span><br><span class="line">mem_fragmentation_ratio:31.64</span><br><span class="line">mem_allocator:jemalloc-3.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Persistence</span></span><br><span class="line">loading:0</span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1338011402</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:-1</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Stats</span></span><br><span class="line">total_connections_received:1</span><br><span class="line">total_commands_processed:0</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">rejected_connections:0</span><br><span class="line">expired_keys:0</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:0</span><br><span class="line">keyspace_misses:0</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:0 # 最近一Fork花费的时间</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU</span></span><br><span class="line">used_cpu_sys:0.03</span><br><span class="line">used_cpu_user:0.01</span><br><span class="line">used_cpu_sys_children:0.00</span><br><span class="line">used_cpu_user_children:0.00</span><br></pre></td></tr></table></figure><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><blockquote><p>简介</p></blockquote><ul><li>Redis 所实现的是弱事务，因此并不直接支持传统关系型数据库的 ACID 特性</li><li>Redis 提供以下命令实现事务操作<ul><li>multi：该命令执行后表示客户端将要提交一系列操作，而这些操作将会在 exec 时按队列形式一同执行。注意，命令在 exec 前会先暂存到队列中</li><li>watch：乐观锁，用于监听key。即如果 exec 之前发现 key 被修改则事务将失败，可用于实现一致性</li><li>discard：丢弃暂存队列中的命令</li><li>exec：执行暂存队列中的命令</li></ul></li><li>可以将 Redis 事务简单理解为批处理命令，但在特定情况下它是能够保证完整性的<ul><li>情况1：命令在进行暂存队列时被检测到错误（譬如语法错误），那么在执行 exec 命令时就会导致事务失败，所有命令都不会执行。所以，这种情况能够保证原子性</li><li>情况2：命令成功提交到暂存队列，但在 exec 时发生了错误（譬如命令所操作的key类型不匹配，string用了list的操作），这时虽然错误命令会执行失败，但不会影响后续正常命令的执行。所以，这种情况不能保证原子性</li><li>情况3：执行 exec 时 redis 宕机了，这时如果想要保证完整自，只能通过 redis-check-aof工具检查AOF日志，将已经执行的命令从中取出</li></ul></li></ul><blockquote><p>基本用法</p></blockquote><p>multi 和 exec 用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set num 1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) (integer) 2</span><br></pre></td></tr></table></figure><p>watch 用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch num # 监听num</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr num </span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端2 ----</span></span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端1 ----</span></span><br><span class="line">127.0.0.1:6379&gt; incr num </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil) # num被修改事务失效</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;2&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Java客户端</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"><span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">transaction.watch(<span class="string">&quot;key&quot;</span>); <span class="comment">// 乐观锁，一旦key被修改事务将失败</span></span><br><span class="line">transaction.exec();<span class="comment">// 提交</span></span><br><span class="line">transaction.discard(); <span class="comment">// 丢失当前位于暂存队列的命令</span></span><br><span class="line">transaction.execGetResponse(); <span class="comment">// 执行并返回</span></span><br><span class="line">transaction.close(); <span class="comment">// 关闭事务</span></span><br></pre></td></tr></table></figure><h2 id="Redis常见应用场景"><a href="#Redis常见应用场景" class="headerlink" title="Redis常见应用场景"></a>Redis常见应用场景</h2><blockquote><p>字符串类型</p></blockquote><ul><li>键值缓存</li><li>计数器</li><li>幂等令牌</li><li>分布式ID</li><li>分布式锁（不推荐）</li><li>全局会话管理</li></ul><blockquote><p>列表</p></blockquote><ul><li>分布式队列：lpush、brpop</li><li>返回最近的历史检索：ltrim</li></ul><blockquote><p>字典</p></blockquote><ul><li>基于键的系列属性集</li></ul><blockquote><p>集合</p></blockquote><ul><li>共同好友：交集</li><li>好友推荐：差集</li><li>差集&#x2F;交集&#x2F;并集等数量统计</li><li>每天的用户登录&#x2F;签到信息存储</li><li>商品或文章的评论列表</li></ul><blockquote><p>有序集合</p></blockquote><ul><li>时间序列数据</li><li>热点数据</li><li>排行榜</li><li>点赞</li><li>延时队列：使用（当前时间戳+延时时长）作为分数。zadd&#x2F;zrangebyscore&#x2F;zrem</li></ul><blockquote><p>统计</p></blockquote><ul><li>Bitmap统计，但只支持 int&#x2F;long 等数值型值</li><li>HypeLogLog：基数统计（去重统计数量），节省空间且高效</li></ul><h2 id="数据持久化策略"><a href="#数据持久化策略" class="headerlink" title="数据持久化策略"></a>数据持久化策略</h2><p>Redis 提供了两种数据持久化方案来，分别是：<code>RDB</code>（默认）、<code>AOF</code>。两者主要的区别在于 RDB 持久化的是内存快照，而 AOF 持久化的是修改数据的命令操作（类似于 MySQL 的二进制日志）</p><h3 id="RDB（默认）"><a href="#RDB（默认）" class="headerlink" title="RDB（默认）"></a>RDB（默认）</h3><p>RDB，即<code>内存快照</code>持久化方案，采用<code>写时复制</code>实现，因为属于<code>全量复制</code>操作，所以频繁进行 RDB 备份容易导致 Redis 性能下降，而且数据量越大RDB备份消耗越高。</p><p>触发 RDB 的方法有2种：</p><ul><li>手动触发</li><li>自动触发</li></ul><p><code>手动触发</code></p><p>save命令</p><ul><li>阻塞当前服务线程后持久化内存中快照，直到持久化完成</li></ul><p>bgsave命令</p><ul><li>当前服务线程 Fork 出一条子线程来做持久化操作。但要注意，Fork 操作是阻塞的，但相对于 save 来说 bgsave 效率更高</li><li>注意： Fork 持久化 RDB 时，数据量越大用时越长</li></ul><p><code>自动触发</code></p><p>情况1：满足服务端配置的 save 属性条件后会自动触发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 # 表示900s内触发1次修改，则自动触发bgsave</span><br><span class="line">save 300 10 # 表示300s内触发10次修改，则自动触发bgsave</span><br><span class="line">save 60 10000 # 表示60s内触发10000次修改，则自动触发bgsave</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置多个save条件是为了适应不同的情况，为了在更加合适的条件下持久化数据</span></span><br></pre></td></tr></table></figure><p>情况2：主从复制情况下，从节点进行<code>全量复制</code>时自动触发bgsave</p><p>情况3：客户端执行<code>debug reload</code>命令刷新 Redis 时自动触发bgsave</p><p>情况4：没有开启AOF的情况下，客户端执行 <code>shutdown</code> 命令时自动触发bgsave</p><p><strong>指定RDB文件存储位置</strong></p><p>方法1：配置属性文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir ./ # 保存到redis当前目录下（默认）</span><br></pre></td></tr></table></figure><p>方法2：在运行时客户端执行 <code>config set dir &#123;路径&#125;</code> 指定，例如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set dir ./ # 指定路径</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config set dbfilename rdb.rdb # 指定文件名称</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><strong>RDB流程</strong></p><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/006.png"></p><p><strong>RDB优缺点</strong></p><ul><li>数据恢复速度比 AOF 快</li><li>可以代表某一个时间点的数据状态，且因为是紧凑的二进制文件，所以较为节省空间</li><li>因为是条件触发，所以在没满足持久化条件前出现异常则会丢失数据</li><li>Fork操作属于系统操作，所以频繁的 bgsave 会导致性能下降</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><blockquote><p>AOF（append only file）是一种写后日志，优点是不会阻塞当前命令执行（但会阻塞后面命令）以及不会记录错误的命令，但因为是写后日志所以存在丢失更新风险</p></blockquote><p><strong>aof流程</strong></p><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/005.png"></p><p><strong>aof使用</strong></p><p>默认情况下 AOF 是没有启用的，需要在服务端配置文件中做如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes # 开启AOF功能</span><br><span class="line">appendfilename &quot;appendonly.aof&quot; # 指定AOF文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同步策略</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync always <span class="comment"># 每条命令都立即fsync到文件中。数据做到高可靠，但影响性能</span></span></span><br><span class="line">appendfsync everysec # 每1秒从缓存中fsync一次。可靠和性能的折中，但如果落盘不及时就会丢失1秒内所有的操作</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync no <span class="comment"># 交给操作系统处理。性能最好，但可能性相对最低</span></span></span><br></pre></td></tr></table></figure><p><strong>使用注意</strong></p><ul><li><p>everysec 相对于 always 来说属于延时写入，这样有利于提高操作系统缓冲区使用率，其原理是调用系统write 命令后就会立即返回而无需进行 fsync 操作，因此能够一定程度提高服务的吞吐量。</p></li><li><p>always 表示每条修改数据的命令执行后都需要马上持久化。这样做能够尽可能地降低丢失数据的风险，但频繁的持久化操作会造成较大的开销，而且不能有效地使用缓冲因，此吞吐量会低于 everysec 模式</p></li><li><p>还需要注意，如果系统 fsync 操作缓慢的话则会影响主线程的服务，导致主线程阻塞，原因如下：</p><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/007.png"></p></li></ul><p>可以看出，主线程会对比上一次系统执行 fsync 操作的时间，如果发现上一次 fsync 操作花费时间超过2秒的话，主线程就会阻塞服务，以便腾出时间给系统执行 fsync 操作，这样做是为了让 fsync 冲刷操作赶上客户端执行的命令速度，避免大量 fsync 操作延迟导致而命令没有切实写入到硬盘，这样会加载丢失数据的风险。</p><p><strong>关于aof重写</strong></p><p>随着时间的推移 aof 文件会变得非常大，因此 Redis 提供了<code>aof重写</code>操作以缩减 aof 备份数据文件的大小。做法是：去除无效命令、命令合并、去除超时数据 等操作</p><p>aof重写触发条件：</p><ul><li>手动触发：执行 bgrewriteaof 命令</li><li>自动触发：</li><li>auto-aof-rewrite-percentage：当前文件大小和上一次重写后的文件大小的比值大于该值时触发<ul><li>auto-aof-rewrite-min-size：大于该属性值时触发</li></ul></li></ul><blockquote><p>aof 重写流程</p></blockquote><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/008.png"></p><p>当发生aof重写时主进程程会 Fork 出一条<code>后台子进程</code>以及产生一个<code>aof重写时缓冲，其中aof重写时缓冲专门用来保存在重写过程中产生的新命令，而子进程则用于处理旧的aof文件以及将结果追加到新aof文件中</code>。子进程通过信号通知主线程，主线程得知信息后就会将<code>aof重写时缓冲</code>和<code>旧aof文件的处理结果</code>内容追加到新aof文件中。</p><h3 id="数据文件校验"><a href="#数据文件校验" class="headerlink" title="数据文件校验"></a>数据文件校验</h3><p>Redis提供了2个命令行工具来对数据库文件进行损毁校验。</p><p>分别是：<code>redis-check-aof</code>、<code>redis-check-rdb</code>；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  redis bin/redis-check-rdb dump.rdb </span><br><span class="line">[offset 0] Checking RDB file dump.rdb</span><br><span class="line">[offset 26] AUX FIELD redis-ver = &#x27;5.0.5&#x27;</span><br><span class="line">[offset 40] AUX FIELD redis-bits = &#x27;64&#x27;</span><br><span class="line">[offset 52] AUX FIELD ctime = &#x27;1569750040&#x27;</span><br><span class="line">[offset 67] AUX FIELD used-mem = &#x27;812528&#x27;</span><br><span class="line">[offset 83] AUX FIELD aof-preamble = &#x27;0&#x27;</span><br><span class="line">[offset 85] Selecting DB ID 0</span><br><span class="line">[offset 107] Checksum OK</span><br><span class="line">[offset 107] \o/ RDB looks OK! \o/</span><br><span class="line">[info] 1 keys read</span><br><span class="line">[info] 0 expires</span><br><span class="line">[info] 0 already expired</span><br><span class="line"></span><br><span class="line">➜  redis bin/redis-check-aof appendonly.aof </span><br><span class="line">AOF analyzed: size=55, ok_up_to=55, diff=0</span><br><span class="line">AOF is valid # 表示当前aof文件是可用的</span><br></pre></td></tr></table></figure><h3 id="Redis重启时持久化数据文件的加载流程"><a href="#Redis重启时持久化数据文件的加载流程" class="headerlink" title="Redis重启时持久化数据文件的加载流程"></a>Redis重启时持久化数据文件的加载流程</h3><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/009.png"></p><h2 id="为什么单线程还那么快？"><a href="#为什么单线程还那么快？" class="headerlink" title="为什么单线程还那么快？"></a>为什么单线程还那么快？</h2><blockquote><p>原因</p></blockquote><ul><li>基于内存操作</li><li>使用全局哈希表进行定位，其时间查询复杂度可达O(1)<ul><li>注意，Redis采用全局哈希表定位元素，而“元素”并非真实值而是一个指针，因此实际操作的时间复杂度还要看具体（指针）对应的元素所用的数据结构</li></ul></li><li>数据结构操作高效。除了范围查询这种较为耗时的操作外（O(n)），其他操作一般可达到O(1)，譬如单一的元素操作以及统计操作等，而范围查询也可以采用SCAN系列命令代替，因为SCAN可以将发批量数据分为小批量操作从而减少阻塞时间</li><li>单线程写操作，避免了高并发时大量的上下文切换以及锁资源竞争带来的耗时</li><li>采用 Reactor 线程模型，即基于多路复用IO模型提高网络请求的处理效率</li><li>客户端和服务端采用简单高效的 RESP 协议通信</li></ul><blockquote><p>Redis 6.x 新特性：多线程处理网络IO</p></blockquote> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 功能开关（默认关闭），使用时需要设置为yes</span></span><br><span class="line"><span class="attr">io-threads-do-reads</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 指定处理网络IO的线程数，设置合理处理效率将提升1倍左右（个人猜测只有七八十）</span></span><br><span class="line"><span class="comment"># 官方建议为了避免cpu竞争应该将其设置为：CPU核心数-1</span></span><br><span class="line"><span class="attr">io-threads</span> <span class="string">3</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ol><li>网络 IO 线程只负责解析读请求，以及响应请求。而执行命令依然是由主线程来单独完成的</li><li>我们之所以一直说 Redis 是单线程模型，其实这里的单线程指的是 Redis 在执行命令时是单线程的，而并非指它所有操作都是单线程来完成的。这并不难理解，譬如持久化、节点数据同步等都会额外fork出新的进程来处理的（在Linux中线程被称为轻量级进程）</li></ol><p>接收请求：</p><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/004.png"></p><p>响应请求：</p><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/014.png"></p><h2 id="常见会阻塞主线程的操作"><a href="#常见会阻塞主线程的操作" class="headerlink" title="常见会阻塞主线程的操作"></a>常见会阻塞主线程的操作</h2><ul><li>集合全量查询和聚合操作</li><li>大key（包含大量value值）的删除</li><li>清空数据库</li><li>AOF日志同步写</li><li>从库加载RDB文件</li></ul><h2 id="关于分布式缓存"><a href="#关于分布式缓存" class="headerlink" title="关于分布式缓存"></a>关于分布式缓存</h2><h3 id="缓存剔除策略"><a href="#缓存剔除策略" class="headerlink" title="缓存剔除策略"></a>缓存剔除策略</h3><ol><li>算法剔除（FIFO、LRU、LFU、最小TTL）</li><li>超时剔除（expire命令）</li><li>主动更新（代码控制，推荐）</li></ol><h3 id="相关的配置"><a href="#相关的配置" class="headerlink" title="相关的配置"></a>相关的配置</h3><p>配置最大可用内存。默认为0，表示不设置限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure><p>指定当 maxmemory 满了时，使用什么策略来淘汰缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy noeviction</span><br></pre></td></tr></table></figure><ul><li><p>volatile-lru：从具有过期设置（expire）的 key 中，使用 LRU 剔除（最近最少使用）</p></li><li><p>volatile-lfu：从具有过期设置（expire）的 key 中，使用 LFU 剔除（最少命中）</p></li><li><p>volatile-random：从具有过期设置（expire）的 key 中，随机剔除</p></li><li><p><strong>volatile-ttl</strong>：从具有过期设置（expire）的 key 中，剔除 ttl 时间较小的</p></li><li><p>allkeys-lru（推荐）：使用 LRU 剔除缓存后再保存新的缓存</p></li><li><p>allkeys-lfu：使用 LFU 剔除缓存后再保存新的缓存</p></li><li><p>allkeys-random：随机剔除缓存</p></li><li><p>noeviction：不剔除，只在写操作时返回错误告知</p></li></ul><p><strong>常用缓存剔除&#x2F;淘汰算法</strong></p><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/010.png"></p><p><strong>指定对比样本集的缓存数量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples 5</span><br></pre></td></tr></table></figure><ul><li>因为 Redis 实现的LRU、LFU、以及最小TTL等算法都不是精准算法（主要为了减轻数据淘汰对缓存操作性能的影响），因此提供了 maxmemory-samples 配置项用于指定剔除缓存时，用来对比的样本集合</li><li>Redis 会在第一次剔除缓存时，生成对比样本集，然后在下次有缓存将要被剔除时，会让其与集合中<strong>访问时间戳最小的缓存</strong>进行对比，如果小于则剔除，（Redis 中 LRU 会记录每个缓存的最近一次被访问的时间戳 ）因为时间戳越小就意味着最少被访问。</li><li>样本集的缓存元素个数越多就越精准，但同时会更消耗CPU</li></ul><p><strong>指定副本节点复制缓存时是否忽略 maxmemory 设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replica-ignore-maxmemory yes</span><br></pre></td></tr></table></figure><ul><li>需要注意的是 Redis 5.x 开始 replica-ignore-maxmemory 默认为 yes，表示副本在复制时将会忽略主节点的 maxmemory 设置，换句话来说就是副本节点会尽可能保留更多缓存</li></ul><h3 id="缓存容量设置多少合适？"><a href="#缓存容量设置多少合适？" class="headerlink" title="缓存容量设置多少合适？"></a>缓存容量设置多少合适？</h3><p>根据<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%85%AB%E5%AE%9A%E5%BE%8B/747076?fromtitle=%E5%85%AB%E4%BA%8C%E5%AE%9A%E5%BE%8B&fromid=12672033">二八定律</a>，可将缓存大小设置为总数量的20%~30%。</p><p>二八定律指的是在总数量中通常是20%占据了80%的访问量，而其余的80%虽然是大多数，但访问率却不高。</p><h3 id="分布式缓存需要注意问题"><a href="#分布式缓存需要注意问题" class="headerlink" title="分布式缓存需要注意问题"></a>分布式缓存需要注意问题</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存穿透指的是访问了不存在的数据，导致间接绕过了缓存层（因为数据根本不存在）。出现这种情的通常原因是发生了<code>误操作删除了数据</code>或<code>恶意攻击</code>。</p><p>解决方法：</p><ul><li><strong>DB没数据时，让其缓存空值，避免再访问数据库</strong><ul><li>最好给这个空值设置超时时间，这样可以避免大量空值占用空间</li></ul></li><li><strong>使用布隆过滤器进行缓存预判</strong><br>- 原理是在缓存数据时，将缓存对应的 key 值通过哈希函数将其映射到布隆过滤器上，以示存在该缓存。然后在查询时，使用同样的哈希函数对 key 进行映射判断，如果已存在则访问缓存或数据库，如果不存在则直接返回请求而不访问缓存和数据库<br>    - 注意，布隆过滤器通常采用一个或多个哈希函数对 key 值进行映射。而因为存在哈希冲突的情况，因此存在一定的误判性，即可能出现不存在 key 的缓存，也能访问缓存层和数据的情况。而且这种误判可能性会随着数据库增大而增大（<a href="https://llimllib.github.io/bloomfilter-tutorial/">BloomFilter 原理展示</a>）<br>    - 在 Google Guava 工具库中提供了对 BloomFilter 的相关实现<br>    - 除此之外，Redis 4.x 提供了插件功能，官方亦提供了布隆过滤器插件实现，需要时安装插件即可<br>      - <a href="https://redislabs.com/modules/redis-bloom/">https://redislabs.com/modules/redis-bloom/</a><br>      - <a href="https://docs.redislabs.com/latest/modules/redisbloom/redisbloom-quickstart/">https://docs.redislabs.com/latest/modules/redisbloom/redisbloom-quickstart/</a></li><li><strong>对请求进行合法性检测，排除恶意请求</strong></li></ul><h4 id="无底洞问题"><a href="#无底洞问题" class="headerlink" title="无底洞问题"></a>无底洞问题</h4><p>无底洞问题指的是当时 Facebook 用的 Memcache 节点数已多达3000个了，开发人员发现水平扩容节点不但没有得来想要的性能，反而降低了性能。</p><p>其原因主要是 key 散乱在不同的缓存节点上，导致了较大的网络的开销。所以预防这个问题基本思路是，<code>减少网络通讯的次数</code>以及<code>让相关的缓存落在相同的节点上</code>，所以可以使用 管道、mget、m* 这样的命令来解决。</p><blockquote><p>图片源自《Redis开发与运维》</p></blockquote><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/011.png"></p><h4 id="缓存击穿（热点key失效）"><a href="#缓存击穿（热点key失效）" class="headerlink" title="缓存击穿（热点key失效）"></a>缓存击穿（热点key失效）</h4><p>缓存击穿这个名字个人认为并不恰当。缓存击穿指的是当大量并发访问同一个key的时候，这个key恰好失效了，导致所有并发请求落到数据库从而带来访问压力。因此“热点key失效（缓存并发竞争时失效）”这个称呼更加合适。</p><p>解决的思路：</p><ul><li>恢复缓存时采用<code>互斥</code>处理，令其他线程进入等待，让最先发现缓存失效的线程将其恢复</li><li>热点缓存不过期，但需要主动更或定时更新缓存以保持一致性</li><li>使用一定范围的随机过期时间，错开一起失效的可能</li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>缓存雪崩指的是缓存层失效。譬如<code>宕机</code>或是<code>大量缓存同时失效</code>，从而导致大量请求落入数据库</p><blockquote><p>图片源自《Redis开发与运维》</p></blockquote><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/012.png"></p><p>解决方法：</p><ul><li>对缓存层实现高可用，避免所以缓存节点不可用</li><li>错开缓存的超时时间，避免设置同样的超时值</li><li>缓存雪崩时，进行服务降级和限流保护</li><li>提前测试缓存雪崩后的应对能力</li></ul><h4 id="数据库和缓存之间的双写一致性问题"><a href="#数据库和缓存之间的双写一致性问题" class="headerlink" title="数据库和缓存之间的双写一致性问题"></a>数据库和缓存之间的双写一致性问题</h4><blockquote><p>使用缓存就意味着存在数据一致性问题。</p></blockquote><h5 id="问题赘述"><a href="#问题赘述" class="headerlink" title="问题赘述"></a>问题赘述</h5><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/010.png"></p><p>上图是Redis缓存的剔除策略，通常在实际使用中会混搭来满足需求，而缓存双写一致性问题发生在主动更新上。</p><p>怎样更新才能更好地保证数据库和缓存的最终一致性？还有就是需要考虑缓存更新失败的情况。</p><blockquote><p>主动更新方案对比</p></blockquote><p><strong>1）先更新数据库，再更新缓存</strong></p><ul><li>会缓存到不必要数据，浪费内存空间</li><li>可能缓存到脏数据</li></ul><table><thead><tr><th>a线程（新）</th><th>b线程（旧）</th></tr></thead><tbody><tr><td></td><td>更新数据库</td></tr><tr><td>更新数据库</td><td></td></tr><tr><td>更新缓存</td><td></td></tr><tr><td></td><td>更新缓存</td></tr></tbody></table><p><strong>2）先更新缓存，再更新数据库</strong></p><ul><li>会缓存到不必要数据，浪费内存空间</li><li>可能缓存到脏数据</li></ul><table><thead><tr><th>a线程（新）</th><th>b线程（旧）</th></tr></thead><tbody><tr><td></td><td>更新缓存</td></tr><tr><td>更新缓存</td><td></td></tr><tr><td>更新数据库</td><td></td></tr><tr><td></td><td>更新数据库</td></tr></tbody></table><p><strong>3）先更新数据库，再删除缓存（优先考虑）</strong></p><ul><li>可能缓存到脏数据</li></ul><table><thead><tr><th>a线程</th><th>b线程</th></tr></thead><tbody><tr><td></td><td>读取数据库数据</td></tr><tr><td>更新数据库</td><td></td></tr><tr><td>删除缓存</td><td></td></tr><tr><td></td><td>更新缓存</td></tr></tbody></table><ul><li>可以将缓存超时设置得短一些，利用更短的缓存周期间接提高一致性</li></ul><p><strong>4）先删除缓存，再更新数据库</strong></p><ul><li>可能缓存到脏数据</li></ul><table><thead><tr><th>a线程</th><th>b线程</th></tr></thead><tbody><tr><td>删除缓存</td><td></td></tr><tr><td></td><td>读取数据库数据</td></tr><tr><td></td><td>更新缓存</td></tr><tr><td>更新数据</td><td></td></tr></tbody></table><blockquote><p>解决更新失败问题</p></blockquote><p>先操作数据库成功，但缓存操作失败</p><ul><li>重试缓存操作（但可能更会提升数据不一致的几率）</li></ul><p>先操作缓存成功，但数据库操作失败</p><ul><li>重试数据库操作</li></ul><h2 id="关于Redis的内存碎片问题"><a href="#关于Redis的内存碎片问题" class="headerlink" title="关于Redis的内存碎片问题"></a>关于Redis的内存碎片问题</h2><h3 id="什么是内存碎片和造成内存碎片的原因是什么"><a href="#什么是内存碎片和造成内存碎片的原因是什么" class="headerlink" title="什么是内存碎片和造成内存碎片的原因是什么"></a>什么是内存碎片和造成内存碎片的原因是什么</h3><p>内存碎片可以简单理解为无法使用的内存空缺。产生内存碎片的原因主要有2个：</p><ol><li><code>受系统的内存分配器影响，例如频繁进行大小不定的内存分配且（例如大量修改value值，且value值前后大小差异较大）</code></li><li><code>大量增删操作，因为删除key后并不会马上回收内存。</code></li></ol><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><ol><li><p>内存池是一种<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/9796631">内存分配</a>方式。通常我们习惯直接使用new、malloc等API申请分配内存，这样做的缺点在于：由于所申请内存块的大小不定，当频繁使用时会造成大量的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E7%A2%8E%E7%89%87/3883950">内存碎片</a>并进而降低性能。— 百度百科</p></li><li><p>因为Redis没有实现自己的内存池，因此需要依赖系统自身的内存分配器（如Linux上的glibc库）来进行内存的管理。换句话来说，操作系统内存分配器性能和处理内存碎片的能力对Redis有一定能影响。</p></li><li><p>在较新版本的Redis中使用 <code>Jemalloc </code>代替了系统默认的内存分配器。（在Redis5.x中Jemalloc也得到了升级，对内存分配和碎片整理更加高效）</p></li><li><p>主动回收内容有两种情况：<code>key过时（expire）</code>、<code>内容到达maxmemory触发驱逐策略</code></p></li></ol><h3 id="查看是否存在内存碎片"><a href="#查看是否存在内存碎片" class="headerlink" title="查看是否存在内存碎片"></a>查看是否存在内存碎片</h3><p>命令：<code>info memory</code></p><blockquote><p>图片源自《Redis开发与运维》</p></blockquote><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/013.png"></p><p>可以看到内存碎片的公式为：<code>内存碎片 = 进程占用的物理内存总量 / 实际数据内存占用量</code></p><p><code>该值最好的状态是接近1，该值越大表示存在内存碎片越多。</code></p><h3 id="解决内存碎片问题方案"><a href="#解决内存碎片问题方案" class="headerlink" title="解决内存碎片问题方案"></a>解决内存碎片问题方案</h3><p>Redis4.x 版本之前，只能通过重启 Redis 解决，即回收再分配</p><p>Redis4.x 版本之后，可通过设置<code>activedefrag yes</code>开启自动整理内存碎片功能，此后 Redis 会尽最大努力解决内存碎片问题。</p><h2 id="有趣的功能"><a href="#有趣的功能" class="headerlink" title="有趣的功能"></a>有趣的功能</h2><h3 id="发布-x2F-订阅"><a href="#发布-x2F-订阅" class="headerlink" title="发布&#x2F;订阅"></a>发布&#x2F;订阅</h3><blockquote><p>订阅</p></blockquote><p>格式：subscribe 频道名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe channel:test</span><br></pre></td></tr></table></figure><blockquote><p>发布</p></blockquote><p>格式：publish 频道名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish channel:test hello</span><br></pre></td></tr></table></figure><blockquote><p>取消订阅</p></blockquote><p>格式：unsubscribe 频道名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unsubscribe channel:test</span><br></pre></td></tr></table></figure><blockquote><p>查看频道的订阅者</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pubsub channels</span><br></pre></td></tr></table></figure><blockquote><p>查看频道的订阅数</p></blockquote><p>格式：pubsub numsub 频道名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pubsub numsub channel:test</span><br><span class="line">1) &quot;channel:test&quot;</span><br><span class="line">2) (integer) 2 # 有两个订阅者</span><br></pre></td></tr></table></figure><h3 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h3><p>redis 3.2 开始提供了个有趣的功能，就是GEO。GEO可以实现诸如<code>附近的人</code>、<code>地点距离</code>、<code>摇一摇</code>这样的功能</p><p>1）录入成员位置</p><ul><li>获取地址的经纬度信息：<a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">http://api.map.baidu.com/lbsapi/getpoint/index.html</a><ul><li>格式：geoadd key longitude latitude member</li><li>longitude：经度</li><li>latitude：纬度</li><li>member：成员&#x2F;地点</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd guangzhou 113.327679 23.125237 zjxc # 珠江新城</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd guangzhou 113.327998 23.023749 ds # 大石</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd guangzhou 113.27604 22.995208 gznz # 广州南站</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>2）获取指定成员坐标</p><ul><li>格式：geopos key member，例子如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos guangzhou zjxc</span><br><span class="line">1) 1) &quot;113.32767874002456665&quot;</span><br><span class="line">   2) &quot;23.12523573693501788&quot;</span><br></pre></td></tr></table></figure><p>3）计算两地点距离</p><ul><li>格式：geodist key member1 member2 [单位]<ul><li>m：米</li><li>km：公里</li><li>mi：英里</li><li>ft：尺</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大石到南站</span></span><br><span class="line">127.0.0.1:6379&gt; geodist guangzhou ds gznz km</span><br><span class="line">&quot;6.1947&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">大石到珠江新城</span></span><br><span class="line">127.0.0.1:6379&gt; geodist guangzhou ds zjxc km</span><br><span class="line">&quot;11.2881&quot;</span><br></pre></td></tr></table></figure><p>4）返回附近成员&#x2F;地点</p><ul><li><p>格式1：georadiusbymember key member 单位</p></li><li><p>格式2：georadius key longitude latitude 单位</p></li><li><p>其中member或longitude latitude为中心成员&#x2F;地点</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadiusbymember guangzhou ds 10 km</span><br><span class="line">1) &quot;gznz&quot; # 广州南站</span><br><span class="line">2) &quot;ds&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember guangzhou ds 15 km</span><br><span class="line">1) &quot;gznz&quot; # 广州南站</span><br><span class="line">2) &quot;ds&quot;</span><br><span class="line">3) &quot;zjxc&quot; # 珠江新城</span><br></pre></td></tr></table></figure><p>除了上面写法之外，还可以追加以下参数：</p><ul><li>withcoord：返回结果包含经纬度</li><li>withdist：返回结果包含距离中心节点位置的距离</li><li>count 数字参数：执行返回的数量（最近开始）</li><li>asc|desc：升序和降序（最好指定asc，因为没有默认值，这样做返回的第1个为中心节点）</li><li>store key：将返回结果的地理位置保存到指定key种</li><li>storedist key：将返回结果的经纬度保存到指定key种</li></ul><p>5）删除指定的成员&#x2F;地点</p><ul><li>格式：zrem key member</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem guangzhou zjxc</span><br></pre></td></tr></table></figure><p>6）返回geo的hash值（经纬度）</p><ul><li>格式：geohash key member</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash guangzhou ds</span><br><span class="line">1) &quot;ws0dfz6gjc0&quot;</span><br></pre></td></tr></table></figure><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><blockquote><p>不包含 复制&#x2F;集群&#x2F;Docker 和 高级配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">################################## NETWORK #####################################</span><br><span class="line"></span><br><span class="line"># 服务端绑定地址</span><br><span class="line"># bind 192.168.1.100 10.0.0.1</span><br><span class="line"># bind 127.0.0.1 ::1</span><br><span class="line">bind 127.0.0.1</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">################################# GENERAL #####################################</span><br><span class="line"></span><br><span class="line"># 是否作为守护进程运行</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 运行时pid，默认为/var/run/redis.pid  </span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"># 日志级别</span><br><span class="line"># debug/verbose/notice/warning</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"># 指定日志文</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 指定数据的数量</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line"></span><br><span class="line"># RDB配置</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># bgsave出错后是否停止写入操作</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># RDB文件是否压缩，设置为yes则消耗更多cpu资源但节省空间</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 是否开启快照校验</span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"># RDB文件名称</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># RDB文件路径</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">################################### CLIENTS ####################################</span><br><span class="line"></span><br><span class="line"># 最大的客户端连接数</span><br><span class="line">maxclients 10000</span><br><span class="line"></span><br><span class="line"># 客户端连接空闲多久自动关闭，默认为0，即不关闭</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line">############################## MEMORY MANAGEMENT ################################</span><br><span class="line"></span><br><span class="line"># redi内存最大值</span><br><span class="line">maxmemory 1024</span><br><span class="line"></span><br><span class="line"># 缓存剔除策略</span><br><span class="line"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span><br><span class="line"># allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><span class="line"># volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.</span><br><span class="line"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span><br><span class="line"># volatile-random -&gt; Remove a random key among the ones with an expire set.</span><br><span class="line"># allkeys-random -&gt; Remove a random key, any key.</span><br><span class="line"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><br><span class="line"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line"># 策略的样本抽取数量</span><br><span class="line">maxmemory-samples 5</span><br><span class="line"></span><br><span class="line"># 副本节点是否忽略maxmemory配置</span><br><span class="line">replica-ignore-maxmemory yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################## APPEND ONLY MODE ###############################</span><br><span class="line"></span><br><span class="line"># 开启AOF备份</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 指定AOF文件名称</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># 指定AOF持久化频率</span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># AOF重写条件</span><br><span class="line">auto-aof-rewrite-percentage 100 # 增长比例临界（当前/上次）</span><br><span class="line">auto-aof-rewrite-min-size 64mb # 临界大小</span><br><span class="line"></span><br><span class="line"># 是否加载尾部不完整的AOF文件</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"># 设置为yes表示rewrite期间不对新的操作fsync，而时暂时存放在缓冲区</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># 开启混合持久化模式（aof保存最新的操作，rdb保存之前的数据，这样可以提高恢复速度）</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line">################################ LUA SCRIPTING  ###############################</span><br><span class="line"></span><br><span class="line"># 脚本最大执行时间</span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line"># 慢查询临界（微秒）</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"># 慢查询日志重置临界</span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">########################### ACTIVE DEFRAGMENTATION #######################</span><br><span class="line"></span><br><span class="line"># 开启内存碎片自动整理</span><br><span class="line">activedefrag yes</span><br><span class="line"></span><br><span class="line"># 进行内存碎片整理的内存碎片触发值（内存大小）</span><br><span class="line">active-defrag-ignore-bytes 100 mb</span><br><span class="line"></span><br><span class="line"># 进行内存碎片整理的内存碎片触发值（百分比）</span><br><span class="line">active-defrag-threshold-lower 10</span><br><span class="line"></span><br><span class="line"># 打算整理碎片的百分比（redis尽量满足），100表示尽可能整理内存碎片</span><br><span class="line">active-defrag-threshold-upper 100</span><br></pre></td></tr></table></figure><h2 id="Java版客户端"><a href="#Java版客户端" class="headerlink" title="Java版客户端"></a>Java版客户端</h2><h3 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Jedis</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJedis</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    jedis.set(<span class="string">&quot;sayhi&quot;</span>, <span class="string">&quot;hello redis!!!&quot;</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;sayhi&quot;</span>));</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JedisPool</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJedisPool</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接池参数设置</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">GenericObjectPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericObjectPoolConfig</span>();</span><br><span class="line">    config.setMaxTotal(<span class="number">30</span>); <span class="comment">// 最大连接数</span></span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>); <span class="comment">// 最大空闲连接数</span></span><br><span class="line">    config.setNumTestsPerEvictionRun(<span class="number">5</span>); <span class="comment">// 每次释放连接的最大数目</span></span><br><span class="line">    config.setTimeBetweenEvictionRunsMillis(<span class="number">30000</span>); <span class="comment">// 释放连接的扫描间隔（毫秒）</span></span><br><span class="line">    config.setMaxWaitMillis(<span class="number">1500</span>); <span class="comment">// 获取连接的最大等待时间（毫秒）</span></span><br><span class="line">    config.setTestOnBorrow(<span class="literal">true</span>); <span class="comment">// 获取连接时候检查有效性, 默认false</span></span><br><span class="line">    config.setTestWhileIdle(<span class="literal">true</span>); <span class="comment">// 空闲时检查有效性, 默认false</span></span><br><span class="line">    config.setBlockWhenExhausted(<span class="literal">false</span>); <span class="comment">// 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true</span></span><br><span class="line"></span><br><span class="line">    <span class="type">JedisPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> pool.getResource(); <span class="comment">// 获取连接</span></span><br><span class="line"></span><br><span class="line">    jedis.set(<span class="string">&quot;sayhi2&quot;</span>, <span class="string">&quot;hello redis!!! 222&quot;</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;sayhi2&quot;</span>));</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">    pool.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h3><blockquote><p>官方文档：<a href="https://spring.io/projects/spring-data-redis#learn">https://spring.io/projects/spring-data-redis#learn</a></p></blockquote><p>SpringBoot 2.x 开始默认 Spring Data Redis 使用 Lettuce 作为Redis客户端。（SpringBoot 1.x 默认为Jedis）</p><p><strong>[ Lettuce和Jedis区别 ]</strong></p><ul><li>Jedis是非线程安全的。Jedis的设计和Redis对应都是单线程读写，一个Jedis连接对应一个Redis，多以在多线程场景下应该使用JedisPool来操作。</li><li>Lettuce基于Netty来实现，连接实例（StatefulRedisConnection）可以在多个线程间并发访问，因为StatefulRedisConnection是线程安全的，所以一个连接实例（StatefulRedisConnection）就可以满足多线程环境下的并发访问。而在Spring Boot 2.x中Lettuce是默认的Redis客户端。</li></ul><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">1500ms</span></span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //操作hash</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForHash();</span></span><br><span class="line"><span class="comment">        //操作list</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForList();</span></span><br><span class="line"><span class="comment">        //操作set</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForSet();</span></span><br><span class="line"><span class="comment">        //操作有序set</span></span><br><span class="line"><span class="comment">        redisTemplate.opsForZSet();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//操作字符串</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;hello spring data redis!!!&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;hi&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;hello spring data redis!!!&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;hi&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RedisConnection为Reids客户端的抽象，当RedisTemplate不够使用时，就可以使用以下的方式来使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExecuteMethod</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">execute</span> <span class="operator">=</span> stringRedisTemplate.execute((RedisConnection connection) -&gt; &#123;</span><br><span class="line">        <span class="comment">// setnx并指定过期时间</span></span><br><span class="line">        <span class="keyword">return</span> connection.set(<span class="string">&quot;hi&quot;</span>.getBytes(), <span class="string">&quot;test setnx&quot;</span>.getBytes(),</span><br><span class="line">                              Expiration.seconds(<span class="number">30</span>), <span class="comment">// 过期时间</span></span><br><span class="line">                              RedisStringCommands.SetOption.SET_IF_ABSENT); <span class="comment">// 设置NX</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(execute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>StringRedisTemplate继承自RedisTemplate</li><li>StringRedisTemplate默认使用StringRedisSerializer进行序列化，而RedisTemplate默认使用JdkSerializationRedisSerializer</li></ul><h2 id="可视化客户端"><a href="#可视化客户端" class="headerlink" title="可视化客户端"></a>可视化客户端</h2><h3 id="Redis-Desktop-Manager"><a href="#Redis-Desktop-Manager" class="headerlink" title="Redis Desktop Manager"></a>Redis Desktop Manager</h3><p>官网：<a href="https://redisdesktop.com/">https://redisdesktop.com/</a></p><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/002.png"></p><h3 id="TablePlus"><a href="#TablePlus" class="headerlink" title="TablePlus"></a>TablePlus</h3><p>官网：<a href="https://tableplus.com/">https://tableplus.com/</a></p><blockquote><p>可惜目前不支持Linux系统，需要.net framework 4.8的支持，wine安装不成功。</p></blockquote><p><img src="/Redis%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/003.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Redis开发与运维》</li><li>《Redis实战》</li><li>《Redis核心技术与实战》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解NoSQL</title>
      <link href="/%E4%BA%86%E8%A7%A3NoSQL/"/>
      <url>/%E4%BA%86%E8%A7%A3NoSQL/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何才能用好NoSQL？对于理解什么是NoSQL我觉得很有必要。</p><h2 id="什么是关系型数据库？"><a href="#什么是关系型数据库？" class="headerlink" title="什么是关系型数据库？"></a>什么是关系型数据库？</h2><p>所谓的关系型数据库其实就是使用<code>关系模型</code>来存储数据的数据库。目前关系模型数据库特指的是以<code>行</code>和<code>列</code>组成的<code>二维表存储结构</code>来存储数据且使用SQL来存取操作的系统。二维表存储结构的特点是将<code>数据存储为行</code>，而<code>列用于明确数据的类型</code>。当两个表之间有关系，我们就需要使用<code>连接查询</code>的方式来去主动为表建立关系来进行查询。</p><h2 id="什么是NoSQL？"><a href="#什么是NoSQL？" class="headerlink" title="什么是NoSQL？"></a>什么是NoSQL？</h2><p>其实NoSQL一开始是指那些<code>非关系型</code>、<code>分布式</code>、<code>不提供ACID</code>的数据库设计模式。但后来的2009年<strong>亚特兰大</strong>举行的**”no:sql(east)”<strong>讨论会中以口号</strong>“select fun, profit from real_world where relational&#x3D;false;”**来对nosql数据库再次作出了定义，因此该次讨论会被誉为nosql的里程碑。从口号中可以得出，nosql主张的是<code>非关系型</code>，且强调<code>非结构化存储</code>的优点，致力于打破传统关系型数据存储的限制。</p><p>还有就是，现在的NoSQL几乎都是针对分布式存储而设计的，所以NoSQL对<code>高可用</code>和<code>横向扩展</code>都有很好的支持，这是传统的关系型数据库不能比拟的。</p><p>所以总上所述，NoSQL其实是一种泛指，指的是那些不用SQL来存取数据且数据存储是非关系型的数据存储系统。因此按照这种思路来去判断，诸如ElasticSearch和Solr这类索引引擎其实都属于NoSQL的范畴。</p><blockquote><p>常见的NoSQL产品大致有以下几种分类：</p></blockquote><p><img src="/%E4%BA%86%E8%A7%A3NoSQL/001.png"></p><blockquote><p>相对于关系型数据，NoSQL解决的问题</p></blockquote><p><img src="/%E4%BA%86%E8%A7%A3NoSQL/007.png"></p><ul><li><p>但需要注意的是，NoSQL对于事务（ACID）的支持并没有一般关系型数据库那么强。例如在 Redis 虽然支持事务，但只能够保证 隔离性（I） 和 一致性（C），而不能保证 原子性（A） 和 持久性（D）</p></li><li><p>Redis事务例子如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; SET book-name <span class="string">&quot;Mastering C++ in 21 days&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:6379&gt; GET book-name</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:6379&gt; SADD tag <span class="string">&quot;C++&quot;</span> <span class="string">&quot;Programming&quot;</span> <span class="string">&quot;Mastering Series&quot;</span></span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:6379&gt; SMEMBERS tag</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:6379&gt; EXEC</span><br></pre></td></tr></table></figure></li><li><p>Redis使用 MULTI 和 EXEC 表示事务的开始和结束。Redis的事务机制其实只能将其看做一个批处理命令，而且在执行事务期间，即使某条命令发生错误也<code>不会回滚</code>，但不会影响后续命令的执行</p></li></ul><h2 id="NoSQL数据库的选型"><a href="#NoSQL数据库的选型" class="headerlink" title="NoSQL数据库的选型"></a>NoSQL数据库的选型</h2><p>了解了当前市面上都有那些NoSQL类型之后，接下来就需要知道它们之间区别，亦只有这样，我在为系统作技术选型的时候才不会选错。</p><h3 id="键值对存储"><a href="#键值对存储" class="headerlink" title="键值对存储"></a>键值对存储</h3><p>键值对存储是所有NoSQL种最简单和最常见的。其数据主要使用key-value的形式进行组织存储。</p><p>存储的数据应该有以下特点：</p><ul><li>数据关系简单</li><li>只需要用key进行查询和存储</li><li>没什么事务要求</li></ul><p>所以从上面的数据特点来看，为什么Redis普遍用来做缓存就是这个原因。</p><h3 id="文档存储"><a href="#文档存储" class="headerlink" title="文档存储"></a>文档存储</h3><p>首先文档存储是键值对存储的子类。其主要区别在于，数据对键值对存储来说是透明的，换句话来说键值对存储的数据库不会理会数据的内容，只要符合格式就可以存储，也不会对其做其他操作。而对于文档存储的数据库而言，数据库会从数据中提取需要的元数据来给存储引擎做对应的数据优化分析。</p><p>这里说的文档，是指一种<code>半结构化数据</code>，如：json、xml。</p><blockquote><p>以下摘自知乎网友”门欣”对半结构化数据的理解</p></blockquote><p><img src="/%E4%BA%86%E8%A7%A3NoSQL/002.png"></p><p>存储的数据应该有以下特点：</p><ul><li>数据格式可伸缩（需要存储结构不明确的数据），且伸缩前无需执行DDL语句</li><li>兼容历史数据，不会因为数据格式伸缩后导致无法访问历史数据或需要修改历史数据的格式</li><li>没什么事务要求</li><li>无需复杂查询，如join这样的数据关系</li></ul><h3 id="列存储"><a href="#列存储" class="headerlink" title="列存储"></a>列存储</h3><p>列存储和传统的关系型存储方式类似。传统的关系型数据库属于行存储，即将各行放入连续的物理位置；而列存储就是将各列放入连续的物理位置。</p><p><img src="/%E4%BA%86%E8%A7%A3NoSQL/003.png"></p><p>说道这就很容易会有这样的疑问，就是<code>为什么列存储能高效应对海量数据？</code></p><p>首先列存储高效是在 OLAP(联机分析处理) 的前提下说的，其余还包含原因：</p><ul><li>避免了无关列的扫描，且列数据类型相同对数据本身的压缩更简单和高效</li><li>因为列都存储了同类数据，因此提高了查询的效率</li></ul><p>存储的数据应该有以下特点：</p><ul><li>海量数据且需求是OLAP(联机分析处理)，即不是用于日常CRUD的事务处理</li><li>对实时性要求不高</li><li>数据以查询为主</li></ul><p>推荐文章：</p><ul><li><p>处理海量数据：列式存储综述（存储篇）</p><p><a href="https://zhuanlan.zhihu.com/p/35622907">https://zhuanlan.zhihu.com/p/35622907</a></p></li><li><p>为什么列存储数据库读取速度会比传统的行数据库快？</p><p><a href="https://www.zhihu.com/question/29380943">https://www.zhihu.com/question/29380943</a></p></li></ul><h3 id="图形存储"><a href="#图形存储" class="headerlink" title="图形存储"></a>图形存储</h3><p>这里的”图”并不是”图片”，而是<code>图论</code>中的图。可以简单理解为由多个存在关系的节点构成的数据图形。</p><p>举个通俗的例子</p><p><img src="/%E4%BA%86%E8%A7%A3NoSQL/004.png"></p><p>在社交网络种，人与人的关系可能是很复杂的，例如 A 认识 B，B认识C，C又认识D，那么这是需要想A推荐D进行相识，那么在传统的关系型数据库种实现起来就相当麻烦，而图行存储数据库就是用来解决这个间接数据关系的。</p><p>存储的数据应该有以下特点：</p><ul><li>实现推荐引擎，如社交网络推荐</li><li>关系性强的数据</li></ul><h3 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h3><p>对象存储，即将<code>数据对象</code>分割成二进制对象并将其复制到存储中，并提供接口的Restful API进行基本操作。</p><p>这里的<code>对象</code>包含数字资产，包括图片、视频、音乐和文档等内容，是一种泛指。</p><p>参考亚马逊S3的对象，指的是<code>对象数据</code>和<code>元数据</code>的组成，其中对象元数据指的是描述对象的key-value。</p><blockquote><p><a href="https://aws.amazon.com/cn/s3/getting-started/">https://aws.amazon.com/cn/s3/getting-started/</a></p></blockquote><p><img src="/%E4%BA%86%E8%A7%A3NoSQL/005.png"></p><p>推荐文章：</p><ul><li><p>块存储、文件存储、对象存储这三者的本质差别是什么？</p><p><a href="https://www.zhihu.com/question/21536660">https://www.zhihu.com/question/21536660</a></p></li><li><p>面向不同需求的对象存储系统对比：Ceph与Swift</p><p><a href="http://stor.51cto.com/art/201811/587306.htm">http://stor.51cto.com/art/201811/587306.htm</a></p></li><li><p>分布式存储与数据库选型问答整理分享</p><p><a href="https://cloud.tencent.com/developer/article/1040667">https://cloud.tencent.com/developer/article/1040667</a></p></li></ul><h3 id="时序存储"><a href="#时序存储" class="headerlink" title="时序存储"></a>时序存储</h3><p>时间序列数据库顾名思义就是用来存储随着时间而产生或变化的数据。</p><p>常见的是时序数据就是<code>数据指标</code>。</p><p><img src="/%E4%BA%86%E8%A7%A3NoSQL/006.png"></p><p>比如进入商场的人流如何随着时间变化？城市的交通如何变化？白天公共交通工具的使用情况如何变化？这些可以及时测量的数据都是时序数据的一个示例。你可以通过查询，绘制，分析这些数据来得知指标之间的相关性。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Debezium实现数据库的CDC功能</title>
      <link href="/debezium-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84cdc%E5%AE%9E%E7%8E%B0/"/>
      <url>/debezium-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84cdc%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><ul><li>debezium 是一个开源的分布式数据库事件流工具</li><li>debezium 的功能类似于数据库的trigger，且比trigger功能强大</li><li>可以用它来实现 cdc （change data capture）功能。例如监控 MySQL Binlog 的变化来捕获数据的改变再将其传输到另外一个存储单元</li></ul><h2 id="关于Debezium-Connector-for-MySQL"><a href="#关于Debezium-Connector-for-MySQL" class="headerlink" title="关于Debezium Connector for MySQL"></a>关于Debezium Connector for MySQL</h2><ul><li><p>debezium连接器通过观察mysql二进制日志的变动来生成操作事件，每个表中发生的所有事件数据都会“流动”到kafka对应的topic上</p></li><li><p>连接器会在第一次连接mysql数据库的时候生成一个快照，完成后会从生成快照的那个点开始读取二进制日志，这样做的目的有两个：</p><p>1）生成快照的原因：mysql配置（my.ini）存在过时清除设置，即可能会在某个时候二进制日志文件内容会被mysql清除</p><p>2）从生成快照的那个点开始观察：从生成点读而不从生成后的点读原因是，预防在生成快照过程中数据库执行了修改操作</p></li><li><p>连接器若中途故障，那么下次重启，会在故障点开始读取二进制日志；生成快照故障则是重新生成</p></li></ul><h2 id="下载Debezium和Confluent"><a href="#下载Debezium和Confluent" class="headerlink" title="下载Debezium和Confluent"></a>下载Debezium和Confluent</h2><blockquote><p>Debezium：<a href="https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/">https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/</a></p><p>Confluent：<a href="https://www.confluent.io/connector/debezium-mysql-cdc-connector/">https://www.confluent.io/connector/debezium-mysql-cdc-connector/</a></p></blockquote><p>简单说明：</p><ul><li>debezium-connector-mysql：提供mysql二进制日志文件变动监听服务</li><li>debezium-mysql-cdc-connector：Confluent套件，提供CDC相应功能（自带kafka、zookeeper、avro等等功能），特别重要的RESTful server</li></ul><h3 id="配置方式1：使用Debezium-Confluent"><a href="#配置方式1：使用Debezium-Confluent" class="headerlink" title="配置方式1：使用Debezium + Confluent"></a>配置方式1：使用Debezium + Confluent</h3><blockquote><p>注意：配置好JDK环境下进行</p></blockquote><p><strong>server.properties（kafka配置文件)：修改或配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.4.161为kafka所在主机ip</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://192.168.4.161:9092</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">PLAINTEXT://192.168.4.161:9092</span></span><br></pre></td></tr></table></figure><p><strong>schema-registry.properties（confluent schema-registry组件配置文件)</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">http://0.0.0.0:8081</span></span><br><span class="line"><span class="comment"># zookeeper</span></span><br><span class="line"><span class="attr">kafkastore.connection.url</span>=<span class="string">192.168.4.161:2181</span></span><br><span class="line"><span class="comment"># kafka</span></span><br><span class="line"><span class="attr">kafkastore.bootstrap.servers</span>=<span class="string">PLAINTEXT://192.168.4.161:9092</span></span><br></pre></td></tr></table></figure><p>connect-avro-distributed.properties（confluent connect avro格式连接配置文件)**</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kafka</span></span><br><span class="line"><span class="attr">bootstrap.servers</span>=<span class="string">192.168.4.161:9092</span></span><br><span class="line"><span class="comment"># kafka connect 从 source读取数据是的加密格式，使用avro正反序列化，confluent提供</span></span><br><span class="line"><span class="attr">key.converter</span>=<span class="string">io.confluent.connect.avro.AvroConverter</span></span><br><span class="line"><span class="attr">key.converter.schema.registry.url</span>=<span class="string">http://192.168.4.161:8081</span></span><br><span class="line"><span class="attr">value.converter</span>=<span class="string">io.confluent.connect.avro.AvroConverter</span></span><br><span class="line"><span class="attr">value.converter.schema.registry.url</span>=<span class="string">http://192.168.4.161:8081</span></span><br><span class="line"><span class="comment"># 提供REST API服务</span></span><br><span class="line"><span class="attr">rest.host.name</span>=<span class="string">192.168.4.161</span></span><br><span class="line"><span class="attr">rest.port</span>=<span class="string">8083</span></span><br><span class="line"><span class="comment"># CDC需要到的依赖包</span></span><br><span class="line"><span class="comment"># share/java/* ：confluent提供</span></span><br><span class="line"><span class="comment"># /usr/local/debezium-connector-mysql/*：debezium插件提供</span></span><br><span class="line"><span class="attr">plugin.path</span>=<span class="string">share/java/*,/usr/local/debezium-connector-mysql/*</span></span><br></pre></td></tr></table></figure><p><strong>profile（linux环境变量）：注意插件变量名称一定要定义在CLASSPATH中，因为confluent提供的avro相关组件中的shell文件中使用到CLASSPATH</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># user settings</span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_201</span><br><span class="line">NODE_HOME=/usr/local/node-v10.15.0-linux-x64</span><br><span class="line">PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$NODE_HOME/bin:$PATH</span><br><span class="line">CLASSPATH=/usr/local/debezium-connector-mysql/*</span><br><span class="line">export CLASSPATH</span><br><span class="line">export JAVA_HOME PATH NODE_HOME </span><br></pre></td></tr></table></figure><p><strong>启动测试</strong></p><p><strong>步骤1：</strong>启动zookeeper（这里用的是独立的zookeeper，没有confluent自带的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh start ../confluent-5.1.0/etc/kafka/zookeeper.properties</span><br></pre></td></tr></table></figure><p><strong>步骤2：</strong>启动kafka-server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start etc/kafka/server.properties</span><br></pre></td></tr></table></figure><p><strong>步骤3：</strong>启动schema-registry server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/schema-registry-start etc/schema-registry/schema-registry.properties</span><br></pre></td></tr></table></figure><p><strong>步骤4：</strong>启动kafka-connect</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/connect-distributed etc/schema-registry/connect-avro-distributed.properties</span><br></pre></td></tr></table></figure><p><strong>步骤5.1：</strong>配置MySQL开启二进制日志并创建权限用户</p><p>my.ini</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server-id</span>         = <span class="string">42</span></span><br><span class="line"><span class="attr">log_bin</span>           = <span class="string">mysql-bin</span></span><br><span class="line"><span class="attr">binlog_format</span>     = <span class="string">row</span></span><br><span class="line"><span class="attr">binlog_row_image</span>  = <span class="string">full</span></span><br><span class="line"><span class="attr">expire_logs_days</span>  = <span class="string">10</span></span><br></pre></td></tr></table></figure><p>DCL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MYSQL 受权kafka用户</span><br><span class="line">//CREATE USER <span class="string">&#x27;tandi&#x27;</span>@<span class="string">&#x27;192.168.4.157&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">//GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO //<span class="string">&#x27;tandi&#x27;</span>@<span class="string">&#x27;192.168.4.157&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql&gt; CREATE USER tandi IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql&gt; GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO tandi IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>步骤5.2：</strong>使用HTTP API让schema-registry server注册连接信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST请求 http://192.168.4.161:8083/connectors/</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-first-connector&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;connector.class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.debezium.connector.mysql.MySqlConnector&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3306&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tandi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.server.id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11111&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.server.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.serverTimezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.history.kafka.bootstrap.servers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.161:9092&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.history.kafka.topic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120.db1&quot;</span> <span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include.schema.changes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">        <span class="attr">&quot;transforms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unwrap,changetopic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.unwrap.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.debezium.transforms.UnwrapFromEnvelope&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.kafka.connect.transforms.RegexRouter&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.regex&quot;</span><span class="punctuation">:</span><span class="string">&quot;(.*)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.replacement&quot;</span><span class="punctuation">:</span><span class="string">&quot;$1-smt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/debezium-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84cdc%E5%AE%9E%E7%8E%B0/021.png"></p><p><strong>步骤6：</strong>启动消费者（注意顺序，第一次启动必须是先启动connect才启动消费者，因为connect成功才会生产对应的topic）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-avro-console-consumer --bootstrap-server 192.168.4.161:9092 --topic 192.168.4.120.db1.t1-smt --from-beginning</span><br></pre></td></tr></table></figure><blockquote><p>注意：如无意外，查看kafka topic会看到生成了一些以192.168.4.120开头的topic</p></blockquote><p><strong>步骤7：</strong>测试</p><p><img src="/debezium-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84cdc%E5%AE%9E%E7%8E%B0/022.png"></p><h3 id="配置方式2：仅使用Debezium"><a href="#配置方式2：仅使用Debezium" class="headerlink" title="配置方式2：仅使用Debezium"></a>配置方式2：仅使用Debezium</h3><blockquote><p>注意：配置好JDK环境下进行</p></blockquote><p><strong>server.properties（kafka配置文件)：修改或配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">listeners</span> = <span class="string">PLAINTEXT://192.168.4.157:9092</span></span><br></pre></td></tr></table></figure><p><strong>connect-distributed.properties（kafka配置文件)</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.4.157 kafka服务器地址</span></span><br><span class="line"><span class="attr">bootstrap.servers</span>=<span class="string">192.168.4.157:9092</span></span><br><span class="line"><span class="comment"># 将schemas.enable设置为false，或者在restful请求是显示设置schemas.enable为false，否者转换器不生效</span></span><br><span class="line"><span class="attr">key.converter.schemas.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">value.converter.schemas.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 配置RESTful服务</span></span><br><span class="line"><span class="attr">rest.host.name</span>=<span class="string">192.168.4.157</span></span><br><span class="line"><span class="attr">rest.port</span>=<span class="string">8083</span></span><br></pre></td></tr></table></figure><p><strong>将插件路径配置到环境变量中（无需在kafka的plugin.path中配置）</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user settings</span></span><br><span class="line"><span class="attr">JAVA_HOME</span>=<span class="string">/usr/local/jdk1.8.0_201</span></span><br><span class="line"><span class="attr">PATH</span>=<span class="string">$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$NODE_HOME/bin:$PATH</span></span><br><span class="line"><span class="attr">export</span> <span class="string">CLASSPATH=/usr/local/debezium-connector-mysql/*</span></span><br><span class="line"><span class="attr">export</span> <span class="string">JAVA_HOME PATH</span></span><br></pre></td></tr></table></figure><p><strong>配置MySQL并创建权限用户（my.ini）</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动二进制日志（注意配置后重启MySQL服务）</span></span><br><span class="line"><span class="attr">server-id</span>         = <span class="string">11111</span></span><br><span class="line"><span class="attr">log_bin</span>           = <span class="string">mysql-bin</span></span><br><span class="line"><span class="attr">binlog_format</span>     = <span class="string">row</span></span><br><span class="line"><span class="attr">binlog_row_image</span>  = <span class="string">full</span></span><br><span class="line"><span class="attr">expire_logs_days</span>  = <span class="string">10</span></span><br></pre></td></tr></table></figure><p><strong>在MySQL创建用户并授权（用于debezium读取mysql二进制文件）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER tandi IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">mysql&gt; GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO tandi IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>启动测试</strong></p><p>步骤1：启动zookeeper</p><p>步骤2：启动kafka server</p><p>步骤3：启动kafka connect（connect-distributed.sh）</p><p>步骤4：通过restful请求配置connectors</p><blockquote><p>post <a href="http://192.168.4.157:8083/connectors/">http://192.168.4.157:8083/connectors/</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-first-connector&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;connector.class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.debezium.connector.mysql.MySqlConnector&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3306&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tandi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.server.id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11111&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.server.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.serverTimezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;database.history.kafka.bootstrap.servers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.157:9092&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.history.kafka.topic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120.db1&quot;</span> <span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include.schema.changes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">   </span><br><span class="line">        <span class="attr">&quot;transforms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unwrap,changetopic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.unwrap.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.debezium.transforms.UnwrapFromEnvelope&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.kafka.connect.transforms.RegexRouter&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.regex&quot;</span><span class="punctuation">:</span><span class="string">&quot;(.*)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.replacement&quot;</span><span class="punctuation">:</span><span class="string">&quot;$1-smt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/debezium-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84cdc%E5%AE%9E%E7%8E%B0/023.png"></p><p>步骤5：测试是否成功监听到数据</p><p><img src="/debezium-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84cdc%E5%AE%9E%E7%8E%B0/024.png"></p><p><strong>拓展：</strong></p><p>kafka-connect RESTfult方式配置基本使用。相关文档如下</p><ul><li><a href="https://docs.confluent.io/current/connect/references/restapi.html">https://docs.confluent.io/current/connect/references/restapi.html</a></li><li><a href="http://kafka.apache.org/documentation.html#connect">http://kafka.apache.org/documentation.html#connect</a></li></ul><p>创建：</p><p>post <a href="http://192.168.4.157:8083/connectors/">http://192.168.4.157:8083/connectors/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-first-connector&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;connector.class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.debezium.connector.mysql.MySqlConnector&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3306&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tandi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.server.id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11111&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.server.name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.serverTimezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;database.history.kafka.bootstrap.servers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.157:9092&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database.history.kafka.topic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.4.120.db1&quot;</span> <span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include.schema.changes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">   </span><br><span class="line">        <span class="attr">&quot;transforms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unwrap,changetopic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.unwrap.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.debezium.transforms.UnwrapFromEnvelope&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.kafka.connect.transforms.RegexRouter&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.regex&quot;</span><span class="punctuation">:</span><span class="string">&quot;(.*)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transforms.changetopic.replacement&quot;</span><span class="punctuation">:</span><span class="string">&quot;$1-smt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>刪除：</p><ul><li>delete <a href="http://192.168.4.157:8083/connectors/%E9%85%8D%E7%BD%AE%E5%90%8D%E7%A7%B0">http://192.168.4.157:8083/connectors/配置名称</a></li></ul><p>获取某配置的信息：</p><ul><li>get <a href="http://192.168.4.157:8083/connectors/%E9%85%8D%E7%BD%AE%E5%90%8D%E7%A7%B0">http://192.168.4.157:8083/connectors/配置名称</a></li></ul><p>获取某配置的状态：</p><ul><li>get <a href="http://192.168.4.157:8083/connectors/%E9%85%8D%E7%BD%AE%E5%90%8D%E7%A7%B0/status">http://192.168.4.157:8083/connectors/配置名称/status</a></li></ul><p>获取可用的插件信息（重要，可用于查看插件是否配置成功）：</p><ul><li>get <a href="http://192.168.4.159:8083/connector-plugins">http://192.168.4.159:8083/connector-plugins</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Micronaut实现微服务</title>
      <link href="/micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="使用micronaut构建微服务"><a href="#使用micronaut构建微服务" class="headerlink" title="使用micronaut构建微服务"></a>使用micronaut构建微服务</h2><h3 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h3><blockquote><p>场景：通过 ip:port&#x2F;api&#x2F;books 返回还有库存的书籍信息</p><p>微服务：Gateway（网关服务：java实现）、Book（书籍服务：groovy实现）、Inventory（存货服务，kotlin实现）</p><p>服务注册中心：Apache Consul</p></blockquote><p>整体架构如下</p><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/002.png"></p><h3 id="Gateway服务编写（java）"><a href="#Gateway服务编写（java）" class="headerlink" title="Gateway服务编写（java）"></a>Gateway服务编写（java）</h3><h4 id="步骤1：使用mn工具生成项目"><a href="#步骤1：使用mn工具生成项目" class="headerlink" title="步骤1：使用mn工具生成项目"></a>步骤1：使用mn工具生成项目</h4><blockquote><p>默认使用gradle项目管理工具，和java语言</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mn create-app example.micronaut.gateway</span><br></pre></td></tr></table></figure><h4 id="步骤2：目录"><a href="#步骤2：目录" class="headerlink" title="步骤2：目录"></a>步骤2：目录</h4><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/001.png"></p><h4 id="步骤3：Book-java"><a href="#步骤3：Book-java" class="headerlink" title="步骤3：Book.java"></a>步骤3：Book.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.beans;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> String isbn; </span><br><span class="line">     <span class="keyword">private</span> String name; </span><br><span class="line">     <span class="keyword">private</span> Integer stock;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String isbn, String name)</span> &#123; </span><br><span class="line">         <span class="built_in">this</span>.isbn = isbn; </span><br><span class="line">         <span class="built_in">this</span>.name = name; </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getIsbn</span><span class="params">()</span> &#123; <span class="keyword">return</span> isbn; &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsbn</span><span class="params">(String isbn)</span> &#123; <span class="built_in">this</span>.isbn = isbn; &#125;</span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">     <span class="keyword">public</span> Integer <span class="title function_">getStock</span><span class="params">()</span> &#123; <span class="keyword">return</span> stock; &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStock</span><span class="params">(Integer stock)</span> &#123; <span class="built_in">this</span>.stock = stock; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4：BooksController-java"><a href="#步骤4：BooksController-java" class="headerlink" title="步骤4：BooksController.java"></a>步骤4：BooksController.java</h4><blockquote><p>网关控制器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book;</span><br><span class="line"><span class="keyword">import</span> example.micronaut.client.BooksFetcher;</span><br><span class="line"><span class="keyword">import</span> example.micronaut.client.InventoryFetcher;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Get;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Flowable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BooksController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BooksFetcher booksFetcher;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InventoryFetcher inventoryFetcher;</span><br><span class="line">    <span class="comment">// 依赖注入实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BooksController</span><span class="params">(BooksFetcher booksFetcher, InventoryFetcher inventoryFetcher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.booksFetcher = booksFetcher;</span><br><span class="line">        <span class="built_in">this</span>.inventoryFetcher = inventoryFetcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Get(&quot;/books&quot;)</span></span><br><span class="line">    Flowable&lt;Book&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到所有的book</span></span><br><span class="line">        Flowable&lt;Book&gt; bookFlowable = booksFetcher.fetchBooks();</span><br><span class="line">        <span class="keyword">return</span> bookFlowable</span><br><span class="line">                .flatMapMaybe(b -&gt; inventoryFetcher.inventory(b.getIsbn())  <span class="comment">// 获取book的库存</span></span><br><span class="line">                        .filter(stock -&gt; stock &gt; <span class="number">0</span>) <span class="comment">// 筛选出库存大于0的book</span></span><br><span class="line">                        .map(stock -&gt; &#123; <span class="comment">// 将stock(库存)设置到Book属性中</span></span><br><span class="line">                            b.setStock(stock);</span><br><span class="line">                            <span class="keyword">return</span> b;</span><br><span class="line">                        &#125;)</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5：定义服务接口"><a href="#步骤5：定义服务接口" class="headerlink" title="步骤5：定义服务接口"></a>步骤5：定义服务接口</h4><p>BookFetcher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BooksFetcher</span> &#123; </span><br><span class="line">    Flowable&lt;Book&gt; <span class="title function_">fetchBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InventoryFetcher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.reactivex.Maybe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InventoryFetcher</span> &#123; </span><br><span class="line">    Maybe&lt;Integer&gt; <span class="title function_">inventory</span><span class="params">(String isbn)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤6：定义HttpClient"><a href="#步骤6：定义HttpClient" class="headerlink" title="步骤6：定义HttpClient"></a>步骤6：定义HttpClient</h4><blockquote><p>类似于Spring Cloud OpenFeign</p></blockquote><p>BookClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.client.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book;</span><br><span class="line"><span class="keyword">import</span> example.micronaut.client.BooksFetcher;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.annotation.Requires;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.env.Environment;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Get;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.client.annotation.Client;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Flowable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Client(&quot;books&quot;)</span> <span class="comment">/** 发现服务books */</span></span><br><span class="line"><span class="comment">//@Requires(notEnv = Environment.TEST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BooksClient</span> <span class="keyword">extends</span> <span class="title class_">BooksFetcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Get(&quot;/api/books&quot;)</span> <span class="comment">/**调用服务端点*/</span></span><br><span class="line">    Flowable&lt;Book&gt; <span class="title function_">fetchBooks</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InventoryClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.client.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.client.InventoryFetcher;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.annotation.Requires;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.env.Environment;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Get;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.client.annotation.Client;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Maybe;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 发现服务inventory */</span></span><br><span class="line"><span class="meta">@Client(&quot;inventory&quot;)</span></span><br><span class="line"><span class="comment">//@Requires(notEnv = Environment.TEST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InventoryClient</span> <span class="keyword">extends</span> <span class="title class_">InventoryFetcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Get(&quot;/api/inventory/&#123;isbn&#125;&quot;)</span>  <span class="comment">/**调用服务端点*/</span></span><br><span class="line">    Maybe&lt;Integer&gt; <span class="title function_">inventory</span><span class="params">(String isbn)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7：启动类（自动生成）"><a href="#步骤7：启动类（自动生成）" class="headerlink" title="步骤7：启动类（自动生成）"></a>步骤7：启动类（自动生成）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.runtime.Micronaut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Micronaut.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤8：application-yml"><a href="#步骤8：application-yml" class="headerlink" title="步骤8：application.yml"></a>步骤8：application.yml</h4><blockquote><p>在micronaut中，application-test.yml为测试环境使用的配置</p><p>本例子中application.yml和application-test.yml内容一样</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">micronaut:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">consul:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">registration:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">&quot;$&#123;CONSUL_HOST:192.168.4.163&#125;:$&#123;CONSUL_PORT:8500&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="步骤9：单元测试类"><a href="#步骤9：单元测试类" class="headerlink" title="步骤9：单元测试类"></a>步骤9：单元测试类</h4><p>MockBooksClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.annotation.Requires;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.env.Environment;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Requires(env = Environment.TEST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockBooksClient</span> <span class="keyword">implements</span> <span class="title class_">BooksFetcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Flowable&lt;Book&gt; <span class="title function_">fetchBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Flowable.just(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;1491950358&quot;</span>, <span class="string">&quot;Building Microservices&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;1680502395&quot;</span>, <span class="string">&quot;Release It!&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;0321601912&quot;</span>, <span class="string">&quot;Continuous Delivery:&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MockInventoryClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.annotation.Requires;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.env.Environment;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Maybe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Requires(env = Environment.TEST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockInventoryClient</span> <span class="keyword">implements</span> <span class="title class_">InventoryFetcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Maybe&lt;Integer&gt; <span class="title function_">inventory</span><span class="params">(String isbn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isbn.equals(<span class="string">&quot;1491950358&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Maybe.just(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isbn.equals(<span class="string">&quot;1680502395&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Maybe.just(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Maybe.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookControllerTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.core.type.Argument;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.runtime.server.EmbeddedServer;</span><br><span class="line"><span class="keyword">import</span> org.junit.AfterClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单元测试类</span></span><br><span class="line"><span class="comment"> * 默认使用 application-test.yml文件测试（需要新建）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BooksControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EmbeddedServer server; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setupServer</span><span class="params">()</span> &#123;</span><br><span class="line">        server = ApplicationContext.run(EmbeddedServer.class); </span><br><span class="line">        client = server .getApplicationContext() .createBean(HttpClient.class, server.getURL());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stopServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (server != <span class="literal">null</span>) &#123; </span><br><span class="line">            server.stop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123; </span><br><span class="line">            client.stop();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Test</span> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retrieveBooks</span><span class="params">()</span> &#123; </span><br><span class="line">         <span class="type">HttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.GET(<span class="string">&quot;/api/books&quot;</span>);         </span><br><span class="line">         List&lt;Book&gt; books = client.toBlocking().retrieve(request, Argument.of(List.class, Book.class));</span><br><span class="line">         assertNotNull(books); </span><br><span class="line">         assertEquals(<span class="number">1</span>, books.size());</span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤10：build-gradle"><a href="#步骤10：build-gradle" class="headerlink" title="步骤10：build.gradle"></a>步骤10：build.gradle</h4><blockquote><p>配置依赖</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.6.RELEASE&quot;</span></span><br><span class="line">    id <span class="string">&quot;com.github.johnrengelman.shadow&quot;</span> version <span class="string">&quot;4.0.2&quot;</span></span><br><span class="line">    id <span class="string">&quot;net.ltgt.apt-eclipse&quot;</span> version <span class="string">&quot;0.18&quot;</span></span><br><span class="line">    id <span class="string">&quot;net.ltgt.apt-idea&quot;</span> version <span class="string">&quot;0.18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin:<span class="string">&quot;application&quot;</span></span><br><span class="line">apply plugin:<span class="string">&quot;java&quot;</span></span><br><span class="line"></span><br><span class="line">version <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="keyword">group</span> <span class="string">&quot;example.micronaut&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url <span class="string">&quot;https://jcenter.bintray.com&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;io.micronaut:micronaut-bom:1.0.4&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  服务注册发现依赖：runtime &quot;io.micronaut:micronaut-discovery-client&quot; */</span></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-inject&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-runtime&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-http-client&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-http-server-netty&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    <span class="keyword">runtime</span> <span class="string">&quot;ch.qos.logback:logback-classic:1.2.3&quot;</span></span><br><span class="line">    <span class="keyword">runtime</span> <span class="string">&quot;io.micronaut:micronaut-discovery-client&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;junit:junit:4.12&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.hamcrest:hamcrest-all:1.3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shadowJar &#123;</span><br><span class="line">    mergeServiceFiles()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run.jvmArgs(<span class="string">&#x27;-noverify&#x27;</span>, <span class="string">&#x27;-XX:TieredStopAtLevel=1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mainClassName = <span class="string">&quot;example.micronaut.Application&quot;</span></span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile)&#123;</span><br><span class="line">    <span class="keyword">options</span>.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">options</span>.compilerArgs.add(<span class="string">&#x27;-parameters&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Book服务编写（groovy）"><a href="#Book服务编写（groovy）" class="headerlink" title="Book服务编写（groovy）"></a>Book服务编写（groovy）</h3><h4 id="步骤1：使用mn生成项目"><a href="#步骤1：使用mn生成项目" class="headerlink" title="步骤1：使用mn生成项目"></a>步骤1：使用mn生成项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mn create-app example.micronaut.books --lang groovy</span><br></pre></td></tr></table></figure><h4 id="步骤2：目录-1"><a href="#步骤2：目录-1" class="headerlink" title="步骤2：目录"></a>步骤2：目录</h4><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/003.png"></p><h4 id="步骤3：Book-groovy"><a href="#步骤3：Book-groovy" class="headerlink" title="步骤3：Book.groovy"></a>步骤3：Book.groovy</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.beans</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> groovy.transform.CompileStatic</span><br><span class="line"><span class="keyword">import</span> groovy.transform.TupleConstructor</span><br><span class="line"></span><br><span class="line"><span class="meta">@CompileStatic</span></span><br><span class="line"><span class="meta">@TupleConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    String isbn</span><br><span class="line">    String name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4：BooksController-groovy"><a href="#步骤4：BooksController-groovy" class="headerlink" title="步骤4：BooksController.groovy"></a>步骤4：BooksController.groovy</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book</span><br><span class="line"><span class="keyword">import</span> example.micronaut.repository.BooksRepository</span><br><span class="line"><span class="keyword">import</span> groovy.transform.CompileStatic</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Controller</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Get</span><br><span class="line"></span><br><span class="line"><span class="meta">@CompileStatic</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BooksRepository booksRepository</span><br><span class="line">    BooksController(BooksRepository booksRepository) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.booksRepository = booksRepository</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Get</span>(<span class="string">&quot;/books&quot;</span>)</span><br><span class="line">    List&lt;Book&gt; list() &#123;</span><br><span class="line">        booksRepository.findAll()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5：DAO（模拟数据库操作）"><a href="#步骤5：DAO（模拟数据库操作）" class="headerlink" title="步骤5：DAO（模拟数据库操作）"></a>步骤5：DAO（模拟数据库操作）</h4><p>BooksRepository.groovy</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.repository</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">BooksRepository</span> &#123;</span><br><span class="line">    List&lt;Book&gt; findAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BooksRepositoryImpl.groovy</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.repository</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book</span><br><span class="line"><span class="keyword">import</span> groovy.transform.CompileStatic</span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton</span><br><span class="line"></span><br><span class="line"><span class="meta">@CompileStatic</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">BooksRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    List&lt;Book&gt; findAll() &#123;</span><br><span class="line">        [</span><br><span class="line">                <span class="keyword">new</span> Book(<span class="string">&quot;1491950358&quot;</span>, <span class="string">&quot;Building Microservices&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Book(<span class="string">&quot;1680502395&quot;</span>, <span class="string">&quot;Release It!&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤6：启动类（自动生成）"><a href="#步骤6：启动类（自动生成）" class="headerlink" title="步骤6：启动类（自动生成）"></a>步骤6：启动类（自动生成）</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.runtime.Micronaut</span><br><span class="line"><span class="keyword">import</span> groovy.transform.CompileStatic</span><br><span class="line"></span><br><span class="line"><span class="meta">@CompileStatic</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Micronaut.run(Application)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤7：application-yml"><a href="#步骤7：application-yml" class="headerlink" title="步骤7：application.yml"></a>步骤7：application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">micronaut:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">books</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">consul:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">registration:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">&quot;$&#123;CONSUL_HOST:192.168.4.163&#125;:$&#123;CONSUL_PORT:8500&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="步骤8：单元测试类"><a href="#步骤8：单元测试类" class="headerlink" title="步骤8：单元测试类"></a>步骤8：单元测试类</h4><p>BooksControllerSpec.groovy</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.micronaut.beans.Book</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.ApplicationContext</span><br><span class="line"><span class="keyword">import</span> io.micronaut.core.type.Argument</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.HttpRequest</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.client.RxHttpClient</span><br><span class="line"><span class="keyword">import</span> io.micronaut.runtime.server.EmbeddedServer</span><br><span class="line"><span class="keyword">import</span> spock.lang.AutoCleanup</span><br><span class="line"><span class="keyword">import</span> spock.lang.Shared</span><br><span class="line"><span class="keyword">import</span> spock.lang.Specification</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 功能测试类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksControllerSpec</span> <span class="keyword">extends</span> <span class="title class_">Specification</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 容器 */</span></span><br><span class="line">    <span class="meta">@Shared</span></span><br><span class="line">    <span class="meta">@AutoCleanup</span></span><br><span class="line">    EmbeddedServer embeddedServer = ApplicationContext.run(EmbeddedServer)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Shared</span></span><br><span class="line">    <span class="meta">@AutoCleanup</span> </span><br><span class="line">    RxHttpClient client = embeddedServer.applicationContext.createBean(RxHttpClient, embeddedServer.getURL())</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="string">&quot;test books retrieve&quot;</span>() &#123; </span><br><span class="line">        <span class="symbol">when:</span></span><br><span class="line">        HttpRequest request = HttpRequest.GET(<span class="string">&#x27;/api/books&#x27;</span>)</span><br><span class="line">        List&lt;Book&gt; books = client.toBlocking().retrieve(request, Argument.of(List, Book))</span><br><span class="line"></span><br><span class="line">        <span class="symbol">then:</span></span><br><span class="line">        books books.size() == <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤9：build-gradle"><a href="#步骤9：build-gradle" class="headerlink" title="步骤9：build.gradle"></a>步骤9：build.gradle</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.6.RELEASE&quot;</span></span><br><span class="line">    id <span class="string">&quot;com.github.johnrengelman.shadow&quot;</span> version <span class="string">&quot;4.0.2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin:<span class="string">&quot;application&quot;</span></span><br><span class="line">apply plugin:<span class="string">&quot;groovy&quot;</span></span><br><span class="line"></span><br><span class="line">version <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="keyword">group</span> <span class="string">&quot;example.micronaut&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url <span class="string">&quot;https://jcenter.bintray.com&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;io.micronaut:micronaut-bom:1.0.4&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> runtime &quot;io.micronaut:micronaut-discovery-client&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-runtime-groovy&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-http-client&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-http-server-netty&quot;</span></span><br><span class="line">    compileOnly <span class="string">&quot;io.micronaut:micronaut-inject-groovy&quot;</span></span><br><span class="line">    <span class="keyword">runtime</span> <span class="string">&quot;ch.qos.logback:logback-classic:1.2.3&quot;</span></span><br><span class="line">    <span class="keyword">runtime</span> <span class="string">&quot;io.micronaut:micronaut-discovery-client&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-inject-groovy&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> (<span class="string">&quot;org.spockframework:spock-core&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">&quot;org.codehaus.groovy&quot;</span>, module: <span class="string">&quot;groovy-all&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shadowJar &#123;</span><br><span class="line">    mergeServiceFiles()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run.jvmArgs(<span class="string">&#x27;-noverify&#x27;</span>, <span class="string">&#x27;-XX:TieredStopAtLevel=1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mainClassName = <span class="string">&quot;example.micronaut.Application&quot;</span></span><br><span class="line"></span><br><span class="line">tasks.withType(GroovyCompile) &#123;</span><br><span class="line">    groovyOptions.forkOptions.jvmArgs.add(<span class="string">&#x27;-Dgroovy.parameters=true&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inventory服务编写（kotlin）"><a href="#Inventory服务编写（kotlin）" class="headerlink" title="Inventory服务编写（kotlin）"></a>Inventory服务编写（kotlin）</h3><h4 id="步骤1：使用mn生成项目-1"><a href="#步骤1：使用mn生成项目-1" class="headerlink" title="步骤1：使用mn生成项目"></a>步骤1：使用mn生成项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mn create-app example.micronaut.inventory --lang kotlin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="步骤2：目录-2"><a href="#步骤2：目录-2" class="headerlink" title="步骤2：目录"></a>步骤2：目录</h4><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/004.png"></p><h4 id="步骤3：Book-kt"><a href="#步骤3：Book-kt" class="headerlink" title="步骤3：Book.kt"></a>步骤3：Book.kt</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.beans</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Book</span>(<span class="keyword">val</span> isbn: String, <span class="keyword">val</span> stock: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><h4 id="步骤4：BooksController-kt"><a href="#步骤4：BooksController-kt" class="headerlink" title="步骤4：BooksController.kt"></a>步骤4：BooksController.kt</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut.controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.HttpResponse</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.MediaType</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.<span class="keyword">annotation</span>.Controller</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.<span class="keyword">annotation</span>.Get</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.<span class="keyword">annotation</span>.Produces</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller(<span class="string">&quot;/api&quot;</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BooksController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Produces(MediaType.TEXT_PLAIN)</span></span><br><span class="line">    <span class="meta">@Get(<span class="string">&quot;/inventory/&#123;isbn&#125;&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inventory</span><span class="params">(isbn: <span class="type">String</span>)</span></span>: HttpResponse&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        <span class="comment">// 返回book的库存信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> (isbn) &#123;</span><br><span class="line">            <span class="string">&quot;1491950358&quot;</span> -&gt; HttpResponse.ok(<span class="number">2</span>)</span><br><span class="line">            <span class="string">&quot;1680502395&quot;</span> -&gt; HttpResponse.ok(<span class="number">0</span>) <span class="comment">/* 1680502395 库存为0 */</span></span><br><span class="line">            <span class="keyword">else</span> -&gt; HttpResponse.notFound()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5：application（自动生成）"><a href="#步骤5：application（自动生成）" class="headerlink" title="步骤5：application（自动生成）"></a>步骤5：application（自动生成）</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example.micronaut</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.runtime.Micronaut</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Application &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        Micronaut.build()</span><br><span class="line">                .packages(<span class="string">&quot;example.micronaut&quot;</span>)</span><br><span class="line">                .mainClass(Application.javaClass)</span><br><span class="line">                .start()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤6：application-yml"><a href="#步骤6：application-yml" class="headerlink" title="步骤6：application.yml"></a>步骤6：application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">micronaut:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">inventory</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">consul:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">registration:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">defaultZone:</span> <span class="string">&quot;$&#123;CONSUL_HOST:192.168.4.163&#125;:$&#123;CONSUL_PORT:8500&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="步骤7：build-gradle"><a href="#步骤7：build-gradle" class="headerlink" title="步骤7：build.gradle"></a>步骤7：build.gradle</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;io.spring.dependency-management&quot;</span> version <span class="string">&quot;1.0.6.RELEASE&quot;</span></span><br><span class="line">    id <span class="string">&quot;com.github.johnrengelman.shadow&quot;</span> version <span class="string">&quot;4.0.2&quot;</span></span><br><span class="line">    id <span class="string">&quot;org.jetbrains.kotlin.jvm&quot;</span> version <span class="string">&quot;1.2.61&quot;</span></span><br><span class="line">    id <span class="string">&quot;org.jetbrains.kotlin.kapt&quot;</span> version <span class="string">&quot;1.2.61&quot;</span></span><br><span class="line">    id <span class="string">&quot;org.jetbrains.kotlin.plugin.allopen&quot;</span> version <span class="string">&quot;1.2.61&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin:<span class="string">&quot;application&quot;</span></span><br><span class="line"></span><br><span class="line">version <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="keyword">group</span> <span class="string">&quot;example.micronaut&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">    maven &#123; url <span class="string">&quot;https://jcenter.bintray.com&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencyManagement &#123;</span><br><span class="line">    imports &#123;</span><br><span class="line">        mavenBom <span class="string">&#x27;io.micronaut:micronaut-bom:1.0.4&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> runtime &quot;io.micronaut:micronaut-discovery-client&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8:$&#123;kotlinVersion&#125;&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;kotlinVersion&#125;&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-runtime&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-http-client&quot;</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&quot;io.micronaut:micronaut-http-server-netty&quot;</span></span><br><span class="line">    kapt <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    kapt <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    kaptTest <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    <span class="keyword">runtime</span> <span class="string">&quot;io.micronaut:micronaut-discovery-client&quot;</span></span><br><span class="line">    <span class="keyword">runtime</span> <span class="string">&quot;ch.qos.logback:logback-classic:1.2.3&quot;</span></span><br><span class="line">    <span class="keyword">runtime</span> <span class="string">&quot;com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;org.junit.jupiter:junit-jupiter-api:5.1.0&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;org.jetbrains.spek:spek-api:1.1.5&quot;</span></span><br><span class="line">    testRuntime <span class="string">&quot;org.junit.jupiter:junit-jupiter-engine:5.1.0&quot;</span></span><br><span class="line">    testRuntime <span class="string">&quot;org.jetbrains.spek:spek-junit-platform-engine:1.1.5&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shadowJar &#123;</span><br><span class="line">    mergeServiceFiles()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run.jvmArgs(<span class="string">&#x27;-noverify&#x27;</span>, <span class="string">&#x27;-XX:TieredStopAtLevel=1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">mainClassName = <span class="string">&quot;example.micronaut.Application&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allOpen &#123;</span><br><span class="line">annotation(<span class="string">&quot;io.micronaut.aop.Around&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileKotlin &#123;</span><br><span class="line">kotlinOptions &#123;</span><br><span class="line">    jvmTarget = <span class="string">&#x27;1.8&#x27;</span> </span><br><span class="line">    <span class="comment">//Will retain parameter names for Java reflection</span></span><br><span class="line">    javaParameters = <span class="keyword">true</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileTestKotlin &#123;</span><br><span class="line">kotlinOptions &#123;</span><br><span class="line">    jvmTarget = <span class="string">&#x27;1.8&#x27;</span> </span><br><span class="line">    javaParameters = <span class="keyword">true</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="步骤1：启动consul"><a href="#步骤1：启动consul" class="headerlink" title="步骤1：启动consul"></a>步骤1：启动consul</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# consul agent -server -bootstrap-expect=1 -data-dir=/tmp/consul-data -bind=192.168.4.163 -client=0.0.0.0 -ui</span><br></pre></td></tr></table></figure><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/005.png"></p><h4 id="步骤2：启动微服务-启动无顺序"><a href="#步骤2：启动微服务-启动无顺序" class="headerlink" title="步骤2：启动微服务(启动无顺序)"></a>步骤2：启动微服务(启动无顺序)</h4><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/006.png"></p><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/007.png"></p><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/008.png"></p><p>启动成功如下</p><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/010.png"></p><h4 id="步骤3：访问gateway获取还有库存的数据本书"><a href="#步骤3：访问gateway获取还有库存的数据本书" class="headerlink" title="步骤3：访问gateway获取还有库存的数据本书"></a>步骤3：访问gateway获取还有库存的数据本书</h4><p><img src="/./micronaut%E5%AE%9E%E7%8E%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1/009.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建ELK日志收集系统</title>
      <link href="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>kafka：<a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a> </p><p>zookeeper：<a href="https://www.apache.org/dyn/closer.cgi/zookeeper/%EF%BC%88%E4%B8%8D%E7%94%A8kafka%E5%86%85%E7%BD%AE%E7%9A%84zookeeper%EF%BC%89">https://www.apache.org/dyn/closer.cgi/zookeeper/（不用kafka内置的zookeeper）</a></p><p>jdk：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><p><strong>步骤1：配置jdk环境变量</strong></p><p>1）vim &#x2F;etc&#x2F;profile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在unset...前添加一下内容</span><br><span class="line"># user settings</span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_201</span><br><span class="line">PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p>2）source &#x2F;etc&#x2F;profile 刷新配置</p><p><strong>步骤2：将zookeeper配置文件zoo_sample.cfg改名为zoo.cfg</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p><strong>步骤3：启动zookeeper（使用kafka提供的配置文件）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./zkServer.sh start /usr/local/kafka_2.11-2.1.0/config/zookeeper.properties</span><br></pre></td></tr></table></figure><p><strong>步骤4：启动kafka服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./kafka-server-start.sh ../config/server.properties</span><br></pre></td></tr></table></figure><p><strong>步骤5：创建topic</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./kafka-topics.sh --create --zookeeper 192.168.4.157:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure><p><strong>步骤6：查看topic是否创建成功</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./kafka-topics.sh --zookeeper 192.168.4.157:2181 --list</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p><strong>步骤7：kafka producer生产消息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./kafka-console-producer.sh --broker-list 192.168.4.157:9092 --topic test</span><br></pre></td></tr></table></figure><p><strong>步骤8：kafka consumer消费消息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./kafka-console-consumer.sh --bootstrap-server 192.168.4.157:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure><p>–from-beginning ：表示监听 test这个topic上的所有历史消息（即新消息和旧消息都获取-&gt; kafka消息持久化）</p><h2 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h2><p><strong>步骤1：关闭防火墙和修改配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewall</span><br><span class="line">systemctl disable firewall</span><br><span class="line"></span><br><span class="line">vim /usr/local/kafka/config/server.properties</span><br></pre></td></tr></table></figure><p><img src="/./kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/013.png"></p><p><strong>步骤2：配置pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.td<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafkahw<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>kafkahw<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>步骤3：配置springboot属性文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/kafkahw</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">producer:</span></span><br><span class="line">      <span class="attr">key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="attr">value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">group-id:</span> <span class="string">consumer-group</span></span><br><span class="line">      <span class="attr">key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>步骤4：代码</strong></p><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.resouce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaResource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value=&#123;&quot;/&quot;,&quot;/login&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send/&#123;topic&#125;/&#123;content&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(<span class="meta">@PathVariable(&quot;topic&quot;)</span> String topic,</span></span><br><span class="line"><span class="params">                       <span class="meta">@PathVariable(&quot;content&quot;)</span> String content)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;准备发送消息...&quot;</span>);</span><br><span class="line">            kafkaTemplate.send(topic, content);</span><br><span class="line">            System.out.println(<span class="string">&quot;准备发送完成...&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;send fail&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;send success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkaConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumer</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到：&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KafkahwApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(KafkahwApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装前端监控"><a href="#安装前端监控" class="headerlink" title="安装前端监控"></a>安装前端监控</h2><p><strong>步骤1：下载kafka-monitor</strong></p><blockquote><p>github：<a href="https://github.com/quantifind/KafkaOffsetMonitor">https://github.com/quantifind/KafkaOffsetMonitor</a></p><p>百度云盘：链接：<a href="https://pan.baidu.com/s/1c1Snar2">https://pan.baidu.com/s/1c1Snar2</a> 密码：ncjp</p><p>下载完，直接复制进去运行即可</p></blockquote><p><img src="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/012.png"></p><p><strong>步骤2：启动</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp KafkaOffsetMonitor-assembly-0.2.0.jar com.quantifind.kafka.offsetapp.OffsetGetterWeb --zk 192.168.1.101:2181 --port 8089 --refresh 10.seconds --retain 1.days</span><br></pre></td></tr></table></figure><p><strong>步骤3：浏览</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.101:8089</span><br></pre></td></tr></table></figure><h2 id="Kafka-Connect-Elasticsearch-Connector（方法1）"><a href="#Kafka-Connect-Elasticsearch-Connector（方法1）" class="headerlink" title="Kafka Connect Elasticsearch Connector（方法1）"></a>Kafka Connect Elasticsearch Connector（方法1）</h2><blockquote><p>提醒：虚拟机复制的话切记要情况elasticsearch中的data目录数据</p><p>ElasticSearch直接消费kafka消息</p></blockquote><blockquote><p>以下以CDC为例</p></blockquote><p><strong>步骤1：下载连接器</strong></p><p>kafka connect ElasticSearch：<a href="https://www.confluent.io/connector/kafka-connect-elasticsearch/">https://www.confluent.io/connector/kafka-connect-elasticsearch/</a></p><p>Debezium：<a href="https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/">https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/</a></p><p><strong>步骤2：安装并配置</strong></p><p>profile（将Debezium插件依赖包配置到classpath上，必须）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">user settings</span></span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_201</span><br><span class="line">PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$NODE_HOME/bin:$PATH</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debezium 插件依赖</span></span><br><span class="line">export CLASSPATH=/usr/local/debezium-connector-mysql/*</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p>server.properties（kafka server配置）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://192.168.4.159:9092</span></span><br></pre></td></tr></table></figure><p>connect-distributed.properties（kafka连接器配置）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bootstrap.servers</span>=<span class="string">192.168.4.159:9092</span></span><br><span class="line"><span class="attr">key.converter.schemas.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">value.converter.schemas.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"># 启用rest配置schema</span></span><br><span class="line"><span class="attr">rest.host.name</span>=<span class="string">192.168.4.159</span></span><br><span class="line"><span class="attr">rest.port</span>=<span class="string">8083</span></span><br><span class="line"><span class="comment"># kafka connect elasticsearch插件</span></span><br><span class="line"><span class="attr">plugin.path</span>=<span class="string">/usr/local/confluentinc-kafka-connect-elasticsearch-5.1.0</span></span><br></pre></td></tr></table></figure><p>elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.4</span><span class="number">.159</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># 允许跨域访问es（es插件）</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p><strong>步骤3：启动</strong></p><ol><li>启动zookeeper</li><li>启动kafka server</li><li>启动elasticsearch（注意：es必须使用非root启动）</li><li>启动kafka connect</li></ol><p><strong>步骤4：测试</strong></p><ul><li>配置source</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST http://192.168.4.159:8083/connectors/</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;my-first-connector&quot;,</span><br><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">    &quot;connector.class&quot;: &quot;io.debezium.connector.mysql.MySqlConnector&quot;,</span><br><span class="line">    &quot;database.hostname&quot;: &quot;192.168.4.120&quot;,</span><br><span class="line">    &quot;database.port&quot;: &quot;3306&quot;,</span><br><span class="line">    &quot;database.user&quot;: &quot;tandi&quot;,</span><br><span class="line">    &quot;database.password&quot;: &quot;123456&quot;,</span><br><span class="line">    &quot;database.server.id&quot;: &quot;11111&quot;,</span><br><span class="line">    &quot;database.server.name&quot;: &quot;192.168.4.120&quot;,</span><br><span class="line">    &quot;database.serverTimezone&quot;: &quot;UTC&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;database.history.kafka.bootstrap.servers&quot;: &quot;192.168.4.159:9092&quot;,</span><br><span class="line">    &quot;database.history.kafka.topic&quot;: &quot;192.168.4.120.db1&quot; ,</span><br><span class="line">    &quot;include.schema.changes&quot;: &quot;true&quot;,</span><br><span class="line">   </span><br><span class="line">        &quot;transforms&quot;: &quot;unwrap,changetopic&quot;,</span><br><span class="line">    &quot;transforms.unwrap.type&quot;: &quot;io.debezium.transforms.UnwrapFromEnvelope&quot;,</span><br><span class="line">    &quot;transforms.changetopic.type&quot;:&quot;org.apache.kafka.connect.transforms.RegexRouter&quot;,</span><br><span class="line">    &quot;transforms.changetopic.regex&quot;:&quot;(.*)&quot;,</span><br><span class="line">    &quot;transforms.changetopic.replacement&quot;:&quot;$1-smt&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/030.png"></p><ul><li>配置sink</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST http://192.168.4.159:8083/connectors/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;elasticsearch-sink&quot;,</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">    &quot;connector.class&quot;: &quot;io.confluent.connect.elasticsearch.ElasticsearchSinkConnector&quot;,</span><br><span class="line">    &quot;tasks.max&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;topics&quot;: &quot;192.168.4.120.db1.t1-smt,192.168.4.120-smt&quot;,</span><br><span class="line">    &quot;key.ignore&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;schema.ignore&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;connection.url&quot;: &quot;http://192.168.4.159:9200&quot;,</span><br><span class="line">    &quot;type.name&quot;: &quot;kafka-connect&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;elasticsearch-sink&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/031.png"></p><ul><li>向数据库添加数据</li></ul><p><img src="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/032.png"></p><ul><li>查看ElasticSearch</li></ul><p><img src="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/033.png"></p><h2 id="Logstash整合kafka并数据到ElasticSearch（方法2）"><a href="#Logstash整合kafka并数据到ElasticSearch（方法2）" class="headerlink" title="Logstash整合kafka并数据到ElasticSearch（方法2）"></a>Logstash整合kafka并数据到ElasticSearch（方法2）</h2><blockquote><p>提醒：虚拟机复制的话切记要情况elasticsearch中的data目录数据</p><p>Logstash消费kafka消息到ElasticSearch</p></blockquote><p><strong>步骤1：下载并上传Logstash到linux</strong></p><blockquote><p>logstash：<a href="https://www.elastic.co/cn/products/logstash">https://www.elastic.co/cn/products/logstash</a></p></blockquote><p>上传解压如下</p><p><img src="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/014.png"></p><p><strong>步骤2：创建并配置Logstash启动文件</strong></p><p>LogstashKafka.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost config]# touch logstash-kafka.conf</span><br><span class="line">[root@localhost config]# vim logstash-kafka.conf</span><br></pre></td></tr></table></figure><blockquote><p>配置文件说明：从input获取数据输出到output</p></blockquote><p>从kafka读取 - &gt; 从kafka中获取数据消费输出到控制台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">output&#123;  </span><br><span class="line">input&#123;</span><br><span class="line">  kafka&#123;</span><br><span class="line">bootstrap_servers =&gt; [&quot;192.168.4.157:9092&quot;]</span><br><span class="line"> # 建议和生产消息的线程组区别，同一个组不能消费同一个分区</span><br><span class="line">group_id =&gt; &quot;consumer-logs-group&quot;</span><br><span class="line">auto_offset_reset =&gt; &quot;earliest&quot;</span><br><span class="line">consumer_threads =&gt; 5</span><br><span class="line">decorate_events =&gt; true</span><br><span class="line">topics =&gt; [&quot;logs&quot;,&quot;test&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    stdout&#123;</span><br><span class="line">        codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; [&quot;192.168.4.157:9200&quot;]</span><br><span class="line">user =&gt; &quot;tandi&quot;</span><br><span class="line">password =&gt; &quot;tandi&quot;</span><br><span class="line">index =&gt; &quot;%&#123;service&#125;-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向kafka输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    stdin&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">    kafka&#123;</span><br><span class="line">        topic_id =&gt; &quot;logs&quot;</span><br><span class="line">        bootstrap_servers =&gt; &quot;192.168.4.157:9092&quot; </span><br><span class="line">        batch_size =&gt; 5</span><br><span class="line">    </span><br><span class="line">    stdout&#123;</span><br><span class="line">        codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/kafka%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E6%90%AD%E5%BB%BAELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F/015.png"></p><p><strong>步骤3：测试从kafka中消费数据</strong></p><p>1）启动zookeeper</p><p>2）启动kafka</p><p>3）启动logstash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost logstash-6.5.4]# bin/logstash -f config/logstash-kafka-input-td.conf </span><br></pre></td></tr></table></figure><h2 id="Kibana整合ElasticSearch"><a href="#Kibana整合ElasticSearch" class="headerlink" title="Kibana整合ElasticSearch"></a>Kibana整合ElasticSearch</h2><blockquote><p>切记：kibana和ElasticSearch必须版本号要一直，否者很麻烦</p></blockquote><p><strong>步骤1：下载kibana</strong></p><p><strong>步骤2：配置kibana</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601 # kibana端口</span><br><span class="line">server.host: &quot;192.168.4.157&quot; # 本机端口</span><br><span class="line">elasticsearch.url: &quot;http://192.168.4.157:9200&quot; # elasticsearch url</span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Micronaut入门</title>
      <link href="/micronaut%E5%85%A5%E9%97%A8/"/>
      <url>/micronaut%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><ul><li>micronaut是一种现代的，基于JVM字节码注入的微服务全栈框架</li><li>用于构建模块化，易于测试的微服务和无服务器应用程序（专门为cloud native设计&#x2F;云原生应用）</li></ul><ul><li><p>包含以下特性：</p><ul><li><p>依赖注入(无需通过反射) 和 控制翻转</p></li><li><p>明智的默认值 和 自动配置</p></li><li><p>基于netty</p></li><li><p>配置共享</p></li><li><p>服务发现</p></li><li><p>HTTP路由</p></li><li><p>客户端负载均衡的HTTP客户端</p></li><li><p>支持java，groovy，kotlin等语言</p></li><li><p>启动速度快</p></li><li><p>内存占用少</p></li><li><p>简单的单元测试</p></li></ul></li></ul><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>官网文档：<a href="https://docs.micronaut.io/latest/guide/index.html">https://docs.micronaut.io/latest/guide/index.html</a></p><p>GitHub：</p><p><a href="https://github.com/micronaut-projects">https://github.com/micronaut-projects</a></p><p><a href="https://github.com/micronaut-guides">https://github.com/micronaut-guides</a></p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello-world"></a>hello-world</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">CentOS7安装</span><br><span class="line">步骤1：安装sdkman</span><br><span class="line">curl -s <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash</span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh&quot;</span></span><br><span class="line">sdk version</span><br><span class="line"></span><br><span class="line">步骤2：使用sdkman安装micronaut</span><br><span class="line">sdk install micronaut 或者 sdk install micronaut 1.1.0.M1</span><br><span class="line"></span><br><span class="line">步骤3：快速入门案例</span><br><span class="line">1）使用micronaut快速构建一个maven管理的java项目</span><br><span class="line">[root@localhost files]<span class="comment"># mn create-app hello-world // gradle</span></span><br><span class="line">或</span><br><span class="line">[root@localhost files]<span class="comment"># sdk use maven // 安装maven</span></span><br><span class="line">[root@localhost files]<span class="comment"># mn create-app --build maven hello-world</span></span><br><span class="line">【启动类】</span><br><span class="line">import io.micronaut.runtime.Micronaut;</span><br><span class="line">public class Application &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Micronaut.run(Application.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">【默认情况下，Micronaut HTTP服务器配置为在端口8080上运行】</span><br><span class="line"></span><br><span class="line">2）在添加交互代码</span><br><span class="line">package hello;</span><br><span class="line"></span><br><span class="line">import io.micronaut.http.MediaType;</span><br><span class="line">import io.micronaut.http.annotation.Controller;</span><br><span class="line">import io.micronaut.http.annotation.Get;</span><br><span class="line"></span><br><span class="line">@Controller(<span class="string">&quot;/hello&quot;</span>) </span><br><span class="line">public class HelloController &#123;</span><br><span class="line">@Get(produces = MediaType.TEXT_PLAIN) </span><br><span class="line">public String <span class="function"><span class="title">index</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">&quot;Hello World&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3）进入hello-world下运行</span><br><span class="line">【gradle运行】</span><br><span class="line">./gradlew run</span><br><span class="line">【maven运行】</span><br><span class="line">或</span><br><span class="line">[root@localhost hello]<span class="comment"># mvn compile package</span></span><br><span class="line">[root@localhost target]<span class="comment"># java -jar hello-0.1.jar </span></span><br><span class="line">17:59:44.811 [main] INFO  io.micronaut.runtime.Micronaut - Startup completed <span class="keyword">in</span> 6505ms. Server Running: http://localhost.localdomain:8080</span><br><span class="line"></span><br><span class="line">4）访问</span><br><span class="line">[root@localhost conf]<span class="comment"># curl http://localhost:8080/hello</span></span><br><span class="line">Micronaut Hello World</span><br></pre></td></tr></table></figure><h2 id="ioc"><a href="#ioc" class="headerlink" title="ioc"></a>ioc</h2><h3 id="ioc例子"><a href="#ioc例子" class="headerlink" title="ioc例子"></a>ioc例子</h3><p>1）添加依赖（gradle）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins <span class="punctuation">&#123;</span></span><br><span class="line">  id <span class="string">&quot;net.ltgt.apt&quot;</span> version <span class="string">&quot;0.18&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">dependencies <span class="punctuation">&#123;</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut:micronaut-inject-java:1.0.4&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-inject:1.0.4&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>2）定义bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.inject.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Engine</span> &#123; </span><br><span class="line">    <span class="type">int</span> <span class="title function_">getCylinders</span><span class="params">()</span></span><br><span class="line">    String <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">V8Engine</span> <span class="keyword">implements</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cylinders</span> <span class="operator">=</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="string">&quot;Starting V8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Engine engine</span><br><span class="line"></span><br><span class="line">    <span class="title function_">Vehicle</span><span class="params">(Engine engine)</span> &#123; </span><br><span class="line">        <span class="built_in">this</span>.engine = engine</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        engine.start()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）构建bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> ApplicationContext.run()) &#123; </span><br><span class="line">    <span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span> context.getBean(MyBean.class); </span><br><span class="line">    <span class="comment">// do something with your bean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖注入是如何工作的？"><a href="#依赖注入是如何工作的？" class="headerlink" title="依赖注入是如何工作的？"></a>依赖注入是如何工作的？</h3><ul><li>micronaut不是通过反射来实现依赖注入</li><li>micronaut使用的是<strong>AST转换</strong>（用于Groovy）和<strong>注释处理器</strong>（用于Java）来生成实现BeanDefinition接口的类</li><li>micronaut使用<strong>ASM字节码库</strong>生成类，并由于micronaut提前知道注入点（基于jvm），因此不需要像Spring等其他框架一样在运行时扫描所有方法，字段，构造函数等来得知注入点</li><li>此外，由于在构造bean的时候不是通过反射来实现依赖注入，因此jvm可以更好地内联和优化代码，从而提高运行时性能并减少内存的消耗。这对于非单例范围的bean尤为重要，<strong>因为应用程序性能取决于bean创建性能</strong></li><li>使用micronaut开发，应用程序<strong>启动时间</strong>和<strong>内存消耗</strong>不会像使用反射的ioc框架一样取决于代码库的大小，因为基于反射的ioc框架会为代码中的每个字段，方法，构造函数等，加载和缓存反射数据。因此，随着代码规模的增长，应用对内存的需求也会增加，而使用micronaut则不是这样</li></ul><h3 id="BeanContext"><a href="#BeanContext" class="headerlink" title="BeanContext"></a>BeanContext</h3><p>该BeanContext中是您所有的bean定义一个容器对象（它也实现BeanDefinitionRegistry），这也是Micronaut的初始化点。但是，一般来说，您不必直接与BeanContextAPI 交互，只需使用javax.inject注解和io.micronaut.context.annotation包中定义的注解来满足依赖注入需求</p><h3 id="Requires"><a href="#Requires" class="headerlink" title="@Requires"></a>@Requires</h3><h4 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Requires(beans = DataSource.class)</span> <span class="comment">// 应用中必须存在 DataSource.class bean实例</span></span><br><span class="line"><span class="meta">@Requires(property = &quot;datasource.url&quot;)</span> <span class="comment">// 引用中必须存在 datasource.url 配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcBookService</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JdbcBookService</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-Requires创建派生注解"><a href="#使用-Requires创建派生注解" class="headerlink" title="使用@Requires创建派生注解"></a>使用@Requires创建派生注解</h4><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PACKAGE, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Requires(beans = DataSource.class)</span></span><br><span class="line"><span class="meta">@Requires(property = &quot;datasource.url&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequiresJdbc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresJdbc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcBookService</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他使用"><a href="#其他使用" class="headerlink" title="其他使用"></a>其他使用</h4><p><img src="/./micronaut%E5%85%A5%E9%97%A8/011.png"></p><h2 id="micronaut-environment"><a href="#micronaut-environment" class="headerlink" title="micronaut environment"></a>micronaut environment</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.env.Environment;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.runtime.server.EmbeddedServer;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意：进行junit时，micronaut自动开启test环境配置（application-test.yml）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Requires</span>(env = &quot;test&quot;) // 注解到类上，表示当前类只有在测试环境才可用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MicronautTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EmbeddedServer server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setupServer</span><span class="params">()</span> &#123;</span><br><span class="line">        server = ApplicationContext.run(EmbeddedServer.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 激活环境</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> ApplicationContext.run(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;android&quot;</span>,<span class="string">&quot;dev&quot;</span>); <span class="comment">// 激活多个配置，默认使用最后一个</span></span><br><span class="line"><span class="comment">//        ApplicationContext applicationContext = ApplicationContext.run(); // 测试环境默认使用test，即application-test.yml</span></span><br><span class="line"><span class="comment">//        ApplicationContext applicationContext = ApplicationContext.run(&quot;dev&quot;);</span></span><br><span class="line">        <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> applicationContext.getEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入激活的环境</span></span><br><span class="line">        System.out.println( environment.getActiveNames() );</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; micronaut = applicationContext.getEnvironment().getProperties(<span class="string">&quot;micronaut&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;application.name = &quot;</span> + micronaut.get(<span class="string">&quot;application.name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;server.port = &quot;</span> + micronaut.get(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;environments = &quot;</span> + micronaut.get(<span class="string">&quot;environments&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;home = &quot;</span> + micronaut.get(<span class="string">&quot;home&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP-Server（提供服务）"><a href="#HTTP-Server（提供服务）" class="headerlink" title="HTTP Server（提供服务）"></a>HTTP Server（提供服务）</h2><h3 id="gradle依赖"><a href="#gradle依赖" class="headerlink" title="gradle依赖"></a>gradle依赖</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">dependencies <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*依赖注入相关*/</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    compileOnly <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-inject&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;org.hamcrest:hamcrest-all:1.3&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* swagger(openapi协议实现) */</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut.configuration:micronaut-openapi&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.swagger.core.v3:swagger-annotations&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*校验*/</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-runtime&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*http-client*/</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-http-client&quot;</span></span><br><span class="line">    <span class="comment">/*http-server*/</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-http-server-netty&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*logback日志*/</span></span><br><span class="line">    runtime <span class="string">&quot;ch.qos.logback:logback-classic:1.2.3&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*服务注册发现*/</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-discovery-client:1.0.4&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*junit单元测试*/</span></span><br><span class="line">    compile <span class="string">&quot;junit:junit:4.12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.annotation.Requires;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Requires(env = &quot;test&quot;)</span> <span class="comment">// 用于测试环境</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Get</span></span><br><span class="line"><span class="comment">    @Post</span></span><br><span class="line"><span class="comment">    @Put</span></span><br><span class="line"><span class="comment">    @Delete</span></span><br><span class="line"><span class="comment">    @Head</span></span><br><span class="line"><span class="comment">    @Options</span></span><br><span class="line"><span class="comment">    @Patch</span></span><br><span class="line"><span class="comment">    @Trace</span></span><br><span class="line"><span class="comment">    public String hello3 ()&#123;</span></span><br><span class="line"><span class="comment">        return &quot;&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Get(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello micronaut http!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** restful规则</span></span><br><span class="line"><span class="comment">     *      格式                     解释                               例子</span></span><br><span class="line"><span class="comment">         /books/&#123;id&#125;        Simple match                    /books/1</span></span><br><span class="line"><span class="comment">         /books/&#123;id:2&#125;        A variable of 2 characters max    /books/10</span></span><br><span class="line"><span class="comment">         /books&#123;/id&#125;        An optional URI variable        /books/10 or /books</span></span><br><span class="line"><span class="comment">         /book&#123;/id:[a-zA-Z]+&#125;An optional URI variable with regex/books/foo</span></span><br><span class="line"><span class="comment">         /books&#123;?max,offset&#125;Optional query parameters        /books?max=10&amp;offset=10</span></span><br><span class="line"><span class="comment">         /books&#123;/path:.*&#125;&#123;.ext&#125;Regex path match with extension    /books/foo/bar.xml</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Get(&quot;/&#123;number&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello2</span> <span class="params">(Integer number)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请求的数字是：&quot;</span> + number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Get(&quot;/&#123;name&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello3</span> <span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;name:&quot;</span>+ name +<span class="string">&quot;, age:&quot;</span>+ age +<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="junit-test（EmbeddedServer、HttpClient）"><a href="#junit-test（EmbeddedServer、HttpClient）" class="headerlink" title="junit test（EmbeddedServer、HttpClient）"></a>junit test（EmbeddedServer、HttpClient）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.runtime.server.EmbeddedServer;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// micronaut提供的嵌入server</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EmbeddedServer server;</span><br><span class="line">    <span class="comment">// http客户端</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setupServer</span><span class="params">()</span> &#123;</span><br><span class="line">        server = ApplicationContext.run(EmbeddedServer.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;server.getURL() = &quot;</span> + server.getURL());</span><br><span class="line">        client = HttpClient.create( server.getURL() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 HelloController @Get(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 作用：请求 server.getURL() + /hello</span></span><br><span class="line"><span class="comment">         * toBlocking()：返回一个适合测试和非生产场景的阻塞HTTP客户端</span></span><br><span class="line"><span class="comment">         * retrieve(HttpRequest.GET(&quot;/hello&quot;))：取回 HttpRequest.GET(&quot;/hello&quot;) 请求返回的内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println( client.toBlocking().retrieve(HttpRequest.GET(<span class="string">&quot;/hello&quot;</span>)) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 @Get(&quot;/&#123;number&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println( client.toBlocking().retrieve(HttpRequest.GET(<span class="string">&quot;/1&quot;</span>)) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试动态绑定路由MyRoutes</span></span><br><span class="line">    <span class="comment">// @Get(&quot;/hello/&#123;number&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 原来的路由地址 @Get(&quot;/&#123;number&#125;&quot;)</span></span><br><span class="line">        System.out.println( <span class="string">&quot;@Get(\&quot;/&#123;number&#125;\&quot;) = &quot;</span> + client.toBlocking().retrieve(HttpRequest.GET(<span class="string">&quot;/hello/10000&quot;</span>)) );</span><br><span class="line">        <span class="comment">// 动态绑定路由地址 @Get(&quot;/hello/&#123;number&#125;&quot;)</span></span><br><span class="line">        System.out.println( <span class="string">&quot;@Get(\&quot;/hello/&#123;number&#125;\&quot;) = &quot;</span> + client.toBlocking().retrieve(HttpRequest.GET(<span class="string">&quot;/hello/10000&quot;</span>)) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 @Get(&quot;/&#123;name&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println( client.toBlocking().retrieve(HttpRequest.GET(<span class="string">&quot;/tandi/23&quot;</span>)) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编程式绑定路由"><a href="#编程式绑定路由" class="headerlink" title="编程式绑定路由"></a>编程式绑定路由</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.Building_Routes_Programmatically;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.td.controller.HelloController;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.ExecutionHandleLocator;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.context.annotation.Requires;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.web.router.DefaultRouteBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.inject.Singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：动态地帮助controller绑定路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Requires(env = &quot;test&quot;)</span></span><br><span class="line"><span class="comment">//@Requires(env = &quot;dev&quot;) // 必须dev环境才可用</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRoutes</span> <span class="keyword">extends</span> <span class="title class_">DefaultRouteBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyRoutes</span><span class="params">(ExecutionHandleLocator executionHandleLocator, UriNamingStrategy uriNamingStrategy)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(executionHandleLocator, uriNamingStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">issuesRoutes</span><span class="params">(HelloController helloController)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注意：原来helloController.hello2  <span class="doctag">@Get</span>(&quot;/&#123;number&#125;&quot;)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 路由：&quot;/hello/&#123;number&#125;&quot;</span></span><br><span class="line"><span class="comment">         * 目标控制器：helloController</span></span><br><span class="line"><span class="comment">         * 目标控制器方法：hello2</span></span><br><span class="line"><span class="comment">         * 传入参数的类型：Integer.class</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GET(<span class="string">&quot;/hello/&#123;number&#125;&quot;</span>, helloController, <span class="string">&quot;hello2&quot;</span>, Integer.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP-Client（消费服务）"><a href="#HTTP-Client（消费服务）" class="headerlink" title="HTTP Client（消费服务）"></a>HTTP Client（消费服务）</h2><h3 id="gradle依赖-1"><a href="#gradle依赖-1" class="headerlink" title="gradle依赖"></a>gradle依赖</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">dependencies <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*依赖注入相关*/</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    compileOnly <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;io.micronaut:micronaut-inject-java&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-inject&quot;</span></span><br><span class="line">    testCompile <span class="string">&quot;org.hamcrest:hamcrest-all:1.3&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* swagger(openapi协议实现) */</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut.configuration:micronaut-openapi&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.swagger.core.v3:swagger-annotations&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*校验*/</span></span><br><span class="line">    annotationProcessor <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-validation&quot;</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-runtime&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*http-client*/</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-http-client&quot;</span></span><br><span class="line">    <span class="comment">/*http-server*/</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-http-server-netty&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*logback日志*/</span></span><br><span class="line">    runtime <span class="string">&quot;ch.qos.logback:logback-classic:1.2.3&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*服务注册发现*/</span></span><br><span class="line">    compile <span class="string">&quot;io.micronaut:micronaut-discovery-client:1.0.4&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*junit单元测试*/</span></span><br><span class="line">    compile <span class="string">&quot;junit:junit:4.12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="HttpClient简单使用"><a href="#HttpClient简单使用" class="headerlink" title="HttpClient简单使用"></a>HttpClient简单使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Get;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.client.HttpClient;</span><br><span class="line"><span class="keyword">import</span> org.reactivestreams.Publisher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Get(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Publisher&lt;String&gt; <span class="title function_">show</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Publisher&lt;String&gt; retrieve = HttpClient.create(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080&quot;</span>)).retrieve(HttpRequest.GET(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> retrieve;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="微服务远程调用"><a href="#微服务远程调用" class="headerlink" title="微服务远程调用"></a>微服务远程调用</h3><blockquote><p>参考文章《使用micronaut实现微服务》</p></blockquote><h2 id="websocket和server-sent-event（sse）区别"><a href="#websocket和server-sent-event（sse）区别" class="headerlink" title="websocket和server sent event（sse）区别"></a>websocket和server sent event（sse）区别</h2><blockquote><p>以下参考文章：<a href="http://www.importnew.com/21967.html">http://www.importnew.com/21967.html</a></p></blockquote><ol><li>都可以进行服务端推送，并且都是长连接进行</li><li>sse仍然使用http协议进行通讯，即正常的http报文；而websocket是使用http协议进行握手,然后再使用同一个链接进行websocket协议的通信</li><li>websocket可以进行双向（双端）通讯，即server端可以向client端发送消息，client端也能向server端发送消息；sse是单向通讯，只能由server端发送消息给client端</li><li>websocket自带连接的保持,即通过ping&#x2F;pong协议保证连接可以始终维持,sse没有这个保证,不过可以参考ping&#x2F;pong协议,自己周期性地发送信息来同样地进行处理.比如,5秒往客户端发一个特别的信息(通过type&#x2F;name进行区分).其次,因为是基于浏览器的使用,sse有一个特性,就是浏览器发现一个连接断掉了,就会自动地进行重联,即重新发送请求.这样,服务端也不用担心连接被断开,不过需要处理新的请求必须和上一次请求的内容相连续,以及新的推送注册</li><li>由于都是基于浏览器使用,因此建议的数据传输都是文本型.虽然websocket支持二进制frame传输,不过一些都不建议使用.sse只能传输文本</li><li>不管是websocket还是sse,在用于通信时,都建议只用于进行数据的推送,而不是进行完整的应用处理.这里可以理解为,常规的业务处理仍然交给后端的服务来处理.这样,即可以使用之前的业务开发的优势,又可以使用推送的优势.而不是走向另一个级端,即所有的信息都想通过推送来传递</li></ol><h2 id="swagger（open-api接口规范）"><a href="#swagger（open-api接口规范）" class="headerlink" title="swagger（open api接口规范）"></a>swagger（open api接口规范）</h2><h3 id="open-api接口规范"><a href="#open-api接口规范" class="headerlink" title="open api接口规范"></a>open api接口规范</h3><p>OpenAPI规范始于Swagger规范，经过Reverb Technologies和SmartBear等公司多年的发展，OpenAPI计划拥有该规范（捐赠之后），OpenAPI Initiative在GitHub上托管社区驱动的规范。规范是一种与语言无关的格式，用于描述RESTful Web服务，应用程序可以解释生成的文件，这样才能生成代码、生成文档并根据其描述的服务创建模拟应用</p><h3 id="micronaut-swagger"><a href="#micronaut-swagger" class="headerlink" title="micronaut swagger"></a>micronaut swagger</h3><h4 id="步骤1：配置依赖和application-yml"><a href="#步骤1：配置依赖和application-yml" class="headerlink" title="步骤1：配置依赖和application.yml"></a>步骤1：配置依赖和application.yml</h4><p>build.gradle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">/* swagger(openapi协议实现) */</span><br><span class="line">    annotationProcessor &quot;io.micronaut.configuration:micronaut-openapi&quot;</span><br><span class="line">    compile &quot;io.swagger.core.v3:swagger-annotations&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">micronaut:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">ioc-normal</span> <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="comment">#        port: -1  随机端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#swagger配置</span></span><br><span class="line">    <span class="attr">router:</span></span><br><span class="line">      <span class="attr">static-resources:</span></span><br><span class="line">        <span class="attr">swagger:</span></span><br><span class="line">          <span class="attr">paths:</span> <span class="string">classpath:META-INF/swagger</span></span><br><span class="line">          <span class="attr">mapping:</span> <span class="string">/swagger/**</span></span><br><span class="line"><span class="comment">#consul:</span></span><br><span class="line"><span class="comment">#  client:</span></span><br><span class="line"><span class="comment">#    registration:</span></span><br><span class="line"><span class="comment">#      enabled: true</span></span><br><span class="line"><span class="comment">#    defaultZone: &quot;$&#123;CONSUL_HOST:192.168.4.163&#125;:$&#123;CONSUL_PORT:8500&#125;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2：应用open-api"><a href="#步骤2：应用open-api" class="headerlink" title="步骤2：应用open api"></a>步骤2：应用open api</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*步骤1：配置swagger*/</span></span><br><span class="line"><span class="meta">@OpenAPIDefinition(</span></span><br><span class="line"><span class="meta">    info = @Info(</span></span><br><span class="line"><span class="meta">        title = &quot;Hello Swagger&quot;,</span></span><br><span class="line"><span class="meta">        version = &quot;0.1&quot;,</span></span><br><span class="line"><span class="meta">        description = &quot;第一次使用swagger&quot;,</span></span><br><span class="line"><span class="meta">        license = @License(name = &quot;Apache 2.0&quot;, url = &quot;http://localhost:8888&quot;),</span></span><br><span class="line"><span class="meta">        contact = @Contact(url = &quot;http://tandi.cc&quot;, name = &quot;TanDi&quot;, email = &quot;tandi@163.com&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Micronaut.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3：使用例子"><a href="#步骤3：使用例子" class="headerlink" title="步骤3：使用例子"></a>步骤3：使用例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> io.micronaut.http.annotation.Get;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Parameter;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Content;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSwagger</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Get(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello swagger my name is tandi !!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * swagger注解使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Get(uri=&quot;/hello/&#123;name&#125;&quot;, produces= MediaType.TEXT_PLAIN)</span></span><br><span class="line">    <span class="meta">@Operation(</span></span><br><span class="line"><span class="meta">       summary = &quot;获取一个person&quot;,</span></span><br><span class="line"><span class="meta">       description = &quot;通过名称来去获取一个person&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiResponse(</span></span><br><span class="line"><span class="meta">        content = @Content(mediaType = &quot;application/json&quot;,</span></span><br><span class="line"><span class="meta">        schema = @Schema(type=&quot;string&quot;))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@ApiResponse(responseCode = &quot;404&quot;, description = &quot;没有找到该person&quot;)</span></span><br><span class="line">    <span class="meta">@Tag(name = &quot;greeting&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Parameter(description=&quot;person name（名称）&quot;)</span> <span class="meta">@NotBlank</span> String name)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;tandi&quot;</span>, <span class="string">&quot;&#123;name:tandi, age:23&#125;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;&#123;name:zhangsan, age:28&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4：构建项目生产open-api文档"><a href="#步骤4：构建项目生产open-api文档" class="headerlink" title="步骤4：构建项目生产open api文档"></a>步骤4：构建项目生产open api文档</h4><blockquote><p>构建过后，会在项目构建文件夹生成以下文件</p></blockquote><p><img src="/./micronaut%E5%85%A5%E9%97%A8/012.png"></p><p>io.micronaut.inject.BeanDefinitionReference</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.td.controller.$HelloSwaggerDefinitionClass</span><br></pre></td></tr></table></figure><p>hello-swagger-0.1.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Hello</span> <span class="string">Swagger</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">第一次使用swagger</span></span><br><span class="line">  <span class="attr">contact:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">TanDi</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://tandi.cc</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">tandi@163.com</span></span><br><span class="line">  <span class="attr">license:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Apache</span> <span class="number">2.0</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:8888</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;0.1&quot;</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/hello:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">hello</span></span><br><span class="line">      <span class="attr">parameters:</span> []</span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">  <span class="string">/hello/&#123;name&#125;:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">greeting</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">获取一个person</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">通过名称来去获取一个person</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">hello</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">name</span></span><br><span class="line">        <span class="attr">in:</span> <span class="string">path</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">person</span> <span class="string">name（名称）</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">schema:</span></span><br><span class="line">          <span class="attr">minLength:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">default:</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">404:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">没有找到该person</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识Minio</title>
      <link href="/minio%E4%BD%BF%E7%94%A8/"/>
      <url>/minio%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="minio"><a href="#minio" class="headerlink" title="minio"></a>minio</h3><blockquote><p>官方文档：<a href="https://docs.minio.io/">https://docs.minio.io/</a></p></blockquote><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><ul><li>Minio是Apache License v2.0下发布的对象存储服务器</li><li>兼容Amazon S3云存储服务</li><li>适合存储非结构化数据，如照片，视频，日志文件，备份和容器&#x2F; VM镜像</li></ul><h4 id="下载安装（centos7）"><a href="#下载安装（centos7）" class="headerlink" title="下载安装（centos7）"></a>下载安装（centos7）</h4><blockquote><ol><li>手动下载ftp传入或wget下载</li><li>将minio保存到&#x2F;bin下，并授权后，tab键就可以补全</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# wget https://dl.minio.io/server/minio/release/linux-ppc64le/minio</span><br><span class="line">[root@localhost bin]# chmod +x ./*</span><br></pre></td></tr></table></figure><h4 id="minio命令参数"><a href="#minio命令参数" class="headerlink" title="minio命令参数"></a>minio命令参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# minio --help</span><br><span class="line">NAME:</span><br><span class="line">  minio - Cloud Storage Server.</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">  Minio is an Amazon S3 compatible object storage server. Use it to store photos, videos, VMs, containers, log files, or any blob of data as objects.</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">  minio [FLAGS] COMMAND [ARGS...]</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">  server   start object storage server</span><br><span class="line">  gateway  start object storage gateway</span><br><span class="line">  update   update minio to latest release</span><br><span class="line">  version  print version</span><br><span class="line">  </span><br><span class="line">FLAGS:</span><br><span class="line">  --config-dir value, -C value  [DEPRECATED] Path to legacy configuration directory. (default: &quot;/root/.minio&quot;)</span><br><span class="line">  --certs-dir value, -S value   Path to certs directory. (default: &quot;/root/.minio/certs&quot;)</span><br><span class="line">  --quiet                       Disable startup information.</span><br><span class="line">  --anonymous                   Hide sensitive information from logging.</span><br><span class="line">  --json                        Output server logs and startup information in json format.</span><br><span class="line">  --help, -h                    Show help.</span><br><span class="line">  </span><br><span class="line">VERSION:</span><br><span class="line">  2019-02-06T21:16:36Z</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动并访问"><a href="#启动并访问" class="headerlink" title="启动并访问"></a>启动并访问</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# minio server /data</span><br><span class="line">Endpoint:  http://192.168.4.157:9000  http://172.17.0.1:9000  http://127.0.0.1:9000    </span><br><span class="line">AccessKey: NV2JLV2HFKMAQRJCNHK0 </span><br><span class="line">SecretKey: FY+YsoARfp6vIVeX8EoIIpBV+KB7XCjwyTbLWA8I </span><br><span class="line"></span><br><span class="line">Browser Access:</span><br><span class="line">   http://192.168.4.157:9000  http://172.17.0.1:9000  http://127.0.0.1:9000    </span><br><span class="line"></span><br><span class="line">Command-line Access: https://docs.minio.io/docs/minio-client-quickstart-guide</span><br><span class="line">   $ mc config host add myminio http://192.168.4.157:9000 NV2JLV2HFKMAQRJCNHK0 FY+YsoARfp6vIVeX8EoIIpBV+KB7XCjwyTbLWA8I</span><br><span class="line"></span><br><span class="line">Object API (Amazon S3 compatible):</span><br><span class="line">   Go:         https://docs.minio.io/docs/golang-client-quickstart-guide</span><br><span class="line">   Java:       https://docs.minio.io/docs/java-client-quickstart-guide</span><br><span class="line">   Python:     https://docs.minio.io/docs/python-client-quickstart-guide</span><br><span class="line">   JavaScript: https://docs.minio.io/docs/javascript-client-quickstart-guide</span><br><span class="line">   .NET:       https://docs.minio.io/docs/dotnet-client-quickstart-guide</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意启动数据内容包含了账号密码</p><p>AccessKey: NV2JLV2HFKMAQRJCNHK0<br>SecretKey: FY+YsoARfp6vIVeX8EoIIpBV+KB7XCjwyTbLWA8I </p></blockquote><p>访问：<a href="http://192.168.4.157:9000/">http://192.168.4.157:9000</a></p><p><img src="/minio%E4%BD%BF%E7%94%A8/025.png"></p><p><img src="/minio%E4%BD%BF%E7%94%A8/026.png"></p><h4 id="Java-Client"><a href="#Java-Client" class="headerlink" title="Java Client"></a>Java Client</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.minio&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;minio&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="本地上传"><a href="#本地上传" class="headerlink" title="本地上传"></a>本地上传</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.MinioException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">MINIO_URL</span> <span class="operator">=</span> <span class="string">&quot;http://192.168.4.157:9000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ACCESS_KEY</span> <span class="operator">=</span> <span class="string">&quot;NV2JLV2HFKMAQRJCNHK0&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;FY+YsoARfp6vIVeX8EoIIpBV+KB7XCjwyTbLWA8I&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Create a minioClient with the Minio Server name, Port, Access key and Secret key.</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinioClient</span>(MINIO_URL, ACCESS_KEY, SECRET_KEY);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if the bucket already exists.</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isExist</span> <span class="operator">=</span> minioClient.bucketExists(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(isExist) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Bucket already exists.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Make a new bucket called asiatrip to hold a zip file of photos.</span></span><br><span class="line">                minioClient.makeBucket(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Upload the zip file to the bucket with putObject</span></span><br><span class="line">            minioClient.putObject(<span class="string">&quot;image&quot;</span>,<span class="string">&quot;xxx01.jpg&quot;</span>, <span class="string">&quot;C:\\Users\\admin\\Pictures\\xxx01.jpg&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MinioException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传成功，如下</p><p><img src="/minio%E4%BD%BF%E7%94%A8/027.png"></p><h5 id="表单上传"><a href="#表单上传" class="headerlink" title="表单上传"></a>表单上传</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.InvalidEndpointException;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.InvalidPortException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">MINIO_URL</span> <span class="operator">=</span> <span class="string">&quot;http://192.168.4.161:9000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ACCESS_KEY</span> <span class="operator">=</span> <span class="string">&quot;E0VBO8SE41PKUF3GMG6M&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;ZYCEjSpGn3nK4hrCVEMblnXb1Q4nmPhOO8BiNDW0&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 连接minio服务器</span></span><br><span class="line">            minioClient = <span class="keyword">new</span> <span class="title class_">MinioClient</span>(MINIO_URL, ACCESS_KEY, SECRET_KEY);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidEndpointException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidPortException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile multipartFile)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 测试,持久化到本地</span></span><br><span class="line"><span class="comment">//            File file = new File(&quot;C:\\Users\\admin\\Desktop&quot;,multipartFile.getOriginalFilename());</span></span><br><span class="line"><span class="comment">//            multipartFile.transferTo(file);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 持久化到minio</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isExist</span> <span class="operator">=</span> minioClient.bucketExists(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(isExist) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Bucket already exists.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 创建一个桶（相当于一个分类）</span></span><br><span class="line">                minioClient.makeBucket(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            minioClient.putObject(<span class="string">&quot;image&quot;</span>, multipartFile.getOriginalFilename(), multipartFile.getInputStream(), multipartFile.getContentType());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/minio%E4%BD%BF%E7%94%A8/028.png"></p><p><img src="/minio%E4%BD%BF%E7%94%A8/029.png"></p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.td.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.MinioException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">MINIO_URL</span> <span class="operator">=</span> <span class="string">&quot;http://192.168.4.157:9000&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ACCESS_KEY</span> <span class="operator">=</span> <span class="string">&quot;NV2JLV2HFKMAQRJCNHK0&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;FY+YsoARfp6vIVeX8EoIIpBV+KB7XCjwyTbLWA8I&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE_NAME</span> <span class="operator">=</span> <span class="string">&quot;xxx01.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Create a minioClient with the Minio Server name, Port, Access key and Secret key.</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinioClient</span>(MINIO_URL, ACCESS_KEY, SECRET_KEY);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if the bucket already exists.</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isExist</span> <span class="operator">=</span> minioClient.bucketExists(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(isExist) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Bucket already exists.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Make a new bucket called asiatrip to hold a zip file of photos.</span></span><br><span class="line">                minioClient.makeBucket(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Upload the zip file to the bucket with putObject</span></span><br><span class="line">            minioClient.putObject(<span class="string">&quot;image&quot;</span>, <span class="string">&quot;xxx01&quot;</span>, <span class="string">&quot;C:\\Users\\admin\\Pictures\\&quot;</span> + FILE_NAME);</span><br><span class="line">            System.out.println(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> minioClient.getObject(<span class="string">&quot;image&quot;</span>, FILE_NAME);</span><br><span class="line">            Files.copy(in, Paths.get(<span class="string">&quot;C:\\Users\\admin\\Desktop&quot;</span>, FILE_NAME));</span><br><span class="line">            System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MinioException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务开发技术篇-公共配置中心</title>
      <link href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><blockquote><p>特点</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/001.png"></p><ul><li>提供集中式配置服务</li><li>支持配置推送</li><li>提供配置加密</li><li>支持根据环境切换配置</li></ul><blockquote><p>常用配置中心</p></blockquote><ul><li>SpringCloud Config</li><li>HashiCorp Consul</li><li>携程Apollo</li><li>阿里巴巴Nacos</li><li>ZooKeeper</li></ul><h2 id="bootstrap-yml和application-yml区别"><a href="#bootstrap-yml和application-yml区别" class="headerlink" title="bootstrap.yml和application.yml区别"></a>bootstrap.yml和application.yml区别</h2><ul><li>bootstrap.yml 加载顺序优先于 application.yml</li><li>虽然 application.yml 在 bootstrap.yml 后加载，但其配置并不能被覆盖</li><li>如果使用了配置中心，则配置中心的相关配置应该配置到 bootstrap.yml 中</li></ul><h2 id="SpringCloud-Config"><a href="#SpringCloud-Config" class="headerlink" title="SpringCloud Config"></a>SpringCloud Config</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>SpringCloud Config主要分为两个角色：Config Server、Config Client</li><li>SpringCloud Config默认采用 Git 库来存储外部配置。除此之外还支持Subversion、FileSystem、CredHub、JDBC等外部化存储系统</li><li>Config Client会在微服务启动时环境初始化阶段向 Config Server 拉取配置并添加到自己的环境中</li><li>如果Config Client使用了注册中心，则在配置刷新时会导致自己所提供的服务短暂不可用（主动下线并重新注册）</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="Config-Server"><a href="#Config-Server" class="headerlink" title="Config Server"></a>Config Server</h4><p>规范的做法是 Config Server 应该是一个独立的微服务</p><blockquote><p>到GitHub或者Gitlab中创建存一个用于储配置的Repository</p></blockquote><p>1）创建存储配置的库</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/002.png"></p><p>2）将配置上传到Repository</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/003.png"></p><p>各个文件的内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msa-config-client-default.yml</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># msa-config-client-dev.yml</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">qq:</span> <span class="number">497870337</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># msa-config-client-test.yml</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">test</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># msa-config-client-pro.yml</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">pro</span></span><br></pre></td></tr></table></figure><p>配置文件的命名规则：</p><ul><li>格式：微服务名称（application）-环境（profile），例如msa-config-client-test.yml 中 application 就是 msa-config-client，而 profile 则是 test</li><li>文件类型：yaml或properties</li><li>注意，微服务本地配置中 spring.application.name 属性必须与公共配置文件名称中的application部分对应，否则无法拉取配置</li></ul><blockquote><p>实现</p></blockquote><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringCloud Config Server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringCloud Netflix Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方便查看，这里暴露所有端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8808</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/tandi960505/git-config</span></span><br><span class="line">          <span class="comment"># 只读操作无需密码</span></span><br><span class="line">          <span class="comment"># username:</span></span><br><span class="line">          <span class="comment"># password:</span></span><br><span class="line">          <span class="attr">clone-on-start:</span> <span class="literal">true</span> <span class="comment"># 指定当前服务启动时就克隆公共配置文件到本地，否则会等到有Config Client请求才克隆</span></span><br><span class="line">          <span class="attr">basedir:</span> <span class="string">C:/Users/admin/Desktop/git</span> <span class="comment"># 保存克隆库的文件夹。默认在系统的临时文件夹中</span></span><br><span class="line">          <span class="attr">refresh-rate:</span> <span class="number">300</span> <span class="comment"># 配置刷新频率。默认为0，表示接收到Client请求才刷新</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>启动功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaConfigServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试ConfigServer</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/004.png"></p><blockquote><p>获取配置信息的请求URI格式</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;&#125;为必须的，[]为可选的</span></span><br><span class="line"><span class="attr">格式1：/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span></span><br><span class="line"><span class="attr">格式2：/&#123;application&#125;-&#123;profile&#125;.后缀名</span></span><br><span class="line"><span class="attr">格式3：/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.后缀名</span></span><br></pre></td></tr></table></figure><h4 id="Config-Client"><a href="#Config-Client" class="headerlink" title="Config Client"></a>Config Client</h4><blockquote><p>实现</p></blockquote><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-config-client</span> </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 启用配置中心服务发现功能</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">MSA-CONFIG-SERVER</span> <span class="comment"># 注册中心上的配置中心service-id</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment"># label表示GitHub库的分支，默认为master</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment"># 当获取不到Config Server配置则快速启动失败，即不希望该微服务启动</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8809</span></span><br></pre></td></tr></table></figure><ul><li>默认情况下 Config Client 会使用 spring.application.name 来作为请求的 {application} 值</li><li>{application} 也可以使用 spring.cloud.config.name 来设置 （推荐）</li></ul><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>启用功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @EnableEurekaClient </span></span><br><span class="line"><span class="comment">// 在Config Client中配置了服务发现后无需再显示配置注解。参考：DiscoveryClientConfigServiceBootstrapConfiguration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaConfigClientApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特别注意，如果 Config Server 在 Config Client 之后启动，Config Client会因为初始化阶段无法获取到配置而报错。即使 Config Server 随后启动，Config Client也无法自动获取外部配置。解决方案如下：<ul><li>通过服务编排来设置 Config Server 和 Config Client 的启动顺序</li><li>手动刷新 Config Client 配置，让其重新获取外部配置（前提是 Config Server 成功启动并提供服务），而这时不能开启 fail-fast 功能</li></ul></li></ul><p>测试一下是否能获取到配置中心的配置内容</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/006.png"></p><h4 id="修改外部配置"><a href="#修改外部配置" class="headerlink" title="修改外部配置"></a>修改外部配置</h4><blockquote><p>模拟修改外部配置，然后刷新Config Client让其获取最新版本的配置</p></blockquote><p>1）修改外部配置</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/007.png"></p><p>2）没刷新配置之前，应用信息如下</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/006.png"></p><p>3）手动刷新配置，Config Client会重新向Config Server拉取公共配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl -X POST http://localhost:8809/actuator/refresh</span></span><br><span class="line">[&quot;config.client.version&quot;,&quot;info.name&quot;]</span><br></pre></td></tr></table></figure><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/008.png"></p><h3 id="源码浅析"><a href="#源码浅析" class="headerlink" title="源码浅析"></a>源码浅析</h3><h4 id="Config-Server-1"><a href="#Config-Server-1" class="headerlink" title="Config Server"></a>Config Server</h4><ul><li>默认情况下 SpringCloud Config 采用Git库来存储外部配置</li><li>SpringCloud Config 使用第三方开源类库<a href="https://www.eclipse.org/jgit/">Eclipse JGit</a>来完成 Git 操作</li></ul><h5 id="获取Git库中的配置"><a href="#获取Git库中的配置" class="headerlink" title="获取Git库中的配置"></a>获取Git库中的配置</h5><p>ConfigServerAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(ConfigServerProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; EnvironmentRepositoryConfiguration.class,</span></span><br><span class="line"><span class="meta">         CompositeConfiguration.class,</span></span><br><span class="line"><span class="meta">ResourceRepositoryConfiguration.class, ConfigServerEncryptionConfiguration.class,</span></span><br><span class="line"><span class="meta">ConfigServerMvcConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入EnvironmentRepositoryConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是 Spring Cloud Config 支持的配置存储服务</span></span><br><span class="line"><span class="meta">@Import(&#123; CompositeRepositoryConfiguration.class, JdbcRepositoryConfiguration.class,</span></span><br><span class="line"><span class="meta">VaultConfiguration.class, </span></span><br><span class="line"><span class="meta">         VaultRepositoryConfiguration.class,</span></span><br><span class="line"><span class="meta">CredhubConfiguration.class,</span></span><br><span class="line"><span class="meta">         CredhubRepositoryConfiguration.class,</span></span><br><span class="line"><span class="meta">SvnRepositoryConfiguration.class, NativeRepositoryConfiguration.class,</span></span><br><span class="line"><span class="meta">GitRepositoryConfiguration.class, DefaultRepositoryConfiguration.class &#125;)</span> <span class="comment">// 默认库操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvironmentRepositoryConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 默认采用Git</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = EnvironmentRepository.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultRepositoryConfiguration</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MultipleJGitEnvironmentRepository <span class="title function_">defaultEnvironmentRepository</span><span class="params">(</span></span><br><span class="line"><span class="params">MultipleJGitEnvironmentRepositoryFactory gitEnvironmentRepositoryFactory,</span></span><br><span class="line"><span class="params">MultipleJGitEnvironmentProperties environmentProperties)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> gitEnvironmentRepositoryFactory.build(environmentProperties);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultipleJGitEnvironmentRepository</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/009.png"></p><details>    <summary>查看大图</summary>    <pre>        <img src="微服务开发技术篇-公共配置中心/010.png" style="zoom:80%;" />    </pre></details><p>克隆远程库的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JGitEnvironmentRepository</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">initialize();</span><br><span class="line"><span class="comment">// 如果配置了 clone-on-start:true 则在Config Server启动后就去克隆库</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.cloneOnStart) &#123; </span><br><span class="line">initClonedRepository();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initClonedRepository</span><span class="params">()</span> <span class="keyword">throws</span> GitAPIException, IOException &#123;</span><br><span class="line"><span class="keyword">if</span> (!getUri().startsWith(FILE_URI_PREFIX)) &#123;</span><br><span class="line"><span class="comment">// 如果本地已经存在该库，则先删除（BaseDir目录）</span></span><br><span class="line">deleteBaseDirIfExists();</span><br><span class="line"><span class="comment">// 克隆远程库到本地库</span></span><br><span class="line"><span class="type">Git</span> <span class="variable">git</span> <span class="operator">=</span> cloneToBasedir();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultipleJGitEnvironmentRepository</span> <span class="keyword">extends</span> <span class="title class_">JGitEnvironmentRepository</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 调用父类的afterPropertiesSet()</span></span><br><span class="line"><span class="built_in">super</span>.afterPropertiesSet();</span><br><span class="line"><span class="keyword">for</span> (String name : <span class="built_in">this</span>.repos.keySet()) &#123;</span><br><span class="line"><span class="type">PatternMatchingJGitEnvironmentRepository</span> <span class="variable">repo</span> <span class="operator">=</span> <span class="built_in">this</span>.repos.get(name);</span><br><span class="line">repo.setEnvironment(getEnvironment());</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 设置配置数据</span></span><br><span class="line">repo.afterPropertiesSet();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理Client请求的控制器"><a href="#处理Client请求的控制器" class="headerlink" title="处理Client请求的控制器"></a>处理Client请求的控制器</h5><p>ConfigServerAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ConfigServerConfiguration.Marker.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ConfigServerProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; EnvironmentRepositoryConfiguration.class, CompositeConfiguration.class,</span></span><br><span class="line"><span class="meta">ResourceRepositoryConfiguration.class, ConfigServerEncryptionConfiguration.class,</span></span><br><span class="line"><span class="meta">ConfigServerMvcConfiguration.class &#125;)</span> <span class="comment">// 控制器配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConfigServerMvcConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> EnvironmentEncryptor environmentEncryptor;</span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// EnvironmentController</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> EnvironmentController <span class="title function_">environmentController</span><span class="params">(</span></span><br><span class="line"><span class="params">EnvironmentRepository envRepository, ConfigServerProperties server)</span> &#123;</span><br><span class="line"><span class="type">EnvironmentController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentController</span>(</span><br><span class="line">encrypted(envRepository, server), <span class="built_in">this</span>.objectMapper);</span><br><span class="line">controller.setStripDocumentFromYaml(server.isStripDocumentFromYaml());</span><br><span class="line">controller.setAcceptEmpty(server.isAcceptEmpty());</span><br><span class="line"><span class="keyword">return</span> controller;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ResourceController</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ResourceRepository.class)</span></span><br><span class="line"><span class="keyword">public</span> ResourceController <span class="title function_">resourceController</span><span class="params">(ResourceRepository repository,</span></span><br><span class="line"><span class="params">EnvironmentRepository envRepository, ConfigServerProperties server)</span> &#123;</span><br><span class="line"><span class="type">ResourceController</span> <span class="variable">controller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceController</span>(repository,</span><br><span class="line">encrypted(envRepository, server));</span><br><span class="line"><span class="keyword">return</span> controller;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EnvironmentController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.GET, path = &quot;$&#123;spring.cloud.config.server.prefix:&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvironmentController</span> &#123;</span><br><span class="line"><span class="keyword">private</span> EnvironmentRepository repository;</span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">stripDocument</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">acceptEmpty</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;name&#125;/&#123;profiles:.*[^-].*&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Environment <span class="title function_">defaultLabel</span><span class="params">(<span class="meta">@PathVariable</span> String name,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String profiles)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;name&#125;/&#123;profiles&#125;/&#123;label:.*&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Environment <span class="title function_">labelled</span><span class="params">(<span class="meta">@PathVariable</span> String name, <span class="meta">@PathVariable</span> String profiles,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String label)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;name&#125;-&#123;profiles&#125;.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">properties</span><span class="params">(<span class="meta">@PathVariable</span> String name,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String profiles,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">labelledProperties</span><span class="params">(<span class="meta">@PathVariable</span> String name,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String profiles, <span class="meta">@PathVariable</span> String label,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;&#123;name&#125;-&#123;profiles&#125;.json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">jsonProperties</span><span class="params">(<span class="meta">@PathVariable</span> String name,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String profiles,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">labelledJsonProperties</span><span class="params">(<span class="meta">@PathVariable</span> String name,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String profiles, <span class="meta">@PathVariable</span> String label,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&#123; &quot;/&#123;name&#125;-&#123;profiles&#125;.yml&quot;, &quot;/&#123;name&#125;-&#123;profiles&#125;.yaml&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">yaml</span><span class="params">(<span class="meta">@PathVariable</span> String name,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String profiles,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&#123; &quot;/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.yml&quot;,</span></span><br><span class="line"><span class="meta">&quot;/&#123;label&#125;/&#123;name&#125;-&#123;profiles&#125;.yaml&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">labelledYaml</span><span class="params">(<span class="meta">@PathVariable</span> String name,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String profiles, <span class="meta">@PathVariable</span> String label,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ExceptionHandler(RepositoryException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noSuchLabel</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">response.sendError(HttpStatus.NOT_FOUND.value());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ExceptionHandler(IllegalArgumentException.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">illegalArgument</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">response.sendError(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HttpHeaders <span class="title function_">getHttpHeaders</span><span class="params">(MediaType mediaType)</span> &#123;</span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">httpHeaders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">httpHeaders.setContentType(mediaType);</span><br><span class="line"><span class="keyword">return</span> httpHeaders;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> ResponseEntity&lt;String&gt; <span class="title function_">getSuccess</span><span class="params">(String body)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body, getHttpHeaders(MediaType.TEXT_PLAIN),</span><br><span class="line">HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> ResponseEntity&lt;String&gt; <span class="title function_">getSuccess</span><span class="params">(String body, MediaType mediaType)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body, getHttpHeaders(mediaType), HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResourceController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.GET, path = &quot;$&#123;spring.cloud.config.server.prefix:&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceController</span> &#123;</span><br><span class="line"><span class="keyword">private</span> ResourceRepository resourceRepository;</span><br><span class="line"><span class="keyword">private</span> EnvironmentRepository environmentRepository;</span><br><span class="line"><span class="keyword">private</span> <span class="type">UrlPathHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> String name, <span class="meta">@PathVariable</span> String profile,</span></span><br><span class="line"><span class="params"><span class="meta">@PathVariable</span> String label, ServletWebRequest request,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> getFilePath(request, name, profile, label);</span><br><span class="line"><span class="keyword">return</span> retrieve(request, name, profile, label, path, resolvePlaceholders);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/&#123;name&#125;/&#123;profile&#125;/**&quot;, params = &quot;useDefaultLabel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> String name, <span class="meta">@PathVariable</span> String profile,</span></span><br><span class="line"><span class="params">ServletWebRequest request,</span></span><br><span class="line"><span class="params"><span class="meta">@RequestParam(defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> resolvePlaceholders)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> getFilePath(request, name, profile, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">return</span> retrieve(request, name, profile, <span class="literal">null</span>, path, resolvePlaceholders);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getFilePath</span><span class="params">(ServletWebRequest request, String name, String profile,</span></span><br><span class="line"><span class="params">String label)</span> &#123;</span><br><span class="line">String stem;</span><br><span class="line"><span class="keyword">if</span> (label != <span class="literal">null</span>) &#123;</span><br><span class="line">stem = String.format(<span class="string">&quot;/%s/%s/%s/&quot;</span>, name, profile, label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">stem = String.format(<span class="string">&quot;/%s/%s/&quot;</span>, name, profile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="built_in">this</span>.helper.getPathWithinApplication(request.getRequest());</span><br><span class="line">path = path.substring(path.indexOf(stem) + stem.length());</span><br><span class="line"><span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/&#123;name&#125;/&#123;profile&#125;/&#123;label&#125;/**&quot;, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] binary(<span class="meta">@PathVariable</span> String name, <span class="meta">@PathVariable</span> String profile,</span><br><span class="line"><span class="meta">@PathVariable</span> String label, ServletWebRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> getFilePath(request, name, profile, label);</span><br><span class="line"><span class="keyword">return</span> binary(request, name, profile, label, path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/&#123;name&#125;/&#123;profile&#125;/**&quot;, params = &quot;useDefaultLabel&quot;, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] binary(<span class="meta">@PathVariable</span> String name, <span class="meta">@PathVariable</span> String profile,</span><br><span class="line">ServletWebRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> getFilePath(request, name, profile, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">return</span> binary(request, name, profile, <span class="literal">null</span>, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@ExceptionHandler(NoSuchResourceException.class)</span></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notFound</span><span class="params">(NoSuchResourceException e)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Config-Client-1"><a href="#Config-Client-1" class="headerlink" title="Config Client"></a>Config Client</h4><h5 id="启动时是如何获取外部配置的？"><a href="#启动时是如何获取外部配置的？" class="headerlink" title="启动时是如何获取外部配置的？"></a>启动时是如何获取外部配置的？</h5><p>ConfigServiceBootstrapConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServiceBootstrapConfiguration</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment environment;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ConfigClientProperties <span class="title function_">configClientProperties</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ConfigClientProperties</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigClientProperties</span>(<span class="built_in">this</span>.environment);</span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【重】：外置配置定位器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(ConfigServicePropertySourceLocator.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(value = &quot;spring.cloud.config.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> ConfigServicePropertySourceLocator <span class="title function_">configServicePropertySource</span><span class="params">(</span></span><br><span class="line"><span class="params">ConfigClientProperties properties)</span> &#123;</span><br><span class="line"><span class="type">ConfigServicePropertySourceLocator</span> <span class="variable">locator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigServicePropertySourceLocator</span>(</span><br><span class="line">properties);</span><br><span class="line"><span class="keyword">return</span> locator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重试操作：需要spring retry和spring aop依赖支持</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(&quot;spring.cloud.config.fail-fast&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Retryable.class, Aspect.class, AopAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRetry(proxyTargetClass = true)</span></span><br><span class="line"><span class="meta">@Import(AopAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RetryProperties.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RetryConfiguration</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;configServerRetryInterceptor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RetryOperationsInterceptor <span class="title function_">configServerRetryInterceptor</span><span class="params">(</span></span><br><span class="line"><span class="params">RetryProperties properties)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> RetryInterceptorBuilder.stateless()</span><br><span class="line">.backOffOptions(properties.getInitialInterval(),</span><br><span class="line">properties.getMultiplier(), properties.getMaxInterval())</span><br><span class="line">.maxAttempts(properties.getMaxAttempts()).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConfigServicePropertySourceLocator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(0)</span> <span class="comment">// 最高优先级别(Order值越小优先级别越高)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServicePropertySourceLocator</span> <span class="keyword">implements</span> <span class="title class_">PropertySourceLocator</span> &#123;</span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"><span class="keyword">private</span> ConfigClientProperties defaultProperties;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Retryable(interceptor = &quot;configServerRetryInterceptor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> org.springframework.core.env.PropertySource&lt;?&gt; locate(</span><br><span class="line">org.springframework.core.env.Environment environment) &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">ConfigClientProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="built_in">this</span>.defaultProperties.override(environment);</span><br><span class="line"><span class="type">CompositePropertySource</span> <span class="variable">composite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompositePropertySource</span>(<span class="string">&quot;configService&quot;</span>);</span><br><span class="line"><span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="built_in">this</span>.restTemplate == <span class="literal">null</span>? getSecureRestTemplate(properties) : <span class="built_in">this</span>.restTemplate;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">for</span> (String label : labels) &#123;</span><br><span class="line"><span class="comment">// 获取远程配置（Config Server）</span></span><br><span class="line"><span class="type">Environment</span> <span class="variable">result</span> <span class="operator">=</span> getRemoteEnvironment(restTemplate, properties,label.trim(), state);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (result.getPropertySources() != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (PropertySource source : result.getPropertySources()) &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) source</span><br><span class="line">.getSource();</span><br><span class="line">composite.addPropertySource(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MapPropertySource</span>(source.getName(), map));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(result.getState())</span><br><span class="line">|| StringUtils.hasText(result.getVersion())) &#123;</span><br><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">putValue(map, <span class="string">&quot;config.client.state&quot;</span>, result.getState());</span><br><span class="line">putValue(map, <span class="string">&quot;config.client.version&quot;</span>, result.getVersion());</span><br><span class="line">composite.addFirstPropertySource(<span class="keyword">new</span> <span class="title class_">MapPropertySource</span>(<span class="string">&quot;configClient&quot;</span>, map));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回远程配置map(CompositePropertySource)</span></span><br><span class="line"><span class="keyword">return</span> composite;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Environment <span class="title function_">getRemoteEnvironment</span><span class="params">(RestTemplate restTemplate,</span></span><br><span class="line"><span class="params">ConfigClientProperties properties, String label, String state)</span> &#123;</span><br><span class="line"><span class="comment">// 请求格式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/&#123;name&#125;/&#123;profile&#125;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> properties.getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">profile</span> <span class="operator">=</span> properties.getProfile();</span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> properties.getToken();</span><br><span class="line"><span class="type">int</span> <span class="variable">noOfUrls</span> <span class="operator">=</span> properties.getUri().length;</span><br><span class="line">        </span><br><span class="line">Object[] args = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; name, profile &#125;;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(label)) &#123;</span><br><span class="line"><span class="keyword">if</span> (label.contains(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">label = label.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;(_)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">args = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; name, profile, label &#125;;</span><br><span class="line">path = path + <span class="string">&quot;/&#123;label&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ResponseEntity&lt;Environment&gt; response = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; noOfUrls; i++) &#123;</span><br><span class="line"><span class="type">Credentials</span> <span class="variable">credentials</span> <span class="operator">=</span> properties.getCredentials(i);</span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> credentials.getUri();</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> credentials.getUsername();</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> credentials.getPassword();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建请求头</span></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"><span class="comment">// 添加请求权限</span></span><br><span class="line">addAuthorizationToken(properties, headers, username, password);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(token)) &#123;</span><br><span class="line">headers.add(TOKEN_HEADER, token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(state) &amp;&amp; properties.isSendState()) &#123;</span><br><span class="line">headers.add(STATE_HEADER, state);</span><br><span class="line">&#125;</span><br><span class="line">headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));</span><br><span class="line"><span class="keyword">final</span> HttpEntity&lt;Void&gt; entity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;((Void) <span class="literal">null</span>, headers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">response = restTemplate.exchange(uri + path, HttpMethod.GET, entity,Environment.class, args);</span><br><span class="line"><span class="type">Environment</span> <span class="variable">result</span> <span class="operator">=</span> response.getBody();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addAuthorizationToken</span><span class="params">(ConfigClientProperties configClientProperties,</span></span><br><span class="line"><span class="params">HttpHeaders httpHeaders, String username, String password)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> configClientProperties.getHeaders().get(AUTHORIZATION);</span><br><span class="line"><span class="keyword">if</span> (password != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">byte</span>[] token = Base64Utils.encode((username + <span class="string">&quot;:&quot;</span> + password).getBytes());</span><br><span class="line">httpHeaders.add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Basic &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(token));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (authorization != <span class="literal">null</span>) &#123;</span><br><span class="line">httpHeaders.add(<span class="string">&quot;Authorization&quot;</span>, authorization);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SpringBoot是如何刷新配置的？"><a href="#SpringBoot是如何刷新配置的？" class="headerlink" title="SpringBoot是如何刷新配置的？"></a>SpringBoot是如何刷新配置的？</h5><p>在快速入门中我们已经演示过Config Client使用SpringBoot Actuator提供的端点<code>/refresh</code>来实现配置刷新。以下为该端点源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Endpoint(id = &quot;refresh&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshEndpoint</span> &#123;</span><br><span class="line">    <span class="comment">// 上下文刷新器</span></span><br><span class="line"><span class="keyword">private</span> ContextRefresher contextRefresher;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RefreshEndpoint</span><span class="params">(ContextRefresher contextRefresher)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.contextRefresher = contextRefresher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WriteOperation</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">refresh</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 刷新配置操作</span></span><br><span class="line">Set&lt;String&gt; keys = <span class="built_in">this</span>.contextRefresher.refresh();</span><br><span class="line"><span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，当请求 <code>/refresh</code>端点后，实质是使用ContextRefresher</li></ul><p>refresh端点的自动配置类RefreshEndpointAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureAfter(&#123; LifecycleMvcEndpointAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">                     RefreshAutoConfiguration.class &#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshEndpointAutoConfiguration</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(PropertySourceBootstrapConfiguration.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RefreshEndpointConfiguration</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ContextRefresher.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnEnabledEndpoint</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> RefreshEndpoint <span class="title function_">refreshEndpoint</span><span class="params">(ContextRefresher contextRefresher)</span> &#123;</span><br><span class="line">            <span class="comment">// 使用上下文刷新器ContextRefresher构建一个Refresh端点</span></span><br><span class="line">            <span class="comment">// ContextRefresher在RefreshAutoConfiguration中被添加到容器</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefreshEndpoint</span>(contextRefresher);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RefreshAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RefreshScope.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 能够刷新配置的Bean所在的socpe必须为refresh</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REFRESH_SCOPE_NAME</span> <span class="operator">=</span> <span class="string">&quot;refresh&quot;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// RefreshScope：负责被@Scope(&#x27;refresh&#x27;)注解所标注的Bean的刷新工作</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(RefreshScope.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RefreshScope <span class="title function_">refreshScope</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefreshScope</span>();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// ContextRefresher：负责刷新上下文配置，发送刷新事件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> ContextRefresher <span class="title function_">contextRefresher</span><span class="params">(ConfigurableApplicationContext context,</span></span><br><span class="line"><span class="params">RefreshScope scope)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ContextRefresher</span>(context, scope);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// Refresh事件监听者</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RefreshEventListener <span class="title function_">refreshEventListener</span><span class="params">(ContextRefresher contextRefresher)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefreshEventListener</span>(contextRefresher);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@RefreshScope（@Scope(‘refresh’)） 是 spring-cloud-context 注册的域</li><li>注意，如果使用了服务注册发现，那么当发生刷新操作时 RefreshScope 会使用 ApplicationContext 发布一个 RefreshScopeRefreshedEvent 事件，而 EurekaClientConfigurationRefresher 就是监听者之一。EurekaClientConfigurationRefresher 会先将当前服务在注册中心下线，然后再上线。这样做的用意是刷新服务注册中心中当前服务的元信息。除此之外你还应该意识到这个动作会导致服务短暂处于不可用状态</li></ul><p>现在我们已经知道刷新操作实质是通过 ContextRefresher.refresh() 完成的，亦了解了 RefreshScope 负责 @RefreshScope Bean的刷新工作。</p><p>那么我们进入 ContextRefresher 观察一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextRefresher</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REFRESH_ARGS_PROPERTY_SOURCE</span> <span class="operator">=</span> <span class="string">&quot;refreshArgs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认配置源</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_PROPERTY_SOURCES = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME, <span class="comment">// commandLineArgs</span></span><br><span class="line"><span class="string">&quot;defaultProperties&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 标准配置源</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; standardSources = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(</span><br><span class="line">Arrays.asList(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, <span class="comment">// systemProperties</span></span><br><span class="line">StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, <span class="comment">// systemEnvironment</span></span><br><span class="line">StandardServletEnvironment.JNDI_PROPERTY_SOURCE_NAME, <span class="comment">// jndiProperties</span></span><br><span class="line">StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME, <span class="comment">// servletConfigInitParams</span></span><br><span class="line">StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, <span class="comment">// servletContextInitParams</span></span><br><span class="line"><span class="string">&quot;configurationProperties&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ConfigurableApplicationContext context;</span><br><span class="line"><span class="keyword">private</span> RefreshScope scope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ContextRefresher</span><span class="params">(ConfigurableApplicationContext context, RefreshScope scope)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.context = context;</span><br><span class="line"><span class="built_in">this</span>.scope = scope;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 【重】刷新环境配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Set&lt;String&gt; <span class="title function_">refresh</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 刷新环境，并返回改动配置</span></span><br><span class="line">Set&lt;String&gt; keys = refreshEnvironment();</span><br><span class="line"><span class="comment">// 清除上下文对refresh bean的缓存</span></span><br><span class="line"><span class="comment">// 这里的上下文指的是StandardScopeCache和ThreadLocalScopeCache</span></span><br><span class="line"><span class="built_in">this</span>.scope.refreshAll();</span><br><span class="line"><span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Set&lt;String&gt; <span class="title function_">refreshEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 刷新前的配置</span></span><br><span class="line">Map&lt;String, Object&gt; before = extract(<span class="built_in">this</span>.context.getEnvironment().getPropertySources());</span><br><span class="line"><span class="comment">// 【重】刷新配置核心操作</span></span><br><span class="line">addConfigFilesToEnvironment();</span><br><span class="line"><span class="comment">// 刷新后的配置（只有新增或新修改的配置）</span></span><br><span class="line">Set&lt;String&gt; keys = changes(before,extract(<span class="built_in">this</span>.context.getEnvironment().getPropertySources())).keySet();</span><br><span class="line"><span class="comment">// 在当前上下文中发布一个环境修改事件</span></span><br><span class="line"><span class="built_in">this</span>.context.publishEvent(<span class="keyword">new</span> <span class="title class_">EnvironmentChangeEvent</span>(<span class="built_in">this</span>.context, keys));</span><br><span class="line"><span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConfigurableApplicationContext <span class="title function_">addConfigFilesToEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">capture</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取当前环境（只包含DEFAULT_PROPERTY_SOURCES）</span></span><br><span class="line"><span class="type">StandardEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> copyEnvironment(<span class="built_in">this</span>.context.getEnvironment());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**** 刷新配置的核心思想:创建一个新的SpringBoot来重新加载新配置 ****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个SpringBoot应用构建者</span></span><br><span class="line"><span class="type">SpringApplicationBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(Empty.class)</span><br><span class="line">.bannerMode(Mode.OFF) <span class="comment">// 不打印Banner</span></span><br><span class="line">.web(WebApplicationType.NONE) <span class="comment">// 不是一个Web应用，即无需启动Web容器</span></span><br><span class="line">.environment(environment); <span class="comment">// 当前环境（只包含DEFAULT_PROPERTY_SOURCES）作为参数</span></span><br><span class="line">builder.application().setListeners(Arrays.asList(<span class="keyword">new</span> <span class="title class_">BootstrapApplicationListener</span>(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConfigFileApplicationListener</span>()));</span><br><span class="line"><span class="comment">// 启动SpringBoot</span></span><br><span class="line">capture = builder.run(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.getPropertySources().contains(REFRESH_ARGS_PROPERTY_SOURCE)) &#123;</span><br><span class="line">environment.getPropertySources().remove(REFRESH_ARGS_PROPERTY_SOURCE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前程序所处的环境（主环境）</span></span><br><span class="line"><span class="type">MutablePropertySources</span> <span class="variable">target</span> <span class="operator">=</span> <span class="built_in">this</span>.context.getEnvironment().getPropertySources();</span><br><span class="line"><span class="type">String</span> <span class="variable">targetName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 将SpringBoot加载到的内容添加到主环境</span></span><br><span class="line"><span class="keyword">for</span> (PropertySource&lt;?&gt; source : environment.getPropertySources()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> source.getName();</span><br><span class="line"><span class="keyword">if</span> (target.contains(name)) &#123;</span><br><span class="line">targetName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.standardSources.contains(name)) &#123;</span><br><span class="line">                    <span class="comment">// 如果主环境中已经存在该配置项，则将其替换</span></span><br><span class="line"><span class="keyword">if</span> (target.contains(name)) &#123;</span><br><span class="line">target.replace(name, source);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果主环境中没有该配置项，则添加</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (targetName != <span class="literal">null</span>) &#123;</span><br><span class="line">target.addAfter(targetName, source);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">target.addFirst(source);</span><br><span class="line">targetName = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> capture;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RefreshScope#refreshAll</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大概意思是处理当前范围的Bean，让其下次操作时达到刷新的效果</span></span><br><span class="line"><span class="meta">@ManagedOperation(description = &quot;Dispose of the current instance of all beans in this scope and force a refresh on next method execution.&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshAll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.destroy(); <span class="comment">// 清除ScopeCache</span></span><br><span class="line">    <span class="comment">// 发布刷新域已成功刷新的事件，以广播给监听者做对应处理</span></span><br><span class="line">    <span class="built_in">this</span>.context.publishEvent(<span class="keyword">new</span> <span class="title class_">RefreshScopeRefreshedEvent</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ScopeCache的意义在于当前操作上下文。例如用户正在操作系统，但在这期间刷新了配置，那么通过清除上下文的ScopeCache，那么在用户在下一个操作时就能获取到新配置</li><li>关于ScopeCache可以参考：org.springframework.cloud.context.scope.GenericScope</li></ul><p>RefreshScopeRefreshedEvent 的监听者 EurekaClientConfigurationRefresher</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RefreshScopeRefreshedEvent.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EurekaClientConfigurationRefresher</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;RefreshScopeRefreshedEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> EurekaClient eurekaClient;</span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> EurekaAutoServiceRegistration autoRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(RefreshScopeRefreshedEvent event)</span> &#123;</span><br><span class="line"><span class="comment">// 如果还没有创建EurekaClient，则将强制创建</span></span><br><span class="line"><span class="comment">// 以确保刷新事件后顺利重新注册客户端</span></span><br><span class="line"><span class="keyword">if</span> (eurekaClient != <span class="literal">null</span>) </span><br><span class="line">eurekaClient.getApplications();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (autoRegistration != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 从注册中心下线服务</span></span><br><span class="line"><span class="built_in">this</span>.autoRegistration.stop();</span><br><span class="line"><span class="comment">// 注册服务到注册中心</span></span><br><span class="line"><span class="built_in">this</span>.autoRegistration.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新注册服务的意义在于，预防当前 Discovery Client 注册在注册中心的元数据被更改了</li></ul><p>总结：</p><ul><li>如果一个 Bean 依赖实时的环境配置，那么应该使用 <code>@Scope(&#39;refresh&#39;)</code> 或  <code>@RefreshScope</code> 标注，只有这样 Bean 才可以感知到配置刷新操作。原因是 SpringCloud 会将被 @RefreshScope 标注的 Bean 打包成 BeanLifecycleWrapper 存放到 ScopeCache 中（ConcurrentHashMap）作为当前操作上限文使用的Bean，当刷新操作触发时就会将 ScopeCache 的内容删除，这样一来下次使用Bean时就会重新打包 BeanLifecycleWrapper ，这样就达到了配置刷新效果</li><li>@RefreshScope 不一定使用配合中心才可以使用，例如有手动修改配置的需求，也是可以使用端点来刷的</li><li>如果想手动实现刷新，则可以参考 RefreshEndpoint 使用 ContextRefresher 来实现</li></ul><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><h4 id="单库多文件夹配置"><a href="#单库多文件夹配置" class="headerlink" title="单库多文件夹配置"></a>单库多文件夹配置</h4><p>bootstrap.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/tandi960505/git-config</span></span><br><span class="line">          <span class="attr">basedir:</span> <span class="string">C:/Users/admin/Desktop/git</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">&#x27;&#123;application&#125;&#x27;</span></span><br><span class="line">          <span class="comment"># 在git-config库下找对应的&#123;application&#125;文件夹</span></span><br></pre></td></tr></table></figure><ul><li>原来：1个应用 &lt;—&gt; 1个库</li><li>现在：n个应用 &lt;—&gt; 1个库n个文件夹</li><li>{application} 是 Config Client 的 spring.cloud.config.name(优先) 或 spring.application.name</li><li>查找规则：先从 &#x2F;git-config&#x2F;{application} 查找，在到 &#x2F;git-config查找</li></ul><p>详细文档： <a href="https://cloud.spring.io/spring-cloud-config/2.1.x/single/spring-cloud-config.html#_placeholders_in_git_uri">https://cloud.spring.io/spring-cloud-config/2.1.x/single/spring-cloud-config.html#_placeholders_in_git_uri</a> </p><h4 id="在服务端添加认证功能"><a href="#在服务端添加认证功能" class="headerlink" title="在服务端添加认证功能"></a>在服务端添加认证功能</h4><blockquote><p> 服务端</p></blockquote><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><blockquote><p>客户端</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">MSA-CONFIG-SERVER</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> </span><br><span class="line">      <span class="comment"># 访问Config Server的账号</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><h4 id="对配置进行非对称加密"><a href="#对配置进行非对称加密" class="headerlink" title="对配置进行非对称加密"></a>对配置进行非对称加密</h4><p>&amp;emsp;&amp;emsp;目前库中的配置都是明文编写的，但有时候我们并不希望这样。譬如一些敏感的配置（账号密码）我们不太想让其他共用该Git库环境的人看到。在SpringCloud Config中提供了 对称加密 和 非对称加密两种操作，以下例子为 非对称加密。详细参考文档： <a href="https://cloud.spring.io/spring-cloud-config/2.1.x/single/spring-cloud-config.html#_placeholders_in_git_uri">https://cloud.spring.io/spring-cloud-config/2.1.x/single/spring-cloud-config.html#_placeholders_in_git_uri</a> </p><blockquote><p>步骤1：使用JDK的keystore生成加密文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias mytestkey -keyalg RSA -keypass helloo -keystore server.jks -storepass 123456</span><br></pre></td></tr></table></figure><ul><li>alias：别名</li><li>keyalg：算法</li><li>keypass：secret（盐）</li><li>keystore：生成的秘钥文件</li><li>storepass：访问秘钥文件的密码</li></ul><blockquote><p>步骤2：配置Config Server</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">key-store:</span></span><br><span class="line">  <span class="comment"># 将文件保存到classpath下</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">server.jks</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">helloo</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">mytestkey</span></span><br></pre></td></tr></table></figure><ul><li>重启服务</li></ul><blockquote><p>步骤3：将需要加密的内容加密</p></blockquote><p>可以先用  <a href="http://localhost:8808/encrypt/status">http://localhost:8808/encrypt/status</a>  测试是否成功开启encrypt功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加密</span></span><br><span class="line">curl http://localhost:8808/encrypt -d 明文</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解密</span></span><br><span class="line">curl http://localhost:8808/decrypt -d 密文</span><br></pre></td></tr></table></figure><p>现在我打算将配置库中 msa-config-client-dev 中的 info.qq &#x3D; 497870337 的qq号进行加密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8808/encrypt -d 497870337 &gt; msa.txt</span><br></pre></td></tr></table></figure><p>获取到以下密文</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AQBWAQHzxe+UPuox+EFn6YBv7nc2wgYEXc2V1o4C6ATYYrzjuJKK6+z/Dea9TNe1OBsxF9mmjjrL9SLYUOi8axAZewtPmD8YVuKXqExHrArslNeDsGcbMiU7dGfL8VO4bpbg9uy22NBTT2E21YKnHSC0PCjW29RAkTNWwdPsmF+aXM9bW4TpALoe21FDZNaTsC64f3m6QWPqxmDETnvuks8VG3seSuTDbaNbPsRGX8Ohu/Spb6Zy881BqFjHjXYOV0d5aWE/eMDOdotxtIgSj+jRH/BwrYDDmHbPMuTxg4ZQT5Gw0xjRZ1yOZGF5ggG4AWvsSP7BIZUUE2MTLn7Wv5Ses1HvQVjj1t+8hSjB6dV5vIy0a/J9PNXEUC5+DpHg/VM=</span><br></pre></td></tr></table></figure><blockquote><p>步骤4：将配置库中的明文替换成密文</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/011.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">dev</span></span><br><span class="line">  <span class="comment"># 注意，需要用添加加密前缀&#123;cipher&#125;并使用&#x27;&#x27;包裹，否则解析异常</span></span><br><span class="line">  <span class="attr">qq:</span> <span class="string">&#x27;&#123;cipher&#125;AQBWAQHzxe+UPuox+EFn6YBv7nc2wgYEXc2V1o4C6ATYYrzjuJKK6+z/Dea9TNe1OBsxF9mmjjrL9SLYUOi8axAZewtPmD8YVuKXqExHrArslNeDsGcbMiU7dGfL8VO4bpbg9uy22NBTT2E21YKnHSC0PCjW29RAkTNWwdPsmF+aXM9bW4TpALoe21FDZNaTsC64f3m6QWPqxmDETnvuks8VG3seSuTDbaNbPsRGX8Ohu/Spb6Zy881BqFjHjXYOV0d5aWE/eMDOdotxtIgSj+jRH/BwrYDDmHbPMuTxg4ZQT5Gw0xjRZ1yOZGF5ggG4AWvsSP7BIZUUE2MTLn7Wv5Ses1HvQVjj1t+8hSjB6dV5vIy0a/J9PNXEUC5+DpHg/VM=&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>访问测试</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/012.png"></p><ul><li>可以看到，当Config Server获取到配置库的配置后会对其进行解密</li></ul><h4 id="客户端重试获取配置"><a href="#客户端重试获取配置" class="headerlink" title="客户端重试获取配置"></a>客户端重试获取配置</h4><blockquote><p>添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="number">1000</span></span><br><span class="line">        <span class="attr">max-interval:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">MSA-CONFIG-SERVER</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="使用Consul做配置中心"><a href="#使用Consul做配置中心" class="headerlink" title="使用Consul做配置中心"></a>使用Consul做配置中心</h2><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- consul配置中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- consul服务注册发现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-consul-config</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 启动dev环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">register:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 默认</span></span><br><span class="line">        <span class="comment"># config/application,dev/data -&gt; yaml</span></span><br><span class="line">        <span class="comment"># config/application,pro/data -&gt; yaml</span></span><br><span class="line">        <span class="comment"># prefix: config</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定制</span></span><br><span class="line">        <span class="comment"># 服务名称/application,dev/data -&gt; yaml</span></span><br><span class="line">        <span class="comment"># msa-consul-config/application,dev/data -&gt; yaml</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">msa-consul-config</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">YAML</span></span><br><span class="line">        <span class="attr">data-key:</span> <span class="string">data</span> <span class="comment"># 默认data值，对应着consul中的key叫data</span></span><br><span class="line">        <span class="attr">watch:</span></span><br><span class="line">          <span class="attr">delay:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>在Consul中创建对应的键值对</p><img src="微服务开发技术篇-公共配置中心/013.png" style="zoom: 67%;" /><img src="微服务开发技术篇-公共配置中心/014.png" style="zoom:67%;" /><img src="微服务开发技术篇-公共配置中心/015.png" style="zoom:67%;" /><p>启动功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaConsulConfigApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaConsulConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/016.png"></p><h3 id="是如何实现自动刷新配置的？"><a href="#是如何实现自动刷新配置的？" class="headerlink" title="是如何实现自动刷新配置的？"></a>是如何实现自动刷新配置的？</h3><p>如果想要开启自动刷新，需要设置如下属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-consul-config</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 启动dev环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">watch:</span></span><br><span class="line">          <span class="attr">delay:</span> <span class="number">5000</span> <span class="comment"># 延时5秒自动刷新</span></span><br></pre></td></tr></table></figure><p>ConsulConfigAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsulConfigAutoConfiguration</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIG_WATCH_TASK_SCHEDULER_NAME</span> <span class="operator">=</span> <span class="string">&quot;configWatchTaskScheduler&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RefreshEndpoint.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ConsulRefreshConfiguration</span> &#123;</span><br><span class="line"><span class="comment">// 构建一个用来刷新配置的ConfigWatch</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.cloud.consul.config.watch.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> ConfigWatch <span class="title function_">configWatch</span><span class="params">(ConsulConfigProperties properties,</span></span><br><span class="line"><span class="params">ConsulPropertySourceLocator locator, ConsulClient consul,</span></span><br><span class="line"><span class="params"><span class="meta">@Qualifier(CONFIG_WATCH_TASK_SCHEDULER_NAME)</span> TaskScheduler taskScheduler)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConfigWatch</span>(properties, consul, locator.getContextIndexes(),</span><br><span class="line">taskScheduler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以下就是Watch的定时任务</span></span><br><span class="line"><span class="meta">@Bean(name = CONFIG_WATCH_TASK_SCHEDULER_NAME)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.cloud.consul.config.watch.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> TaskScheduler <span class="title function_">configWatchTaskScheduler</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadPoolTaskScheduler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以看到这个定时任务是用ScheduledThreadPoolExecutor实现的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolTaskScheduler</span> <span class="keyword">extends</span> <span class="title class_">ExecutorConfigurationSupport</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">AsyncListenableTaskExecutor</span>, SchedulingTaskExecutor, TaskScheduler &#123;</span><br><span class="line"><span class="comment">// 单线程</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">poolSize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable task, <span class="type">long</span> delay) &#123;</span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> getScheduledExecutor();</span><br><span class="line"><span class="comment">// 参数1：任务</span></span><br><span class="line"><span class="comment">// 参数2：第一次执行的延时时间</span></span><br><span class="line"><span class="comment">// 参数3：经过第一次后的延时时间</span></span><br><span class="line"><span class="comment">// 参数4：延时时间的单位</span></span><br><span class="line"><span class="keyword">return</span> executor.scheduleWithFixedDelay(errorHandlingTask(task, <span class="literal">true</span>), <span class="number">0</span>, delay, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConfigWatch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigWatch</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span>, SmartLifecycle &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulConfigProperties properties;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulClient consul;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TaskScheduler taskScheduler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicBoolean</span> <span class="variable">running</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 将任务切换为已开启</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.running.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line"><span class="built_in">this</span>.watchFuture = <span class="built_in">this</span>.taskScheduler.scheduleWithFixedDelay(</span><br><span class="line"><span class="built_in">this</span>::watchConfigKeyValues,  <span class="comment">// 任务</span></span><br><span class="line"><span class="built_in">this</span>.properties.getWatch().getDelay()); <span class="comment">// 延时值从配置获取</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 任务</span></span><br><span class="line"><span class="meta">@Timed(&quot;consul.watch-config-keys&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchConfigKeyValues</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 任务是否处于开启状态</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.running.get()) &#123; </span><br><span class="line"><span class="keyword">for</span> (String context : <span class="built_in">this</span>.consulIndexes.keySet()) &#123;</span><br><span class="line"><span class="comment">// 获取Consul上的KV值</span></span><br><span class="line">Response&lt;List&lt;GetValue&gt;&gt; response = <span class="built_in">this</span>.consul.getKVValues(context,</span><br><span class="line">aclToken,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">QueryParams</span>(<span class="built_in">this</span>.properties.getWatch().getWaitTime(),</span><br><span class="line">currentIndex));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (response.getValue() != <span class="literal">null</span> &amp;&amp; !response.getValue().isEmpty()) &#123;</span><br><span class="line"><span class="type">Long</span> <span class="variable">newIndex</span> <span class="operator">=</span> response.getConsulIndex();</span><br><span class="line"><span class="comment">// 是否有配置？</span></span><br><span class="line"><span class="keyword">if</span> (newIndex != <span class="literal">null</span> &amp;&amp; !newIndex.equals(currentIndex)) &#123;</span><br><span class="line"><span class="comment">// 是不是有新值？</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.consulIndexes.containsValue(newIndex) &amp;&amp; !currentIndex.equals(-<span class="number">1L</span>)) &#123;</span><br><span class="line"><span class="comment">//【重】发布刷新配置事件，要求RefreshEvent的监听者进行刷新操作</span></span><br><span class="line"><span class="type">RefreshEventData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefreshEventData</span>(context,currentIndex, newIndex);</span><br><span class="line"><span class="built_in">this</span>.publisher.publishEvent(<span class="keyword">new</span> <span class="title class_">RefreshEvent</span>(<span class="built_in">this</span>, data, data.toString()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看一下 RefreshEvent 的监听者 RefreshEventListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshEventListener</span> <span class="keyword">implements</span> <span class="title class_">SmartApplicationListener</span> &#123;</span><br><span class="line"><span class="keyword">private</span> ContextRefresher refresh;</span><br><span class="line"><span class="keyword">private</span> <span class="type">AtomicBoolean</span> <span class="variable">ready</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RefreshEventListener</span><span class="params">(ContextRefresher refresh)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.refresh = refresh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">handle((RefreshEvent) event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(RefreshEvent event)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.ready.get()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Event received &quot;</span> + event.getEventDesc());</span><br><span class="line"><span class="comment">// 【重】使用 ContextRefresher 刷新配置</span></span><br><span class="line"><span class="comment">// 即新建一个 SpringBoot 加载配置然后设置到当前环境中</span></span><br><span class="line"><span class="comment">// 并主动下线注册中心的服务然后再重新注册</span></span><br><span class="line">Set&lt;String&gt; keys = <span class="built_in">this</span>.refresh.refresh();</span><br><span class="line">log.info(<span class="string">&quot;Refresh keys changed: &quot;</span> + keys);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[Spring Cloud中Eureka Client启动后就关闭 Unregistering application xxx with eureka with status DOWN]( [<a href="http://www.appblog.cn/2019/04/23/Spring%20Cloud%E4%B8%ADEureka%20Client%E5%90%AF%E5%8A%A8%E5%90%8E%E5%B0%B1%E5%85%B3%E9%97%AD%20Unregistering%20application%20xxx%20with%20eureka%20with%20status%20DOWN/]">http://www.appblog.cn/2019/04/23/Spring%20Cloud%E4%B8%ADEureka%20Client%E5%90%AF%E5%8A%A8%E5%90%8E%E5%B0%B1%E5%85%B3%E9%97%AD%20Unregistering%20application%20xxx%20with%20eureka%20with%20status%20DOWN/]</a>(<a href="http://www.appblog.cn/2019/04/23/Spring">http://www.appblog.cn/2019/04/23/Spring</a> Cloud中Eureka Client启动后就关闭 Unregistering application xxx with eureka with status DOWN&#x2F;) )</li><li><a href="https://callistaenterprise.se/blogg/teknik/2017/05/12/building-microservices-part-6-configuration-server/">Building Microservices, part 6. Adding a Configuration Server</a></li><li><a href="https://cloud.spring.io/spring-cloud-config/2.1.x/single/spring-cloud-config.html">Spring Cloud Config</a></li><li><a href="https://www.consul.io/docs/agent/config_entries.html">Configuration Entries</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口幂等性解决方案</title>
      <link href="/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%AC%94%E8%AE%B0/"/>
      <url>/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="何为幂等"><a href="#何为幂等" class="headerlink" title="何为幂等"></a>何为幂等</h2><p>幂等：不管执行多少次结果都一样。例如 a &#x3D; 1<br>非幂等：每次执行都会导致结果变化。例如 a &#x3D; a+1</p><h2 id="需要搞清楚的事情"><a href="#需要搞清楚的事情" class="headerlink" title="需要搞清楚的事情"></a>需要搞清楚的事情</h2><ul><li>幂等和并发是两件事不要搞混</li><li>并发引起的是临界同步问题，而幂等是重复操作问题</li></ul><h2 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h2><ul><li><p>状态机（需要业务支持）</p><ul><li>根据业务数据状态判断是否已经处理过</li><li>该方式相当于do-while，缺点是必须先执行do</li></ul></li><li><p>防重表（推荐）</p><ul><li>依赖唯一约束和事务能力</li><li>操作前先往防重表插入一条数据，成功插入后才操作</li></ul></li><li><p>防重Token（适合表单防重）</p><ul><li>例如客户端在请求处理操作前先向服务方索取一个Token进行页面渲染，然后客户端需要携带该该Token进行请求。服务端通过查看Token是否存在来判断是否继续执行操作（如果存在则删除Token处理请求）</li><li>例如Struts的token标签就是该原理，在加载页面时会为表单生成一个token，在提交表单时一并提交到服务端，然后服务端会将token保存到session中，再利用Filter来过滤多余的提交操作以达到防止表单重复提交的效果</li></ul></li></ul><h2 id="修订内容"><a href="#修订内容" class="headerlink" title="修订内容"></a>修订内容</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务开发技术篇-微服务网关</title>
      <link href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
      <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要网关"><a href="#为什么需要网关" class="headerlink" title="为什么需要网关"></a>为什么需要网关</h2><blockquote><p>没有用网关之前</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/001.png"></p><ul><li>客户端需要维护众多服务的地址</li><li>每个服务都需要对客户端请求做权限验证</li><li>跨域请求处理变得复杂</li><li>拦截请求责任落在服务上领到服务变得沉重</li><li>对用户数据采集不方便</li></ul><blockquote><p>引入服务网关后</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/002.png"></p><ul><li>易于监控</li><li>易于认证</li><li>解决了没有网关前的各种问题，网关就像面向客户端的Facede模式</li></ul><blockquote><p>网关可以完成的功能</p></blockquote><ul><li>请求路由</li><li>API组合</li><li>协议转换</li><li>身份验证</li><li>访问授权</li><li>速率限制</li><li>缓存</li><li>指标收集</li><li>请求日志</li><li>浏览器CORS跨域响应处理</li></ul><blockquote><p>注意事项</p></blockquote><ul><li>因为 API 网关代理了后端的多个服务因此而变得职责模糊，这时可以使用<code>后端前置模式</code>，即不同的服务类型采用不用的 API 网关</li><li>开发者在开发完后端服务之后必须更新 API 网关，否者客户端就会被逼等待</li><li>如果使用 API 网关实现 API 组合功能，则建议使用反应式编程来实现并行请求以提高可用性，例如使用 RxJava、Project Reactor 等框架实现</li><li>API 网关尽可能使用断路器来辅助服务的调用以提高本身的可靠性，以免发生调用等待则阻塞后续请求</li><li>建议微服务在 API 网关中进行身份验证操作，再配合授权服务发放 token 的形式来完会话功能。在微服务中并不推荐使用共享存储方式来实现共享会话（例如Redis实现共享会话），因为这样会违反松耦合的原则</li></ul><h2 id="微服务网关和Nginx有什么区别？"><a href="#微服务网关和Nginx有什么区别？" class="headerlink" title="微服务网关和Nginx有什么区别？"></a>微服务网关和Nginx有什么区别？</h2><p>&amp;emsp;&amp;emsp;首先要说的是Nginx也可以作为微服务网关来使用，而且性能也非常不错，但需要借助Lua脚本来手动实现各种功能需求，因此增加了学习和开发的成本(当然，如果确实不嫌麻烦和喜欢定制的话其实也可以使用Node.js来手动实现一个微服务网关)。随着微服务的兴起其实诞生了不少既简单又好用的微服务网关，目前也有不少企业把Nginx和微服务网关结合来使用。</p><blockquote><p>企业开发常用的微服务 API 网关</p></blockquote><ul><li>Netflix Zuul 1.x：SpringCloud集成，已停止更新</li><li>Netflix Zuul 2.x ：无SpringCloud集成</li><li><strong>Mashape Kong</strong> ：面向Cloud Native，基于Nginx_Lua模块开发 </li><li><strong>SpringCloud Gateway</strong> ：Zuul的代替品， 基于Sprint Boot2、WebFlux、Project Reactor构建</li><li>Linkerd ：纳入了CNCF，即面向Cloud Native</li></ul><p>目前而言个人较为推荐 Kong 和 SpringCloud Gateway。</p><h2 id="SpringCloud-Gateway入门"><a href="#SpringCloud-Gateway入门" class="headerlink" title="SpringCloud Gateway入门"></a>SpringCloud Gateway入门</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><blockquote><p>添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3333</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">helloworld-route</span> <span class="comment"># 路由唯一id，自定义唯一即可，建议使用服务名称</span></span><br><span class="line">        <span class="attr">predicates:</span> <span class="comment"># 谓语（触发路由的条件）</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/springcloud-gateway</span></span><br><span class="line">          <span class="comment"># -Path= 表示当访问localhost:3333/springcloud-gateway 路由到  http://www.baidu.com/springcloud-gateway</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.baidu.com</span> <span class="comment"># 路由地址</span></span><br></pre></td></tr></table></figure><blockquote><p>直接启动SpringBoot即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaGatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/003.gif"></p><h3 id="基础概念和处理流程"><a href="#基础概念和处理流程" class="headerlink" title="基础概念和处理流程"></a>基础概念和处理流程</h3><ul><li>Route：是 ID、URI、Predicates、Filters 的集合</li><li>Predicate：根据配置来匹配HTTP请求，HTTP请求必须满足Predicate要求</li><li>Filter：过滤请求，可以在发送请求之前或之后修改请求和响应</li></ul><blockquote><p>Predicate</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/004.png"></p><blockquote><p>Filter</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/005.png"></p><blockquote><p>请求流程图</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/006.png"></p><h3 id="Predicate-Factories"><a href="#Predicate-Factories" class="headerlink" title="Predicate Factories"></a>Predicate Factories</h3><blockquote><p>predicates结合使用时属于&amp;&amp;操作</p></blockquote><h4 id="After"><a href="#After" class="headerlink" title="After"></a>After</h4><p>必须是某个时间点之后的请求，否则返回404</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">After=2033-08-20T06:06:06+08:00[Asia/Shanghai]</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h4><p>必须是某个时间点之前的请求，否则返回404</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Before=2033-08-20T06:06:06+08:00[Asia/Shanghai]</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h4><p>必须是某两个时间点之间的请求，否则返回404</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Between=2033-08-20T06:06:06+08:00[Asia/Shanghai],2033-08-20T06:06:06+08:00[Asia/Shanghai]</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><p>必须带有指定URL后缀。例如：localhost:3333&#x2F;gateway</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/gateway,</span> <span class="string">/test</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>请求必须带有某个指定名称的cookie</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># 测试：curl http://localhost:3333 --cookie &quot;test=hello&quot;</span></span><br><span class="line">          <span class="comment"># 格式：cookie名称, 值的正则表达式</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Cookie=test,</span> <span class="string">he.*</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><p>编程式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">routes</span><span class="params">(RouteLocatorBuilder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> builder.routes().route(<span class="string">&quot;test&quot;</span>, r -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> r.path(<span class="string">&quot;/&quot;</span>).and().cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;t.*&quot;</span>).uri(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">    &#125;).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>请求必须带有某个指定名称的请求头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># 测试：curl http://localhost:3333 -H &quot;Charset:utf-8&quot;</span></span><br><span class="line">          <span class="comment"># 格式：Header名称, 值的正则表达式</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Header=Charset,</span> <span class="string">utf.*</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p>请求头中的Host必须是指定值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># 测试：curl http://localhost:3333 -H &quot;Host:www.test2.org&quot;</span></span><br><span class="line">          <span class="comment"># 测试：curl http://localhost:3333 -H &quot;Host:www.test3.org&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Host=**.test.org,**.test2.org</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><p>必须是指定的请求方法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Method=GET</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Qurey"><a href="#Qurey" class="headerlink" title="Qurey"></a>Qurey</h4><p>请求必须带有指定的参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># 测试：curl http://localhost:3333?name=xxx</span></span><br><span class="line">          <span class="comment"># 格式：参数名称， 值得正则表达式</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Query=name,</span> <span class="string">h.*</span></span><br><span class="line">          <span class="comment">#- Query=name # 也可以单独配置名称</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="RemoteAddr"><a href="#RemoteAddr" class="headerlink" title="RemoteAddr"></a>RemoteAddr</h4><p>请求必须来自某个ip</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># 测试: curl 192.168.31.70:3333, 192.168.31.70为当前网关主机</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.31.250/24</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://www.tandi.wiki</span></span><br></pre></td></tr></table></figure><h4 id="Weight"><a href="#Weight" class="headerlink" title="Weight"></a>Weight</h4><p>权重优先</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 测试：localhost:3333 跳转到 www.google.com</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://www.google.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="GatewayFilter-Factories"><a href="#GatewayFilter-Factories" class="headerlink" title="GatewayFilter Factories"></a>GatewayFilter Factories</h3><h4 id="AddRequestHeader"><a href="#AddRequestHeader" class="headerlink" title="AddRequestHeader"></a>AddRequestHeader</h4><p>添加请求头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">AddRequestHeader=Charset,GBK,</span> <span class="string">Content-Type,text/html</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">AddRequestHeader=Content-Type,text/html</span></span><br></pre></td></tr></table></figure><h4 id="AddRequestParameter"><a href="#AddRequestParameter" class="headerlink" title="AddRequestParameter"></a>AddRequestParameter</h4><p>添加请求参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">AddRequestParameter=name,</span> <span class="string">td</span></span><br><span class="line"><span class="comment">#spring:</span></span><br><span class="line"><span class="comment">#  cloud:</span></span><br><span class="line"><span class="comment">#    gateway:</span></span><br><span class="line"><span class="comment">#      routes:</span></span><br><span class="line"><span class="comment">#      - id: add_request_parameter_route</span></span><br><span class="line"><span class="comment">#      uri: http://localhost:8080</span></span><br><span class="line"><span class="comment">#        predicates:</span></span><br><span class="line"><span class="comment">#        - Host: &#123;segment&#125;.myhost.org</span></span><br><span class="line"><span class="comment">#        filters:</span></span><br><span class="line"><span class="comment">#        - AddRequestParameter=foo, bar-&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><h4 id="AddResponseHeader"><a href="#AddResponseHeader" class="headerlink" title="AddResponseHeader"></a>AddResponseHeader</h4><p>添加响应头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="comment"># 测试：curl localhost:3333 -v</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">AddResponseHeader=Charset,</span> <span class="string">GB2312</span></span><br></pre></td></tr></table></figure><h4 id="DedupeResponseHeader"><a href="#DedupeResponseHeader" class="headerlink" title="DedupeResponseHeader"></a>DedupeResponseHeader</h4><p>去除重复Header的值。例如gateway和service都设置了跨域就会导致有两个值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">DedupeResponseHeader=Access-Control-Allow-Credentials</span> <span class="string">Access-Control-Allow-Origin</span></span><br></pre></td></tr></table></figure><h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h4><blockquote><p>引入Hystrix。需要添加Hystrix依赖。</p><p>详细参考 <a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#hystrix">https://cloud.spring.io/spring-cloud-gateway/reference/html/#hystrix</a> </p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hystrix_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Hystrix=myCommandName</span></span><br></pre></td></tr></table></figure><h4 id="CircuitBreaker"><a href="#CircuitBreaker" class="headerlink" title="CircuitBreaker"></a>CircuitBreaker</h4><blockquote><p>将网关路由包装到断路器。需要添加Hystrix依赖 或 spring-cloud-starter-circuitbreaker-reactor-resilience4j</p><p>详细参考： <a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#spring-cloud-circuitbreaker-filter-factory">https://cloud.spring.io/spring-cloud-gateway/reference/html/#spring-cloud-circuitbreaker-filter-factory</a> </p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">circuitbreaker_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">CircuitBreaker=myCircuitBreaker</span></span><br></pre></td></tr></table></figure><h4 id="PrefixPath"><a href="#PrefixPath" class="headerlink" title="PrefixPath"></a>PrefixPath</h4><p>给下游请求添加Path断言请求前缀</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="comment"># localhost:3333 转 http://localhost:8080/hello/</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">PrefixPath=/hello</span></span><br></pre></td></tr></table></figure><h4 id="SetPath"><a href="#SetPath" class="headerlink" title="SetPath"></a>SetPath</h4><p>设置下游请求路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/test/&#123;segment&#125;</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetPath=/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><ul><li>客户端请求网关：curl localhost:3333&#x2F;test&#x2F;hello</li><li>网关往下游请求：localhost:3333&#x2F;hello</li></ul><h4 id="RequestRateLimiter（目前需要借助Redis实现）"><a href="#RequestRateLimiter（目前需要借助Redis实现）" class="headerlink" title="RequestRateLimiter（目前需要借助Redis实现）"></a>RequestRateLimiter（目前需要借助Redis实现）</h4><blockquote><p>详细参考： <a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#requestratelimiter-gatewayfilter-factory">https://cloud.spring.io/spring-cloud-gateway/reference/html/#requestratelimiter-gatewayfilter-factory</a> </p></blockquote><ul><li>Gateway限流需借助 KeyResolver 和 RateLimiter 实现</li><li>KeyResolver：可插拔策略，用于设置限流关键字（key），例如ip</li><li>RateLimiter ：限流算法实现</li><li>目前两个接口只分别提供了 PrincipalNameKeyResolver、RedisRateLimiter 实现。官方文档中表示，在未来版本将有不同的KeyResolver和RateLimiter实现</li></ul><p>如果自定义，配置方法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">              <span class="string">KeyResolver参数名称：#&#123;@myKeyResolver&#125;</span> <span class="comment"># KeyResolver的Bean名</span></span><br><span class="line">                <span class="string">RedisRateLimiter参数名称:</span> <span class="string">值</span></span><br></pre></td></tr></table></figure><p>【例子】 - RedisRateLimiter 令牌桶算法限流例子。需要添加 spring-boot-starter-data-redis-reactive 依赖和Redis支持</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">              <span class="comment"># 解析器的 Bean 对象的名字</span></span><br><span class="line">              <span class="attr">key-resolver:</span> <span class="string">&#x27;#&#123;@pathKeyResolver&#125;&#x27;</span></span><br><span class="line">              <span class="comment"># 令牌桶每秒填充令牌数（请求速率）</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">10</span></span><br><span class="line">                <span class="comment"># 令牌桶容量数，即1秒钟允许的最大用户请求数</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyResolverConfiguration</span> &#123;</span><br><span class="line">   <span class="comment">// 按照用户限流</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    KeyResolver <span class="title function_">userKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上的意思是，用户每秒最大请求<code>速率</code>为10，允许最大请求数为20，但下一秒只有10个请求可用。</li></ul><h4 id="RedirectTo"><a href="#RedirectTo" class="headerlink" title="RedirectTo"></a>RedirectTo</h4><p>重定向</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="comment"># 让用户重定向到百度</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RedirectTo=302,</span> <span class="string">http://www.baidu.com</span></span><br></pre></td></tr></table></figure><h4 id="RemoveRequestHeader"><a href="#RemoveRequestHeader" class="headerlink" title="RemoveRequestHeader"></a>RemoveRequestHeader</h4><p>删除请求头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="comment"># 测试：curl localhost:3333 -H &quot;Charset:GBK&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoveRequestHeader=Charset</span></span><br></pre></td></tr></table></figure><h4 id="RemoveResponseHeader"><a href="#RemoveResponseHeader" class="headerlink" title="RemoveResponseHeader"></a>RemoveResponseHeader</h4><p>移除响应头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoveResponseHeader=Charset</span></span><br></pre></td></tr></table></figure><h4 id="RemoveRequestParameter"><a href="#RemoveRequestParameter" class="headerlink" title="RemoveRequestParameter"></a>RemoveRequestParameter</h4><p>移除请求参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoveRequestParameter=name</span></span><br></pre></td></tr></table></figure><h4 id="RewriteResponseHeader"><a href="#RewriteResponseHeader" class="headerlink" title="RewriteResponseHeader"></a>RewriteResponseHeader</h4><p>重写响应头</p><ul><li>服务端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;X-Response-Test&quot;</span>, <span class="string">&quot;name=td&amp;password=123456&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>网关配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewriteResponseHeader=X-Response-Test,</span> <span class="string">password=[^&amp;]+,</span> <span class="string">password=666</span></span><br></pre></td></tr></table></figure><ul><li>客户端收到结果</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\tandi&gt;curl localhost:3333 -H &quot;Charset:GBK&quot; -v</span><br><span class="line">*   Trying ::1:3333...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to localhost (::1) port 3333 (#0)</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GET / HTTP/1.1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Host: localhost:3333</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">User-Agent: curl/7.66.0</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Accept: */*</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Charset:GBK</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">* Mark bundle as not supporting multiuse</span></span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; myheader: test</span><br><span class="line">&lt; Content-Type: text/plain;charset=UTF-8</span><br><span class="line">&lt; Content-Length: 5</span><br><span class="line">&lt; Date: Wed, 27 Nov 2019 01:35:50 GMT</span><br><span class="line">&lt; X-Response-Test: name=td&amp;password=666</span><br></pre></td></tr></table></figure><h4 id="SetRequestHeader"><a href="#SetRequestHeader" class="headerlink" title="SetRequestHeader"></a>SetRequestHeader</h4><p>设置请求头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># 测试：curl localhost:3333 -H &quot;Charset:GBK&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetRequestHeader=X-Request-name,</span> <span class="string">td</span> <span class="comment"># 设置</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetRequestHeader=Charset,</span> <span class="string">UTF-8</span> <span class="comment"># 修改</span></span><br></pre></td></tr></table></figure><h4 id="SetResponseHeader"><a href="#SetResponseHeader" class="headerlink" title="SetResponseHeader"></a>SetResponseHeader</h4><p>设置响应头</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># 测试：curl localhost:3333 -H &quot;Charset:GBK&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetResponseHeader=X-Response-name,</span> <span class="string">zhangsan</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetResponseHeader=Charset,</span> <span class="string">ISO-8859-1</span></span><br></pre></td></tr></table></figure><h4 id="SetStatus"><a href="#SetStatus" class="headerlink" title="SetStatus"></a>SetStatus</h4><p>响应码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SetStatus=403</span></span><br></pre></td></tr></table></figure><h4 id="StripPrefix"><a href="#StripPrefix" class="headerlink" title="StripPrefix"></a>StripPrefix</h4><p>出处URI前N节</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/1/2/hello</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=2</span></span><br></pre></td></tr></table></figure><ul><li>客户端请求：localhost：3333&#x2F;1&#x2F;2&#x2F;hello</li><li>网关往下游发出请求：localhost:8080&#x2F;hello</li></ul><h4 id="Retry"><a href="#Retry" class="headerlink" title="Retry"></a>Retry</h4><p>失败重试</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Retry</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">              <span class="attr">retries:</span> <span class="number">3</span> <span class="comment"># 重试次数</span></span><br><span class="line">              <span class="attr">statuses:</span> <span class="string">BAD_GATEWAY</span> <span class="comment"># 应重试的HTTP状态代码</span></span><br><span class="line">              <span class="attr">backoff:</span> <span class="comment"># 补偿指数（一般补偿指的是重新操作）</span></span><br><span class="line">                <span class="attr">firstBackoff:</span> <span class="string">10ms</span></span><br><span class="line">                <span class="attr">maxBackoff:</span> <span class="string">50ms</span> <span class="comment"># 最大重试时间</span></span><br><span class="line">                <span class="attr">factor:</span> <span class="number">2</span> <span class="comment"># 迭代因子</span></span><br><span class="line">                <span class="comment"># 第一次重试在：firstBackoff * (factor ^ n) 之后执行，其中n为迭代次数retries</span></span><br><span class="line">                <span class="comment"># 即失败后80ms后进行重试，重试时间限制在maxBackoff</span></span><br></pre></td></tr></table></figure><h4 id="RequestSize"><a href="#RequestSize" class="headerlink" title="RequestSize"></a>RequestSize</h4><p>请求大小限制</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestSize</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">              <span class="attr">maxSize:</span> <span class="number">5000000</span> <span class="comment"># 字节</span></span><br></pre></td></tr></table></figure><h4 id="ModifyRequestBody"><a href="#ModifyRequestBody" class="headerlink" title="ModifyRequestBody"></a>ModifyRequestBody</h4><p>修改请求体</p><ul><li>文档中提到该拦截器是bate版，后续版本可能会修改</li><li>ModifyRequestBody拦截器不支持配置文件配置，只能通过Java配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaGatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">routes</span><span class="params">(RouteLocatorBuilder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes().route(<span class="string">&quot;modify_request_body&quot;</span>, r -&gt; &#123;</span><br><span class="line">            <span class="comment">// 拦截客户端 localhost:3333 请求</span></span><br><span class="line">            <span class="keyword">return</span> r.path(<span class="string">&quot;/&quot;</span>).filters(f -&gt; &#123;</span><br><span class="line">                <span class="comment">// String.class：输出类型</span></span><br><span class="line">                <span class="comment">// Hello.class：输出类型</span></span><br><span class="line">                <span class="comment">// MediaType.APPLICATION_JSON_VALUE：修改成新的Content-Type类型</span></span><br><span class="line">                <span class="keyword">return</span> f.modifyRequestBody(String.class, Hello.class, MediaType.APPLICATION_JSON_VALUE, (exchange, s) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> <span class="title class_">Hello</span>(s.toUpperCase()));</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;).uri(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">        &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">        String message;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ModifyResponseBody"><a href="#ModifyResponseBody" class="headerlink" title="ModifyResponseBody"></a>ModifyResponseBody</h4><p>修改响应体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaGatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">routes</span><span class="params">(RouteLocatorBuilder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes().route(<span class="string">&quot;modify_response_body&quot;</span>, r -&gt; &#123;</span><br><span class="line">            <span class="comment">// 拦截客户端 localhost:3333 请求</span></span><br><span class="line">            <span class="keyword">return</span> r.path(<span class="string">&quot;/&quot;</span>).filters(f -&gt; &#123;</span><br><span class="line">                <span class="comment">// String.class：输出类型</span></span><br><span class="line">                <span class="comment">// Hello.class：输出类型</span></span><br><span class="line">                <span class="comment">// MediaType.APPLICATION_JSON_VALUE：修改成新的Content-Type类型</span></span><br><span class="line">                <span class="keyword">return</span> f.modifyResponseBody(String.class, String.class, MediaType.APPLICATION_JSON_VALUE, (exchange, s) -&gt; &#123;</span><br><span class="line">                    <span class="type">Hello</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>(s.toUpperCase(), <span class="number">200</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        json = objectMapper.writeValueAsString(h);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> Mono.just(json);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;).uri(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">        &#125;).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">        String message;</span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">(String message, <span class="type">int</span> status)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">            <span class="built_in">this</span>.status = status;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/007.png"></p><h4 id="Default-Filters（实现全局CORS）"><a href="#Default-Filters（实现全局CORS）" class="headerlink" title="Default Filters（实现全局CORS）"></a>Default Filters（实现全局CORS）</h4><p>默认过滤器。跨域参考：<a href="https://github.com/spring-cloud/spring-cloud-gateway/pull/866/files/a4bb1f2e84b01b95d9b702ab1c0191f2bb317cc2#diff-ba643e8c24ec85979f9a588ad58c8514">Dedupe response header filter #866</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Credentials,</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Origin,</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><h4 id="Java-API-Routers-编程式配置-例子"><a href="#Java-API-Routers-编程式配置-例子" class="headerlink" title="Java API Routers (编程式配置)例子"></a>Java API Routers (编程式配置)例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder, ThrottleGatewayFilterFactory throttle)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> builder.routes()</span><br><span class="line">            .route(r -&gt; r.host(<span class="string">&quot;**.abc.org&quot;</span>).and().path(<span class="string">&quot;/image/png&quot;</span>)</span><br><span class="line">                .filters(f -&gt;</span><br><span class="line">                        f.addResponseHeader(<span class="string">&quot;X-TestHeader&quot;</span>, <span class="string">&quot;foobar&quot;</span>))</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org:80&quot;</span>)</span><br><span class="line">            )</span><br><span class="line">            .route(r -&gt; r.path(<span class="string">&quot;/image/webp&quot;</span>)</span><br><span class="line">                .filters(f -&gt;</span><br><span class="line">                        f.addResponseHeader(<span class="string">&quot;X-AnotherHeader&quot;</span>, <span class="string">&quot;baz&quot;</span>))</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org:80&quot;</span>)</span><br><span class="line">                .metadata(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>)</span><br><span class="line">            )</span><br><span class="line">            .route(r -&gt; r.order(-<span class="number">1</span>)</span><br><span class="line">                .host(<span class="string">&quot;**.throttle.org&quot;</span>).and().path(<span class="string">&quot;/get&quot;</span>)</span><br><span class="line">                .filters(f -&gt; f.filter(throttle.apply(<span class="number">1</span>,</span><br><span class="line">                        <span class="number">1</span>,</span><br><span class="line">                        <span class="number">10</span>,</span><br><span class="line">                        TimeUnit.SECONDS)))</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org:80&quot;</span>)</span><br><span class="line">                .metadata(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>)</span><br><span class="line">            )</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合Hystrix和注册中心"><a href="#整合Hystrix和注册中心" class="headerlink" title="整合Hystrix和注册中心"></a>整合Hystrix和注册中心</h3><blockquote><p>添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    <span class="comment"># 全局跨域</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Credentials,</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=Access-Control-Allow-Origin,</span> <span class="string">*</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment"># 默认</span></span><br></pre></td></tr></table></figure><blockquote><p>开启Hystrix和注册中心（Ribbon）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaGatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">routeLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        <span class="comment">// lb： 表示从注册中心获取服务</span></span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(r -&gt;</span><br><span class="line">                        r.path(<span class="string">&quot;/gateway/**&quot;</span>).filters(</span><br><span class="line">                                <span class="comment">// stripPrefix(1) 会自动去掉 /gateway</span></span><br><span class="line">                                f -&gt; f.stripPrefix(<span class="number">1</span>).hystrix(config -&gt;</span><br><span class="line">                                        config.setName(<span class="string">&quot;gateway&quot;</span>)</span><br><span class="line">                                                .setFallbackUri(<span class="string">&quot;forward:/fallback&quot;</span>)))</span><br><span class="line">                                .uri(<span class="string">&quot;lb://msa-eureka-provider-user&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fallback&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">fallback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;服务繁忙请稍后重试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务端服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;测试&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟超时</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~ curl -X DELETE localhost:3333/gateway/user/delete/1</span><br><span class="line">&#123;&quot;name&quot;:&quot;测试&quot;,&quot;age&quot;:18,&quot;id&quot;:-1&#125;</span><br><span class="line">~ curl localhost:3333/gateway/user/find/all</span><br><span class="line">服务繁忙请稍后重试！</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Kong/kong">kong</a></li><li><a href="https://www.youtube.com/watch?v=jOawuL1Xnwo">Living on the Edge with Spring Cloud Gateway</a></li><li><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/">Spring Cloud Gateway</a></li><li><a href="https://segmentfault.com/a/1190000017188296">Spring Cloud配置跨域访问的五种方案？你用的是哪一种呢？</a></li><li><a href="https://zhuanlan.zhihu.com/p/29980092">CORS跨域原理浅析</a></li><li><a href="https://juejin.im/post/5d395cd0f265da1bae393f57">学习SpringCloud（5）路由网关 Gateway</a></li></ul><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码限流操作</title>
      <link href="/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/"/>
      <url>/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>限流是系统用于应对突发流量的一种有效手段，主要是避免突如其来的请求并发量拖垮系统。譬如某系统只能处理 100 个并发请求，所以一旦超过这个数量，系统的性能就可能会极速下跌，甚至可能会出现宕机的情况。当然，除了限流之外，我们还可以采用<code>负载均衡</code>、<code>请求排队（通过分布式消息队列对流量进行削峰，即延缓请求以免请求被丢弃)</code>等手段来降低服务器的并发负载。</p><p>限流操作大致可以划分为两类：</p><ul><li>请求限流：连接数、请求数、接口访问频率</li><li>资源限流：线程数、数据库连接数</li></ul><h2 id="信号量：Semaphore"><a href="#信号量：Semaphore" class="headerlink" title="信号量：Semaphore"></a>信号量：Semaphore</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>限制同一时刻最大的并发线程数量</li></ul><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>Semaphore 类位于 JUC 包，其功能基于 AQS 实现的，即自旋 + CAS 操作。创建 Semaphore 时，其构造函数需要接收一个 int 型参数用来指定 permits（许可证）的数量（即同一时刻允许多少线程并发）。在业务方法执行期间，只有获取到许可的线程才可以继续往下执行，否则自旋等待。</p><p><img src="/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/007.png"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><img src="/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/002.png"></p><p>可以观察到，当许可被用完，其他线程就没办法执行临界代码了，而是一直在尝试获取许可。</p><h2 id="常见限流算法"><a href="#常见限流算法" class="headerlink" title="常见限流算法"></a>常见限流算法</h2><h3 id="Fixed-Window（固定窗口）"><a href="#Fixed-Window（固定窗口）" class="headerlink" title="Fixed Window（固定窗口）"></a>Fixed Window（固定窗口）</h3><p>固定窗口算法很容易理解，例如接口1分钟内只能处理100个请求，这里用变量counter来记录请求数，当counter到达100后当前这1分钟将不再接收请求（丢弃）。直到下一个1分钟counter自动回零再继续接收请求，当然峰值依然是100，如此类推。</p><p>但该算法有个比较严重的临界问题。举个较为极端点的例子，如第一分钟的前58s都没有请求，到59s时突然来了100个请求（counter最大100）。但是59s过后意味着进入下一个一分钟，这时counter归零可以重新再接收100个请求。因此在59s到0s这个间隙期间最大的请求峰值是200而不是100。</p><blockquote><p>图片源自网络</p></blockquote><p><img src="/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/003.png"></p><h3 id="Slide-Window（滑动窗口）"><a href="#Slide-Window（滑动窗口）" class="headerlink" title="Slide Window（滑动窗口）"></a>Slide Window（滑动窗口）</h3><p>滑动窗口算法是固定窗口算法的改良版本。</p><blockquote><p>图片源自网络</p></blockquote><p><img src="/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/004.png"></p><p>如图所示，红色框表示滑动窗口。特点是可移动，且内部窗口（也叫桶）按照时间来分段。</p><p>例如1分钟分为6段，每段都含有各自的counter。换句话说就是对固定窗口进行了拆分，通过这种方式来缩小固定窗口的缺陷。譬如接口峰值为60，使用固定窗口时临界点会出现120个请求，但使用滑动窗口则是20，风险大大降低。</p><h3 id="Leaky-Bucket（漏桶）"><a href="#Leaky-Bucket（漏桶）" class="headerlink" title="Leaky Bucket（漏桶）"></a>Leaky Bucket（漏桶）</h3><p> 漏桶算法中的漏桶通常用一个FIFO队列来实现，如下图：</p><blockquote><p>图片源自网络</p></blockquote><p><img src="/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/005.png"></p><p>图中的水滴就好比喻请求，当请求数量大于漏桶（队列）容量时，就溢出（丢弃）。即通过漏桶的容量来限制速率。</p><p>例如在Nginx的limit_req_zone模块中就使用了漏桶算法来实现请求限流。</p><h3 id="Token-Bucket（令牌桶）"><a href="#Token-Bucket（令牌桶）" class="headerlink" title="Token Bucket（令牌桶）"></a>Token Bucket（令牌桶）</h3><blockquote><p>图片源自网络</p></blockquote><p><img src="/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/006.png"></p><p>令牌桶的思想如下：</p><ol><li>存放token的桶固定容量为k。</li><li>每秒往桶中放入x个token。如果在放入过程中token数等于k，则丢弃剩余的token。</li><li>请求按照自己的需要到桶中申请指定数量的token。申请成功就进行请求处理，申请失败则进入等待。</li></ol><p>令牌桶的优点在于即限制了请求速率的同时亦允许突发增长的情况，这点体现在请求可以按自己实际需要来获取token数量。例如桶中放有10碗水（token），现在有2个人要用水，这两个人我们用A和B表示，那么令牌桶的思想就是这10碗水给A和B自由分配，即不固定获取水的碗数，如果桶不够水就等待令牌桶往桶里加水知道满足自己所需要的数量再获取。</p><h3 id="漏桶-vs-令牌桶"><a href="#漏桶-vs-令牌桶" class="headerlink" title="漏桶 vs 令牌桶"></a>漏桶 vs 令牌桶</h3><table><thead><tr><th>漏桶</th><th>令牌桶</th></tr></thead><tbody><tr><td>不依赖令牌</td><td>依赖令牌</td></tr><tr><td>桶满时丢弃多余请求</td><td>桶满时丢弃令牌，请求获取不到令牌只需要等待</td></tr><tr><td>固定速率，不允许突发</td><td>可以按照请求所需来申请token来应付突发</td></tr></tbody></table><h2 id="速率限制器：RateLimiter"><a href="#速率限制器：RateLimiter" class="headerlink" title="速率限制器：RateLimiter"></a>速率限制器：RateLimiter</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ul><li>限制操作的速率</li></ul><h3 id="Guava令牌桶算法实现"><a href="#Guava令牌桶算法实现" class="headerlink" title="Guava令牌桶算法实现"></a>Guava令牌桶算法实现</h3><p>在开源 Google Guava 库中就提供令牌桶算法实现，且提供两种不同的突发模式。分别是<code>SmoothBursty（平滑突发）</code>和<code>SmoothWarmingUp（平滑预热突发）</code>。后者可以通过预热让请求获取token的时间平稳，从而降低突发性。</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>28.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平滑突发</span></span><br><span class="line">    <span class="comment">//RateLimiter rateLimiter = RateLimiter.create(10);</span></span><br><span class="line">    <span class="comment">// 平滑预热突发。预热2秒钟，有10个令牌</span></span><br><span class="line">    <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">10</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 有足够令牌返回0，否则等待</span></span><br><span class="line">        <span class="comment">// 阻塞过后获取到令牌返回等待令牌的那段艰苦时间</span></span><br><span class="line">        System.out.println(rateLimiter.acquire()); <span class="comment">// 返回等待时间</span></span><br><span class="line">        <span class="comment">//System.out.println(rateLimiter.acquire(3)); // 获取指定数量的令牌</span></span><br><span class="line">        <span class="comment">//System.out.println(rateLimiter.tryAcquire()); // 尝试获取1个令牌</span></span><br><span class="line">        <span class="comment">//System.out.println(rateLimiter.tryAcquire(2, TimeUnit.SECONDS)); //尝试获取1个令牌但只等待2秒</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="何时使用限流"><a href="#何时使用限流" class="headerlink" title="何时使用限流"></a>何时使用限流</h2><ul><li>防止恶意高频调用</li><li>兜底操作，以防高并发导致服务崩溃</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.net.t-labs.tu-berlin.de/teaching/computer_networking/06.06.htm">Scheduling and Policing Mechanisms</a></li></ul><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务开发技术篇-服务容错</title>
      <link href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/"/>
      <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="提高分区容错性的方案"><a href="#提高分区容错性的方案" class="headerlink" title="提高分区容错性的方案"></a>提高分区容错性的方案</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>服务降级是一种系统在出现过载或服务不可用时的容错应对方案。譬如我们可以事先对服务进行等级划分，当系统出现过载时就可以根据服务的优先级别来进行<code>丢车保帅</code>操作，既通过关闭非核心服务来保持核心服务的可用性。又或者当A服务不可用时，才用B服务来代替。例如电商系统在下单成功后需要发送手机短信来通知买家，但由于手机短信服务不可用，这时就可以通过服务降级为发送邮件。</p><p>常见的服务降级手段：</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/001.png"></p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>限流是系统用于应对突发流量的一种有效手段，主要是避免突如其来的请求并发量拖垮系统。譬如某系统只能处理 100 个并发请求，所以一旦超过这个数量，系统的性能就可能会极速下跌，甚至可能会出现宕机的情况。当然，除了限流之外，我们还可以采用<code>负载均衡</code>、<code>请求排队（通过分布式消息队列对流量进行削峰，即延缓请求以免请求被丢弃) </code>等手段来降低服务器的并发负载。</p><p>限流操作大致可以划分为两类：</p><ul><li>请求限流：连接数、请求数、接口访问频率</li><li>资源限流：线程数、数据库连接数</li></ul><h3 id="请求排队"><a href="#请求排队" class="headerlink" title="请求排队"></a>请求排队</h3><p>限流操作一般会导致请求被阻塞或被丢弃（返回503），而请求排队则是延缓请求的处理事件，从而做到<strong>流量削峰</strong>和<strong>提高请求处理吞吐量</strong>的效果。</p><p>例如我们可以先将请求序列化成消息持久化到Kafka中，而消息则可交由特定的消费者来处理，实现异步功能解耦。这样当前服务就可以处理更多的请求，从而提高了吞吐量。</p><p>但需要注意，请求排队其实是一种降低系统可用性的操作，因为请求并不会马上被处理，所以这时用户并不能马上得知自己的请求结果。</p><h3 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h3><p><strong>容错</strong>指的是系统在运行过程中容许发生错误，容错其实是一种能力。例如系统可以自行化解大部分错误，这时我们就可以说当前系统的容错性较高，反之则较弱。例如前面提到的<strong>服务降级</strong>、<strong>限流</strong>、<strong>请求排队</strong>，又或者接下来要说的<strong>Hystrix熔断</strong>，其实都是容错的一种实现。</p><h2 id="关于服务雪崩和断路器"><a href="#关于服务雪崩和断路器" class="headerlink" title="关于服务雪崩和断路器"></a>关于服务雪崩和断路器</h2><blockquote><p>基本介绍</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/002.png"></p><p>如图所示，服务雪崩其实是一种服务调用失败的正反馈。指在请求调用链中因为某个服务不可用而导致级联不可用，最后造成整个系统不可用的现象。</p><p>那么我们应该如何避免服务雪崩呢？最简单的方法就是引入<strong>超时调用机制</strong>，即尽早地放弃调用从而释放资源结束请求，以免资源因长时被占用而耗尽，到最后拖垮系统。</p><p>除了超时机制之外就是还可以使用<strong>断路器</strong>来保证服务调用的快速失败。你可以理解断路器就是<strong>高级版的超时调用机制</strong>，它的原理和家用电闸保险丝一样，保险丝一旦发现电流过载就会主动断开从而避免过载的电流损耗电器。断路器也是同样的原理，即一旦发现服务不可用时，断路器就会根据状态来评估是否有必要让当前的服务调用快速失败从而避免不必要的资源消耗。</p><blockquote><p>故事图解断路器</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/003.png"></p><p>主角国的城池<code>Server C</code>被大魔王攻陷，现在为了避免被进一步的侵略<code>勇者M</code>挺身而出，将<code>Server C</code>连通<code>Server A</code>或<code>Server B</code>的唯一一座桥砍断。</p><p>但这么一来，如果长时间与外界断联，主角国就会存在断粮的陷阱，所以<code>勇者M</code>在砍断桥之后还留守在桥的一端，以等待事态平复后重新修建桥来恢复贸易。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/004.png"></p><p>在这个简单的小故事中<code>勇者M</code>其实就扮演着<code>断路器</code>的角色，而<code>Server C</code>就是被发现不可用服务。断路器可以快速阻断 Server A 和 Server B 调用 Service C</p><h2 id="Netflix-Hystrix"><a href="#Netflix-Hystrix" class="headerlink" title="Netflix Hystrix"></a>Netflix Hystrix</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Hystrix是一个延迟和容错库，旨在隔离对远程系统、服务和第三方库的访问点，以停止级联故障，并可以让复杂的分布式系统在不可避免的故障中具有弹性（容错能力）。</p><p>主要提供了以下功能：</p><ul><li>超时控制</li><li>断路器</li><li>资源隔离</li><li>降级操作</li><li>请求缓存</li><li>请求合并</li></ul><p>需要特别注意，目前Hystrix已经处于维护状态，而且官方表示Netflix将不会再主动审查问题（Issues）和处理合并请求（pull request）发布新版本的Hystrix。</p><p>除此之外，官方推荐使用已经足够稳定的 Hystrix 1.5.18 版本或转用<a href="https://github.com/resilience4j/resilience4j">resilience4j</a>。</p><h3 id="命令模式实践"><a href="#命令模式实践" class="headerlink" title="命令模式实践"></a>命令模式实践</h3><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li><p>命令模式是一种行为型设计模式，其主要作用是将请求封装为Command对象，以实现Command发起者和Command处理者的解耦（这时Command和处理者可以自由搭配）</p></li><li><p>该设计模式多用于在请求处理者不能预判请求发送者接下来将发起何种操作时使用。譬如在CQRS架构中，增、删、改等请求封装为Command在对其进行处理，因为相对于查询而言增删改是多变的</p></li></ul><h4 id="命令模式快速入门"><a href="#命令模式快速入门" class="headerlink" title="命令模式快速入门"></a>命令模式快速入门</h4><blockquote><p>模拟老师向学生下达命令</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/008.png"></p><p>Command接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Command实现 - DancingCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DancingCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        student.dancing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Command实现 - SingingCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingingCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        student.dancing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令执行者 - Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dancing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">singing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在唱歌&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令发起者 - Staff</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Staff</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; commands = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCommands</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.commands.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCommands</span><span class="params">()</span> &#123;</span><br><span class="line">        commands.forEach(command -&gt; &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xiaoming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 命令发起者</span></span><br><span class="line">        <span class="type">Staff</span> <span class="variable">staff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Staff</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 老师下达命令，要求小明同学唱歌跳舞</span></span><br><span class="line">        <span class="type">Command</span> <span class="variable">singing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingingCommand</span>(xiaoming);</span><br><span class="line">        <span class="type">Command</span> <span class="variable">dancing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DancingCommand</span>(xiaoming);</span><br><span class="line"></span><br><span class="line">        staff.addCommands(singing);</span><br><span class="line">        staff.addCommands(dancing);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发起命令</span></span><br><span class="line">        staff.executeCommands(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * output:</span></span><br><span class="line"><span class="comment">         * 小明正在唱歌</span></span><br><span class="line"><span class="comment">         * 小明正在跳舞</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hystrix使用命令模式的前后对比"><a href="#Hystrix使用命令模式的前后对比" class="headerlink" title="Hystrix使用命令模式的前后对比"></a>Hystrix使用命令模式的前后对比</h4><blockquote><p>使用命令模式前</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/005.png"></p><p>从上图中不难看出，如果直接调用依赖服务的话，只要有其中一个不可用就会导致整个用户请求失败（一个请求通常需要多个服务一同处理），而在极端情况下还可能会引发服务雪崩。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/006.png"></p><blockquote><p>命令模式使用后</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/007.png"></p><p>使用命令模式后，Hystrix只需将请求单元（如@HsytrixCommnad标注的方法）封装成独立的Command然后交给线程（池）来处理即可，避免了直接处理请求所带来的风险，以及做到了请求的隔离的效果，因为命令之间是相互独立，处理者亦可以不相同（如上图所示，不同的依赖请求命令都有与之对应的处理器），且不同的Commnad可以交给不同的线程（池）来处理。</p><h3 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h3><h4 id="非SpringBoot案例"><a href="#非SpringBoot案例" class="headerlink" title="非SpringBoot案例"></a>非SpringBoot案例</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Command实现 - UserFindAllCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFindAllCommand</span> <span class="keyword">extends</span> <span class="title class_">HystrixCommand</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserFindAllCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置超时阈值</span></span><br><span class="line">        <span class="comment">// 参数1：命令所属组的key</span></span><br><span class="line">        <span class="comment">// 参数2：命令执行超时时间</span></span><br><span class="line">        <span class="built_in">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;ExampleGroup&quot;</span>), <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 模拟超时</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hystrix.UserFindAllCommand.run&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 备用方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;错误信息：&quot;</span> + getExecutionException());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hystrix.UserFindAllCommand.getFallback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回命令执行过程发生的异常信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Throwable <span class="title function_">getExecutionException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getExecutionException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Command实现 - UserDeleteByIdCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDeleteByIdCommand</span> <span class="keyword">extends</span> <span class="title class_">HystrixCommand</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDeleteByIdCommand</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;ExampleGroup&quot;</span>));</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟异常！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;错误信息：&quot;</span> + getFailedExecutionException());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hystrix.UserDeleteByIdCommand.getFallback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Throwable <span class="title function_">getFailedExecutionException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getFailedExecutionException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="type">UserDeleteByIdCommand</span> <span class="variable">deleteByIdCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDeleteByIdCommand</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">execute2</span> <span class="operator">=</span> deleteByIdCommand.execute(); <span class="comment">// 执行命令</span></span><br><span class="line">        System.out.println(execute2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟超时</span></span><br><span class="line">        <span class="type">UserFindAllCommand</span> <span class="variable">findAll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserFindAllCommand</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">execute</span> <span class="operator">=</span> findAll.execute(); <span class="comment">// 执行命令</span></span><br><span class="line">        System.out.println(execute);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * output:</span></span><br><span class="line"><span class="comment">         * 错误信息：java.lang.RuntimeException: 模拟异常！</span></span><br><span class="line"><span class="comment">         * hystrix.UserDeleteByIdCommand.getFallback</span></span><br><span class="line"><span class="comment">         * ------</span></span><br><span class="line"><span class="comment">         * 错误信息：com.netflix.hystrix.exception.HystrixTimeoutException</span></span><br><span class="line"><span class="comment">         * hystrix.UserFindAllCommand.getFallback</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringBoot案例"><a href="#SpringBoot案例" class="headerlink" title="SpringBoot案例"></a>SpringBoot案例</h4><blockquote><p>通过@HystrixCommand注解来实现Hystrix命令</p></blockquote><h5 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟异常</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟异常...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟超时</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h5><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageRepositor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SERVEICE_NAME</span> <span class="operator">=</span><span class="string">&quot;MSA-EUREKA-PROVIDER-USER&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟异常</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;deleteUserByIdFallbackMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/delete/&#123;id&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line">        <span class="comment">// restTemplate.delete(url, id); // 无返回值</span></span><br><span class="line">        ResponseEntity&lt;User&gt; exchange = restTemplate.exchange(url, HttpMethod.DELETE, <span class="literal">null</span>, User.class, id);</span><br><span class="line">        <span class="keyword">return</span> exchange.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserByIdFallbackMethod</span><span class="params">(Long id, Throwable throwable)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Throwable=&#123;&#125;&quot;</span>, throwable);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;默认&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// =====================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟超时</span></span><br><span class="line">    <span class="meta">@HystrixCommand(commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;) // 指定超时时间</span></span><br><span class="line"><span class="meta">    &#125;, fallbackMethod = &quot;selectAllUserFallbackMethod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">selectAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/find/all&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">selectAllUserFallbackMethod</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Throwable=&#123;&#125;&quot;</span>, throwable);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;默认&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用 Hystrix</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@EnableHystrix</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@SpringBootApplication</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span> <span class="comment">// 可以代替以上三个注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaEurekaComsumer01Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaEurekaComsumer01Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h4 id="Hystrix工作流程图"><a href="#Hystrix工作流程图" class="headerlink" title="Hystrix工作流程图"></a>Hystrix工作流程图</h4><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/009.png"></p><ol><li>接收到请求后构建Command。在Hystrix中有以下两种Command：<ul><li>HystrixCommand：依赖服务返回单个操作结果<ul><li>execute()：同步执行</li><li>queue()：异步执行</li></ul></li><li>HystrixObservableCommand：依赖服务返回多个操作结果<ul><li>observe()：返回一个可观察对象Observable，属于Hot Observable，即只能观察到最新发生的事件</li><li>toObservable() ：功能和 observe() 类似，但属于Cold Observable，能观察到所有事件</li><li>以上API属于RxJava反应式编程库</li></ul></li></ul></li><li>判断当前需要处理的Command是否存在于缓存中（假设开启了命令缓存），如果有则直接返回上一次的响应结果。否则进入下一阶段</li><li>判断断路器是否有开启，如果有则直接快速失败，触发fallback操作。否则接着判断<code>线程池</code>或<code>信号量</code>是否已经到达阈值，如果已达阈值则直接快速失败触发fallback操作，反之执行命令</li><li>在执行命令过程中，Hystrix会监控在调用依赖服务时是否有发生<code>调用异常</code>或<code>调用超时</code>，如果有则通知<code>断路器</code>统计信息并让其判断是否有必要开启断路器</li><li>如果命令执行过后，没有发生异常或超时行为，则返回一个Observable作为结果，Hystrix再通过该结果获取到真正的返回值</li></ol><p>特别注意，断路器开启时fallback的回调也是可能失败的，因此fallback也是由线程池&#x2F;信号量线程调用的，如果Command本身的fallback调用失败，则会接着调用父fallback，再失败直接报错。</p><h4 id="断路器工作原理"><a href="#断路器工作原理" class="headerlink" title="断路器工作原理"></a>断路器工作原理</h4><blockquote><p>断路器的三种状态</p></blockquote><ul><li>CLOSED：关闭，可以正常调用依赖服务</li><li>OPEN：开启，请求调用依赖服务会被快速失败</li><li>HALF-OPEN：半开启，允许尝试性地调用已经熔断了的依赖服务</li></ul><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/010.png"></p><blockquote><p>断路器状态切换</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/011.png"></p><h4 id="调用隔离"><a href="#调用隔离" class="headerlink" title="调用隔离"></a>调用隔离</h4><blockquote><p>船舱隔离</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/012.png"></p><p>如图所示，Hystrix 将用户请求中需要调用的依赖服务封装成Command，并将Command提交给线程池&#x2F;信号量来处理从而实现依赖调用隔离。</p><blockquote><p>船舱隔离在 Hystrix 中的应用</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/013.png"></p><p>两种隔离策略</p><ul><li>线程池<ol><li>数量可控且受保护，不受客户端恶意调用影响</li><li>待命线程能够提高请求处理效率</li><li>提供内部并发性 </li><li>多线程存在上下文切换问题，会增加系统资源开销</li></ol></li><li>信号量<ol><li>信号量实质就是个计数器，比线程池开销低</li><li>性能和灵活性都比线程池差</li></ol></li></ul><p>如果要修改隔离策略，则可以通过<code>execution.isolation.strategy</code>属性来配置。</p><h4 id="请求合并（减少请求开销）"><a href="#请求合并（减少请求开销）" class="headerlink" title="请求合并（减少请求开销）"></a>请求合并（减少请求开销）</h4><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/014.png"></p><h4 id="请求缓存"><a href="#请求缓存" class="headerlink" title="请求缓存"></a>请求缓存</h4><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/015.png"></p><ul><li><p>请求缓存可以在Command相同时，返回上一次成功响应的结果，从而减少请求开销</p></li><li><p>从图中可以看到Command缓存采用ThreadLoacl实现，而ThreadLoacl本身是线程的一个局部变量，所以<strong>Command缓存范围是在单个请求内</strong></p></li><li><p>一旦引入缓存其实就意味着可能存在缓存一致性的问题，而在这方面Hystrix提供了主动清除缓存的方法，所以在有必要时可以用来手动清理缓存以发起新的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HystrixRequestCache.getInstance(GETTER_KEY, HystrixConcurrencyStrategyDefault.getInstance()).clear(<span class="string">&quot;commandKey&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="源码浅析"><a href="#源码浅析" class="headerlink" title="源码浅析"></a>源码浅析</h3><h4 id="断路器是如何触发fallback的？"><a href="#断路器是如何触发fallback的？" class="headerlink" title="断路器是如何触发fallback的？"></a>断路器是如何触发fallback的？</h4><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/016.png"></p><blockquote><p>自动配置类 HystrixAutoConfiguratio</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixAutoConfiguration</span> &#123;</span><br><span class="line">  <span class="comment">// 开启健康指示器（用来收集和统计服务调用时的信息）</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnEnabledHealthIndicator(&quot;hystrix&quot;)</span></span><br><span class="line"><span class="keyword">public</span> HystrixHealthIndicator <span class="title function_">hystrixHealthIndicator</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HystrixHealthIndicator</span>();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(HystrixCommandAspect.class)</span> <span class="comment">// 命令切面类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; HystrixMetricsStreamServlet.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HystrixProperties.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HystrixServletAutoConfiguration</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切面类 HystrixCommandAspect</p></blockquote><p>切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截@HystrixCommand</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hystrixCommandAnnotationPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拦截@HystrixCollapser</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hystrixCollapserAnnotationPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 环绕织入</span></span><br><span class="line"><span class="meta">@Around(&quot;hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">methodsAnnotatedWithHystrixCommand</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">// 目标方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> getMethodFromTarget(joinPoint);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法不能同时被 HystrixCommand、HystrixCollapser 两个注解标注</span></span><br><span class="line"><span class="keyword">if</span> (method.isAnnotationPresent(HystrixCommand.class) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MetaHolderFactory</span> <span class="variable">metaHolderFactory</span> <span class="operator">=</span> META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));</span><br><span class="line"><span class="type">MetaHolder</span> <span class="variable">metaHolder</span> <span class="operator">=</span> metaHolderFactory.create(joinPoint);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 注意：返回可调用对象（包含fallback和普通command的execute方法）</span></span><br><span class="line"><span class="type">HystrixInvokable</span> <span class="variable">invokable</span> <span class="operator">=</span> HystrixCommandFactory.getInstance().create(metaHolder);</span><br><span class="line"><span class="type">ExecutionType</span> <span class="variable">executionType</span> <span class="operator">=</span> metaHolder.isCollapserAnnotationPresent() ? metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();</span><br><span class="line"></span><br><span class="line">Object result;</span><br><span class="line"><span class="keyword">if</span> (!metaHolder.isObservable()) &#123;</span><br><span class="line">result = CommandExecutor.execute(invokable, executionType, metaHolder);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">// 可监听Observable</span></span><br><span class="line">result = executeObservable(invokable, executionType, metaHolder);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HystrixCommandFactory.getInstance().create(metaHolder)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HystrixInvokable实质是一个GenericCommand</span></span><br><span class="line"><span class="keyword">public</span> HystrixInvokable <span class="title function_">create</span><span class="params">(MetaHolder metaHolder)</span> &#123;</span><br><span class="line">HystrixInvokable executable;</span><br><span class="line">  <span class="comment">// 是否需要合并</span></span><br><span class="line"><span class="keyword">if</span> (metaHolder.isCollapserAnnotationPresent()) &#123;</span><br><span class="line">executable = <span class="keyword">new</span> <span class="title class_">CommandCollapser</span>(metaHolder);</span><br><span class="line">  <span class="comment">// 是否可观察</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (metaHolder.isObservable()) &#123; </span><br><span class="line">executable = <span class="keyword">new</span> <span class="title class_">GenericObservableCommand</span>(HystrixCommandBuilderFactory.getInstance().create(metaHolder));</span><br><span class="line">  <span class="comment">// 普通Command</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">executable = <span class="keyword">new</span> <span class="title class_">GenericCommand</span>(HystrixCommandBuilderFactory.getInstance().create(metaHolder));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> executable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HystrixCommandBuilderFactory.getInstance().create(metaHolder)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;ResponseType&gt; HystrixCommandBuilder <span class="title function_">create</span><span class="params">(<span class="comment">/**/</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> HystrixCommandBuilder.builder()</span><br><span class="line">.setterBuilder(createGenericSetterBuilder(metaHolder))</span><br><span class="line">.commandActions(createCommandActions(metaHolder)) <span class="comment">// fallback和execute操作</span></span><br><span class="line">.collapsedRequests(collapsedRequests) <span class="comment">// 请求合并</span></span><br><span class="line"><span class="comment">// 缓存相关</span></span><br><span class="line">.cacheResultInvocationContext(createCacheResultInvocationContext(metaHolder)) </span><br><span class="line">.cacheRemoveInvocationContext(createCacheRemoveInvocationContext(metaHolder))</span><br><span class="line">.ignoreExceptions(metaHolder.getCommandIgnoreExceptions())</span><br><span class="line">.executionType(metaHolder.getExecutionType())</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>createCommandActions(metaHolder)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CommandActions <span class="title function_">createCommandActions</span><span class="params">(MetaHolder metaHolder)</span> &#123;</span><br><span class="line">  <span class="comment">// Command</span></span><br><span class="line"><span class="type">CommandAction</span> <span class="variable">commandAction</span> <span class="operator">=</span> createCommandAction(metaHolder);</span><br><span class="line">  <span class="comment">// fallback</span></span><br><span class="line"><span class="type">CommandAction</span> <span class="variable">fallbackAction</span> <span class="operator">=</span> createFallbackAction(metaHolder);</span><br><span class="line"><span class="keyword">return</span> CommandActions.builder().commandAction(commandAction).fallbackAction(fallbackAction).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GenericCommand</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericCommand</span> <span class="keyword">extends</span> <span class="title class_">AbstractHystrixCommand</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericCommand</span><span class="params">(HystrixCommandBuilder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(builder);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// command</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> process(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            Object <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> getCommandAction().execute(getExecutionType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// fallback</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">CommandAction</span> <span class="variable">commandAction</span> <span class="operator">=</span> getFallbackAction();</span><br><span class="line">        <span class="keyword">if</span> (commandAction != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> process(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">Object <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">MetaHolder</span> <span class="variable">metaHolder</span> <span class="operator">=</span> commandAction.getMetaHolder();</span><br><span class="line">Object[] args = createArgsForFallback(metaHolder, getExecutionException());</span><br><span class="line"><span class="keyword">return</span> commandAction.executeWithArgs(metaHolder.getFallbackExecutionType(), args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果fallback调用失败，则会进入父类fallback</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getFallback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>命令执行器 CommandExecutor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">execute</span><span class="params">(HystrixInvokable invokable, ExecutionType executionType, MetaHolder metaHolder)</span> <span class="keyword">throws</span> RuntimeException &#123;</span><br><span class="line">    <span class="keyword">switch</span> (executionType) &#123;</span><br><span class="line">        <span class="keyword">case</span> SYNCHRONOUS: &#123; <span class="comment">// 同步执行</span></span><br><span class="line">            <span class="keyword">return</span> castToExecutable(invokable, executionType).execute();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> ASYNCHRONOUS: &#123; <span class="comment">// 异步执行</span></span><br><span class="line">            <span class="type">HystrixExecutable</span> <span class="variable">executable</span> <span class="operator">=</span> castToExecutable(invokable, executionType);</span><br><span class="line">            <span class="keyword">if</span> (metaHolder.hasFallbackMethodCommand() &amp;&amp; ExecutionType.ASYNCHRONOUS == metaHolder.getFallbackExecutionType()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FutureDecorator</span>(executable.queue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> executable.queue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> OBSERVABLE: &#123; <span class="comment">// 可观察形式的执行</span></span><br><span class="line">            <span class="type">HystrixObservable</span> <span class="variable">observable</span> <span class="operator">=</span> castToObservable(invokable);</span><br><span class="line">            <span class="keyword">return</span> ObservableExecutionMode.EAGER == metaHolder.getObservableExecutionMode() ? observable.observe() : observable.toObservable();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;unsupported execution type: &quot;</span> + executionType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HystrixCommand#execute()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果命令因任何原因失败，则执行#run()或从#getFallback()中返回结果</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue().get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exceptions.sneakyThrow(decomposeException(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h4><p>HystrixCircuitBreaker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HystrixCircuitBreaker</span> &#123;</span><br><span class="line"><span class="comment">// 每个HystrixCommand都必须经过该方法来判断是否需要执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">allowRequest</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 返回断路器状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 闭合断路器</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">markSuccess</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, HystrixCircuitBreaker&gt; circuitBreakersByCommand = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, HystrixCircuitBreaker&gt;();</span><br><span class="line">        <span class="comment">// 返回断路器</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> HystrixCircuitBreaker <span class="title function_">getInstance</span><span class="params">(HystrixCommandKey key, HystrixCommandGroupKey group, HystrixCommandProperties properties, HystrixCommandMetrics metrics)</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 从缓存中返回当前Command对应的断路器</span></span><br><span class="line">            <span class="type">HystrixCircuitBreaker</span> <span class="variable">previouslyCached</span> <span class="operator">=</span> circuitBreakersByCommand.get(key.name());</span><br><span class="line">            <span class="keyword">if</span> (previouslyCached != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> previouslyCached;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 如果没有则创建并设置</span></span><br><span class="line">            <span class="type">HystrixCircuitBreaker</span> <span class="variable">cbForCommand</span> <span class="operator">=</span> circuitBreakersByCommand.putIfAbsent(key.name(), <span class="keyword">new</span> <span class="title class_">HystrixCircuitBreakerImpl</span>(key, group, properties, metrics));</span><br><span class="line">            <span class="keyword">if</span> (cbForCommand == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> circuitBreakersByCommand.get(key.name());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> cbForCommand;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 返回断路器</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> HystrixCircuitBreaker <span class="title function_">getInstance</span><span class="params">(HystrixCommandKey key)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> circuitBreakersByCommand.get(key.name());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清除断路器滑动窗口信息</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">            circuitBreakersByCommand.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HystrixCircuitBreakerImpl</span> <span class="keyword">implements</span> <span class="title class_">HystrixCircuitBreaker</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HystrixCommandProperties properties;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HystrixCommandMetrics metrics;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">AtomicBoolean</span> <span class="variable">circuitOpen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">circuitOpenedOrLastTestedTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">HystrixCircuitBreakerImpl</span><span class="params">(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixCommandProperties properties, HystrixCommandMetrics metrics)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.properties = properties;</span><br><span class="line">            <span class="built_in">this</span>.metrics = metrics;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 尝试关闭断路器</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (circuitOpen.get()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (circuitOpen.compareAndSet(<span class="literal">true</span>, <span class="literal">false</span>)) &#123;</span><br><span class="line">                    metrics.resetStream();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关闭状态</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">allowRequest</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 如果断路器已经打开，不执行Command</span></span><br><span class="line">            <span class="keyword">if</span> (properties.circuitBreakerForceOpen().get()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 断路器没有打开，执行Command</span></span><br><span class="line">            <span class="keyword">if</span> (properties.circuitBreakerForceClosed().get()) &#123;</span><br><span class="line">                isOpen();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 半打开状态</span></span><br><span class="line">            <span class="keyword">return</span> !isOpen() || allowSingleTest();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 半打开状态，放行下一个Commmand尝试调用依赖服务</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">allowSingleTest</span><span class="params">()</span> &#123;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 获取断路器打开时的时间戳</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">timeCircuitOpenedOrWasLastTested</span> <span class="operator">=</span> circuitOpenedOrLastTestedTime.get();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 必须休眠时间circuitBreakerSleepWindowInMilliseconds，默认5秒</span></span><br><span class="line">            <span class="comment">// 判断是否已经完成随眠事件</span></span><br><span class="line">            <span class="keyword">if</span> (circuitOpen.get() &amp;&amp; </span><br><span class="line">                System.currentTimeMillis() &gt; timeCircuitOpenedOrWasLastTested + properties.circuitBreakerSleepWindowInMilliseconds().get()) &#123;</span><br><span class="line">                <span class="comment">// 尝试成功</span></span><br><span class="line">                <span class="keyword">if</span> (circuitOpenedOrLastTestedTime.compareAndSet(timeCircuitOpenedOrWasLastTested, System.currentTimeMillis())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 尝试失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 情况1：断路器处于打开状态</span></span><br><span class="line">            <span class="keyword">if</span> (circuitOpen.get()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 情况2：获取断路器滑动窗口信息</span></span><br><span class="line">            <span class="type">HealthCounts</span> <span class="variable">health</span> <span class="operator">=</span> metrics.getHealthCounts();</span><br><span class="line">            <span class="comment">// 总请求数低于请求阈值（ircuitBreakerRequestVolumeThreshold，默认20），表示断路器还没未打开</span></span><br><span class="line">            <span class="keyword">if</span> (health.getTotalRequests() &lt; properties.circuitBreakerRequestVolumeThreshold().get()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 情况3：请求错误率低于错误阈值（circuitBreakerErrorThresholdPercentage，默认50），表示断路器还没未打开</span></span><br><span class="line">            <span class="keyword">if</span> (health.getErrorPercentage() &lt; properties.circuitBreakerErrorThresholdPercentage().get()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 打开断路器</span></span><br><span class="line">                <span class="keyword">if</span> (circuitOpen.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line"><span class="comment">// 记录打开断路器时的时间戳</span></span><br><span class="line">                    circuitOpenedOrLastTestedTime.set(System.currentTimeMillis());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与Command组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCommand</span>&lt;R&gt; <span class="keyword">implements</span> <span class="title class_">HystrixInvokableInfo</span>&lt;R&gt;, HystrixObservable&lt;R&gt; &#123;</span><br><span class="line"><span class="comment">// 断路器</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> HystrixCircuitBreaker circuitBreaker;</span><br><span class="line">    <span class="comment">// 线程池</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> HystrixThreadPool threadPool;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> HystrixThreadPoolKey threadPoolKey;</span><br><span class="line">    <span class="comment">// 命令属性</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> HystrixCommandProperties properties;</span><br></pre></td></tr></table></figure><h3 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h3><h4 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h4><h5 id="HystrixCommand"><a href="#HystrixCommand" class="headerlink" title="@HystrixCommand"></a>@HystrixCommand</h5><ul><li>commandKey ：命令标识</li><li>groupKey ：命令组标识</li><li>commandProperties ：命令属性</li><li>threadPoolKey ：线程池标识</li><li>threadPoolProperties ：线程池属性</li><li>fallbackMethod ：后备方法</li><li>defaultFallback ：默认后备方法，和fallbackMethod一样但方法不能有参数</li><li>ignoreExceptions ：忽略异常（不触发fallback）</li><li>observableExecutionMode ：执行RxJava的Observabl执行模式，默认ObservableExecutionMode.EAGER标识马上执行，而LAZY则是有订阅者时才执行</li></ul><h5 id="HystrixCollapser"><a href="#HystrixCollapser" class="headerlink" title="@HystrixCollapser"></a>@HystrixCollapser</h5><ul><li>collapserKey：合并标识</li><li>scope：操作域。默认为Scope.REQUEST，即请求级别</li><li>collapserProperties：合并属性</li><li>batchMethod：批处理命令的方法名称</li></ul><h5 id="HystrixProperty"><a href="#HystrixProperty" class="headerlink" title="@HystrixProperty"></a>@HystrixProperty</h5><ul><li>name：属性名称</li><li>value：属性值</li></ul><h4 id="常用HystrixCommand配置"><a href="#常用HystrixCommand配置" class="headerlink" title="常用HystrixCommand配置"></a>常用HystrixCommand配置</h4><blockquote><p>如果在yaml中配置，驼峰法使用”:”隔开</p></blockquote><table><thead><tr><th>属性</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>executionTimeoutEnabled</td><td>是否开启Command执行超时</td><td>true</td></tr><tr><td>executionTimeoutInMilliseconds</td><td>Command超时时间</td><td>1000</td></tr><tr><td>executionIsolationThreadInterruptOnTimeout</td><td>HystrixCommand.run()执行超时后是否中断其操作</td><td>true</td></tr><tr><td>executionIsolationThreadInterruptOnFutureCancel</td><td>HystrixCommand.run()执行被取消时是否中断其操作</td><td>false</td></tr><tr><td>executionIsolationStrategy</td><td>隔离策略</td><td>ExecutionIsolationStrategy.THREAD</td></tr><tr><td>executionIsolationSemaphoreMaxConcurrentRequests</td><td>采用信号量作为隔离策略时最大的请求数</td><td>10</td></tr><tr><td>fallbackEnabled</td><td>是否开启服务降级</td><td>true</td></tr><tr><td>requestCacheEnabled</td><td>是否开启请求缓存</td><td>true</td></tr><tr><td>requestLogEnabled</td><td>是否开启请求日志记录</td><td>true</td></tr><tr><td>circuitBreakerEnabled</td><td>是否开启断路器</td><td>true</td></tr><tr><td>circuitBreakerRequestVolumeThreshold</td><td>熔断最少请求数</td><td>20</td></tr><tr><td>circuitBreakerErrorThresholdPercentage</td><td>满足熔断最少请求数的前提下，如果错误率高达50%（默认）就开启断路器</td><td>50</td></tr><tr><td>circuitOpenedOrLastTestedTime</td><td>断路器开启后必须休眠时间（ms）</td><td>5000</td></tr><tr><td>circuitBreakerForceOpen</td><td>强制打开断路器</td><td>false</td></tr><tr><td>circuitBreakerForceClosed</td><td>强制关闭断路器（优先级低于circuitBreakerForceOpen）</td><td>false</td></tr><tr><td>metricsRollingStatisticalWindow</td><td>滑动窗口总时间长度（ms），用于指标统计</td><td>10000</td></tr><tr><td>metricsRollingStatisticalWindowBuckets</td><td>滑动窗口的桶数，默认为10，即每个窗口1s</td><td>10</td></tr></tbody></table><h4 id="常用HystrixCollapser配置"><a href="#常用HystrixCollapser配置" class="headerlink" title="常用HystrixCollapser配置"></a>常用HystrixCollapser配置</h4><blockquote><p>如果在yaml中配置，驼峰法使用”:”隔开</p></blockquote><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>maxRequestsInBatch</td><td>单次请求能够合并的总command数</td></tr><tr><td>timerDelayInMilliseconds</td><td>批处理过程中每个command的延时时间</td></tr><tr><td>requestCacheEnabled</td><td>是否开启请求缓存</td></tr></tbody></table><h4 id="常用HystrixThreadPool配置"><a href="#常用HystrixThreadPool配置" class="headerlink" title="常用HystrixThreadPool配置"></a>常用HystrixThreadPool配置</h4><blockquote><p>如果在yaml中配置，驼峰法使用”:”隔开</p></blockquote><table><thead><tr><th>属性</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>coreSize</td><td>线程池核心线程数</td><td>10</td></tr><tr><td>maximumSize</td><td>线程池最大线程数</td><td>10</td></tr><tr><td>maxQueueSize</td><td>线程池的任务队列长度。默认为-1，即使用同步队列，否则使用LinkedBlockingQueue</td><td>-1</td></tr><tr><td>queueSizeRejectionThreshold</td><td>队列拒绝任务阈值，前提时使用LinkedBlockingQueue。即使队列还没满也会直接拒绝</td><td>5</td></tr><tr><td>threadPoolRollingNumberStatisticalWindow</td><td>滑动窗口总时间长度（ms），用于指标统计</td><td>10000</td></tr><tr><td>threadPoolRollingNumberStatisticalWindowBuckets</td><td>滑动窗口的桶数，默认为10，即每个窗口1s</td><td>10</td></tr></tbody></table><h4 id="Feign中使用Hystrix"><a href="#Feign中使用Hystrix" class="headerlink" title="Feign中使用Hystrix"></a>Feign中使用Hystrix</h4><blockquote><p>@FeignClient</p></blockquote><ul><li>value：服务名称</li><li>name：与value功能一致</li><li>qualifier：FeignClient限定名称。在多个同类型FeignClient时以作区别</li><li>decode404：404解码，例如信息解码成json</li><li>configuration：FeignClient独立配置类，会覆盖全局配置。可以自定义Encoder、Decoder、LogLevel、Contract</li><li><strong>fallback ：指定后备实现，需要实现FeignClient接口</strong></li><li><strong>fallbackFactory：指定后备工厂类，功能与fallback一样，但可以获取到原因，需要实现FallbackFactory接口</strong></li></ul><blockquote><p>在Feign中开启Hystrix功能</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>实现 fallbackFactory 来支持降级</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFeignClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserFeignClient&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserFeignClient <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserFeignClient</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> List <span class="title function_">selectAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;cause -&gt; &#123;&#125;&quot;</span>, cause);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;cause -&gt; &#123;&#125;&quot;</span>, cause);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(Long id, String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;cause -&gt; &#123;&#125;&quot;</span>, cause);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FeignClient 接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;MSA-EUREKA-PROVIDER-USER&quot;, fallbackFactory = UserFeignClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/find/all&quot;)</span></span><br><span class="line">    List <span class="title function_">selectAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要注意的是，只要使用了Feign并启用Hystrix</span></span><br><span class="line"><span class="comment">     * Hystrix就会为每个FeignClient方法配置一个断路器</span></span><br><span class="line"><span class="comment">     * 即不用直接编写<span class="doctag">@HystrixCommand</span>，如果添加上<span class="doctag">@HystrixCommand</span>会抛异常</span></span><br><span class="line"><span class="comment">     * 参考：https://cloud.spring.io/spring-cloud-openfeign/reference/html/#spring-cloud-feign-hystrix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    User <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestParam</span> Long id,</span></span><br><span class="line"><span class="params">                  <span class="meta">@RequestParam</span> String name,</span></span><br><span class="line"><span class="params">                  <span class="meta">@RequestParam</span> <span class="type">int</span> age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Feign中如何配置Hystrix？</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">threadpool:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">coreSize:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="comment"># 通用</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">fallback:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 特定</span></span><br><span class="line">    <span class="string">UserFeignClient#deleteUserById(Long):</span></span><br><span class="line">      <span class="attr">fallback:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>启用功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="comment">//@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@SpringBootApplication  </span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaEurekaComsumer01Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaEurekaComsumer01Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Command缓存使用"><a href="#Command缓存使用" class="headerlink" title="Command缓存使用"></a>Command缓存使用</h4><blockquote><p>相关注解</p></blockquote><p>@CacheResult：注解在方法上，表示开启缓存</p><p>@CacheKey：执行缓存key。不用@CacheKey时默认使用参数列表作为key</p><p>@CacheRemove：移除缓存key</p><blockquote><p>例子</p></blockquote><p>缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheResult</span></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">get</span><span class="params">(Integer id,String name)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定缓存key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheResult</span></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">get</span><span class="params">(<span class="meta">@CacheKey</span> Integer id,String name)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheResult(commandKey = &quot;get&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">removeById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hystrix监控"><a href="#Hystrix监控" class="headerlink" title="Hystrix监控"></a>Hystrix监控</h4><h5 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h5><ul><li>同一时刻只能监控单个节点</li><li>可以打开多个Dashboard页面监控不同的节点或服务</li></ul><blockquote><p>创建一个独立的SpringBoot作为监控服务</p></blockquote><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置端口</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9092</span></span><br></pre></td></tr></table></figure><p>启动功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaHystrixDashboardApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaHystrixDashboardApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，浏览器： <a href="http://localhost:9092/hystrix">http://localhost:9092/hystrix</a> </p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/017.png"></p><blockquote><p>测试监控</p></blockquote><ul><li>监控对象必须开启 Hystrix 和 Actuator 功能</li></ul><p>1）开启被监控端端点（当前例子被监控端端口为：8081，服务名：msa-eureka-comsumer-01）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认开启</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">hystrix:</span></span><br><span class="line">      <span class="attr">stream:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2）浏览器打开Dashboard： <a href="http://localhost:9092/hystrix">http://localhost:9092/hystrix</a> </p><p>3）在Dashboard中输入：<a href="http://localhost:8081/actuator/hystrix.stream">http://localhost:8081/actuator/hystrix.stream</a></p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/018.png"></p><ul><li>需要注意的是，以下数据图形需要在被监控服务处理过请求才会显示，即如果被监控端刚启动没处理过任何请求是不会有数据的。</li></ul><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/019.png"></p><p>图中的信息（右上角是说明）：</p><ul><li>Success：深绿色，请求成功</li><li>Short-Circuited：蓝色，请求短路（断路器开启，请求被快速失败）</li><li>Bad Request：浅绿色，不恰当的请求</li><li>Timeout ：橙色，请求超时</li><li>Rejected ：紫色，请求被直接拒绝</li><li>Failure ：红色，请求失败（包含错误和超时）</li><li>Error：黑色，请求处理错误</li></ul><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/020.png"></p><h5 id="Turbine-Stream-Aggregator-Hystrix-Dashboard"><a href="#Turbine-Stream-Aggregator-Hystrix-Dashboard" class="headerlink" title="Turbine Stream Aggregator + Hystrix Dashboard"></a>Turbine Stream Aggregator + Hystrix Dashboard</h5><p>因为 Hystrix Dashboard 同一时刻只能监控单个服务节点。但如何同时监控多个服务节点呢？这时可以使用Turbine Stream Aggregator来做聚合监控。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/021.png"></p><blockquote><p>创建一个聚合监控服务</p></blockquote><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-cloud-starter-netflix-turbine：集成了Eureka Client用来获取注册中心的服务来监控</li></ul><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-turbine</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">MSA-EUREKA-COMSUMER-01,</span> <span class="string">MSA-EUREKA-PROVIDER-USER</span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">&quot;&#x27;default&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>开启功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaHystrixTurbineApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaHystrixTurbineApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试监控</p></blockquote><p>1） 浏览器打开Dashboard：<a href="http://localhost:9092/hystrix">http://localhost:9092/hystrix</a> </p><p>2）在Dashboard中输入Turbine地址：<a href="http://localhost:9091/turbine.stream">http://localhost:9091/turbine.stream</a></p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/022.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/Netflix/Hystrix">Netflix Hystrix</a></p></li><li><p><a href="https://juejin.im/post/5c009ff6f265da614b11b84d">Hystrix都停更了，我为什么还要学？</a></p></li><li><p><a href="https://dzone.com/articles/microservices-communication-hystrix-as-the-jon-sno-1">Microservices Communication: Hystrix as the Jon Snow</a></p></li><li><p><a href="https://softwareengineering.stackovernet.com/cn/q/22749">What’s the difference between robustness and fault-tolerance?</a></p></li><li><p><a href="https://yq.aliyun.com/articles/691128">Spring Cloud Alibaba迁移指南（一）：一行代码从 Hystrix 迁移到 Sentinel</a></p></li><li><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html">CircuitBreaker</a></p></li><li><p><a href="https://segmentfault.com/a/1190000011280116">Spring Cloud中Hystrix的请求缓存</a></p></li><li><p><a href="https://juejin.im/entry/58d4d8f5b123db3f6b6485ec">Hystrix 那些事（下）</a></p></li><li><p><a href="https://stackabuse.com/spring-cloud-turbine/">Spring Cloud: Turbine</a></p></li><li><p>《Spring Cloud 微服务实战》</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务开发技术篇-REST调用</title>
      <link href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-REST%E8%B0%83%E7%94%A8/"/>
      <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-REST%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="常见HTTP客户端工具"><a href="#常见HTTP客户端工具" class="headerlink" title="常见HTTP客户端工具"></a>常见HTTP客户端工具</h2><h3 id="HttpURLConnection"><a href="#HttpURLConnection" class="headerlink" title="HttpURLConnection"></a>HttpURLConnection</h3><blockquote><p>HttpURLConnection是JDK内置的HTTP请求工具</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">inputContent</span><span class="params">(HttpURLConnection connection)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(connection.getInputStream());</span><br><span class="line">    <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[bis.available()];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> ((len=bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        sb.append(<span class="keyword">new</span> <span class="title class_">String</span>(buff, <span class="number">0</span>, buff.length));</span><br><span class="line">    &#125;</span><br><span class="line">    bis.close();</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testDelete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">u</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/user/delete/&#123;id&#125;&quot;</span>;</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(u.replace(<span class="string">&quot;&#123;id&#125;&quot;</span>, String.valueOf(id)));</span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection)url.openConnection();</span><br><span class="line">    connection.setRequestMethod(<span class="string">&quot;DELETE&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> inputContent(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/user/find/all&quot;</span>);</span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection)url.openConnection();</span><br><span class="line">    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> inputContent(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPost</span><span class="params">(User user, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/user/add&quot;</span>);</span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection)url.openConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化请求</span></span><br><span class="line">    connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">    connection.setRequestProperty(<span class="string">&quot;Charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">    <span class="comment">//connection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);</span></span><br><span class="line">    <span class="comment">//connection.setRequestProperty(&quot;referer&quot;, &quot;localhost:8080&quot;);</span></span><br><span class="line">    <span class="comment">//connection.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接提交数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(<span class="string">&quot;id=&quot;</span>).append(user.getId()).append(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">        .append(<span class="string">&quot;name=&quot;</span>).append(user.getName()).append(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">        .append(<span class="string">&quot;age=&quot;</span>).append(user.getAge()).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    connection.getOutputStream().write(u.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取返回内容</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> connection.getResponseCode();</span><br><span class="line">    <span class="keyword">if</span> (code == HttpURLConnection.HTTP_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> inputContent(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> String.valueOf(code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Apache-HttpClient"><a href="#Apache-HttpClient" class="headerlink" title="Apache HttpClient"></a>Apache HttpClient</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>GET</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/user/find/all&quot;</span>;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(get);</span><br><span class="line">    <span class="keyword">return</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testDelete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">u</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/user/delete/&#123;id&#125;&quot;</span>;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">    <span class="type">HttpDelete</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpDelete</span>(u.replace(<span class="string">&quot;&#123;id&#125;&quot;</span>, String.valueOf(id)));</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(delete);</span><br><span class="line">    <span class="keyword">return</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPost</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼接提交数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(<span class="string">&quot;id=&quot;</span>).append(user.getId()).append(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">        .append(<span class="string">&quot;name=&quot;</span>).append(user.getName()).append(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">        .append(<span class="string">&quot;age=&quot;</span>).append(user.getAge()).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/user/add&quot;</span>;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">    </span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(u);</span><br><span class="line">    entity.setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">    post.setEntity(entity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(post);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取返回内容</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">    <span class="keyword">if</span> (code == HttpStatus.SC_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OkHttp"><a href="#OkHttp" class="headerlink" title="OkHttp"></a>OkHttp</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Kotlin开发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>GET</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/user/find/all&quot;</span>;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder().url(url).build();</span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">    <span class="keyword">return</span> response.body().string();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DELETE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testDelete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">u</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/user/delete/&#123;id&#125;&quot;</span>;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(u.replace(<span class="string">&quot;&#123;id&#125;&quot;</span>, String.valueOf(id)))</span><br><span class="line">        .method(<span class="string">&quot;DELETE&quot;</span>, <span class="literal">null</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">    <span class="keyword">return</span> response.body().string();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPost</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 拼接提交数据</span></span><br><span class="line">    <span class="comment">/** 方法1：</span></span><br><span class="line"><span class="comment">        String u = new StringBuilder().append(&quot;id=&quot;).append(user.getId()).append(&quot;&amp;&quot;)</span></span><br><span class="line"><span class="comment">                .append(&quot;name=&quot;).append(user.getName()).append(&quot;&amp;&quot;)</span></span><br><span class="line"><span class="comment">                .append(&quot;age=&quot;).append(user.getAge()).toString();</span></span><br><span class="line"><span class="comment">        RequestBody requestBody = RequestBody.create(u, MediaType.parse(&quot;application/x-www-form-urlencoded&quot;));</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="comment">//方法2：</span></span><br><span class="line">    <span class="type">FormBody</span> <span class="variable">formBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FormBody</span>.Builder()</span><br><span class="line">        .add(<span class="string">&quot;id&quot;</span>, String.valueOf(user.getId()))</span><br><span class="line">        .add(<span class="string">&quot;name&quot;</span>, user.getName())</span><br><span class="line">        .add(<span class="string">&quot;age&quot;</span>, String.valueOf(user.getAge()))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼装请求</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/user/add&quot;</span>;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">        .url(url)</span><br><span class="line">        .method(<span class="string">&quot;POST&quot;</span>, formBody)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取返回内容</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> response.code();</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> String.valueOf(code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-RestTemplate"><a href="#Spring-RestTemplate" class="headerlink" title="Spring RestTemplate"></a>Spring RestTemplate</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>RestTemplate位于 org.springframework.web 包下，是Spring提供的HTTP请求包装类。默认采用JDK的HttpURLConnection来实现。除了 HttpURLConnection 之外还支持 Netty4、OkHttp 还用 HttpClient。采用那一种实现取决于实现是否存在类路径下。顺序是 HttpClient 、OkHttp 、HttpURLConnection，即如果没有添加 HttpClient 和 OkHttp 的依赖就会采用 HttpURLConnection 来实现。</p><h3 id="源码浅析"><a href="#源码浅析" class="headerlink" title="源码浅析"></a>源码浅析</h3><blockquote><p>RestTemplate 源码</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-REST%E8%B0%83%E7%94%A8/001.png"></p><p>HttpAccessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpAccessor</span> &#123;</span><br><span class="line"><span class="comment">// 默认请求工厂，可以看到是URLConnection</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">ClientHttpRequestFactory</span> <span class="variable">requestFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleClientHttpRequestFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestFactory</span><span class="params">(ClientHttpRequestFactory requestFactory)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.requestFactory = requestFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title function_">getRequestFactory</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.requestFactory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用HttpRequestFactory返回ClientHttpRequest</span></span><br><span class="line"><span class="keyword">protected</span> ClientHttpRequest <span class="title function_">createRequest</span><span class="params">(URI url, HttpMethod method)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">ClientHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> getRequestFactory().createRequest(url, method);</span><br><span class="line"><span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InterceptingHttpAccessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">InterceptingHttpAccessor</span> <span class="keyword">extends</span> <span class="title class_">HttpAccessor</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;ClientHttpRequestInterceptor&gt; interceptors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> ClientHttpRequestFactory interceptingRequestFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInterceptors</span><span class="params">(List&lt;ClientHttpRequestInterceptor&gt; interceptors)</span> &#123;</span><br><span class="line"><span class="comment">// Take getInterceptors() List as-is when passed in here</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.interceptors != interceptors) &#123;</span><br><span class="line"><span class="built_in">this</span>.interceptors.clear();</span><br><span class="line"><span class="built_in">this</span>.interceptors.addAll(interceptors);</span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="built_in">this</span>.interceptors);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;ClientHttpRequestInterceptor&gt; <span class="title function_">getInterceptors</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.interceptors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestFactory</span><span class="params">(ClientHttpRequestFactory requestFactory)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.setRequestFactory(requestFactory);</span><br><span class="line"><span class="built_in">this</span>.interceptingRequestFactory = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title function_">getRequestFactory</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;ClientHttpRequestInterceptor&gt; interceptors = getInterceptors();</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(interceptors)) &#123;</span><br><span class="line"><span class="comment">// 获取拦截器版请求工厂</span></span><br><span class="line"><span class="type">ClientHttpRequestFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptingRequestFactory;</span><br><span class="line"><span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 使用父类的请求工厂（默认URLConnection）和拥有的拦截器创建一个 拦截器版请求工厂</span></span><br><span class="line">factory = <span class="keyword">new</span> <span class="title class_">InterceptingClientHttpRequestFactory</span>(<span class="built_in">super</span>.getRequestFactory(), interceptors);</span><br><span class="line"><span class="built_in">this</span>.interceptingRequestFactory = factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getRequestFactory();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RestOperations</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RestOperations</span> &#123;</span><br><span class="line"><span class="comment">// GET</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">getForObject</span><span class="params">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">getForObject</span><span class="params">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">getForObject</span><span class="params">(URI url, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">getForEntity</span><span class="params">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">getForEntity</span><span class="params">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">getForEntity</span><span class="params">(URI url, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HEAD</span></span><br><span class="line">HttpHeaders <span class="title function_">headForHeaders</span><span class="params">(String url, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">HttpHeaders <span class="title function_">headForHeaders</span><span class="params">(String url, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">HttpHeaders <span class="title function_">headForHeaders</span><span class="params">(URI url)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">URI <span class="title function_">postForLocation</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">URI <span class="title function_">postForLocation</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">URI <span class="title function_">postForLocation</span><span class="params">(URI url, <span class="meta">@Nullable</span> Object request)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">postForObject</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class="line"><span class="params">Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">postForObject</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class="line"><span class="params">Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">postForObject</span><span class="params">(URI url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">postForEntity</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class="line"><span class="params">Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">postForEntity</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class="line"><span class="params">Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">postForEntity</span><span class="params">(URI url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PUT</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">put</span><span class="params">(URI url, <span class="meta">@Nullable</span> Object request)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PATCH</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">patchForObject</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">patchForObject</span><span class="params">(String url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class="line"><span class="params">Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">patchForObject</span><span class="params">(URI url, <span class="meta">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String url, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String url, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(URI url)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OPTIONS</span></span><br><span class="line">Set&lt;HttpMethod&gt; <span class="title function_">optionsForAllow</span><span class="params">(String url, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">Set&lt;HttpMethod&gt; <span class="title function_">optionsForAllow</span><span class="params">(String url, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">Set&lt;HttpMethod&gt; <span class="title function_">optionsForAllow</span><span class="params">(URI url)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exchange</span></span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(String url, HttpMethod method, <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,</span></span><br><span class="line"><span class="params">Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(String url, HttpMethod method, <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,</span></span><br><span class="line"><span class="params">Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(URI url, HttpMethod method, <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,</span></span><br><span class="line"><span class="params">Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(String url,HttpMethod method, <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,</span></span><br><span class="line"><span class="params">ParameterizedTypeReference&lt;T&gt; responseType, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(String url, HttpMethod method, <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,</span></span><br><span class="line"><span class="params">ParameterizedTypeReference&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(URI url, HttpMethod method, <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,</span></span><br><span class="line"><span class="params">ParameterizedTypeReference&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(RequestEntity&lt;?&gt; requestEntity, Class&lt;T&gt; responseType)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line">&lt;T&gt; ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(RequestEntity&lt;?&gt; requestEntity, ParameterizedTypeReference&lt;T&gt; responseType)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// General execution</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">execute</span><span class="params">(String url, HttpMethod method, <span class="meta">@Nullable</span> RequestCallback requestCallback,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> ResponseExtractor&lt;T&gt; responseExtractor, Object... uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">execute</span><span class="params">(String url, HttpMethod method, <span class="meta">@Nullable</span> RequestCallback requestCallback,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> ResponseExtractor&lt;T&gt; responseExtractor, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class="line"><span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">execute</span><span class="params">(URI url, HttpMethod method, <span class="meta">@Nullable</span> RequestCallback requestCallback,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> ResponseExtractor&lt;T&gt; responseExtractor)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何使用 RestTemplate ？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplateBuilder builder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>点进 RestTemplateBuilder</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建RestTemplate</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> build(RestTemplate.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">RestTemplate</span>&gt; T <span class="title function_">build</span><span class="params">(Class&lt;T&gt; restTemplateClass)</span> &#123;</span><br><span class="line"><span class="comment">// 反射创建RestTemplate实例</span></span><br><span class="line">    <span class="keyword">return</span> configure(BeanUtils.instantiateClass(restTemplateClass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">RestTemplate</span>&gt; T <span class="title function_">configure</span><span class="params">(T restTemplate)</span> &#123;</span><br><span class="line"><span class="comment">// 设置RestTemplate的请求工厂</span></span><br><span class="line">    configureRequestFactory(restTemplate);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureRequestFactory</span><span class="params">(RestTemplate restTemplate)</span> &#123;</span><br><span class="line"><span class="type">ClientHttpRequestFactory</span> <span class="variable">requestFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 使用构造者中的请求工厂</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.requestFactorySupplier != <span class="literal">null</span>) &#123;</span><br><span class="line">requestFactory = <span class="built_in">this</span>.requestFactorySupplier.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.detectRequestFactory) &#123;</span><br><span class="line"><span class="comment">// 到类路径中加载</span></span><br><span class="line">requestFactory = <span class="keyword">new</span> <span class="title class_">ClientHttpRequestFactorySupplier</span>().get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>点进 ClientHttpRequestFactorySupplier</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; REQUEST_FACTORY_CANDIDATES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 使用LinkedHashMap设置加载优先级别</span></span><br><span class="line">Map&lt;String, String&gt; candidates = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">candidates.put(<span class="string">&quot;org.apache.http.client.HttpClient&quot;</span>,</span><br><span class="line"><span class="string">&quot;org.springframework.http.client.HttpComponentsClientHttpRequestFactory&quot;</span>);</span><br><span class="line">candidates.put(<span class="string">&quot;okhttp3.OkHttpClient&quot;</span>,</span><br><span class="line"><span class="string">&quot;org.springframework.http.client.OkHttp3ClientHttpRequestFactory&quot;</span>);</span><br><span class="line">REQUEST_FACTORY_CANDIDATES = Collections.unmodifiableMap(candidates);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; candidate : REQUEST_FACTORY_CANDIDATES</span><br><span class="line">.entrySet()) &#123;</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> getClass().getClassLoader();</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(candidate.getKey(), classLoader)) &#123;</span><br><span class="line">Class&lt;?&gt; factoryClass = ClassUtils.resolveClassName(candidate.getValue(),</span><br><span class="line">classLoader);</span><br><span class="line"><span class="keyword">return</span> (ClientHttpRequestFactory) BeanUtils</span><br><span class="line">.instantiateClass(factoryClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果类路径中没有HttpClient和OkHttp则使用URLConnection</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleClientHttpRequestFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>Feign本来是Spring Cloud Netflix开源项目的一部分，后来从项目中独立了出来成为一个通用的Java类库并改名为OpenFeign。</p><p>OpenFeign是一个<code>声明式</code>、<code>模板化</code>的HTTP客户端抽象，支持Feign、JAX-RS、SpringMVC 等风格注解，而且内部集成 Ribbon 和 Hystrix。</p><p>OpenFeign 和 RestTemplate 一样，默认采用 URLConnection 进行HTTP通信，同时也支持 Apache HttpClient 和 OkHttp。</p><blockquote><p>OpenFeign 架构图</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-REST%E8%B0%83%E7%94%A8/005.png"></p><p>注：使用 OpenFeign 时可以通过实现 RequestInterceptor 接口来自定义拦截器。譬如可用于实现统一请求头设置。</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123; </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><p>FeignClient定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;MSA-EUREKA-PROVIDER-USER&quot;)</span><span class="comment">// 服务名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意：在SpringCloud 2.1.x版本，提供了一个叫@SpringQueryMap的注解用于GET方法直接传递对象实例（其实就是转为Map后拼装到成URL参数，从这点不难看出为什么不能用在POST请求）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/find/all&quot;)</span></span><br><span class="line">    List <span class="title function_">selectAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多参数提交方法1</span></span><br><span class="line">    <span class="comment">// Feign默认将POJO转为Json并使用Content-Type：application/json进行参数传输，这时服务提供方需要使用@RequestBody来接收</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    User <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多参数提交方法2</span></span><br><span class="line">    <span class="comment">//@PostMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="comment">//User addUser(@RequestParam Long id,</span></span><br><span class="line">    <span class="comment">//              @RequestParam String name,</span></span><br><span class="line">    <span class="comment">//              @RequestParam int age);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多参数提交方法3</span></span><br><span class="line">    <span class="comment">//@PostMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="comment">//User addUser(@RequestParam Map&lt;String, Object&gt; user);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用Feign</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启OpenFeign</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaEurekaComsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> SpringApplication.run(MsaEurekaComsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/msg&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignClient userFeignClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userFeignClient.deleteUserById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> userFeignClient.selectAllUser();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多参数提交方法1</span></span><br><span class="line">        <span class="comment">//return ResponseEntity.ok(userFeignClient.addUser(user));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多参数提交方法2</span></span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.ok(userFeignClient.addUser(user.getId(), user.getName(), user.getAge()));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 多参数提交方法3</span></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;, user.getId());</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;, user.getName());</span></span><br><span class="line"><span class="comment">//        map.put(&quot;age&quot;, user.getAge());</span></span><br><span class="line"><span class="comment">//        return ResponseEntity.ok(userFeignClient.addUser3(map));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码浅析-1"><a href="#源码浅析-1" class="headerlink" title="源码浅析"></a>源码浅析</h3><h4 id="请求是如何被封装的？"><a href="#请求是如何被封装的？" class="headerlink" title="请求是如何被封装的？"></a>请求是如何被封装的？</h4><p>案例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;MSA-EUREKA-PROVIDER-USER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发请求，执行代理 ReflectiveFeign#invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectisveFeign</span> <span class="keyword">extends</span> <span class="title class_">Feign</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> dispatch.get(method).invoke(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SynchronousMethodHandler#invoke(argv)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RequestTemplate.Factory buildTemplateFromArgs;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 生成请求模板</span></span><br><span class="line">    <span class="type">RequestTemplate</span> <span class="variable">template</span> <span class="operator">=</span> buildTemplateFromArgs.create(argv);</span><br><span class="line">    <span class="type">Retryer</span> <span class="variable">retryer</span> <span class="operator">=</span> <span class="built_in">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> executeAndDecode(template);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">            retryer.continueOrPropagate(e);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SynchronousMethodHandler#executeAndDecode(template)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object <span class="title function_">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">// 1. 执行拦截器</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> targetRequest(template);</span><br><span class="line">    <span class="comment">// 2. 发出请求</span></span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.execute(request, options);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SynchronousMethodHandler#targetRequest(template)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Request <span class="title function_">targetRequest</span><span class="params">(RequestTemplate template)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (RequestInterceptor interceptor : requestInterceptors) &#123;</span><br><span class="line">        interceptor.apply(template);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target.apply(template);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认请求Client：Default#execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> convertAndSend(request, options);</span><br><span class="line">    <span class="keyword">return</span> convertResponse(connection, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ribbon请求Client：LoadBalancerFeignClient#execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">asUri</span> <span class="operator">=</span> URI.create(request.url());</span><br><span class="line">        <span class="type">String</span> <span class="variable">clientName</span> <span class="operator">=</span> asUri.getHost();</span><br><span class="line">        <span class="type">URI</span> <span class="variable">uriWithoutHost</span> <span class="operator">=</span> cleanUrl(request.url(), clientName);</span><br><span class="line">        <span class="comment">// 包装成负载均衡格式的请求</span></span><br><span class="line">        FeignLoadBalancer.<span class="type">RibbonRequest</span> <span class="variable">ribbonRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FeignLoadBalancer</span>.RibbonRequest(<span class="built_in">this</span>.delegate, request, uriWithoutHost);</span><br><span class="line">        <span class="type">IClientConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> getClientConfig(options, clientName);</span><br><span class="line">        <span class="comment">// 通过负载均衡方式执行请求</span></span><br><span class="line">        <span class="keyword">return</span> lbClient(clientName).executeWithLoadBalancer(ribbonRequest, requestConfig).toResponse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何进行负载均衡请求？"><a href="#如何进行负载均衡请求？" class="headerlink" title="如何进行负载均衡请求？"></a>如何进行负载均衡请求？</h4><p>进入FeignRibbonClientAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Import(&#123; HttpClientFeignLoadBalancedConfiguration.class,</span></span><br><span class="line"><span class="meta">OkHttpFeignLoadBalancedConfiguration.class,</span></span><br><span class="line"><span class="meta">DefaultFeignLoadBalancedConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignRibbonClientAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure><ul><li>默认情况下只有 DefaultFeignLoadBalancedConfiguration 满足自动配置的条件</li></ul><p>进入DefaultFeignLoadBalancedConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultFeignLoadBalancedConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 将一个负载均衡Client添加到容器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> Client <span class="title function_">feignClient</span><span class="params">(CachingSpringLoadBalancerFactory cachingFactory,</span></span><br><span class="line"><span class="params">SpringClientFactory clientFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// Client.Default底层用的是HTTPURLConnection</span></span><br><span class="line">        <span class="comment">// 可以看出这里其实用的是策略模式，即为Client添加负载均衡能力</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoadBalancerFeignClient</span>(<span class="keyword">new</span> <span class="title class_">Client</span>.Default(<span class="literal">null</span>, <span class="literal">null</span>), cachingFactory,</span><br><span class="line">clientFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoadBalancerFeignClient#execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">asUri</span> <span class="operator">=</span> URI.create(request.url());</span><br><span class="line">        <span class="type">String</span> <span class="variable">clientName</span> <span class="operator">=</span> asUri.getHost();</span><br><span class="line">        <span class="type">URI</span> <span class="variable">uriWithoutHost</span> <span class="operator">=</span> cleanUrl(request.url(), clientName);</span><br><span class="line">        <span class="comment">// 包装成负载均衡格式的请求</span></span><br><span class="line">        FeignLoadBalancer.<span class="type">RibbonRequest</span> <span class="variable">ribbonRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FeignLoadBalancer</span>.RibbonRequest(<span class="built_in">this</span>.delegate, request, uriWithoutHost);</span><br><span class="line">        <span class="type">IClientConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> getClientConfig(options, clientName);</span><br><span class="line">        <span class="comment">// 通过负载均衡方式执行请求</span></span><br><span class="line">        <span class="keyword">return</span> lbClient(clientName).executeWithLoadBalancer(ribbonRequest, requestConfig).toResponse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractLoadBalancerAwareClient#executeWithLoadBalancer(request, requestConfig)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">executeWithLoadBalancer</span><span class="params">(<span class="keyword">final</span> S request, <span class="keyword">final</span> IClientConfig requestConfig)</span> </span><br><span class="line">    <span class="keyword">throws</span> ClientException &#123;</span><br><span class="line">    <span class="comment">// 构建命令（命令模式，将请求封装为命令让其做到可传递和修改）</span></span><br><span class="line">    LoadBalancerCommand&lt;T&gt; command </span><br><span class="line">        = buildLoadBalancerCommand(request, requestConfig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 提交请求命令</span></span><br><span class="line">        <span class="comment">// 内部会通过RxJava反应式编程发送和响应请求</span></span><br><span class="line">        <span class="keyword">return</span> command.submit(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ServerOperation</span>&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Observable&lt;T&gt; <span class="title function_">call</span><span class="params">(Server server)</span> &#123;</span><br><span class="line">                    <span class="type">URI</span> <span class="variable">finalUri</span> <span class="operator">=</span> reconstructURIWithServer(server, request.getUri());</span><br><span class="line">                    <span class="type">S</span> <span class="variable">requestForServer</span> <span class="operator">=</span> (S) request.replaceUri(finalUri);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// RxJava反应式编程API</span></span><br><span class="line">                        <span class="comment">// 执行请求并返回一个可观察的Observable对象实例</span></span><br><span class="line">                        <span class="keyword">return</span> Observable.just(AbstractLoadBalancerAwareClient.<span class="built_in">this</span>.execute(requestForServer, requestConfig));</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .toBlocking()</span><br><span class="line">            .single();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title function_">submit</span><span class="params">(<span class="keyword">final</span> ServerOperation&lt;T&gt; operation)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ExecutionInfoContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExecutionInfoContext</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listenerInvoker != <span class="literal">null</span>) &#123;</span><br><span class="line">        listenerInvoker.onExecutionStart();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 返回一个包含（已经经过负载均衡）Server的可观察对象Observable</span></span><br><span class="line">    Observable&lt;T&gt; o = (server == <span class="literal">null</span> ? selectServer() : Observable.just(server))</span><br><span class="line">        .concatMap(<span class="keyword">new</span> <span class="title class_">Func1</span>&lt;Server, Observable&lt;T&gt;&gt;() &#123; <span class="comment">// 1. 根据Server返回一个Observable</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Observable&lt;T&gt; <span class="title function_">call</span><span class="params">(Server server)</span> &#123;</span><br><span class="line">                context.setServer(server);</span><br><span class="line">                <span class="comment">// 返回当前Server的状态</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">ServerStats</span> <span class="variable">stats</span> <span class="operator">=</span> loadBalancerContext.getServerStats(server);</span><br><span class="line"></span><br><span class="line">                Observable&lt;T&gt; o = Observable</span><br><span class="line">                    .just(server)</span><br><span class="line">                    .concatMap(<span class="keyword">new</span> <span class="title class_">Func1</span>&lt;Server, Observable&lt;T&gt;&gt;() &#123; <span class="comment">// 2. 根据Server返回一个Observable</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Observable&lt;T&gt; <span class="title function_">call</span><span class="params">(<span class="keyword">final</span> Server server)</span> &#123;</span><br><span class="line">                            context.incAttemptCount();</span><br><span class="line">                            loadBalancerContext.noteOpenConnection(stats);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (listenerInvoker != <span class="literal">null</span>) &#123;</span><br><span class="line">                                listenerInvoker.onStartWithServer(context.toExecutionInfo());</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">final</span> <span class="type">Stopwatch</span> <span class="variable">tracer</span> <span class="operator">=</span> loadBalancerContext.getExecuteTracer().start();</span><br><span class="line">                            <span class="comment">// 执行请求</span></span><br><span class="line">                            <span class="keyword">return</span> operation.call(server).doOnEach(<span class="keyword">new</span> <span class="title class_">Observer</span>&lt;T&gt;() &#123;</span><br><span class="line">                                <span class="keyword">private</span> T entity;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompleted</span><span class="params">()</span> &#123; <span class="comment">// 数据传输完后回调</span></span><br><span class="line">                                    <span class="comment">//...</span></span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123; <span class="comment">// 发生错误时回调</span></span><br><span class="line">                                    <span class="comment">//...</span></span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(T entity)</span> &#123; <span class="comment">// 每次有数据来都会回调</span></span><br><span class="line">                                    <span class="built_in">this</span>.entity = entity;</span><br><span class="line">                                    <span class="keyword">if</span> (listenerInvoker != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        listenerInvoker.onExecutionSuccess(entity, context.toExecutionInfo());</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;                            </span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// o.onErrorResumeNext...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoadBalancerCommand#selectServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Observable&lt;Server&gt; <span class="title function_">selectServer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> <span class="title class_">OnSubscribe</span>&lt;Server&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(Subscriber&lt;? <span class="built_in">super</span> Server&gt; next)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 返回经过负载均衡后的Server实例</span></span><br><span class="line">                <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> loadBalancerContext.getServerFromLoadBalancer(loadBalancerURI, loadBalancerKey);  </span><br><span class="line">                <span class="comment">// 回调订阅者</span></span><br><span class="line">                next.onNext(server);</span><br><span class="line">                <span class="comment">// 完成操作</span></span><br><span class="line">                next.onCompleted();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                next.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractLoadBalancerAwareClient.this.execute相当于FeignLoadBalancer#execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RibbonResponse <span class="title function_">execute</span><span class="params">(RibbonRequest request, IClientConfig configOverride)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Request.Options options;</span><br><span class="line">    <span class="keyword">if</span> (configOverride != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">RibbonProperties</span> <span class="variable">override</span> <span class="operator">=</span> RibbonProperties.from(configOverride);</span><br><span class="line">        options = <span class="keyword">new</span> <span class="title class_">Request</span>.Options(override.connectTimeout(<span class="built_in">this</span>.connectTimeout),</span><br><span class="line">                                      override.readTimeout(<span class="built_in">this</span>.readTimeout));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        options = <span class="keyword">new</span> <span class="title class_">Request</span>.Options(<span class="built_in">this</span>.connectTimeout, <span class="built_in">this</span>.readTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发出请求</span></span><br><span class="line">    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.client().execute(request.toRequest(), options);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RibbonResponse</span>(request.getUri(), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="全局配置和局部配置"><a href="#全局配置和局部配置" class="headerlink" title="全局配置和局部配置"></a>全局配置和局部配置</h4><p>全局和局部配置是父子配置关系，优先局部配置</p><blockquote><p>全局配置</p></blockquote><p>注解方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = xxx.class)</span></span><br></pre></td></tr></table></figure><p>配置文件方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">default-config:</span> <span class="comment"># 默认配置</span></span><br><span class="line">      <span class="attr">connectionTimeout:</span> <span class="number">5000</span></span><br><span class="line">      <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">      <span class="attr">loggerLevel:</span> <span class="string">FULL</span></span><br></pre></td></tr></table></figure><blockquote><p>局部配置</p></blockquote><p>注解方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;服务的名字&quot;, configuration = xxx.class)</span></span><br></pre></td></tr></table></figure><p>配置文件方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="string">服务的名字:</span> </span><br><span class="line">      <span class="attr">connectionTimeout:</span> <span class="number">5000</span></span><br><span class="line">      <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">      <span class="attr">loggerLevel:</span> <span class="string">FULL</span></span><br><span class="line">      <span class="attr">retryer:</span> <span class="string">xxx.xxx.XxxRetryer</span></span><br><span class="line">      <span class="attr">requestInterceptors:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">xxx.xxx.Xxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xxx.xxx.Xxx2</span></span><br></pre></td></tr></table></figure><h4 id="开启请求解压缩"><a href="#开启请求解压缩" class="headerlink" title="开启请求解压缩"></a>开启请求解压缩</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 针对以下媒体类型</span></span><br><span class="line">      <span class="attr">mime-types:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">text/html</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">application/json</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">multipart/form-data</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span></span><br></pre></td></tr></table></figure><h4 id="设置日志等级"><a href="#设置日志等级" class="headerlink" title="设置日志等级"></a>设置日志等级</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Object <span class="title function_">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">        logger.logRequest(metadata.configKey(), logLevel, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response = client.execute(request, options);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">            logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime(start));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">elapsedTime</span> <span class="operator">=</span> TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">            response =</span><br><span class="line">                logger.logAndRebufferResponse(metadata.configKey(), logLevel, response, elapsedTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">            logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上是 SynchronousMethodHandler 的一段代码，可以看到在 Feign 中采用了<code>功能开关</code>方式来控制日志的输出</li><li>虽然Feign只输出DEBUG级别的日志，但也可通过调节日志模式（Level）来获取特定格式日志内容：<ul><li>NONE：<strong>不记录</strong>任何日志（默认级别）</li><li>BASIC：记录<strong>请求方法</strong>、<strong>URL</strong>、<strong>响应状态码</strong>以及<strong>执行的时间</strong></li><li>HEADERS：BASIC + header 信息</li><li>FULL：记录<strong>请求</strong>和<strong>响应</strong>的所有信息</li></ul></li></ul><p>配置案例如下：</p><ol><li>替换默认的Level实例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignLogConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">loggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.HEADERS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将配置应用到全局或局部</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;MSA-EUREKA-PROVIDER-USER&quot;, configuration = RestConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>将FeignClient接口的日志级别设置为DEBUG</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">wiki.td.msaeurekacomsumer01.feign.UserFeignClient:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;MSA-EUREKA-PROVIDER-USER&quot;, </span></span><br><span class="line"><span class="meta">        configuration =UserFeignClient.MultipartSupportConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">    String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MultipartSupportConfig</span> &#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Encoder <span class="title function_">encoder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringFormEncoder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Ribbon配置"><a href="#Ribbon配置" class="headerlink" title="Ribbon配置"></a>Ribbon配置</h4><p>因为Feign默认集成了Ribbon，所以可以直接使用Ribbon的相关属性配置。</p><p>但Feign也提供了局部配置Ribbon的方法，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="string">服务的名字:</span></span><br><span class="line">      <span class="attr">ribbo.connectionTimeout:</span> <span class="number">5000</span></span><br><span class="line">      <span class="attr">ribbo.readTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h4 id="启用Apache-HttpClient或OkHttp"><a href="#启用Apache-HttpClient或OkHttp" class="headerlink" title="启用Apache HttpClient或OkHttp"></a>启用Apache HttpClient或OkHttp</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://square.github.io/okhttp/">OkHttp</a></li><li><a href="https://github.com/OpenFeign/feign">OpenFeign</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/1253">Suggest supporting POJO as request parameter #1253</a></li><li><a href="https://stackoverflow.com/questions/49823158/differences-between-netflix-feign-openfeign">Differences between netflix.feign &amp; openfeign</a></li><li>《SpringCloud与Docker 微服务架构实战》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务开发技术篇-客户端负载均衡</title>
      <link href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="什么是客户端负载均衡"><a href="#什么是客户端负载均衡" class="headerlink" title="什么是客户端负载均衡?"></a>什么是客户端负载均衡?</h2><p>看到负载均衡很多人和我一样可能首先想到的是Nginx。</p><p>Nginx是一个Web服务器，且可以提供反向代理、流服务器、动静分离等功能服务，而Nginx所提供的这种负载均衡方式可以理解为<strong>后端负载均衡</strong>，即客户端请求到来后Nginx会以反向代理的身份将请求进行负载均衡后分派到上游服务的过程。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/001.png"></p><p>而<strong>客户端负载均衡</strong>，指的是消费者方自己对服务列表进行负载均衡调用。需要注意的是客户端负载均衡和后端负载均衡是互不冲突的。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/002.png"></p><h2 id="常见负载均衡策略理解"><a href="#常见负载均衡策略理解" class="headerlink" title="常见负载均衡策略理解"></a>常见负载均衡策略理解</h2><blockquote><p>以下代码仅用来理解</p></blockquote><h3 id="随机算法"><a href="#随机算法" class="headerlink" title="随机算法"></a>随机算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; userServices = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        random = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">// 服务列表</span></span><br><span class="line">        userServices = List.of(<span class="string">&quot;192.168.31.100&quot;</span>, <span class="string">&quot;192.168.31.102&quot;</span>, <span class="string">&quot;192.168.31.103&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">50</span> ; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(userServices.size());</span><br><span class="line">            <span class="comment">// 随机在服务列表中选择</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userService</span> <span class="operator">=</span> userServices.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权重随机算法"><a href="#权重随机算法" class="headerlink" title="权重随机算法"></a>权重随机算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; userServices = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; weightMap = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        random = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置权重（权重大的话被调用的几率就大）</span></span><br><span class="line">        weightMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        weightMap.put(<span class="string">&quot;192.168.31.100&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        weightMap.put(<span class="string">&quot;192.168.31.102&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        weightMap.put(<span class="string">&quot;192.168.31.103&quot;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于存放加权后的服务列表</span></span><br><span class="line">        userServices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = weightMap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; next = iterator.next();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> next.getValue();</span><br><span class="line">            <span class="keyword">if</span>(count &lt;= <span class="number">0</span>) count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123; <span class="comment">// 加权操作</span></span><br><span class="line">                userServices.add(next.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(userServices.size());</span><br><span class="line">            <span class="comment">// 加权随机调用</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">userService</span> <span class="operator">=</span> userServices.get(index);</span><br><span class="line">            System.out.println(<span class="string">&quot;负载均衡调用：&quot;</span> + userService);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用结果：</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.102</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="轮询算法"><a href="#轮询算法" class="headerlink" title="轮询算法"></a>轮询算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; userServices = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        userServices = List.of(<span class="string">&quot;192.168.31.100&quot;</span>, <span class="string">&quot;192.168.31.102&quot;</span>, <span class="string">&quot;192.168.31.103&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userService</span> <span class="operator">=</span> userServices.get(position++);</span><br><span class="line">            <span class="keyword">if</span> (position &gt;= userServices.size()) &#123;</span><br><span class="line">                position = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;负载均衡调用：&quot;</span> + userService);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用结果：</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.102</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.102</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.102</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权重轮询算法"><a href="#权重轮询算法" class="headerlink" title="权重轮询算法"></a>权重轮询算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; userServices = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; weightMap = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置服务器的权重</span></span><br><span class="line">        weightMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        weightMap.put(<span class="string">&quot;192.168.31.100&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        weightMap.put(<span class="string">&quot;192.168.31.102&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        weightMap.put(<span class="string">&quot;192.168.31.103&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 加权后的服务列表</span></span><br><span class="line">        userServices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = weightMap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; next = iterator.next();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> next.getValue();</span><br><span class="line">            <span class="keyword">if</span>(count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                userServices.add(next.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userService</span> <span class="operator">=</span> userServices.get(position++);</span><br><span class="line">            <span class="keyword">if</span> (position &gt;= userServices.size()) &#123;</span><br><span class="line">                position = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;负载均衡调用：&quot;</span> + userService);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用结果：</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.102</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.103</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.100</span></span><br><span class="line"><span class="comment">             负载均衡调用：192.168.31.102</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最少连接数算法"><a href="#最少连接数算法" class="headerlink" title="最少连接数算法"></a>最少连接数算法</h3><p>Connect类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lombok</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Connect</span> &#123;  <span class="comment">// 连接对象</span></span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> AtomicInteger; <span class="comment">// 连接数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Connect</span><span class="params">(String serviceName, String ip)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serviceName = serviceName;</span><br><span class="line">        <span class="built_in">this</span>.ip = ip;</span><br><span class="line">        <span class="built_in">this</span>.count = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Connect&gt; connects = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(List&lt;Connect&gt; connects)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.connects = connects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connect</span> <span class="variable">connect</span> <span class="operator">=</span> getConnect();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟处理业务时间</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放连接</span></span><br><span class="line">        releaseConnect(connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseConnect</span><span class="params">(Connect conn)</span> &#123;</span><br><span class="line">        conn.getCount().decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Connect <span class="title function_">getConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取连接前先按照连接次数排序（冒泡算法），找出最少连接的服务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; connects.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; connects.size()-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="type">Connect</span> <span class="variable">connect</span> <span class="operator">=</span> connects.get(j);</span><br><span class="line">                <span class="type">Connect</span> <span class="variable">connect2</span> <span class="operator">=</span> connects.get(j+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (connect.getCount().get() &gt; connect2.getCount().get()) &#123;</span><br><span class="line">                    connects.set(j, connect2);</span><br><span class="line">                    connects.set(j + <span class="number">1</span>, connect);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Connect</span> <span class="variable">conn</span> <span class="operator">=</span> connects.get(<span class="number">0</span>);</span><br><span class="line">        conn.getCount().incrementAndGet();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 服务列表</span></span><br><span class="line">        List&lt;Connect&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Connect</span>(<span class="string">&quot;user-service&quot;</span>, <span class="string">&quot;192.168.31.101&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Connect</span>(<span class="string">&quot;user-service&quot;</span>, <span class="string">&quot;192.168.31.102&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Connect</span>(<span class="string">&quot;user-service&quot;</span>, <span class="string">&quot;192.168.31.103&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 50个请求</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="type">T5</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T5</span>(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">50</span> ; i++) &#123;</span><br><span class="line">            service.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IP哈希取模算法"><a href="#IP哈希取模算法" class="headerlink" title="IP哈希取模算法"></a>IP哈希取模算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] userServices; <span class="comment">// 服务列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] clients; <span class="comment">// 客户端列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        clients = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;12.4.55.13&quot;</span>, <span class="string">&quot;192.168.31.102&quot;</span>, <span class="string">&quot;16.6.3.2&quot;</span>, <span class="string">&quot;123.454.33.77&quot;</span>, <span class="string">&quot;2.2.2.2&quot;</span>&#125;;</span><br><span class="line">        userServices = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;192.168.31.100&quot;</span>, <span class="string">&quot;192.168.31.102&quot;</span>, <span class="string">&quot;192.168.31.103&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">100</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String client : clients) &#123;</span><br><span class="line">                <span class="comment">// ip哈希取模</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> client.hashCode() % userServices.length;</span><br><span class="line">              <span class="comment">// 获取服务</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">server</span> <span class="operator">=</span> userServices[index]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简易版一致性哈希</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client 客户端key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceNode 服务列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getService</span><span class="params">(String client, String[] serviceNode)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预先将服务节点固定在哈希环上（这里使用TreeMap来实现哈希环）</span></span><br><span class="line">        TreeMap&lt;Integer, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; serviceNode.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">node</span> <span class="operator">=</span> serviceNode[i];</span><br><span class="line">            <span class="comment">// 加大间隔，模拟让节点更加离散</span></span><br><span class="line">            treeMap.put(node.hashCode() * (i+<span class="number">1</span>), node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取等于或大于 client.hashCode() 的服务节点</span></span><br><span class="line">        SortedMap&lt;Integer, String&gt; sm = treeMap.tailMap(client.hashCode());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> treeMap.get(sm.firstKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</span><br><span class="line">            <span class="comment">// 如果没找到则返回第一个</span></span><br><span class="line">            <span class="keyword">return</span> treeMap.get(treeMap.firstKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        String[] clients = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;33.33.33.33&quot;</span>, <span class="string">&quot;66.66.66.66&quot;</span>, <span class="string">&quot;123.123.123.123&quot;</span>&#125;;</span><br><span class="line">        String[] userServices = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;192.168.31.100&quot;</span>,</span><br><span class="line">                <span class="string">&quot;192.168.31.102&quot;</span>,</span><br><span class="line">                <span class="string">&quot;192.168.31.103&quot;</span>,</span><br><span class="line">                <span class="string">&quot;12.4.55.13&quot;</span>,</span><br><span class="line">                <span class="string">&quot;192.168.31.102&quot;</span>,</span><br><span class="line">                <span class="string">&quot;16.6.3.2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;123.454.33.77&quot;</span>,</span><br><span class="line">                <span class="string">&quot;2.2.2.2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟每个用户分别调用3次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String client : clients) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">service</span> <span class="operator">=</span> getService(client, userServices);</span><br><span class="line">                System.out.println(service);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用结果：</span></span><br><span class="line"><span class="comment">             192.168.31.103</span></span><br><span class="line"><span class="comment">             192.168.31.102</span></span><br><span class="line"><span class="comment">             16.6.3.2</span></span><br><span class="line"><span class="comment">             192.168.31.103</span></span><br><span class="line"><span class="comment">             192.168.31.102</span></span><br><span class="line"><span class="comment">             16.6.3.2</span></span><br><span class="line"><span class="comment">             192.168.31.103</span></span><br><span class="line"><span class="comment">             192.168.31.102</span></span><br><span class="line"><span class="comment">             16.6.3.2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Google Guava 中有个 Hashing 类也提供了一致性哈希的实现，使用也十分简单</li></ul><h2 id="Netflix-Ribbon"><a href="#Netflix-Ribbon" class="headerlink" title="Netflix Ribbon"></a>Netflix Ribbon</h2><p>Ribbon是Netflix开源的客户端负载均衡器，亦是 SpringCloud 目前默认的客户端负载均衡器。</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><blockquote><p>依赖（Eureka和Consul默认导入）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringnCloud Netflix Eureka Client --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Eureka已经依赖了ribbon --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用ribbon</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplateBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 开启客户端负载均衡（服务发现）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="了解负载均衡器"><a href="#了解负载均衡器" class="headerlink" title="了解负载均衡器"></a>了解负载均衡器</h3><p>负载均衡器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILoadBalancer</span> &#123;</span><br><span class="line"><span class="comment">// 添加服务（com.netflix.loadbalancer.Server）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addServers</span><span class="params">(List&lt;Server&gt; newServers)</span>;</span><br><span class="line"><span class="comment">// 获取负载均衡后的服务</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">chooseServer</span><span class="params">(Object key)</span>;</span><br><span class="line"><span class="comment">// 通知服务已失效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markServerDown</span><span class="params">(Server server)</span>;</span><br><span class="line"><span class="comment">// 获取健康的服务列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getReachableServers</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 获取所有服务列表</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getAllServers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="微服务开发技术篇-客户端负载均衡/007.png" style="zoom:50%;" /><p>AbstractLoadBalancer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractLoadBalancer</span> <span class="keyword">implements</span> <span class="title class_">ILoadBalancer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ServerGroup</span>&#123;</span><br><span class="line">        ALL, <span class="comment">// 所有服务</span></span><br><span class="line">        STATUS_UP, <span class="comment">// 健康服务</span></span><br><span class="line">        STATUS_NOT_UP <span class="comment">// 没有启动的服务</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取服务列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;Server&gt; <span class="title function_">getServerList</span><span class="params">(ServerGroup serverGroup)</span>;</span><br><span class="line">    <span class="comment">// 获取负载均衡统计</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> LoadBalancerStats <span class="title function_">getLoadBalancerStats</span><span class="params">()</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BaseLoadBalancer：负载均衡器基础实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseLoadBalancer</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancer</span> &#123;</span><br><span class="line">    <span class="comment">// 默认负载均衡策略为：RoundRobinRule</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IRule</span> <span class="variable">DEFAULT_RULE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoundRobinRule</span>();</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">IRule</span> <span class="variable">rule</span> <span class="operator">=</span> DEFAULT_RULE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 所有服务</span></span><br><span class="line">    <span class="meta">@Monitor(name = PREFIX + &quot;AllServerList&quot;, type = DataSourceType.INFORMATIONAL)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> List&lt;Server&gt; allServerList = Collections</span><br><span class="line">            .synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Server&gt;());</span><br><span class="line">    <span class="comment">// 健康服务</span></span><br><span class="line">    <span class="meta">@Monitor(name = PREFIX + &quot;UpServerList&quot;, type = DataSourceType.INFORMATIONAL)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> List&lt;Server&gt; upServerList = Collections</span><br><span class="line">            .synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Server&gt;());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_NAME</span> <span class="operator">=</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseLoadBalancer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = DEFAULT_NAME;</span><br><span class="line">        <span class="built_in">this</span>.ping = <span class="literal">null</span>;</span><br><span class="line">        setRule(DEFAULT_RULE);</span><br><span class="line">        setupPingTask();</span><br><span class="line">        lbStats = <span class="keyword">new</span> <span class="title class_">LoadBalancerStats</span>(DEFAULT_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置一个用来检测服务是否可用的Ping任务</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setupPingTask</span><span class="params">()</span> &#123;</span><br><span class="line">        lbTimer.schedule(<span class="keyword">new</span> <span class="title class_">PingTask</span>(), <span class="number">0</span>, pingIntervalSeconds * <span class="number">1000</span>); <span class="comment">// 默认每 10s Ping一次</span></span><br><span class="line">        forceQuickPing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">PingTask</span> <span class="keyword">extends</span> <span class="title class_">TimerTask</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Pinger</span>(pingStrategy).runPinger();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据默认策略返回负载均衡后的Server ID</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="type">Server</span> <span class="variable">svr</span> <span class="operator">=</span> rule.choose(key);</span><br><span class="line">        <span class="keyword">return</span> ((svr == <span class="literal">null</span>) ? <span class="literal">null</span> : svr.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据默认策略返回负载均衡后的Server</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">chooseServer</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (counter == <span class="literal">null</span>) &#123;</span><br><span class="line">           counter = createCounter();</span><br><span class="line">       &#125;</span><br><span class="line">       counter.increment();</span><br><span class="line">       <span class="keyword">return</span> rule.choose(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将Server添加到 allServerList 和 upServerList</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addServer</span><span class="params">(Server newServer)</span> &#123;</span><br><span class="line">        ArrayList&lt;Server&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Server&gt;();</span><br><span class="line">        newList.addAll(allServerList);</span><br><span class="line">        newList.add(newServer);</span><br><span class="line">        setServersList(newList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DynamicServerListLoadBalancer</p><ul><li>继承自BaseLoadBalancer</li><li>支持运行期间动态更新服务</li><li>一般会结合服务发现客户端使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaRibbonClientConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 创建ping任务</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> IPing <span class="title function_">ribbonPing</span><span class="params">(IClientConfig config)</span> &#123;</span><br><span class="line"><span class="type">NIWSDiscoveryPing</span> <span class="variable">ping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NIWSDiscoveryPing</span>();</span><br><span class="line">ping.initWithNiwsConfig(config);</span><br><span class="line"><span class="keyword">return</span> ping;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 创建ServerList</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> ServerList&lt;?&gt; ribbonServerList(<span class="comment">/**/) &#123;</span></span><br><span class="line"><span class="comment">return new DomainExtractingServerList(discoveryServerList, config, this.approximateZoneFromHostname);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">    // 创建Server拦截器</span></span><br><span class="line"><span class="comment"><span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">public ServerIntrospector serverIntrospector() &#123;</span></span><br><span class="line"><span class="comment">return new EurekaServerIntrospector();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 服务更新器</span></span><br><span class="line"><span class="comment">public interface ServerListUpdater &#123;</span></span><br><span class="line"><span class="comment">    // 执行服务更新</span></span><br><span class="line"><span class="comment">    public interface UpdateAction &#123;</span></span><br><span class="line"><span class="comment">        void doUpdate();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line"><span class="comment">    void start(UpdateAction updateAction);</span></span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line"><span class="comment">    void stop();</span></span><br><span class="line"><span class="comment">// 获取核心线程数</span></span><br><span class="line"><span class="comment">    int getCoreThreads();</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    String getLastUpdate();</span></span><br><span class="line"><span class="comment">    long getDurationSinceLastUpdateMs();</span></span><br><span class="line"><span class="comment">    int getNumberMissedCycles();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class DynamicServerListLoadBalancer&lt;T extends Server&gt; extends BaseLoadBalancer &#123;</span></span><br><span class="line"><span class="comment">    // 服务列表</span></span><br><span class="line"><span class="comment">    volatile ServerList&lt;T&gt; serverListImpl;</span></span><br><span class="line"><span class="comment">    // 服务列表过滤器</span></span><br><span class="line"><span class="comment">    volatile ServerListFilter&lt;T&gt; filter;</span></span><br><span class="line"><span class="comment">    // 更新服务列表</span></span><br><span class="line"><span class="comment">    protected final ServerListUpdater.UpdateAction updateAction = new ServerListUpdater.UpdateAction() &#123;</span></span><br><span class="line"><span class="comment">        <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">        public void doUpdate() &#123;</span></span><br><span class="line"><span class="comment">            updateListOfServers();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;; </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">// 服务更新器</span></span><br><span class="line"><span class="comment">    protected volatile ServerListUpdater serverListUpdater;</span></span><br><span class="line"><span class="comment">// 启动服务更新器</span></span><br><span class="line"><span class="comment">    public void enableAndInitLearnNewServersFeature() &#123;</span></span><br><span class="line"><span class="comment">        serverListUpdater.start(updateAction);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">// 停止服务更新器</span></span><br><span class="line"><span class="comment">    public void stopServerListRefreshing() &#123;</span></span><br><span class="line"><span class="comment">        if (serverListUpdater != null) &#123;</span></span><br><span class="line"><span class="comment">            serverListUpdater.stop();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    // 获取服务列表更新器核心线程数</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Monitor</span>(name=&quot;NumThreads&quot;, type=DataSourceType.GAUGE)</span></span><br><span class="line"><span class="comment">    public int getCoreThreads() &#123;</span></span><br><span class="line"><span class="comment">        return serverListUpdater.getCoreThreads();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    // 更新服务列表</span></span><br><span class="line"><span class="comment">    <span class="doctag">@VisibleForTesting</span></span></span><br><span class="line"><span class="comment">    public void updateListOfServers() &#123;</span></span><br><span class="line"><span class="comment">        List&lt;T&gt; servers = new ArrayList&lt;T&gt;();</span></span><br><span class="line"><span class="comment">        // 获取需要更新的服务列表</span></span><br><span class="line"><span class="comment">        servers = serverListImpl.getUpdatedListOfServers();</span></span><br><span class="line"><span class="comment">        // 进行过滤</span></span><br><span class="line"><span class="comment">        servers = filter.getFilteredListOfServers(servers);</span></span><br><span class="line"><span class="comment">        updateAllServerList(servers);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    protected void updateAllServerList(List&lt;T&gt; ls) &#123;</span></span><br><span class="line"><span class="comment">        if (serverListUpdateInProgress.compareAndSet(false, true)) &#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                // 更新成功设置为可用</span></span><br><span class="line"><span class="comment">                for (T s : ls) &#123;</span></span><br><span class="line"><span class="comment">                    s.setAlive(true);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                setServersList(ls);</span></span><br><span class="line"><span class="comment">                super.forceQuickPing();</span></span><br><span class="line"><span class="comment">            &#125; finally &#123;</span></span><br><span class="line"><span class="comment">                serverListUpdateInProgress.set(false);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>ZoneAwareLoadBalancer</p><ul><li>继承自 DynamicServerListLoadBalancer</li><li>引入了 Zone 来划分服务</li><li>重写了 setRule 方法 （和 DynamicServerListLoadBalancer 一样默认使用在 BaseLoadBalancer 设置的默认负载均衡策略 RoundRobinRule）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZoneAwareLoadBalancer</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Server</span>&gt; <span class="keyword">extends</span> <span class="title class_">DynamicServerListLoadBalancer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// String：Zone名字</span></span><br><span class="line">    <span class="comment">// BaseLoadBalancer: Zone管理的负载均衡器</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, BaseLoadBalancer&gt; balancers = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, BaseLoadBalancer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置负载均衡策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRule</span><span class="params">(IRule rule)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setRule(rule);</span><br><span class="line">        <span class="keyword">if</span> (balancers != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String zone: balancers.keySet()) &#123;</span><br><span class="line">                <span class="comment">// 将负载均衡策略设置到各个Zone所关联的负载均衡器中</span></span><br><span class="line">                balancers.get(zone).setRule(cloneRule(rule));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取特定Zone的负载均衡器</span></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    BaseLoadBalancer <span class="title function_">getLoadBalancer</span><span class="params">(String zone)</span> &#123;</span><br><span class="line">        zone = zone.toLowerCase();</span><br><span class="line">        <span class="type">BaseLoadBalancer</span> <span class="variable">loadBalancer</span> <span class="operator">=</span> balancers.get(zone);</span><br><span class="line">        <span class="keyword">if</span> (loadBalancer == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">IRule</span> <span class="variable">rule</span> <span class="operator">=</span> cloneRule(<span class="built_in">this</span>.getRule());</span><br><span class="line">            loadBalancer = <span class="keyword">new</span> <span class="title class_">BaseLoadBalancer</span>(<span class="built_in">this</span>.getName() + <span class="string">&quot;_&quot;</span> + zone, rule, <span class="built_in">this</span>.getLoadBalancerStats());</span><br><span class="line">            <span class="type">BaseLoadBalancer</span> <span class="variable">prev</span> <span class="operator">=</span> balancers.putIfAbsent(zone, loadBalancer);</span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123;</span><br><span class="line">            loadBalancer = prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> loadBalancer;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取经过负载均衡Server</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">chooseServer</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">LoadBalancerStats</span> <span class="variable">lbStats</span> <span class="operator">=</span> getLoadBalancerStats();</span><br><span class="line">            Map&lt;String, ZoneSnapshot&gt; zoneSnapshot = ZoneAvoidanceRule.createSnapshot(lbStats);</span><br><span class="line">            <span class="comment">// 获取可用的Zone</span></span><br><span class="line">            Set&lt;String&gt; availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.get(), triggeringBlackoutPercentage.get());</span><br><span class="line">            <span class="keyword">if</span> (availableZones != <span class="literal">null</span> &amp;&amp;  availableZones.size() &lt; zoneSnapshot.keySet().size()) &#123;</span><br><span class="line">                <span class="comment">// 在可用Zone中随机选择一个</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">zone</span> <span class="operator">=</span> ZoneAvoidanceRule.randomChooseZone(zoneSnapshot, availableZones);</span><br><span class="line">                <span class="keyword">if</span> (zone != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取该Zone对应的负载均衡器</span></span><br><span class="line">                    <span class="type">BaseLoadBalancer</span> <span class="variable">zoneLoadBalancer</span> <span class="operator">=</span> getLoadBalancer(zone);</span><br><span class="line">                    <span class="comment">// 返回经过负载均衡的Server</span></span><br><span class="line">                    server = zoneLoadBalancer.chooseServer(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用负载均衡策略"><a href="#常用负载均衡策略" class="headerlink" title="常用负载均衡策略"></a>常用负载均衡策略</h3><blockquote><p>RandomRule：随机策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取随机下标</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">chooseRandomInt</span><span class="params">(<span class="type">int</span> serverCount)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回负载均衡后的服务</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取服务过程</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (server == <span class="literal">null</span>) &#123; <span class="comment">// 死循环获取直到不为null</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Server&gt; upList = lb.getReachableServers(); <span class="comment">// 可用服务列表</span></span><br><span class="line">        List&lt;Server&gt; allList = lb.getAllServers(); <span class="comment">// 所有服务</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">serverCount</span> <span class="operator">=</span> allList.size();</span><br><span class="line">        <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 获取随机下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> chooseRandomInt(serverCount);</span><br><span class="line">        server = upList.get(index); <span class="comment">// 从可用服务列表中获取</span></span><br><span class="line">        <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>RoundRibbonRule：简单轮询策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取服务</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (server == <span class="literal">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">        List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">        <span class="type">int</span> <span class="variable">upCount</span> <span class="operator">=</span> reachableServers.size(); <span class="comment">// up状态的服务数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">serverCount</span> <span class="operator">=</span> allServers.size(); <span class="comment">// 服务列表中的服务数量</span></span><br><span class="line">        <span class="comment">// 轮询获取服务下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextServerIndex</span> <span class="operator">=</span> incrementAndGetModulo(serverCount);</span><br><span class="line">        server = allServers.get(nextServerIndex);</span><br><span class="line">        <span class="comment">// 得到结果后如果是可用的就返回</span></span><br><span class="line">        <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Next.</span></span><br><span class="line">        server = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>RetryRule：重试轮询策略（时间间隔）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IRule</span> <span class="variable">subRule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoundRobinRule</span>();</span><br><span class="line"><span class="comment">// 获取服务</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">requestTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">deadline</span> <span class="operator">=</span> requestTime + maxRetryMillis;</span><br><span class="line">    <span class="type">Server</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 先用轮询获取</span></span><br><span class="line">    answer = subRule.choose(key);    </span><br><span class="line">    <span class="comment">// 轮询获取的Server不可用，且满足重试条件</span></span><br><span class="line">    <span class="keyword">if</span> (((answer == <span class="literal">null</span>) || (!answer.isAlive())) &amp;&amp; (System.currentTimeMillis() &lt; deadline)) &#123;</span><br><span class="line">        <span class="type">InterruptTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterruptTask</span>(deadline - System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">            <span class="comment">// 重新获取</span></span><br><span class="line">            answer = subRule.choose(key);</span><br><span class="line">            <span class="keyword">if</span> (((answer == <span class="literal">null</span>) || (!answer.isAlive())) &amp;&amp; (System.currentTimeMillis() &lt; deadline)) &#123;</span><br><span class="line">                Thread.yield();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        task.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>AvailabilityFilteringRule：可用轮序策略（筛选）</p></blockquote><p>AvailabilityPredicate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">apply</span><span class="params">(<span class="meta">@Nullable</span> PredicateKey input)</span> &#123;</span><br><span class="line">    <span class="type">LoadBalancerStats</span> <span class="variable">stats</span> <span class="operator">=</span> getLBStats();</span><br><span class="line">    <span class="keyword">if</span> (stats == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> !shouldSkipServer(stats.getSingleServerStat(input.getServer()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">shouldSkipServer</span><span class="params">(ServerStats stats)</span> &#123;        </span><br><span class="line">    <span class="keyword">if</span> ((CIRCUIT_BREAKER_FILTERING.get() &amp;&amp; stats.isCircuitBreakerTripped()) </span><br><span class="line">        || stats.getActiveRequestsCount() &gt;= activeConnectionsLimit.get()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CompositePredicate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回已过滤的Server</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getEligibleServers</span><span class="params">(List&lt;Server&gt; servers, Object loadBalancerKey)</span> &#123;</span><br><span class="line">    List&lt;Server&gt; result = </span><br><span class="line">        <span class="built_in">super</span>.getEligibleServers(servers, loadBalancerKey);</span><br><span class="line">    Iterator&lt;AbstractServerPredicate&gt; i = fallbacks.iterator();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!(result.size() &gt;= minimalFilteredServers &amp;&amp; result.size() &gt; (<span class="type">int</span>) (servers.size() * minimalFilteredPercentage))</span><br><span class="line">           &amp;&amp; i.hasNext()) &#123;</span><br><span class="line">        <span class="type">AbstractServerPredicate</span> <span class="variable">predicate</span> <span class="operator">=</span> i.next();</span><br><span class="line">        result = predicate.getEligibleServers(servers, loadBalancerKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 过滤轮询</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;Server&gt; <span class="title function_">chooseRoundRobinAfterFiltering</span><span class="params">(List&lt;Server&gt; servers)</span> &#123;</span><br><span class="line">    List&lt;Server&gt; eligible = getEligibleServers(servers);</span><br><span class="line">    <span class="keyword">if</span> (eligible.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.absent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Optional.of(eligible.get(incrementAndGetModulo(eligible.size())));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AvailabilityFilteringRule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AbstractServerPredicate predicate; </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AvailabilityFilteringRule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    predicate = CompositePredicate.withPredicate(<span class="keyword">new</span> <span class="title class_">AvailabilityPredicate</span>(<span class="built_in">this</span>, <span class="literal">null</span>))</span><br><span class="line">        .addFallbackPredicate(AbstractServerPredicate.alwaysTrue())</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AbstractServerPredicate <span class="title function_">getPredicate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> predicate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取服务</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 轮询服务</span></span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> roundRobinRule.choose(key);</span><br><span class="line">    <span class="keyword">while</span> (count++ &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有故障则返回</span></span><br><span class="line">        <span class="keyword">if</span> (predicate.apply(<span class="keyword">new</span> <span class="title class_">PredicateKey</span>(server))) &#123;</span><br><span class="line">            <span class="keyword">return</span> server;</span><br><span class="line">        &#125;</span><br><span class="line">        server = roundRobinRule.choose(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.choose(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ZoneAvoidanceRule（默认） ：优质轮询策略（筛选Zone）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复合过滤</span></span><br><span class="line"><span class="keyword">private</span> CompositePredicate compositePredicate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AbstractServerPredicate <span class="title function_">getPredicate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> compositePredicate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ZoneAvoidanceRule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">// 劣质zone过滤</span></span><br><span class="line">    <span class="type">ZoneAvoidancePredicate</span> <span class="variable">zonePredicate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZoneAvoidancePredicate</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 可用过滤</span></span><br><span class="line">    <span class="type">AvailabilityPredicate</span> <span class="variable">availabilityPredicate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AvailabilityPredicate</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 复合过滤 zonePredicate + availabilityPredicate</span></span><br><span class="line">    compositePredicate = createCompositePredicate(zonePredicate, availabilityPredicate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 筛选zone</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title function_">getAvailableZones</span><span class="params">(</span></span><br><span class="line"><span class="params">    Map&lt;String, ZoneSnapshot&gt; snapshot, <span class="type">double</span> triggeringLoad,</span></span><br><span class="line"><span class="params">    <span class="type">double</span> triggeringBlackoutPercentage)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取可用zone</span></span><br><span class="line">    Set&lt;String&gt; availableZones = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(snapshot.keySet());</span><br><span class="line">    <span class="keyword">if</span> (availableZones.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> availableZones; <span class="comment">// 如果只有一个直接返回zone</span></span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; worstZones = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    <span class="type">double</span> <span class="variable">maxLoadPerServer</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">limitedZoneAvailability</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, ZoneSnapshot&gt; zoneEntry : snapshot.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">zone</span> <span class="operator">=</span> zoneEntry.getKey();</span><br><span class="line">        <span class="type">ZoneSnapshot</span> <span class="variable">zoneSnapshot</span> <span class="operator">=</span> zoneEntry.getValue();</span><br><span class="line">        <span class="type">int</span> <span class="variable">instanceCount</span> <span class="operator">=</span> zoneSnapshot.getInstanceCount();</span><br><span class="line">        <span class="comment">// 如果zone没有服务则移除zone</span></span><br><span class="line">        <span class="keyword">if</span> (instanceCount == <span class="number">0</span>) &#123;</span><br><span class="line">            availableZones.remove(zone);</span><br><span class="line">            limitedZoneAvailability = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// zone中有服务</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">loadPerServer</span> <span class="operator">=</span> zoneSnapshot.getLoadPerServer();</span><br><span class="line">            <span class="keyword">if</span> (((<span class="type">double</span>) zoneSnapshot.getCircuitTrippedCount())</span><br><span class="line">                / instanceCount &gt;= triggeringBlackoutPercentage</span><br><span class="line">                || loadPerServer &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                availableZones.remove(zone);</span><br><span class="line">                limitedZoneAvailability = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(loadPerServer - maxLoadPerServer) &lt; <span class="number">0.000001d</span>) &#123;</span><br><span class="line">                    worstZones.add(zone);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (loadPerServer &gt; maxLoadPerServer) &#123;</span><br><span class="line">                    maxLoadPerServer = loadPerServer;</span><br><span class="line">                    worstZones.clear();</span><br><span class="line">                    worstZones.add(zone);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">if</span> (maxLoadPerServer &lt; triggeringLoad &amp;&amp; !limitedZoneAvailability) &#123;</span><br><span class="line">            <span class="comment">// zone override is not needed here</span></span><br><span class="line">            <span class="keyword">return</span> availableZones;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">zoneToAvoid</span> <span class="operator">=</span> randomChooseZone(snapshot, worstZones);</span><br><span class="line">    <span class="keyword">if</span> (zoneToAvoid != <span class="literal">null</span>) &#123;</span><br><span class="line">        availableZones.remove(zoneToAvoid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> availableZones;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取服务</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">ILoadBalancer</span> <span class="variable">lb</span> <span class="operator">=</span> getLoadBalancer();</span><br><span class="line">    <span class="comment">// 过滤之后轮询获取服务</span></span><br><span class="line">    Optional&lt;Server&gt; server = getPredicate().chooseRoundRobinAfterFiltering(lb.getAllServers(), key);</span><br><span class="line">    <span class="keyword">if</span> (server.isPresent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> server.get();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡过程"><a href="#负载均衡过程" class="headerlink" title="负载均衡过程"></a>负载均衡过程</h3><h4 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h4><p>RibbonAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Conditional(RibbonAutoConfiguration.RibbonClassesConditions.class)</span></span><br><span class="line"><span class="meta">@RibbonClients</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(name = &quot;org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration&quot;)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(&#123; LoadBalancerAutoConfiguration.class, AsyncLoadBalancerAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; RibbonEagerLoadProperties.class, ServerIntrospectorProperties.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// HTTP客户端工厂</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringClientFactory <span class="title function_">springClientFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SpringClientFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringClientFactory</span>();</span><br><span class="line">        factory.setConfigurations(<span class="built_in">this</span>.configurations);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringClientFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringClientFactory</span> <span class="keyword">extends</span> <span class="title class_">NamedContextFactory</span>&lt;RibbonClientSpecification&gt; &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAMESPACE</span> <span class="operator">=</span> <span class="string">&quot;ribbon&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SpringClientFactory</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(RibbonClientConfiguration.class, NAMESPACE, <span class="string">&quot;ribbon.client.name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RibbonClientConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下使用 HttpClientRibbonConfiguration</span></span><br><span class="line"><span class="meta">@Import(&#123; HttpClientConfiguration.class, OkHttpRibbonConfiguration.class, RestClientRibbonConfiguration.class, HttpClientRibbonConfiguration.class &#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonClientConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">ribbonRule</span><span class="params">(IClientConfig config)</span> &#123;</span><br><span class="line">        <span class="comment">// 默认负载均衡策略是优质轮询策略</span></span><br><span class="line">        <span class="type">ZoneAvoidanceRule</span> <span class="variable">rule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZoneAvoidanceRule</span>();</span><br><span class="line">        rule.initWithNiwsConfig(config);</span><br><span class="line">        <span class="keyword">return</span> rule;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpClientRibbonConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RibbonLoadBalancingHttpClient <span class="title function_">ribbonLoadBalancingHttpClient</span><span class="params">(</span></span><br><span class="line"><span class="params">    IClientConfig config, </span></span><br><span class="line"><span class="params">    ServerIntrospector serverIntrospector,</span></span><br><span class="line"><span class="params">    ILoadBalancer loadBalancer, </span></span><br><span class="line"><span class="params">    RetryHandler retryHandler,</span></span><br><span class="line"><span class="params">    CloseableHttpClient httpClient)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个HttpClient包装类</span></span><br><span class="line">    <span class="type">RibbonLoadBalancingHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RibbonLoadBalancingHttpClient</span>(</span><br><span class="line">        httpClient, <span class="comment">// 请求客户端</span></span><br><span class="line">        config, </span><br><span class="line">        serverIntrospector);</span><br><span class="line">    client.setLoadBalancer(loadBalancer); <span class="comment">// 负载均衡器</span></span><br><span class="line">    client.setRetryHandler(retryHandler);</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RibbonLoadBalancingHttpClient </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonLoadBalancerClient</span> <span class="keyword">implements</span> <span class="title class_">LoadBalancerClient</span> &#123;</span><br><span class="line"><span class="keyword">private</span> SpringClientFactory clientFactory;</span><br><span class="line">    <span class="comment">// 返回负载均衡器</span></span><br><span class="line">    <span class="keyword">protected</span> ILoadBalancer <span class="title function_">getLoadBalancer</span><span class="params">(String serviceId)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.clientFactory.getLoadBalancer(serviceId);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 返回经过负载均衡的Server</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServiceInstance <span class="title function_">choose</span><span class="params">(String serviceId)</span> &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="built_in">this</span>.getLoadBalancer().chooseServer(serviceId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RibbonLoadBalancerClient</span>.RibbonServer(serviceId, server);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="请求拦截（重点）"><a href="#请求拦截（重点）" class="headerlink" title="请求拦截（重点）"></a>请求拦截（重点）</h4><p>从 RibbonAutoConfiguration 点进 LoadBalancerAutoConfiguration 可以观察到有个内部类叫 LoadBalancerInterceptorConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass(&quot;org.springframework.retry.support.RetryTemplate&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerInterceptorConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建负载均衡拦截器，用于拦截RestTemplate请求</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoadBalancerInterceptor <span class="title function_">ribbonInterceptor</span><span class="params">(</span></span><br><span class="line"><span class="params">        LoadBalancerClient loadBalancerClient,</span></span><br><span class="line"><span class="params">        LoadBalancerRequestFactory requestFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoadBalancerInterceptor</span>(loadBalancerClient, requestFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将负载均衡拦截器添加到RestTemplate的拦截器列表中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplateCustomizer <span class="title function_">restTemplateCustomizer</span><span class="params">(<span class="keyword">final</span> LoadBalancerInterceptor loadBalancerInterceptor)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate -&gt; &#123;</span><br><span class="line">            List&lt;ClientHttpRequestInterceptor&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">                restTemplate.getInterceptors());</span><br><span class="line">            list.add(loadBalancerInterceptor);</span><br><span class="line">            restTemplate.setInterceptors(list);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么 RestTemplate 可以添加拦截器？</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/004.png"></p><p>可以看到 RestTemplate 的拦截器能力是继承自 InterceptingHttpAccessor 抽象类的。</p><p>再看看 InterceptingHttpAccessor 中的 interceptingRequestFactory 是合适被注入到 RestTemplate 的（以下源码位于Ribbon自动配置类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(HttpRequest.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnRibbonRestClient</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RibbonClientHttpRequestFactoryConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringClientFactory springClientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据SpringClientFactory创建一个请求工厂</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RibbonClientHttpRequestFactory <span class="title function_">ribbonClientHttpRequestFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RibbonClientHttpRequestFactory</span>(<span class="built_in">this</span>.springClientFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将请求工厂注入到RestTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplateCustomizer <span class="title function_">restTemplateCustomizer</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> RibbonClientHttpRequestFactory ribbonClientHttpRequestFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate -&gt; restTemplate.setRequestFactory(ribbonClientHttpRequestFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>LoadBalancerInterceptor 拦截请求并执行负载均衡操作</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/006.png"></p><p>RibbonLoadBalancerClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request, Object hint)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 负载均衡器</span></span><br><span class="line">    <span class="type">ILoadBalancer</span> <span class="variable">loadBalancer</span> <span class="operator">=</span> getLoadBalancer(serviceId);</span><br><span class="line">    <span class="comment">// 经过负载均衡的Server</span></span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> getServer(loadBalancer, hint);</span><br><span class="line"><span class="comment">// 封装成Ribbon服务</span></span><br><span class="line">    <span class="type">RibbonServer</span> <span class="variable">ribbonServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RibbonServer</span>(</span><br><span class="line">        serviceId, </span><br><span class="line">        server,</span><br><span class="line">        isSecure(server, serviceId),</span><br><span class="line">        serverIntrospector(serviceId).getMetadata(server));</span><br><span class="line">    <span class="comment">// 执行HTTP请求</span></span><br><span class="line">    <span class="keyword">return</span> execute(serviceId, ribbonServer, request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">returnVal</span> <span class="operator">=</span> request.apply(serviceInstance);</span><br><span class="line">        statsRecorder.recordStats(returnVal);</span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/005.png"></p><h4 id="自定义负载均衡规则"><a href="#自定义负载均衡规则" class="headerlink" title="自定义负载均衡规则"></a>自定义负载均衡规则</h4><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/003.png"></p><ol><li>继承 AbstractLoadBalancerRule</li><li>实现主要方法 choose()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RoundRobinRule例子</span></span><br><span class="line"><span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (server == <span class="literal">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">        List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">        <span class="type">int</span> <span class="variable">upCount</span> <span class="operator">=</span> reachableServers.size(); <span class="comment">// up状态的服务数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">serverCount</span> <span class="operator">=</span> allServers.size(); <span class="comment">// 服务列表中的服务数量</span></span><br><span class="line">        <span class="comment">// 轮询</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextServerIndex</span> <span class="operator">=</span> incrementAndGetModulo(serverCount);</span><br><span class="line">        server = allServers.get(nextServerIndex);</span><br><span class="line">        <span class="comment">// 得到结果后如果是可用的就返回</span></span><br><span class="line">        <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">            <span class="keyword">return</span> (server);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Next.</span></span><br><span class="line">        server = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>将自定义负载均衡策略Bean添加到上下文</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">ribbonRule</span><span class="params">(IClientConfig config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoundRobinRule</span>();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.itmuch.com/spring-cloud-sum/spring-cloud-retry/">Spring Cloud各组件重试总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务开发技术篇-服务注册中心</title>
      <link href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="为什么需要服务注册中心"><a href="#为什么需要服务注册中心" class="headerlink" title="为什么需要服务注册中心"></a>为什么需要服务注册中心</h2><blockquote><p>点对点消费</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/001.png"></p><p>上面这种通信方式的缺点是，当服务提节点数量或状态发生变化时，服务消费者无法感知，并且需要手动修改配置，不利于维护</p><blockquote><p>使用反向代理改良</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/002.png"></p><p>引入反向代理服务来代理上游服务器集群。这时服务消费者只需和反向代理服务打交道即可，大大降低了服务地址的维护成本。</p><p>但这种方法依然存在一定的问题：</p><ul><li>反向代理服务存在单点问题，需要往外引入注入Keepalived这样的服务提高其可用性，增加了架构的复杂度</li><li>反向代理服务依然无法感知上游服务提供者节点状态的变化，开发者仍然需要手动维护服务提供者配置</li></ul><blockquote><p>使用服务注册&#x2F;发现中心</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/003.png"></p><ol><li><strong>服务提供者</strong>启动时将自己暴露的服务列表注册到服务注册中心</li><li><strong>服务消费者</strong>启动时到服务注册中心拉取自己所关注的服务提供者列表</li></ol><p>服务注册&#x2F;发现中心不仅解决了服务提供者节点变动时需要手动修改配置的问题，还能够实现动态服务注册和服务状态感知</p><blockquote><p>目前业界常用的服务注册中心</p></blockquote><ul><li>ZooKeeper</li><li>Netflix Eureka</li><li>Consul</li><li>Etcd</li></ul><h2 id="Netflix-Eureka"><a href="#Netflix-Eureka" class="headerlink" title="Netflix Eureka"></a>Netflix Eureka</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Eureka是Netflix旗下开源的服务注册&#x2F;发现中心</li><li>GitHub首页已明确表明Eureka 2.x已经停止开源工作（Eureka 1.x依然在维护，可以提交Issues）</li><li>从CAP定理角度来看，Eureka是一个AP（可用性优先）系统</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="Eureka服务端"><a href="#Eureka服务端" class="headerlink" title="Eureka服务端"></a>Eureka服务端</h4><blockquote><p>添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springcloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">springcloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring cloud版本控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springcloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringnCloud Netflix Eureka Server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot Actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># actuator端点配置</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-eureka-server</span></span><br><span class="line"><span class="comment"># Eureka Server  </span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span> <span class="comment"># 不注册服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 不获取服务列表</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">us-east-1</span> <span class="comment"># 默认region</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment"># 默认zone地址，用于注册和发现</span></span><br></pre></td></tr></table></figure><blockquote><p>启用 Eureka Server</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaEurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaEurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 访问：<a href="http://localhost:8761/">http://localhost:8761</a></p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/004.png"></p><h4 id="Eureka客户端"><a href="#Eureka客户端" class="headerlink" title="Eureka客户端"></a>Eureka客户端</h4><blockquote><p>添加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wiki.td<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>msa-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringnCloud Netflix Eureka Client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot Actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h5><blockquote><p>配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment"># 默认</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-eureka-provider-user</span></span><br></pre></td></tr></table></figure><blockquote><p>要暴露的服务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启用服务提供者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaEurekaProviderUserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(MsaEurekaProviderUserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>成功注册的话可以在服务注册中心看到如下内容</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/005.png"></p><h5 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h5><blockquote><p>配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span> <span class="comment"># 默认</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不注册服务</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-eureka-comsumer-01</span></span><br></pre></td></tr></table></figure><blockquote><p>调用注册中心的服务</p></blockquote><p>创建 RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplateBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端负载均衡（开启服务发现）</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要调用的服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SERVEICE_NAME</span> <span class="operator">=</span><span class="string">&quot;MSA-EUREKA-PROVIDER-USER&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HTTP请求工具</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务发现客户端</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete请求</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/delete/&#123;id&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// restTemplate.delete(url, id); // 无返回值</span></span><br><span class="line">        ResponseEntity&lt;User&gt; exchange = restTemplate.exchange(url, HttpMethod.DELETE, <span class="literal">null</span>, User.class, id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exchange.getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get请求</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">selectAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/find/all&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line"></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(SERVEICE_NAME);</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> discoveryClient.description();</span><br><span class="line">        log.info(<span class="string">&quot;服务名称：&#123;&#125;&quot;</span>, services);</span><br><span class="line">        log.info(<span class="string">&quot;服务提供者：&#123;&#125;&quot;</span>, instances);</span><br><span class="line">        log.info(<span class="string">&quot;服务描述：&#123;&#125;&quot;</span>, description);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// post请求</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/add&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求头</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求体</span></span><br><span class="line">        MultiValueMap&lt;String, Object&gt; map= <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">        map.add(<span class="string">&quot;id&quot;</span>, user.getId());</span><br><span class="line">        map.add(<span class="string">&quot;name&quot;</span>, user.getName());</span><br><span class="line">        map.add(<span class="string">&quot;age&quot;</span>, user.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求内容</span></span><br><span class="line">        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; request = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(map, headers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForEntity(url, request, User.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启用 Eureka Client</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaEurekaComsumer01Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaEurekaComsumer01Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Eureka-Server支持的端点操作"><a href="#Eureka-Server支持的端点操作" class="headerlink" title="Eureka Server支持的端点操作"></a>Eureka Server支持的端点操作</h3><table><thead><tr><th>操作</th><th>HTTP请求</th><th>描述</th></tr></thead><tbody><tr><td>注册新的应用实例</td><td>POST &#x2F;eureka&#x2F;apps&#x2F;<strong>appID</strong></td><td>提交内容格式：JSON&#x2F;XML</td></tr><tr><td>注销某个应用实例</td><td>DELETE &#x2F;eureka&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td></td></tr><tr><td>发送应用实例心跳</td><td>PUT &#x2F;eureka&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td></td></tr><tr><td>查询所有实例</td><td>GET &#x2F;eureka&#x2F;apps</td><td></td></tr><tr><td>查询appID的所有实例</td><td>GET &#x2F;eureka&#x2F;<strong>apps</strong>&#x2F;<strong>appID</strong></td><td></td></tr><tr><td>查询特定的appID&#x2F;instanceID</td><td>GET &#x2F;eureka&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td></td></tr><tr><td>查询特定的instanceID</td><td>GET &#x2F;eureka&#x2F;instances&#x2F;<strong>instanceID</strong></td><td></td></tr><tr><td>停止某个服务实例</td><td>PUT &#x2F;eureka&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;status？value &#x3D; OUT_OF_SERVICE</td><td></td></tr><tr><td>恢复某个服务实例</td><td>DELETE &#x2F;eureka&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;status?value&#x3D;UP</td><td></td></tr><tr><td>更新元数据</td><td>PUT &#x2F;eureka&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;metadata?<strong>key</strong>&#x3D;<strong>value</strong></td><td></td></tr></tbody></table><h3 id="特性和源码浅析"><a href="#特性和源码浅析" class="headerlink" title="特性和源码浅析"></a>特性和源码浅析</h3><h4 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h4><blockquote><p>Netflix Eureka集群图（源自<a href="https://github.com/Netflix/eureka%EF%BC%89">https://github.com/Netflix/eureka）</a></p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/006.png"></p><p>上图是 Eureka 1.x 在 Netflix 内部中的部署架构。在 Eureka 架构中有两个较为重要的概念，分别是：<code>Region</code>、<code>Zone</code>。</p><p>Region 可以理解为 Eureka 所在的区域，而 Zone 可以理解为 Eureka 所在机房。</p><p>一个 Region 可以包含多个Zone，而且每个 Region 中至少含有一个Eureka Server。Zone与Zone、Region与Region之间形成高可用集群。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/007.png"></p><p>默认情况下 Eureka 使用的 Region 名为 <code>us-east-1</code>，而 Zone 为<code>http://localhost:8761/eureka/</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment"># 以下为默认配置，所以可以省略</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">us-east-1</span></span><br></pre></td></tr></table></figure><blockquote><p>EurekaClientConfigBean 源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">region</span> <span class="operator">=</span> <span class="string">&quot;us-east-1&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_ZONE</span> <span class="operator">=</span> <span class="string">&quot;defaultZone&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getAvailabilityZones(String region) &#123;</span><br><span class="line">    <span class="comment">// 如果没有配置就用默认的</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.availabilityZones.get(region);</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        value = DEFAULT_ZONE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务注册和发现时机"><a href="#服务注册和发现时机" class="headerlink" title="服务注册和发现时机"></a>服务注册和发现时机</h4><ul><li><p>Eureka Client将服务注册到 Eureka Server 后会<code>每隔30秒就发送心跳包给Eureka Server以示对当前服务进行续约</code>。而如果Eureka Server在<code>90s（默认）</code>内都没有收到某个服务提供者的续约心跳包的话，就会从可用服务列表中下线该服务。但前提是没有出现网络分区（譬如短时间内丢失大量客户端连接），因为一旦出现网络分区Eureka Server就会开启保护机制，保护机制一旦开启 Eureka Server 就会暂缓下线服务直到大部分服务可用后恢复</p></li><li><p>Eureka Client 从 Eureka Server 中获取到服务列表后会对其进行缓存，然后再<code>每隔30s（默认）重新抓取一次服务列表</code>。这样做的原因主要是防止 Eureka Server 宕机导致 Eureka Client 无法获取到服务列表，所以通过缓存服务列表来以防 Eureka Server 宕机后无法发现服务的情况发生。</p></li></ul><blockquote><p>EurekaClientConfigBean 源码</p></blockquote><p>Eureka Client 会使用 Ribbon 对抓取到的服务列表进行负载均衡调用，而在这之前 Eureka Client 需要先确立自己应该从哪个 Eureka Server 中抓取服务列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getEurekaServerServiceUrls</span><span class="params">(String myZone)</span> &#123;</span><br><span class="line">    <span class="comment">// 先从自己所在的 Zone 中获取 Eureka Server</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">serviceUrls</span> <span class="operator">=</span> <span class="built_in">this</span>.serviceUrl.get(myZone);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果自己的所在 Zone 中没有 Eureka Server ，则到默认的 Zone 中查找</span></span><br><span class="line">    <span class="keyword">if</span> (serviceUrls == <span class="literal">null</span> || serviceUrls.isEmpty()) &#123;</span><br><span class="line">        serviceUrls = <span class="built_in">this</span>.serviceUrl.get(DEFAULT_ZONE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(serviceUrls)) &#123;</span><br><span class="line">        <span class="keyword">final</span> String[] serviceUrlsSplit = StringUtils</span><br><span class="line">            .commaDelimitedListToStringArray(serviceUrls);</span><br><span class="line">        List&lt;String&gt; eurekaServiceUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(serviceUrlsSplit.length);</span><br><span class="line">        <span class="keyword">for</span> (String eurekaServiceUrl : serviceUrlsSplit) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!endsWithSlash(eurekaServiceUrl)) &#123;</span><br><span class="line">                eurekaServiceUrl += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            eurekaServiceUrls.add(eurekaServiceUrl.trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eurekaServiceUrls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h4><p>上面已经提到 Eureka Server 实现了一种自我保护机制，该机制是专门用来应对网络分区的</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E7%AF%87-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/009.png"></p><blockquote><p>Eureka中服务状态有以下几种</p><ul><li><p>UP：正常提供服务</p></li><li><p>DOWN：服务已下线</p></li><li><p>OUT_OF_SERVICE：已停止服务</p></li><li><p>UNKNOWN：未知</p></li></ul></blockquote><h4 id="服务注册过程"><a href="#服务注册过程" class="headerlink" title="服务注册过程"></a>服务注册过程</h4><p>DiscoveryClient 源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    EurekaHttpResponse&lt;Void&gt; httpResponse;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 注册服务</span></span><br><span class="line">        httpResponse = eurekaTransport.registrationClient.register(instanceInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> httpResponse.getStatusCode() == Status.NO_CONTENT.getStatusCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 eurekaTransport.registrationClient.register(instanceInfo);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> EurekaHttpResponse&lt;Void&gt; <span class="title function_">register</span><span class="params">(<span class="keyword">final</span> InstanceInfo info)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> execute(<span class="keyword">new</span> <span class="title class_">RequestExecutor</span>&lt;Void&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> EurekaHttpResponse&lt;Void&gt; <span class="title function_">execute</span><span class="params">(EurekaHttpClient delegate)</span> &#123;</span><br><span class="line">         <span class="comment">// 注意，默认情况下Eureka Client会使用Jersey来和Eureka Server通信</span></span><br><span class="line">            <span class="comment">// 可以将其依赖排除，改用RestTemplate</span></span><br><span class="line">            <span class="keyword">return</span> delegate.register(info);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> RequestType <span class="title function_">getRequestType</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RequestType.Register;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点进 delegate.register(info)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拼接想服务注册中心注册服务的请求</span></span><br><span class="line"><span class="comment">// 通过Eureka Server提供的Restful端点实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> EurekaHttpResponse&lt;Void&gt; <span class="title function_">register</span><span class="params">(InstanceInfo info)</span> &#123;</span><br><span class="line">    <span class="comment">// 请求URL</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">urlPath</span> <span class="operator">=</span> serviceUrl + <span class="string">&quot;apps/&quot;</span> + info.getAppName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求头</span></span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.add(HttpHeaders.ACCEPT_ENCODING, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line">    headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发出请求</span></span><br><span class="line">    ResponseEntity&lt;Void&gt; response = restTemplate.exchange(urlPath, HttpMethod.POST,</span><br><span class="line">                                                          <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(info, headers), Void.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> anEurekaHttpResponse(response.getStatusCodeValue())</span><br><span class="line">        .headers(headersOf(response)).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取服务列表和续约服务的定时任务"><a href="#获取服务列表和续约服务的定时任务" class="headerlink" title="获取服务列表和续约服务的定时任务"></a>获取服务列表和续约服务的定时任务</h4><p>DiscoveryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initScheduledTasks</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取服务列表的定时任务</span></span><br><span class="line">    <span class="keyword">if</span> (clientConfig.shouldFetchRegistry()) &#123;</span><br><span class="line">        <span class="comment">// registry cache refresh timer</span></span><br><span class="line">        <span class="comment">// 重新抓取的时间间隔默认为30s（在EurekaClientConfigBean中定义）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">registryFetchIntervalSeconds</span> <span class="operator">=</span> clientConfig.getRegistryFetchIntervalSeconds();</span><br><span class="line">        <span class="type">int</span> <span class="variable">expBackOffBound</span> <span class="operator">=</span> clientConfig.getCacheRefreshExecutorExponentialBackOffBound();</span><br><span class="line">        </span><br><span class="line">        scheduler.schedule(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TimedSupervisorTask</span>(</span><br><span class="line">                <span class="string">&quot;cacheRefresh&quot;</span>,</span><br><span class="line">                scheduler,</span><br><span class="line">                cacheRefreshExecutor,</span><br><span class="line">                registryFetchIntervalSeconds,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                expBackOffBound,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CacheRefreshThread</span>()</span><br><span class="line">            ),</span><br><span class="line">            registryFetchIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 续约服务的定时任务</span></span><br><span class="line">    <span class="keyword">if</span> (clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line">        <span class="comment">// 时间间隔默认为30s（LeaseInfo中定义）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">renewalIntervalInSecs</span> <span class="operator">=</span> instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();</span><br><span class="line">        <span class="type">int</span> <span class="variable">expBackOffBound</span> <span class="operator">=</span> clientConfig.getHeartbeatExecutorExponentialBackOffBound();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Heartbeat timer</span></span><br><span class="line">        scheduler.schedule(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TimedSupervisorTask</span>(</span><br><span class="line">                <span class="string">&quot;heartbeat&quot;</span>,</span><br><span class="line">                scheduler,</span><br><span class="line">                heartbeatExecutor,</span><br><span class="line">                renewalIntervalInSecs,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                expBackOffBound,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HeartbeatThread</span>()</span><br><span class="line">            ),</span><br><span class="line">            renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><blockquote><p>具体配置操作可以参考 EurekaClientConfigBean 类</p></blockquote><ul><li>关闭自我保护功能</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>屏蔽网卡</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">inetutils:</span></span><br><span class="line">      <span class="attr">ignored-interfaces:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">docker0</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">veth.*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>配置和获取服务元数据</li></ul><p>添加元数据配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-eureka-provider-user</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">metadata01:</span> <span class="string">test1</span></span><br><span class="line">      <span class="attr">metadata02:</span> <span class="string">test2</span></span><br></pre></td></tr></table></figure><p>编写查询接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appID;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/service-instances&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ServiceInstance&gt; <span class="title function_">getServiceInstances</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> discoveryClient.getInstances(appID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询元数据</p><img src="微服务开发技术篇-服务注册中心/010.png" style="zoom: 67%;" /><ul><li>服务在注册中心存活的时间</li></ul><p>默认90s，当Server在90s内没有收到续约心跳包就会下线服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span></span><br></pre></td></tr></table></figure><ul><li>服务提供者续约时间间隔</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line"><span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><ul><li>读取 Eureka Server 信息的超时时间</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">eureka-server-read-timeout-seconds:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><ul><li>连接 Eureka Server 的超时时间</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span>    </span><br><span class="line">    <span class="attr">eureka-server-connect-timeout-seconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Consul案例"><a href="#Consul案例" class="headerlink" title="Consul案例"></a>Consul案例</h2><h3 id="服务提供者-1"><a href="#服务提供者-1" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Consul --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot Actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">msa-consul-provider-user</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.250</span> <span class="comment"># 注册中心ip</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.70</span> <span class="comment"># 服务所在ip</span></span><br><span class="line">        <span class="attr">tags:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">tag1</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">tag2</span></span><br><span class="line">        <span class="comment"># service-name会覆盖 application name</span></span><br><span class="line">        <span class="comment"># service-name: service-name-01</span></span><br></pre></td></tr></table></figure><p>启用 SpringCloud Consul Discovery</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaConsulProviderUserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaConsulProviderUserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务消费者-1"><a href="#服务消费者-1" class="headerlink" title="服务消费者"></a>服务消费者</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Cloud Consul --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot Actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageRepositor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SERVEICE_NAME</span> <span class="operator">=</span><span class="string">&quot;msa-consul-provider-user&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">deleteUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/delete/&#123;id&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// restTemplate.delete(url, id); // 无返回值</span></span><br><span class="line">        ResponseEntity&lt;User&gt; exchange = restTemplate.exchange(url, HttpMethod.DELETE, <span class="literal">null</span>, User.class, id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exchange.getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">selectAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/find/all&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line"></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(SERVEICE_NAME);</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> discoveryClient.description();</span><br><span class="line">        log.info(<span class="string">&quot;服务名称：&#123;&#125;&quot;</span>, services);</span><br><span class="line">        log.info(<span class="string">&quot;服务提供者：&#123;&#125;&quot;</span>, instances);</span><br><span class="line">        log.info(<span class="string">&quot;服务描述：&#123;&#125;&quot;</span>, description);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">urlPrefix</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">urlSuffix</span> <span class="operator">=</span> <span class="string">&quot;/user/add&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> urlPrefix + SERVEICE_NAME + urlSuffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求头</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求体</span></span><br><span class="line">        MultiValueMap&lt;String, Object&gt; map= <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">        map.add(<span class="string">&quot;id&quot;</span>, user.getId());</span><br><span class="line">        map.add(<span class="string">&quot;name&quot;</span>, user.getName());</span><br><span class="line">        map.add(<span class="string">&quot;age&quot;</span>, user.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求内容</span></span><br><span class="line">        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; request = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(map, headers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForEntity(url, request, User.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用 SpringCloud Consul Discovery</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsaConsulComsumer01Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MsaConsulComsumer01Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端服务注册发现源码浅析"><a href="#客户端服务注册发现源码浅析" class="headerlink" title="客户端服务注册发现源码浅析"></a>客户端服务注册发现源码浅析</h3><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ConsulDiscoveryClientConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载配置文件中的服务信息</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> ConsulDiscoveryProperties <span class="title function_">consulDiscoveryProperties</span><span class="params">(InetUtils inetUtils)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConsulDiscoveryProperties</span>(inetUtils);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个用于操作Consul的对象</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> ConsulDiscoveryClient <span class="title function_">consulDiscoveryClient</span><span class="params">(</span></span><br><span class="line"><span class="params">    ConsulDiscoveryProperties discoveryProperties)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConsulDiscoveryClient</span>(<span class="built_in">this</span>.consulClient, discoveryProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConsulDiscoveryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsulDiscoveryClient</span> <span class="keyword">implements</span> <span class="title class_">DiscoveryClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(ConsulDiscoveryClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于和Consul通信的Client</span></span><br><span class="line">    <span class="comment">// ConsulClient是一个接口，实现位于AgentConsulClient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulClient client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConsulDiscoveryProperties properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConsulDiscoveryClient</span><span class="params">(ConsulClient client,</span></span><br><span class="line"><span class="params">ConsulDiscoveryProperties properties)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.client = client;</span><br><span class="line"><span class="built_in">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AgentConsulClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务注册</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response&lt;Void&gt; <span class="title function_">agentServiceRegister</span><span class="params">(NewService newService, String token)</span> &#123;</span><br><span class="line">    <span class="type">UrlParameters</span> <span class="variable">tokenParam</span> <span class="operator">=</span> token != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">SingleUrlParameters</span>(<span class="string">&quot;token&quot;</span>, token) : <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 使用Goolgl Gson序列化服务注册信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> GsonFactory.getGson().toJson(newService);</span><br><span class="line">    <span class="comment">// 服务注册（默认使用HttpClient进行HTTP通信）</span></span><br><span class="line">    <span class="comment">// 可以看到这里和Eureka Server类似，是通过Consul提供的Restful接口注册服务</span></span><br><span class="line">    <span class="type">RawResponse</span> <span class="variable">rawResponse</span> <span class="operator">=</span> rawClient.makePutRequest(<span class="string">&quot;/v1/agent/service/register&quot;</span>, json, tokenParam);</span><br><span class="line">    <span class="comment">// 返回注册结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>&lt;Void&gt;(<span class="literal">null</span>, rawResponse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取服务列表</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response&lt;Map&lt;String, Service&gt;&gt; <span class="title function_">getAgentServices</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取注册在Consul上的所有服务</span></span><br><span class="line">    <span class="type">RawResponse</span> <span class="variable">rawResponse</span> <span class="operator">=</span> rawClient.makeGetRequest(<span class="string">&quot;/v1/agent/services&quot;</span>);</span><br><span class="line">    <span class="comment">// 封装到Map中</span></span><br><span class="line">    Map&lt;String, Service&gt; agentServices = GsonFactory.getGson()</span><br><span class="line">        .fromJson(rawResponse.getContent(),</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;Map&lt;String, Service&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>&lt;Map&lt;String, Service&gt;&gt;(agentServices, rawResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Spring Cloud 微服务实战》</li><li>《Spring Cloud与Docker 微服务架构实战》</li><li><a href="https://github.com/Netflix/eureka/wiki">Netflix &#x2F; Eureka</a></li><li><a href="https://www.infoq.cn/article/y_1BCrbLONU61s1gbGsU">详解 Eureka 缓存机制</a></li><li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-consul/2.2.0.RC2/reference/html/">Spring Cloud Consul</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务开山篇-架构的演进之路</title>
      <link href="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/"/>
      <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年03月21日13:57:24 — 有新的理解，对文章整体内容进行重构</li></ul><h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>近年来微服务架构是越来越火，各大论坛、博客、公众号都是相关的内容，以至于貌似不聊聊微服务自己就变得落伍了，但实话实说个人并不太喜欢这样的氛围，因为如何设计一个系统或进行技术选型，其实是应该根据业务、资源、团队等多个因数考量后决定出来的，而并非越新越好或越潮越好，正所谓“合适优于行业领先”就是这个道理。</p><p>虽然现在讨论微服务的确实大有人在，但经常能看见的只是技术类的话题，而聊聊自己公司为什么要使用微服务，又或者用了微服务之后和原来相比有什么好处这类型的话题是少之又少。当然，这也可能是因为大家都是技术出身，所以关注点很自然就落在技术上了。</p><p>个人认为，在学习一门技术之前应该要了解一下它为什么而存在，只有知道它为什么存在才能更直观地知道它解决了什么问题，以及如何更好地使用它。</p><h2 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h2><blockquote><p>基本介绍</p></blockquote><p>单体架构是最为<strong>直观</strong>和<strong>简单</strong>的系统架构，这样说的理由其实很简单，因为功能都在一个点上，方便了开发、测试和管理。但需要注意的是系统架构本身很多时候是把双刃剑，用得好自然好，用不好也很麻烦。</p><p>譬如个人认为以下条件使用单体架构比较有优势：</p><ul><li>系统业务清晰和简单</li><li>开发团队有着良好的编发规范</li><li>资源有限，对性能没要求</li></ul><p>而单体架构的优缺点如下：</p><ul><li>优点<ul><li>简单直观</li><li>测试和部署简单</li></ul></li><li>缺点<ul><li>随着业务越来越复杂，系统会变得冗肿和难以维护（譬如牵一发而动全身），导致扩展性差</li><li>代码耦合高，不利于团队开发（发团队有良好的编发规范除外）</li><li>对开发者要求较高，一般需要前后端兼顾</li><li>只能横向扩展，不利于资源的合理利用。譬如著名的二八定理就很好地解析这个问题</li></ul></li></ul><blockquote><p>传统的单体架构</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/001.png"></p><p>当前架构存在的问题是单点负载，无法应对业务越来越复杂，用户量越来越多的场景需要。</p><blockquote><p>横向扩展解决单点负载过高问题</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/003.png"></p><p>虽然横向扩展服务节点能够解决单点负载问题，但与此同时亦带来问题。</p><ul><li>多服务节点下会话的管理问题。常见解决方案如下<ul><li>Web服务器会话共享机制</li><li>共享存储服务</li><li>Nginx 的 IP 访问绑定</li><li>使用 Token 进行交互</li></ul></li><li>资源不能合理利用，因为在系统中可能只有几个功能被常用，但扩展式要全部部署</li></ul><blockquote><p>前后端分离让技术边界更加明确</p></blockquote><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/008.png"></p><p>随着前端技术的迅速发展，前后端分离架构的普及度已经非常高了。前后端进行分离后，不仅可以让技术分工更加明确，而且相较于最早的单体架构而言，后端服务节点变得更加轻量和简洁。</p><p>缺点是使用 Cookie - Sesssion 机制变得复杂，所以一般使用前后端分离架构后都会采用 Token 这种轻量的会话管理机制来维持通信。</p><p>拓展：如何前后端分离后继续使用Session？</p><ul><li>通过 CORS 允许客户端传递 cookie </li><li>通过 CORS 将 SessionId 设置到响应头</li><li>将 SessionId 设置到 Token 中</li></ul><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>譬如以前一些网络游戏的注册功能是嵌套在游戏本身的，但随着发展公司又开发或代理了更多的游戏，而这时如果玩家每次玩这家公司的新游戏就要记住一套账号那用户体验未免也太差了。因此在往后的日子里很多公司都约定俗成地将用户管理这块功能从软件或游戏中单独抽离了出来并让其成为一个独立系统来提供服务。而个时的游戏或软件就成为了一个分布式系统了。即<strong>游戏本身再加上账号管理系统</strong>才能算是一套完成的系统。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/002.png"></p><p>结论：功能分布在不同进程上的系统就叫分布式系统。</p><h3 id="什么时候应该使用分布式架构？"><a href="#什么时候应该使用分布式架构？" class="headerlink" title="什么时候应该使用分布式架构？"></a>什么时候应该使用分布式架构？</h3><ul><li>需要应对业务扩展带来的挑战</li><li>单体系统过于冗肿，以至于日常维护困难</li></ul><h3 id="分布式架构优缺点"><a href="#分布式架构优缺点" class="headerlink" title="分布式架构优缺点"></a>分布式架构优缺点</h3><p>优点：</p><ul><li>降低了代码和模块的耦合度</li><li>提高了系统的性能<ul><li>可扩展性</li><li>伸缩（容错）性</li><li>可复用性</li></ul></li><li>部署变得灵活，能够有针对性地对特定的功能模块进行扩容缩容</li><li>编码难度降低</li></ul><p>缺点：</p><ul><li>测试变得复杂，特别是跨团队协作</li><li>维护和运维成本变高</li><li>引入跨服务问题<ul><li>分布式事务一致性</li><li>可用性降低</li></ul></li><li>要开发和维护一套完善的分布式系统，对开发者自身的知识体系和能力有一定的要求</li></ul><h2 id="关于SOA架构"><a href="#关于SOA架构" class="headerlink" title="关于SOA架构"></a>关于SOA架构</h2><h3 id="服务化和SOA的关系"><a href="#服务化和SOA的关系" class="headerlink" title="服务化和SOA的关系"></a>服务化和SOA的关系</h3><p>服务化其实是一种在原分布式架构之上的进一步阐述。其强调应该将分布在各个进程上的功能点视作为一种服务，而这些服务应该有着<code>可复用</code>、<code>契约接口</code>、<code>模块化</code>、<code>服务自治</code>、<code>松耦合</code>、<code>无状态</code>等特点。而 SOA（面向服务架构）其实就是服务化大环境下的产物，它有着服务化的所有特点，及其相关技术的解决方案。</p><h3 id="SOA-的到底是什么，及其价值所在"><a href="#SOA-的到底是什么，及其价值所在" class="headerlink" title="SOA 的到底是什么，及其价值所在"></a>SOA 的到底是什么，及其价值所在</h3><p> 个人认为可以站在不同层面来理解 SOA。譬如<code>站在企业层面</code>，SOA 架构是一套用来解决<strong>现有异构系统信息孤岛问题</strong>的解决方案。企业通常会因为<strong>成本效益问题</strong>而引入 ESB (SOA) 组件以解决各个系统的通信问题，毕竟与推倒现有系统重构相比，这种方案的风险和成本更低。企业系统在接入 ESB（企业服务总线）后，就可以进行数据互通了。而此时接入 ESB 的所有系统都可将其被视为一个服务，而服务与服务之间就形成了一个 SOA 架构风格的生态系统。</p><p><code>站在应用系统层面</code>，系统应该进行模块化划分让其成为一个可复用和自治的功能单元（服务），且模块与模块之间能够以契约接口的方式进行通信和协作，以此来达到高内聚地耦合和提高可扩展性的需求。</p><p>最后总的来说，<strong>SOA 并不是特指某些技术，而是一套系统服务协作的解决方案</strong>。它强调的是服务复用和互通。我们可以通过 SOA 架构思想来提高企业内部系统服务的可复用性和使用价值。</p><h3 id="服务化常见技术"><a href="#服务化常见技术" class="headerlink" title="服务化常见技术"></a>服务化常见技术</h3><ul><li>Web Service：可基于 SOAP 或 REST 进行远程服务调用，因为用的是 XML 进行交行户，所以与平台无关，因此常用于解决异构系统协作问题</li><li>RPC：服务远程调用。譬如 Dubbo 就称自己为服务化 RPC 框架</li><li>MQ：提供消息的发布和订阅功能</li><li>ESB：企业服务总线。ESB 是 SOA 中极具代表性的组件，它一般会有以下功能和特点<ul><li>协议转换</li><li>请求路由</li><li>可集成 JMS(MQ) 和 Web Service</li></ul></li></ul><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/011.png"></p><h3 id="ESB-存在的问题"><a href="#ESB-存在的问题" class="headerlink" title="ESB 存在的问题"></a>ESB 存在的问题</h3><ul><li>ESB 是一个重量级组件，存在单点问题</li><li>开发和维护成本高，所以企业一般会采购现成的产品（譬如 WebSphere ESB、Message Broker），而不是自己实现</li><li>采购的 ESB 服务可能无法全面符合企业当前需求</li><li>因存在残留系统，所以改造幅度有限，从而导致通信协议通常不够轻量，其交互过程常有较多没有价值的信息</li><li>接入 ESB 时，对规范和标准要求较高，导致实施和推广难度加大</li></ul><h3 id="SOA-服务的两种协作模式"><a href="#SOA-服务的两种协作模式" class="headerlink" title="SOA 服务的两种协作模式"></a>SOA 服务的两种协作模式</h3><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/010.png"></p><p>第一种</p><ul><li>采用契约接口进行点对点通信，解决系统服务的复用问题</li><li>缺点是接口管理复杂，维护成本会随着系统服务数量的增加而提升</li></ul><p>第二种：</p><ul><li>采用 ESB 中间件进行通讯枢纽，以集中式管理和协调通信</li><li>缺点是 ESB 重且复杂，存在单点问题，一旦发生故障则瘫痪通信。要解决以上问题导致实施 SOA 变得复杂</li></ul><h3 id="为什么有人说-SOA-不适合互联网项目"><a href="#为什么有人说-SOA-不适合互联网项目" class="headerlink" title="为什么有人说 SOA 不适合互联网项目"></a>为什么有人说 SOA 不适合互联网项目</h3><p>首先个人并不完全认同这种说法。在上面已经提到过，SOA 并不是特指某些技术，而是一套系统服务协作的解决方案。譬如企业急需要解决残留系统的通信问题，这时自然就发挥 SOA（ESB）的作用了。譬如有一篇在网上广泛流传的文章《服务端高并发分布式架构演进之路》中就提及到，淘宝在第十二次架构的演进当中就引入了 ESB 来屏蔽接口调用时的协议差异。</p><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/004.png"></p><p>而阿里巴巴在国内本就是互联网电商的龙头企业，所以说 SOA 不合适互联网是根本站不住脚的。但为什么我要说<strong>不完全认同</strong>而不是<strong>不认同</strong>呢？这是因为如果你是<code>站在系统应用层面</code>来看的话，SOA 确实并不符合现今互联网应用的发展需求。个人认为导致这种局面的主要原因是 <strong>SOA 的通信协议和核心组件（ESB）比较重，而互联网系统对性能、可扩展、稳定、可维护等特性都有较大的需求</strong>。</p><h3 id="SOA（服务）治理"><a href="#SOA（服务）治理" class="headerlink" title="SOA（服务）治理"></a>SOA（服务）治理</h3><p>当企业内部的系统服务化成 SOA 架构后，系统服务的管理问题就很自然地被放大了，因为除了技术问题之外很可能还会引入跨团队协作。譬如现在 A 系统服务需要和 B 系统服务进行对接，但两个系统由不同公司的团队来维护，因此这时不仅会出现很多业务层面的问题，还有出现团队协作的问题。而所谓的服务治理其实就是用来解决这一问题的。我们也可以简单理解，<strong>服务治理其实就是如何让服务运行得更好的过程</strong>。它涵盖的范围非常广，譬如<code>开发治理</code> 、<code>测试治理</code>、<code>运维治理</code>、<code>管理治理</code>等多个方面 。而作为一个开发者而言，个人认为<code>开发治理</code>应该涵盖以下这些内容：</p><ul><li>服务网关，对服务入口进行统一管理，方便组织和访问</li><li>服务的注册和发现，将服务的提供者和消费者解耦，让消费者能感知提供者是否可用</li><li>服务容错，采用熔断机制，让系统在处理请求时即使有个别服务不可用，但依然能维持系统的可用性</li><li>采用轻量级通信协议，实现服务的松耦合</li><li>服务负载均衡，可用过前后端负载均衡，合理地分摊服务的请求负载</li><li>服务功能开关，可通过配置中心实现，在必须要可进行功能开关以及逻辑切换</li><li>服务限流，对请求或资源进行限额，保证服务能够在高负载下仍然能够继续提供服务</li><li>服务的安全性，譬如幂等、鉴权、接口规范等设计和处理</li><li>日志、度量、请求链路等监控，实时了解服务运行状态，应对各种突发情况</li><li>服务接口版本管理，方便必要时可回滚和记录版本迭代过程</li><li>服务版本治理，引入蓝绿发布和灰度发布（金丝雀发布），实现平滑地升级和回滚</li><li>实现标准化部署，通过容器镜像实现标准化部署，屏蔽运行环境带来的不确定性</li><li>关注服务的编排和伸缩性，依赖现今的流行的分布式支撑平台（譬如 Kubernetes）实现服务的动态伸缩，以及自动管理功能</li><li>完善的单元测试用例，单元测试覆盖率越高，就可以大大降低后续集成时带来的问题</li><li>合理的开发发布流程，引入持续集成方案，以提供一个可持续发布的应用系统版本</li><li>善于运用开发管理工具，譬如 Jira、禅道等，以提高协作效率和系统缺陷反馈工作</li><li>良好的源码版本控制，譬如采用 Git Flow 进行合理化的分支管理</li></ul><p>可以看到，光从技术角度来看服务治理就涵盖了很多内容，而且还不是全部，所以说服务治理是一个相当大的话题，而又因为个人目前的知识体系存在一定的局限性，所以关于服务治理有关的详细内容在这里就暂且不展开了。</p><p>我们回到 SOA 的讨论上，合理的服务治理有利于服务的稳定运作和维护。而在大体了解了什么是服务治理之后其实不难发现，如果站在企业层面来实施 SOA 治理的话，其实是一件成本相当大的事情。因为现有的系统已经成型很难做出较大的改动。即 SOA 不适合互联网项目的原因除了比较重之外还不利于服务治理的展开。</p><h2 id="微服务架构-MSA"><a href="#微服务架构-MSA" class="headerlink" title="微服务架构(MSA)"></a>微服务架构(MSA)</h2><h3 id="我理解的微服务"><a href="#我理解的微服务" class="headerlink" title="我理解的微服务"></a>我理解的微服务</h3><p>微服务并不是一种技术层面的东西，它更像是一种理念。意在设计出一个能够独立自主的服务。<br>个人认为一个微服务最起码需要满足以下几个基本要求</p><ul><li>业务职责单一：以业务能力为基本单位</li><li>高内聚低耦合：做到能力集中，而尽量少依赖外部能力</li><li>轻量级通信协议：使用简单和轻量的通信方式</li><li>无状态：利于服务伸缩</li><li>容器化：容器化则能提高部署效率及实现服务的自动伸缩</li></ul><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/005.png"></p><ul><li>图片源自：<a href="https://www.linkedin.com/pulse/event-driven-microservices-architecture-using-spring-cloud-bruksha">https://www.linkedin.com/pulse/event-driven-microservices-architecture-using-spring-cloud-bruksha</a></li></ul><h3 id="微服务带来的问题"><a href="#微服务带来的问题" class="headerlink" title="微服务带来的问题"></a>微服务带来的问题</h3><ul><li>微服务边界划分</li><li>服务治理</li><li>可视化监控</li><li>DevOps流程管理</li></ul><h3 id="微服务要多微？"><a href="#微服务要多微？" class="headerlink" title="微服务要多微？"></a>微服务要多微？</h3><p>个人认为将微服务中的“微”字理解为“合理”更加适当一些。其实只要能做到上面提到的<code>业务职责单一</code>、<code>高内聚低耦合</code>、<code>轻量级通信协议</code>、<code>轻量级通信协议</code>、<code>无状态</code>、<code>容器化</code>这几点，已经成功一大半，剩下服务治理和可视化监控的问题。</p><p>此外，现在比较流行的微服务设计方法论莫过于DDD了，即领域驱动设计。DDD方法论由一系列设计元模式组成，它强调通过降低沟通成本来达成意见共识，并要求面向通用语言来建模及代码落地，以求做到设计即代码，也就是说<strong>业务变设计变，设计变代码变</strong>的效果。在DDD中存在限界上下文的概念，它通用语言的语意边界，即能够规限领域模型的活动范围。对于微服务边界而言，限界上下文是一个重要参考点，它可以是一个顶级包，可以是一个模块，可以是一个服务&#x2F;系统。这是因为DDD过程其实并涉及技术或资源相关的元素，它整个建模过程都是面向业务和领域知识的，所欲代码落地时需要进一步设计。譬如我们可以以限界上下文为基础，再根据团队的能力和资源的数量来划分微服务。</p><p>DDD是一种非常棒的软件工程方法论，当你真正理解到DDD是什么的时候，你会发现它就是微服务该有的样子，但因为门槛有些高所以比较难落地。个人认为如果要落地则需要有开明的管理阶层和协作能力，以及一支精悍且稳定的开发团队才行，简而言之，越少人越容易落地。还有就是DDD本身是一个不断探索的过程，所以应该需要理解期间的成本才行。譬如如果你是一个开发者，你应该让老板买一本DDD的来看一下。。。</p><h3 id="常见的服务边界划分方法"><a href="#常见的服务边界划分方法" class="headerlink" title="常见的服务边界划分方法"></a>常见的服务边界划分方法</h3><ul><li>按业务能力划分</li><li>按功能划分（不推荐）</li><li>DDD（真微服务）</li></ul><h3 id="MSA-和-SOA-较为明显的区别"><a href="#MSA-和-SOA-较为明显的区别" class="headerlink" title="MSA 和 SOA 较为明显的区别"></a>MSA 和 SOA 较为明显的区别</h3><p><img src="/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%B1%B1%E7%AF%87-%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B/015.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《大型网站系统与Java中间件实践》</li><li><a href="https://developer.ibm.com/articles/cl-lightweight-integration-1/">The fate of the ESB</a></li><li><a href="https://stackoverflow.com/questions/35014242/what-is-the-difference-between-api-gateway-and-esb">What is the difference between API Gateway and ESB?</a></li><li><a href="https://www.ibm.com/developerworks/cn/webservices/0811_magy_esb/">第 1 部分，IBM ESB 产品之间的比较</a></li><li><a href="https://chenglinpain.wordpress.com/2008/12/23/soa%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E4%BC%81%E4%B8%9A%E7%9A%84%E9%80%89%E6%8B%A9/">SOA的优缺点和企业的选择</a></li><li><a href="https://martinfowler.com/articles/microservices.html">Microservices</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDAwMjYyOA==&mid=2247483990&idx=1&sn=45f1edbd4451b2692384a231d095acf0&chksm=c02776fdf750ffeb688a1aa161bc01f7a88607b75e854be9094501d7e546b9fc2c9ba1caf118&mpshare=1&scene=23&srcid=1116vkUKPMplQOslmc5NPqVm&sharer_sharetime=1573910488563&sharer_shareid=8c59a8516a5dde55c3322bdf632d8ba4#rd">鲸技术：微服务之服务治理</a></li><li><a href="https://www.ibm.com/developerworks/cn/webservices/ar-servgov/index.html">SOA 治理简介</a></li><li><a href="https://segmentfault.com/a/1190000018626163">服务端高并发分布式架构演进之路</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot基本的东西需要懂</title>
      <link href="/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/"/>
      <url>/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年6月7日 10:11:51 — 函数式控制器、404处理、后端跨域配置</li></ul><h2 id="SpringBoot自动配置的基本原理"><a href="#SpringBoot自动配置的基本原理" class="headerlink" title="SpringBoot自动配置的基本原理"></a>SpringBoot自动配置的基本原理</h2><blockquote><p>注意：基于 SpringBoot 2.1.6.RELEASE 版本</p></blockquote><h3 id="初始化自动配置信息"><a href="#初始化自动配置信息" class="headerlink" title="初始化自动配置信息"></a>初始化自动配置信息</h3><p>以下为一个简单的springboot启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟中代码到 SpringApplication 构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line"><span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));  </span><br><span class="line"><span class="comment">// 当前应用的类型：none、servlet、reactive</span></span><br><span class="line"><span class="comment">// 默认为none、添加web模块后为servlet、添加webflux模块后为reactive</span></span><br><span class="line"><span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath(); </span><br><span class="line"><span class="comment">// 设置内置的初始化器</span></span><br><span class="line">setInitializers((Collection)getSpringFactoriesInstances(ApplicationContextInitializer.class)); </span><br><span class="line"><span class="comment">// 设置内置的事件监听器</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line"><span class="comment">// 加载当前项目的启动类，即 DemoApplication.class</span></span><br><span class="line"><span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码中可以看到有多处使用了 getSpringFactoriesInstances 方法。该方法的作用是<strong>根据指定的类型</strong>从 <code>META/spring.factories</code>文件中加载其实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; Collection&lt;T&gt; <span class="title function_">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> &#123;</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> getClassLoader(); </span><br><span class="line"><span class="comment">// 使用SPI思想加载type的实现</span></span><br><span class="line">Set&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line"><span class="comment">// 根据名称创建实例</span></span><br><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);</span><br><span class="line">AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的方法，进一步追中方法 SpringFactoriesLoader.loadFactoryNames </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">factoryClassName</span> <span class="operator">=</span> factoryClass.getName();</span><br><span class="line"><span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName,  Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 加载类路径下的所有 META-INF/spring.factories 文件</span></span><br><span class="line"><span class="comment">// public static final String FACTORIES_RESOURCE_LOCATION = &quot;META-INF/spring.factories&quot;;</span></span><br><span class="line">        <span class="comment">// 注意：在一个SpringBoot项目中最少会有两个 spring.factories</span></span><br><span class="line"><span class="comment">// 第一个位于spring-boot、第二个位于spring-boot-autoconfigure</span></span><br><span class="line">Enumeration&lt;URL&gt; urls = (classLoader != <span class="literal">null</span> ?</span><br><span class="line"> classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line"> ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">result = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">cache.put(classLoader, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>org\springframework\boot\spring-boot\2.1.6.RELEASE\spring-boot-2.1.6.RELEASE.jar!\META-INF\spring.factories</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PropertySource Loaders</span></span><br><span class="line"><span class="attr">org.springframework.boot.env.PropertySourceLoader</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.env.PropertiesPropertySourceLoader,\</span></span><br><span class="line"><span class="string">org.springframework.boot.env.YamlPropertySourceLoader</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Run Listeners</span></span><br><span class="line"><span class="attr">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.event.EventPublishingRunListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Error Reporters</span></span><br><span class="line"><span class="attr">org.springframework.boot.SpringBootExceptionReporter</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.FailureAnalyzers</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Application Context Initializers</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.ClearCachesApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.FileEncodingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.config.DelegatingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.context.logging.LoggingApplicationListener,\</span></span><br><span class="line"><span class="string">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Environment Post Processors</span></span><br><span class="line"><span class="attr">org.springframework.boot.env.EnvironmentPostProcessor</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</span></span><br><span class="line"><span class="string">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor,\</span></span><br><span class="line"><span class="string">org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Failure Analyzers</span></span><br><span class="line"><span class="attr">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BeanDefinitionOverrideFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.NoSuchMethodFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># FailureAnalysisReporters</span></span><br><span class="line"><span class="attr">org.springframework.boot.diagnostics.FailureAnalysisReporter</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</span></span><br></pre></td></tr></table></figure><p>org\springframework\boot\spring-boot-autoconfigure\2.1.6.RELEASE\spring-boot-autoconfigure-2.1.6.RELEASE-sources.jar!\META-INF\spring.factories</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initializers</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configuration Import Listeners</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.AutoConfigurationImportListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configuration Import Filters</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="comment"># @EnableAutoConfiguration注解默认加载的自动配置类</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityRequestMatcherProviderAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Failure analyzers</span></span><br><span class="line"><span class="attr">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Template availability providers</span></span><br><span class="line"><span class="attr">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span></span><br></pre></td></tr></table></figure><h3 id="启动-SpringBoot-应用"><a href="#启动-SpringBoot-应用" class="headerlink" title="启动 SpringBoot 应用"></a>启动 SpringBoot 应用</h3><p>SpringApplication.run() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 从spring.factories中加载SpringApplicationRunListener监听器实现用于发布事件、</span></span><br><span class="line">    <span class="comment">// 它只有一个实现，就是EventPublishingRunListener</span></span><br><span class="line"><span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">listeners.starting(); <span class="comment">// 发布应用“准备启动”事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line"><span class="comment">// 加载配置（入参、环境变量、配置文件）</span></span><br><span class="line">         <span class="comment">// 譬如配置文件加载就由ConfigFileApplicationListener监听器来完成</span></span><br><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 如果开了Banner，则打印Banner</span></span><br><span class="line">         <span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据当前应用环境实例化应用上下文对象</span></span><br><span class="line"><span class="comment">// 譬如当前导入了Web模块，所以环境为Servlet，因此创建的具体类型为AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动应用上下文</span></span><br><span class="line"><span class="comment">// 1. 加载配置类</span></span><br><span class="line"><span class="comment">// 2. 扫描配置类上的注解，并优先实例化</span></span><br><span class="line"><span class="comment">//   譬如@EnableAutoConfiguration中通过@Import导入的AutoConfigurationImportSelector</span></span><br><span class="line"><span class="comment">// 3. 利用AutoConfigurationImportSelector从spring.factories中导入自动配置类</span></span><br><span class="line"><span class="comment">// 4. 先根据排除规则得到AutoConfigurationImportFilter过滤掉排除了的配置</span></span><br><span class="line"><span class="comment">// 5. 再根据Condition过滤器（FilteringSpringBootCondition）对类进行条件启用筛选，得到符合条件的自动配置类</span></span><br><span class="line"><span class="comment">// 6. 最后再根据Condition过滤器（OnBeanCondition、OnClassCondition、OnWebApplicationCondition）筛选出符合条件的BeanDefinition</span></span><br><span class="line"><span class="comment">//   参考：AutoConfigurationImportSelector#filter</span></span><br><span class="line">         <span class="comment">// 7. 启动服务器。参考ApplicationContext#refresh()中的onRefresh()</span></span><br><span class="line"><span class="comment">// 8. 实例化阶段，根据BeanDefinition实例化Bean</span></span><br><span class="line">refreshContext(context); </span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 发布“应用即将运行”事件，这时应用上下文已经启动完成</span></span><br><span class="line">listeners.started(context); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调ApplicationRunner、CommandLineRunner的实现</span></span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">listeners.running(context); <span class="comment">// 发布应用【正在运行】事件，这时run方法即将执行完成</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-Conditional-注解"><a href="#关于-Conditional-注解" class="headerlink" title="关于 @Conditional 注解"></a>关于 @Conditional 注解</h2><p>@Conditional 注解是 Spring 4 提供的实例化谓语，也就是说只有满足满足特定条件下才会实例化 Bean。</p><p>以下为常见的 @Conditional 派生注解：</p><table><thead><tr><th>条件注解</th><th>说明</th></tr></thead><tbody><tr><td>@ConditionalOnBean</td><td>要求上下文中存在特定的 Bean 实例</td></tr><tr><td>@ConditionalOnClass</td><td>要求类路径中存在指定的类文件</td></tr><tr><td>@ConditionalOnExpression</td><td>要求满足表达式要求</td></tr><tr><td>@ConditionalOnMissingBean</td><td>要求上下文中不存在特定的 Bean 实例</td></tr><tr><td>@ConditionalOnMissingClass</td><td>要求类路径中不存在指定的class文件</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>要求当前应用所在的环境不是 Web 环境（Servlet、WebFlux）</td></tr><tr><td>@ConditionalOnProperty</td><td>要求环境中有指定的配置</td></tr></tbody></table><p>自定义条件注解：</p><p>实现 Condition 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalOnHelloWorld</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">      <span class="comment">// 我这里要求配置中 my.flag 的值为 true 才满足条件</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.valueOf(context.getEnvironment().getProperty(<span class="string">&quot;my.flag&quot;</span>).toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Conditional</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Conditional(ConditionalOnHelloWorld.class)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;into TestConfig.test()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了以上方式使用 @Conditional 之外还可以参照 SpringBoot 中的其派生条件注解来创建</p><h2 id="SpringBoot参数和配置文件的加载顺序"><a href="#SpringBoot参数和配置文件的加载顺序" class="headerlink" title="SpringBoot参数和配置文件的加载顺序"></a>SpringBoot参数和配置文件的加载顺序</h2><h3 id="参数（优先级由上至下）"><a href="#参数（优先级由上至下）" class="headerlink" title="参数（优先级由上至下）"></a>参数（优先级由上至下）</h3><ol><li>启动应用时输入的命令行参数</li><li>名称为SPRING_APPLICATION_JSON的系统环境变量或系统属性（格式：SPRING_APPLICATION_JSON&#x3D;’{“my”:{“name”:”test”}}’）</li><li>ServletConfig初始化参数</li><li>ServletContext初始化参数</li><li>Java系统属性（System.getPropterties()）</li><li>操作系统环境变量</li><li>配置文件</li><li>@PropertySource引入的Properties文件参数</li><li>默认参数（通过SpringApplication.setDefaultProperties设置）</li></ol><p>注：其参数可以使用@Value获取并注入</p><h3 id="配置文件（优先级由上至下）"><a href="#配置文件（优先级由上至下）" class="headerlink" title="配置文件（优先级由上至下）"></a>配置文件（优先级由上至下）</h3><p>加载配置文件的工作由<code>org.springframework.boot.context.config.ConfigFileApplicationListener</code>监听器来完成的，时机在SpringApplication创建后，run之前。</p><p><img src="/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/1.png"></p><p>其余不常用请参考如下文档：<a href="https://docs.spring.io/spring-boot/docs/2.5.4/reference/html/features.html#features.external-config">https://docs.spring.io/spring-boot/docs/2.5.4/reference/html/features.html#features.external-config</a></p><h2 id="开发时用的自动重启模块"><a href="#开发时用的自动重启模块" class="headerlink" title="开发时用的自动重启模块"></a>开发时用的自动重启模块</h2><p>开发 Web 是一件非常耗时的事情，耗时主要不是耗在写代码上，而是部署、配置、弄环境这些繁琐的事情上，实属非常令人厌烦，所以先前一直使用一款叫 JReble 的热部署插件，而 SpringBoot也提供了类似的功能，该功能位于<code>spring-boot-devtools</code>模块，而且使用方法也很简单。</p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 IDEA 让其提供支持：</p><p><img src="/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/2.png"></p><p>双击 shift 搜索关键字 “Maintenance”</p><blockquote><p>如果是 windows 则按 “ctrl + shift + alt + &#x2F;“ 后选择注册即可</p></blockquote><p><img src="/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/3.png"></p><p>至此已经配置完成，但值得注意的是，当开启了 devtools 功能后默认会添加以下配置</p><blockquote><p>org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123; <span class="comment">// 禁止缓存</span></span><br><span class="line">Map&lt;String, Object&gt; properties = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">properties.put(<span class="string">&quot;spring.thymeleaf.cache&quot;</span>, <span class="string">&quot;false&quot;</span>); </span><br><span class="line">properties.put(<span class="string">&quot;spring.freemarker.cache&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.groovy.template.cache&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.mustache.cache&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;server.servlet.session.persistent&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.h2.console.enabled&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.resources.cache.period&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.resources.chain.cache&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.template.provider.cache&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.mvc.log-resolved-exception&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;server.error.include-stacktrace&quot;</span>, <span class="string">&quot;ALWAYS&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;server.servlet.jsp.init-parameters.development&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">properties.put(<span class="string">&quot;spring.reactor.stacktrace-mode.enabled&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">PROPERTIES = Collections.unmodifiableMap(properties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot-2-x默认的数据源连接池-HikariCP"><a href="#SpringBoot-2-x默认的数据源连接池-HikariCP" class="headerlink" title="SpringBoot 2.x默认的数据源连接池 - HikariCP"></a>SpringBoot 2.x默认的数据源连接池 - HikariCP</h2><p>添加 JDBC 操作依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 SpringBoot 1.5 版本时默认的数据源连接池是<strong>Tomcat据源连接池</strong>，而 2.x 之后更改为<strong>HikariCP</strong>。</p><p>以下为 DataSource 自动配置源码（org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Conditional(PooledDataSourceCondition.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span></span><br><span class="line"><span class="comment">// 加载数据源连接池配置类</span></span><br><span class="line"><span class="meta">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span><br><span class="line"><span class="meta">         DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span><br><span class="line"><span class="meta">         DataSourceJmxConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PooledDataSourceConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration</p><p><img src="/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/6.png"></p><p>可以看到，添加jdbc依赖后，HikariCP被添加到类路径中</p><h2 id="会话级别的H2数据库和ActiveMQ"><a href="#会话级别的H2数据库和ActiveMQ" class="headerlink" title="会话级别的H2数据库和ActiveMQ"></a>会话级别的H2数据库和ActiveMQ</h2><p>SpringBoot 提供了方便开发者在调研阶段使用的数据库 H2 和 ActiveMQ 模块。其非常方便的是两个模块都并不需要做任何配置就可以马上使用（既无需在本地安装DB和MQ），实属方便。但需要注意的是 H2 和 ActiveMQ 都是会话级别的，即重启后就会抹杀之前的数据。</p><h3 id="H2数据库"><a href="#H2数据库" class="headerlink" title="H2数据库"></a>H2数据库</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- h2数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring data jpa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正常地配置实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常地编写jpa repository即可。如果想要查看H2数据内容，步骤如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">console:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>浏览器访问：localhost:8080&#x2F;h2-console</p><p>数据库信息可以在控制台输出的日志中得知，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#x27;/h2-console&#x27;. Database available at &#x27;jdbc:h2:mem:testdb&#x27;</span><br></pre></td></tr></table></figure><h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正常地使用mq功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        template.convertAndSend(<span class="string">&quot;person:msg:new&quot;</span>, <span class="string">&quot;新增了一个person对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;person:msg:new&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;msg=&#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Actuator来观察应用端点"><a href="#使用Actuator来观察应用端点" class="headerlink" title="使用Actuator来观察应用端点"></a>使用Actuator来观察应用端点</h2><p>Actuator 启动器是 SpringBoot 提供的一个用于监控和管理应用的模块。其功能譬如有<strong>审计</strong>、<strong>健康信息</strong>、<strong>数据采集统计</strong>等等功能。</p><p>官方文档：<a href="https://docs.spring.io/spring-boot/docs/2.2.0.M4/reference/html/#production-ready">https://docs.spring.io/spring-boot/docs/2.2.0.M4/reference/html/#production-ready</a></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>/actuator</code>查看有哪些端点</p><p><img src="/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/4.png"></p><p>默认情况下只开放以上端点，如果想要开启所有内置端点则需要添加一下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露所有端点</span></span><br><span class="line"><span class="attr">management.endpoints.enabled-by-default</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="comment"># 允许端点关闭应用</span></span><br><span class="line"><span class="attr">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="常用的端点"><a href="#常用的端点" class="headerlink" title="常用的端点"></a>常用的端点</h3><table><thead><tr><th>请求方式</th><th>请求路径</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;beans</td><td>返回应用中的所有bean信息</td></tr><tr><td>GET</td><td>&#x2F;health</td><td>监控检测</td></tr><tr><td>GET</td><td>&#x2F;env</td><td>返回系统所有的环境变量</td></tr><tr><td>GET</td><td>&#x2F;env&#x2F;{name}</td><td>返回具体的环境变量</td></tr><tr><td>GET</td><td>&#x2F;info</td><td>返回系统信息</td></tr><tr><td>GET</td><td>&#x2F;conditions</td><td>返回自动配置的条件信息</td></tr><tr><td>POST</td><td>&#x2F;shutdown</td><td>关闭应用</td></tr><tr><td>GET</td><td>&#x2F;mappings</td><td>返回应用所有的URL映射</td></tr><tr><td>GET</td><td>&#x2F;metrics</td><td>返回当前应用的系统指标（度量）信息，（提供给如promethues）</td></tr><tr><td>GET</td><td>&#x2F;scheduledtasks</td><td>返回应用的定时任务信息</td></tr><tr><td>GET</td><td>&#x2F;threaddump</td><td>返回应用线程转存信息</td></tr></tbody></table><table><thead><tr><th>请求方式</th><th>请求路径</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;heapdump</td><td>返回应用当前堆内存的信息</td></tr><tr><td>GET</td><td>&#x2F;httptrace</td><td>返回应用的http请求的追中信息</td></tr><tr><td>GET</td><td>&#x2F;caches</td><td>返回应用的缓存管理对象信息</td></tr><tr><td>POST</td><td>&#x2F;refresh</td><td>重新加载一次配置参数（如配置文件），用于刷新配置</td></tr></tbody></table><h3 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h3><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Endpoint(id = &quot;my&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEndponint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">endpointMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my endpoint msg!!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">endpointMsg2</span><span class="params">(<span class="meta">@Selector</span> String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my endpoint &quot;</span> + msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  href<span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/my&quot;</span><span class="punctuation">,</span></span><br><span class="line">  templated<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">my-msg<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">href<span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/actuator/my/&#123;msg&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    templated<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用可视化界面Admin来展示端点信息"><a href="#使用可视化界面Admin来展示端点信息" class="headerlink" title="使用可视化界面Admin来展示端点信息"></a>使用可视化界面Admin来展示端点信息</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><blockquote><p>可以创建一个独立的springboot应用在作为amdin-ui应用</p></blockquote><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动admin server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span> <span class="comment">// 开启admin server</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>界面</p><p><img src="/SpringBoot%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%B8%9C%E8%A5%BF%E9%9C%80%E8%A6%81%E6%87%82/5.png"></p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加配置，将端点注册到amdin server上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露端点</span></span><br><span class="line"><span class="attr">management.endpoints.enabled-by-default</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">my-endpoint-application</span></span><br><span class="line"><span class="comment"># admin server的地址</span></span><br><span class="line"><span class="attr">spring.boot.admin.client.url</span>=<span class="string">http://localhost:8080</span></span><br></pre></td></tr></table></figure><h2 id="关于SpringBoot如何弃用默认技术或自动配置"><a href="#关于SpringBoot如何弃用默认技术或自动配置" class="headerlink" title="关于SpringBoot如何弃用默认技术或自动配置"></a>关于SpringBoot如何弃用默认技术或自动配置</h2><p>有些时候我们希望使用自己熟悉的技术，譬如 SpringBoot 中默认数据库连接池是 HikariCP，现在我们打算使用Druid，那么只需要将 HikariCP 在 pom 中的依赖排除再将 Druid 的 starter 导入即可。</p><p>Druid GitHub：<a href="https://github.com/alibaba/druid">https://github.com/alibaba/druid</a></p><p>详细配置：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外，有时候我们不希望 SpringBoot 对某些功能进行自动配置。譬如多数据源这种常见下，除了使用 @Primary 进行优先级注入之外，还可以直接排除其自动配置改为手动配置。实现方法如下：</p><ol><li>首先将配置排除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class, </span></span><br><span class="line"><span class="meta">        DataSourceTransactionManagerAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">        JdbcTemplateAutoConfiguration.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Demo2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在配置文件中添加自定义的数据源连接配置项</p></li><li><p>加载配置项到环境中，再用其进行数据源和事务管理器的配置</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;one.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSourceProperties <span class="title function_">oneDataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">oneDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">DataSourceProperties</span> <span class="variable">dataSourceProperties</span> <span class="operator">=</span> oneDataSourceProperties();</span><br><span class="line">  <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Resource</span> <span class="comment">// 根据BeanName注入</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">twoTransactionManager</span><span class="params">(DataSource oneDataSource)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(oneDataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;two.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSourceProperties <span class="title function_">twoDataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">twoDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">DataSourceProperties</span> <span class="variable">dataSourceProperties</span> <span class="operator">=</span> twoDataSourceProperties();</span><br><span class="line">  <span class="keyword">return</span> dataSourceProperties.initializeDataSourceBuilder().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Resource</span> <span class="comment">// 根据BeanName注入</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">oneTransactionManager</span><span class="params">(DataSource twoDataSource)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(twoDataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：</p><ul><li>除了以上废弃默认配置之外，也可以在 SpringBoot 项目中实现自动配置类，然后通过 @AutoConfigureBefore 注解将自己的自动配置类排到特定配置前即可。例如在自动配置类中实例化了 DataSource，则后续的自动配置因为有 @ConditionalOnMissingBean 的缘故就不会再创建 Bean 了</li></ul><h2 id="函数式控制器（Spring5新特性）"><a href="#函数式控制器（Spring5新特性）" class="headerlink" title="函数式控制器（Spring5新特性）"></a>函数式控制器（Spring5新特性）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring5加入的函数式Controller （当控制器相对较为简单的时候推荐使用）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> RouterFunctions.route()</span><br><span class="line">        .GET(<span class="string">&quot;hello&quot;</span>, handlerFunction -&gt; ServerResponse.ok().body(<span class="string">&quot;hello function.&quot;</span>))</span><br><span class="line">        .GET(<span class="string">&quot;hello2&quot;</span>, handlerFunction -&gt; ServerResponse.ok().body(<span class="string">&quot;hello function2.&quot;</span>))</span><br><span class="line">        .POST(<span class="string">&quot;hello3&quot;</span>, handlerFunction -&gt; ServerResponse.ok().body(<span class="string">&quot;hello function3.&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于以下</span></span><br><span class="line"><span class="comment">//    @RestController</span></span><br><span class="line"><span class="comment">//    class XxxController &#123;</span></span><br><span class="line"><span class="comment">//        @GetMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="comment">//        public String hello() &#123;</span></span><br><span class="line"><span class="comment">//            return &quot;hello function.&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        @GetMapping(&quot;hello2&quot;)</span></span><br><span class="line"><span class="comment">//        public String hello2() &#123;</span></span><br><span class="line"><span class="comment">//            return &quot;hello function2.&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        @PostMapping(&quot;hello3&quot;)</span></span><br><span class="line"><span class="comment">//        public String hello3() &#123;</span></span><br><span class="line"><span class="comment">//            return &quot;hello function3.&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">hello2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置前缀</span></span><br><span class="line">    <span class="keyword">return</span> RouterFunctions.route().nest(RequestPredicates.path(<span class="string">&quot;api/v1&quot;</span>), builder -&gt; &#123;</span><br><span class="line">        builder.GET(<span class="string">&quot;hello&quot;</span>, handlerFunction -&gt; ServerResponse.ok().body(<span class="string">&quot;v1 hello function.&quot;</span>))</span><br><span class="line">            .GET(<span class="string">&quot;hello2&quot;</span>, handlerFunction -&gt; ServerResponse.ok().body(<span class="string">&quot;v1 hello function2.&quot;</span>))</span><br><span class="line">            .POST(<span class="string">&quot;hello3&quot;</span>, handlerFunction -&gt; ServerResponse.ok().body(<span class="string">&quot;v1 hello function3.&quot;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">        .onError(Exception.class, (exception, serverRequest) -&gt; &#123; <span class="comment">// 局部异常处理</span></span><br><span class="line">            <span class="keyword">return</span> EntityResponse.fromObject(<span class="keyword">new</span> <span class="title class_">Error</span>(exception.getMessage())).status(HttpStatus.NOT_FOUND).build();</span><br><span class="line">        &#125;).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后端CORS响应头跨域"><a href="#后端CORS响应头跨域" class="headerlink" title="后端CORS响应头跨域"></a>后端CORS响应头跨域</h2><p>局部跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;json&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> JsonData <span class="title function_">json</span><span class="params">(WebRequest webRequest ,</span></span><br><span class="line"><span class="params">                     <span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;, required = false)</span> String jsessionid)</span> </span><br><span class="line">    <span class="keyword">throws</span> Exception &#123; <span class="comment">// WebRequest 是 Spring 用来代替 HttpServletRequest 的工具类</span></span><br><span class="line">    </span><br><span class="line">    webRequest.getHeaderNames().forEachRemaining(System.out::println);</span><br><span class="line">    System.out.printf(<span class="string">&quot;jsessionid=%s&quot;</span>, jsessionid==<span class="literal">null</span>?<span class="string">&quot;null&quot;</span>:jsessionid);</span><br><span class="line">    <span class="keyword">return</span> JsonData.buildSuccess(LocalDateTime.now());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        上传文件</span></span><br><span class="line"><span class="comment">//        @PostMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="comment">//        public String handle(@RequestPart(&quot;meta-data&quot;) MetaData metadata,</span></span><br><span class="line"><span class="comment">//                             @RequestPart(&quot;file-data&quot;) MultipartFile file) &#123;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br></pre></td></tr></table></figure><p>全局跨域 - 方式1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">            .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局跨域 - 方式2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局配置Cors请求头跨域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">    config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">    config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">    source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="404以及全局异常处理"><a href="#404以及全局异常处理" class="headerlink" title="404以及全局异常处理"></a>404以及全局异常处理</h2><p>NotFoundExecptionHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotFoundExecptionHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ERROR_PATH</span> <span class="operator">=</span> <span class="string">&quot;/error&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotFoundController</span><span class="params">(ErrorAttributes errorAttributes)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorAttributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：必须显示填写&quot;/error&quot;，否则无法截 HttpServletRequest</span></span><br><span class="line">    <span class="meta">@RequestMapping(ERROR_PATH)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">notFoundPage</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                timestamp: &quot;2018-11-22T20:57:52.886+0000&quot;,</span></span><br><span class="line"><span class="comment">                status: 404,</span></span><br><span class="line"><span class="comment">                error: &quot;Not Found&quot;,</span></span><br><span class="line"><span class="comment">                message: &quot;No message available&quot;,</span></span><br><span class="line"><span class="comment">                path: &quot;/asdasdasd&quot;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getErrorAttributes(request, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR_PATH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GlobalExceptionHanddler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="comment">//@RestControllerAdvice(annotations = RestController.class) // 只处理 @RestController</span></span><br><span class="line"><span class="comment">//@RestControllerAdvice(&quot;pub.tandi.controller&quot;) // 只处理指定包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHanddler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span> <span class="comment">// 报文响应码</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> JsonData <span class="title function_">arithmeticException</span><span class="params">(HttpServletRequest request, Exception exception)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonData.buildError(<span class="string">&quot;算数异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot启动后触发"><a href="#SpringBoot启动后触发" class="headerlink" title="SpringBoot启动后触发"></a>SpringBoot启动后触发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppStarted</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;应用已启动完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ResponseEntity-自定义对象响应"><a href="#ResponseEntity-自定义对象响应" class="headerlink" title="ResponseEntity+自定义对象响应"></a>ResponseEntity+自定义对象响应</h2><p>自定义响应类 - JsonData</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonData</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">// 状态码 0表示成功，1表示处理中，-1表示失败，其他表示http状态码</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> <span class="comment">// 当 Object 为 Date/LocalDateTime 时指定它们的日期时间格式</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">private</span> String msg;<span class="comment">// 描述</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonData</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonData</span><span class="params">(Integer code, Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功，传入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData <span class="title function_">buildSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(<span class="number">0</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功，传入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData <span class="title function_">buildSuccess</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(<span class="number">0</span>, data, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功，传入数据,及描述信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData <span class="title function_">buildSuccess</span><span class="params">(Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(<span class="number">0</span>, data, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功，传入数据,及状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData <span class="title function_">buildSuccess</span><span class="params">(Object data, <span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(code, data, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 失败，传入描述信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData <span class="title function_">buildError</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(-<span class="number">1</span>, <span class="literal">null</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 失败，传入描述信息,状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonData <span class="title function_">buildError</span><span class="params">(String msg, Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonData</span>(code, <span class="literal">null</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;JsonData [code=&quot;</span> + code + <span class="string">&quot;, data=&quot;</span> + data + <span class="string">&quot;, msg=&quot;</span> + msg</span><br><span class="line">                + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;hi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;JsonData&gt; <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        HttpHeaders headers = new HttpHeaders();</span></span><br><span class="line">    <span class="comment">//        headers.add(&quot;Content-Type&quot;, &quot;application/json; charset=utf-8&quot;);</span></span><br><span class="line">    <span class="comment">//        headers.add(&quot;Cache-Control&quot;,&quot;max-age=60, must-revalidate, no-transform&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity</span><br><span class="line">        .ok()</span><br><span class="line">        <span class="comment">//                .headers(headers)</span></span><br><span class="line">        .cacheControl(CacheControl.noCache()) <span class="comment">// 禁止缓存</span></span><br><span class="line">        .body(JsonData.buildSuccess(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ResponseEntity 是 Spring 提供用来设置 HTTP 响应码和响应头的一站式工具类</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.baeldung.com/spring-mvc-functional-controllers">Functional Controllers in Spring MVC</a></li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#webmvc-fn">webmvc-fn</a></li><li><a href="https://www.baeldung.com/spring-mvc-cache-headers">Cache Headers in Spring MVC</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul的基本使用</title>
      <link href="/consul%E5%85%A5%E9%97%A8/"/>
      <url>/consul%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><ul><li>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置</li><li>Consul 提供 服务注册与发现、分布一致性协议实现、健康检查、Key&#x2F;Value存储、多数据中心等功能，而无需要依赖其它工具（比如ZooKeeper等），使用起来也较为简单</li><li>Consul 使用Golang开发，具有天然的可移植性。其中安装包仅包含一个可执行文件，方便部署之余且和Docker能够无缝配合</li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><blockquote><p>官网：<a href="https://www.consul.io/">https://www.consul.io/</a></p></blockquote><p>consul是一个命令工具，上传linux或直接用wget下载，解压后将其mv到&#x2F;bin目录即可</p><p><img src="/consul%E5%85%A5%E9%97%A8/002.png"></p><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-advertise        通知展现地址用来改变我们给集群中的其他节点展现的地址，一般情况下-bind地址就是展现地址</span><br><span class="line">-bootstrap        用来控制一个server是否在bootstrap模式，在一个datacenter中只能有一个server处于bootstrap模式，当一个server处于bootstrap模式时，可以自己选举为raft leader。</span><br><span class="line">-bootstrap-expect 在数据中心中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap公用</span><br><span class="line">-bind             该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</span><br><span class="line">-client           consul绑定的地址，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1</span><br><span class="line">-config-file      明确的指定要加载哪个配置文件</span><br><span class="line">-config-dir       配置文件目录，里面所有以.json结尾的文件都会被加载</span><br><span class="line">-data-dir         提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</span><br><span class="line">-dc               该标记控制agent允许的datacenter的名称，默认是dc1</span><br><span class="line">-encrypt          指定secret key，使consul在通讯时进行加密，key可以通过consul keygen生成，同一个集群中的节点必须使用相同的key</span><br><span class="line">-join             加入一个已经启动的agent的ip地址，可以多次指定多个agent的地址。如果consul不能加入任何指定的地址中，则agent会启动失败，默认agent启动时不会加入任何节点。</span><br><span class="line">-retry-join       和join类似，但是允许你在第一次失败后进行尝试。</span><br><span class="line">-retry-interval   两次join之间的时间间隔，默认是30s</span><br><span class="line">-retry-max        尝试重复join的次数，默认是0，也就是无限次尝试</span><br><span class="line">-log-level        consul agent启动后显示的日志信息级别。默认是info，可选：trace、debug、info、warn、err。</span><br><span class="line">-node             节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名</span><br><span class="line">-protocol         consul使用的协议版本</span><br><span class="line">-rejoin           使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。</span><br><span class="line">-server           定义agent运行在server模式，每个集群至少有一个server，建议每个集群的server不要超过5个</span><br><span class="line">-syslog           开启系统日志功能，只在linux/osx上生效</span><br><span class="line">-ui-dir           提供存放web ui资源的路径，该目录必须是可读的</span><br><span class="line">-pid-file         提供一个路径来存放pid文件，可以使用该文件进行SIGINT/SIGHUP(关闭/更新)agent</span><br></pre></td></tr></table></figure><h2 id="服务端口"><a href="#服务端口" class="headerlink" title="服务端口"></a>服务端口</h2><table><thead><tr><th>端口</th><th>作用</th></tr></thead><tbody><tr><td>8300</td><td>Used for RPC Server</td></tr><tr><td>8301</td><td>LAN GOSSIP（局域网传播）</td></tr><tr><td>8302</td><td>WAN GOSSIP（广域网传播）</td></tr><tr><td>8500</td><td>Used for HTTP Server</td></tr><tr><td>8600</td><td>Used for DNS Server</td></tr><tr><td>8502</td><td>Used for gRPC Server</td></tr></tbody></table><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p><img src="/consul%E5%85%A5%E9%97%A8/001.png"></p><ul><li>Consul 支持多数据中心（官网建议使用1个）</li><li>Consul Cluster 由多个 Consul Agent 实例组成</li><li>其中 Agent 分为： Client模式 和 Server模式。Server模式主要负责对外提供服务。Client模式是一个轻量级的进程，主要用于注册服务、运行健康检查、转发请求等</li><li>Agent Client 与 Agent Server 通信使用 Gossip协议 和 RPC协议</li><li>Agent Server 之间通信使用 Raft算法 和 RPC协议</li><li>其中 Agent Server 又分为：Leader 和 Follower 两种角色。Leader主要负责 处理请求 和 同步数据</li><li>集群的 Agent Server 通过Raft算法来实现Leader选举，所以 Agent Server 数量应该是 2n+1（官方推荐每个集群至少有1个 Agent Server 且不要超过5个）</li><li>在Consul的Raft算法实现中，Follower 会将所有请求转发给 Leader 处理，通过这样的方式来提高一致性</li></ul><h2 id="Agent的启动和停止"><a href="#Agent的启动和停止" class="headerlink" title="Agent的启动和停止"></a>Agent的启动和停止</h2><blockquote><p>启动agent</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ consul agent -dev -node agent-01 -client 192.168.31.250</span><br></pre></td></tr></table></figure><ul><li>-dev：开发模式启动。可以省略数据 bind 和 data_dir 配置</li><li>-node：节点名称。默认为所在机器名称</li><li>-client：HTTP、DNS、RPC等服务的通信地址。默认为127.0.0.1</li></ul><blockquote><p>命令方式 - 查看集群成员</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ consul members -http-addr=192.168.31.250:8500</span><br><span class="line">Node      Address         Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">agent-01  127.0.0.1:8301  alive   server  1.6.2  2         dc1  &lt;all&gt;</span><br></pre></td></tr></table></figure><ul><li>-http-addr：对应agent启动时设置的 -client 值。默认为127.0.0.1:8500</li></ul><blockquote><p>REST方式 - 查看集群成员</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl 192.168.31.250:8500/v1/catalog/nodes</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;ID&quot;: &quot;dbdb33c2-8498-683e-bf4c-cfcb33bec3f7&quot;,</span><br><span class="line">        &quot;Node&quot;: &quot;agent-01&quot;,</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;Datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">        &quot;TaggedAddresses&quot;: &#123;</span><br><span class="line">            &quot;lan&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;wan&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Meta&quot;: &#123;</span><br><span class="line">            &quot;consul-network-segment&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;CreateIndex&quot;: 9,</span><br><span class="line">        &quot;ModifyIndex&quot;: 10</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>停止agent</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ consul leave -http-addr=192.168.31.250:8500</span><br></pre></td></tr></table></figure><blockquote><p>启动一个生产环境的Agent</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  apps consul agent -server -data-dir /tmp/consul -node=consul-01 -bind=192.168.31.250 -config-dir /etc/consul.d</span><br></pre></td></tr></table></figure><ul><li>-data-dir：保存Agent运行过程产生的数据</li><li>-node：节点名称</li><li>-bind：绑定的机器，即监听那台机器的服务</li><li>-config-dir：配置文件夹</li></ul><h2 id="注册和查询服务"><a href="#注册和查询服务" class="headerlink" title="注册和查询服务"></a>注册和查询服务</h2><blockquote><p>步骤1：手动注册一个服务</p></blockquote><p>需要手动创建文件和写入内容，文件名称一般和服务名称一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mkdir /etc/consul.d</span><br><span class="line">➜  ~ echo &#x27;&#123;&quot;service&quot;: &#123;&quot;name&quot;: &quot;web&quot;, &quot;tags&quot;: [&quot;rails&quot;], &quot;port&quot;: 80&#125;&#125;&#x27; &gt; /etc/consul.d/web.json</span><br></pre></td></tr></table></figure><blockquote><p>步骤2：启动agent并指定配置文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ consul agent -dev -node=agent-01 -config-dir=/etc/consul.d</span><br></pre></td></tr></table></figure><blockquote><p>步骤3：REST方式查询服务。可以追加 ?passing 表明只查询健康的服务</p></blockquote><p>查看指定服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl http://localhost:8500/v1/catalog/service/web</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;ID&quot;: &quot;5486cbfa-c081-32c9-7e8d-8ad06855093f&quot;,</span><br><span class="line">        &quot;Node&quot;: &quot;agent-01&quot;,</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;Datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">        &quot;TaggedAddresses&quot;: &#123;</span><br><span class="line">            &quot;lan&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;wan&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NodeMeta&quot;: &#123;</span><br><span class="line">            &quot;consul-network-segment&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ServiceKind&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ServiceID&quot;: &quot;web&quot;,</span><br><span class="line">        &quot;ServiceName&quot;: &quot;web&quot;,</span><br><span class="line">        &quot;ServiceTags&quot;: [</span><br><span class="line">            &quot;rails&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ServiceAddress&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ServiceWeights&quot;: &#123;</span><br><span class="line">            &quot;Passing&quot;: 1,</span><br><span class="line">            &quot;Warning&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ServiceMeta&quot;: &#123;&#125;,</span><br><span class="line">        &quot;ServicePort&quot;: 80,</span><br><span class="line">        &quot;ServiceEnableTagOverride&quot;: false,</span><br><span class="line">        &quot;ServiceProxy&quot;: &#123;</span><br><span class="line">            &quot;MeshGateway&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Expose&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ServiceConnect&quot;: &#123;&#125;,</span><br><span class="line">        &quot;CreateIndex&quot;: 10,</span><br><span class="line">        &quot;ModifyIndex&quot;: 10</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>查看所有服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl http://localhost:8500/v1/catalog/services</span><br><span class="line">&#123;</span><br><span class="line">    &quot;consul&quot;: [],</span><br><span class="line">    &quot;my-service-name&quot;: [</span><br><span class="line">        &quot;release=1&quot;,</span><br><span class="line">        &quot;mytag=tandi&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;web&quot;: [</span><br><span class="line">        &quot;rails&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用REST方式注册服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl -X PUT -H &quot;Content-type:application/json&quot; -d &#x27;&#123;&quot;ID&quot;:&quot;my-service-id&quot;,&quot;Name&quot;:&quot;my-service-name&quot;,&quot;Tags&quot;:[&quot;release=1&quot;,&quot;mytag=tandi&quot;],&quot;Address&quot;:&quot;192.168.4.120&quot;,&quot;Port&quot;:8888,&quot;Meta&quot;:&#123;&quot;my_version&quot;:&quot;4.0&quot;&#125;,&quot;EnableTagOverride&quot;:false,&quot;Check&quot;:&#123;&quot;DeregisterCriticalServiceAfter&quot;:&quot;90m&quot;,&quot;HTTP&quot;:&quot;http://www.tandi.wiki/&quot;,&quot;Interval&quot;:&quot;10s&quot;&#125;&#125;&#x27; http://127.0.0.1:8500/v1/agent/service/register</span><br></pre></td></tr></table></figure><h2 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h2><blockquote><p>环境说明：两台CentOS7虚拟机，简称cent01，cent02；其中cent02复制cent01（虚拟机复制要小心，特别要注意软件的配置文件和数据）</p></blockquote><p>SSH连接如下：</p><p><img src="/consul%E5%85%A5%E9%97%A8/018.png"></p><p><strong>步骤1：创建一个Server节点（cent01）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ consul agent -server -bootstrap-expect 1  -data-dir /tmp/consul -node=server-node -bind=192.168.4.157  -config-dir /etc/consul.d</span><br></pre></td></tr></table></figure><p><strong>步骤2：创建一个Client节点（cent02）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ consul agent -data-dir /tmp/consul -node=client-node01 -bind=192.168.4.159 -config-dir /etc/consul.d</span><br></pre></td></tr></table></figure><p><strong>步骤3：将client-node01节点加入到集群（cent02）</strong></p><blockquote><p>注意：在consul中，节点想要加入到集群中，只需要知道集群中的随便一个服务节点即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ consul join 192.168.4.157</span><br></pre></td></tr></table></figure><p><strong>步骤4：查看consul集群信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ consul members</span><br><span class="line">Node(节点名称)  Address(节点位置)    Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">server-node    192.168.4.157:8301  alive   server  1.4.2  2         dc1  &lt;all&gt;</span><br><span class="line">client-node01  192.168.4.159:8301  alive   client  1.4.2  2         dc1  &lt;default&gt;</span><br></pre></td></tr></table></figure><p><strong>集群中可能出现的问题</strong></p><ul><li><p>无法加入集群，因为nodeId冲突</p><ul><li>虚拟机复制的时候报&#x2F;tmp&#x2F;consul也复制了，最大可能是在虚拟机复制之前，使用过&#x2F;tmp&#x2F;consul，并产生了nodeid保存到了目录，解决方法将其清除重启consul agent</li></ul></li><li><p>桥接模式，两台虚拟机之间ping不同</p><ul><li>确认网络可用，即虚拟机能联网，主机能ssh操作虚拟机</li><li>关闭主机和虚拟机的防火墙</li></ul></li></ul><h2 id="启用WEB-UI"><a href="#启用WEB-UI" class="headerlink" title="启用WEB-UI"></a>启用WEB-UI</h2><blockquote><p>本机访问指定 -ui 即可。非本机访问需要指定 -client 0.0.0.0 -ui</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -bind 192.168.31.250 -config-dir /etc/consul.d  -client </span><br><span class="line">0.0.0.0 -ui</span><br></pre></td></tr></table></figure><blockquote><p>访问：<a href="http://localhost:8500/">http://localhost:8500</a></p></blockquote><p><img src="/consul%E5%85%A5%E9%97%A8/003.png"></p><h2 id="键值对存取"><a href="#键值对存取" class="headerlink" title="键值对存取"></a>键值对存取</h2><blockquote><p>保存 key - value</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在kv（根）目录创建</span></span><br><span class="line">➜  ~ curl -X PUT -d &#x27;值&#x27; http://localhost:8500/v1/kv/键</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在指定目录下创建</span></span><br><span class="line">➜  ~ curl -X PUT -d &#x27;值&#x27; http://localhost:8500/v1/kv/目录名称/键</span><br></pre></td></tr></table></figure><blockquote><p>查看 key - value</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询kv（根）目录下所有key-value</span></span><br><span class="line">➜  ~ curl http://localhost:8500/v1/kv/\?recurse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询指定key</span></span><br><span class="line">➜  ~ curl http://localhost:8500/v1/kv/键</span><br></pre></td></tr></table></figure><blockquote><p>更新 key - value</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl -X PUT -d &#x27;值&#x27; http://localhost:8500/v1/kv/键</span><br></pre></td></tr></table></figure><blockquote><p>删除 key - value</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl -X DELETE http://localhost:8500/v1/kv/键</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://learn.hashicorp.com/consul">HashiCorp Consul</a></li></ul><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的基本使用</title>
      <link href="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/"/>
      <url>/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="认识Docker"><a href="#认识Docker" class="headerlink" title="认识Docker"></a>认识Docker</h2><ul><li>Docker是一个应用容器引擎，可实现环境的一次封装到处运行</li><li>Docker支持多容器同时运行，利用容器可以实现产品的：<code>标准化打包</code>、<code>环境隔离</code>、<code>标准化部署</code>等功能</li></ul><blockquote><p>个人感受：</p><p>作为一个开发者来说可能Docker并不是你百分需要掌握的技能，但是如果你会Docker的话，个人认为这将会大大提高你的学习和生产能力。</p><p>就我个人而言就最为讨厌配置环境，因为环境不同或者稍有些许配置错误都将会浪费很多时间，这使得我不能专注于技术本身而将时间浪费在了弄环境上。这时Docker（或者说容器技术）就打救了我。使用Docker只需一两条命令就很便捷地搭建出一个数据库或各种应用服务，设置各种集群等，无疑这对于广大开发者来说是一种福音。</p></blockquote><h2 id="容器化与虚拟化的区别"><a href="#容器化与虚拟化的区别" class="headerlink" title="容器化与虚拟化的区别"></a>容器化与虚拟化的区别</h2><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/001.png"></p><ul><li>容器化可以简单理解为现今的一种轻量级虚拟化技术</li><li>容器引擎的虚拟化和隔离主要依赖的是操作系统的隔离技术。譬如network namespace做到网卡、cgroup做资源（cpu、内存的用量）隔离等</li><li>虚拟化是从物理硬件上虚拟出一套虚拟硬件，所以位于虚拟化上的应用限制于虚拟硬件（<a href="https://zh.wikipedia.org/wiki/Hypervisor">Hypervisor层</a>)。而容器技术则直接受限于物理硬件，换句话就是容器技术可以更加充分地利用物理机上的资源。这点是作为使用者应该知道的最重要的区别。</li></ul><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/012.png"></p><ul><li><strong>Docker Client：</strong>负责接收用户的 Docker Command 和 Restful API</li><li><strong>Docker Deamon：</strong>可理解为Docker Server，即我们所理解的容器引擎。负责处理Docker Client请求并协调处理其他Docker组件</li><li><strong>Docker Image：</strong>镜像可以理解为对某个应用及其环境的封装。在Docker中镜像的特点是：只读、可重用和可叠加</li><li><strong>Docker Container：</strong>容器是镜像的运行时。在Docker中容器之间可以做到资源隔离，这就是所谓的” 船舱隔离 “</li><li><strong>Docker Regitry：</strong>Regitry是Docker Image的托管仓库。Regitry可以分为公共和私有两种。公司内部或者个人可以搭建自己的私有仓库在保存一些不想被外界使用的镜像。而一般的开源应用服务如果支持容器化的话都会将自己的镜像放到公共仓库中提供给大家使用（类似于maven中央仓库概念）。例如我们现在想要安装一个MySQL，这时我们就可以到公共仓库中找到对应的镜像文件然后拉下来使用即可。</li></ul><blockquote><p>常见的公共镜像仓库（Regitry）有哪些？</p><p><a href="https://hub.docker.com/">DockerHub</a>（Docker默认）</p><ul><li><a href="https://quay.io/">Quay</a></li><li><a href="https://cloud.google.com/container-registry/">Google Container Registry</a></li><li><a href="https://azure.microsoft.com/en-us/services/container-registry/">Azure Container Registry</a></li></ul><p>以上公共镜像仓库均位于国外，所以拉取镜像时可能比较缓慢甚至失败。因此国内出现了不少CDN加速站点，例如以下这些：</p><ul><li><a href="https://registry.docker-cn.com/">Docker cn</a></li><li><a href="https://dockerhub.azk8s.cn/">Azure 中国镜像</a></li><li><a href="https://reg-mirror.qiniu.com/">七牛</a></li><li><a href="https://hub-mirror.c.163.com/">网易163</a></li><li><a href="https://mirror.ccs.tencentyun.com/">腾讯云</a></li></ul></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install  -y docker</span><br></pre></td></tr></table></figure><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><blockquote><p>以Tomcat为例子</p></blockquote><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜ docker pull tomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/library/tomcat ... </span><br><span class="line">latest: Pulling from docker.io/library/tomcat</span><br><span class="line">844c33c7e6ea: Pull complete </span><br><span class="line">ada5d61ae65d: Pull complete </span><br><span class="line">f8427fdf4292: Pull complete </span><br><span class="line">f025bafc4ab8: Pull complete </span><br><span class="line">67b8714e1225: Pull complete </span><br><span class="line">64b12da521a3: Pull complete </span><br><span class="line">2e38df533772: Pull complete </span><br><span class="line">4144d55bbb47: Pull complete </span><br><span class="line">fc059d90e2b2: Pull complete </span><br><span class="line">9d8f80ed8620: Pull complete </span><br><span class="line">Digest: sha256:68355b27adee5fc76c23e3d3cb994bd2733f05aa8e2c070a61346e16eed308ac</span><br><span class="line">Status: Downloaded newer image for docker.io/tomcat:latest</span><br></pre></td></tr></table></figure><p>启动tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/tomcat    latest              6fa48e047721        7 hours ago         507 MB</span><br><span class="line">➜  ~ docker run --name tomcat -p 8080:8080 -d 6fa48e047721  </span><br><span class="line">7e7d2242f369250999c9c79b47255b3d310a6dd1aff3c45fc99685108579b61b</span><br></pre></td></tr></table></figure><ul><li>–name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：后台运行并打印容器id</li></ul><p>上面的两步操作可以合成一步，即直接run。这样docker会自动拉取镜像再运行，如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name tomcat -p 8080:8080 -d tomcat</span><br></pre></td></tr></table></figure><h3 id="服务相关"><a href="#服务相关" class="headerlink" title="服务相关"></a>服务相关</h3><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><p>查看容器状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker ps -a （包含历史）</span><br></pre></td></tr></table></figure><p>查看元数据（如：ip、网关等等）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器运行时名称</span><br></pre></td></tr></table></figure><p>输出容器中应用日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器id或容器名字</span><br></pre></td></tr></table></figure><p>在容器中执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器id或容器名字 命令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如启动容器中的shell</span></span><br><span class="line">docker exec -it 容器id或容器名字 bash</span><br></pre></td></tr></table></figure><p>停止所有docker容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止指定容器</span></span><br><span class="line">docker stop 容器名称或id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有</span></span><br><span class="line">docker stop $(docker ps -qa)</span><br></pre></td></tr></table></figure><p>删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id或容器名字</span><br></pre></td></tr></table></figure><p>实时监控容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats tomcat</span><br></pre></td></tr></table></figure><p>查看容器的映射端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker port tomcat</span><br><span class="line">8080/tcp -&gt; 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>连接正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach --sig-proxy=false tomcat</span><br></pre></td></tr></table></figure><ul><li><code>--sig-proxy=false</code>作用是 ctrl+c 退出连接不关闭容器</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>查找镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">NAME：仓库名称</span><br><span class="line">DESCRIPTION：镜像描述</span><br><span class="line">STARS：用户评价，反应一个镜像的受欢迎程度</span><br><span class="line">OFFICIAL：是否官方</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定镜像</span></span><br><span class="line">docker rmi 镜像</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><p>查看docker容器目前支持的网络模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">f4a3530daab5        bridge              bridge              local</span><br><span class="line">f0d6c1700eb9        host                host                local</span><br><span class="line">7ede4aa145a3        none                null                local</span><br></pre></td></tr></table></figure><ul><li>可在除此run镜像时使用<code>--net</code>指定</li></ul><p>查看docker容器目前的挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br></pre></td></tr></table></figure><p>docker run常用参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line"></span><br><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line"></span><br><span class="line">-i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line"></span><br><span class="line">-p: 端口映射，格式为：主机(宿主)端口:容器端口；</span><br><span class="line"></span><br><span class="line">-t: 为容器重新分配一个伪输入终端；</span><br><span class="line"></span><br><span class="line">--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br><span class="line"></span><br><span class="line">--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">-h &quot;mars&quot;: 指定容器的hostname；</span><br><span class="line"></span><br><span class="line">-e username=&quot;ritchie&quot;: 设置环境变量；</span><br><span class="line"></span><br><span class="line">--env-file=[]: 从指定文件读入环境变量；</span><br><span class="line"></span><br><span class="line">--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</span><br><span class="line"></span><br><span class="line">-m :设置容器使用内存最大值；</span><br><span class="line"></span><br><span class="line">--net=&quot;bridge&quot;: 指定容器的网络模式，支持 bridge/host/none/container: 四种类型；</span><br><span class="line"></span><br><span class="line">--link=[]: 添加链接(连接的容器ip会配合到DNS中)；</span><br><span class="line"></span><br><span class="line">--expose=[]: 开放一个端口或一组端口；</span><br><span class="line"></span><br><span class="line">--restart=no ：指定宕机重启策略，支持no/no-failure/always/unless-stopped</span><br></pre></td></tr></table></figure><h2 id="配置国内镜像加速站点"><a href="#配置国内镜像加速站点" class="headerlink" title="配置国内镜像加速站点"></a>配置国内镜像加速站点</h2><ul><li>我当前使用的系统是CentOS</li></ul><blockquote><p>步骤1：将加速站点添加到 &#x2F;etc&#x2F;docker&#x2F;daemon.json 中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:[&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>步骤2：重启docker服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从文件系统中获取更改的配置并重新生成依赖树</span></span><br><span class="line">➜  ~ sudo systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务</span></span><br><span class="line">➜  ~ sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure><blockquote><p>查看是否配置成功</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker info</span><br><span class="line">...</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><h3 id="了解镜像的构建"><a href="#了解镜像的构建" class="headerlink" title="了解镜像的构建"></a>了解镜像的构建</h3><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/002.png"></p><ul><li>首先 Docker Image 本身是<code>只读</code>且<code>可复用</code>的。那么如何复用呢？在Docker中镜像复用是通过镜像叠加来实现的</li><li>如上图所示，因为镜像本身是只读的，所以每一次修改都会生成一个新的镜像层（layer）</li><li>图中的 bootfs（引导文件系统） 主要用于加载和初始化内核相关内容，完成后会自动unmount。而 Base Image 是整个镜像的最基层，即 rootfs（根文件系统），可以简单理解为是一个最简约轻量的文件系统。随后的 emacs、apache 等等实质都是一些软件应用的打包，而在容器运行时，容器将会包含所有镜像中的内容</li></ul><h3 id="基于容器构建"><a href="#基于容器构建" class="headerlink" title="基于容器构建"></a>基于容器构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker commit 容器id或名称 镜像名称</span><br></pre></td></tr></table></figure><ul><li>不推荐这种方式，因为使用的人无法直观得知镜像的构建过程</li></ul><h3 id="使用Dockerfile构建-推荐"><a href="#使用Dockerfile构建-推荐" class="headerlink" title="使用Dockerfile构建(推荐)"></a>使用Dockerfile构建(推荐)</h3><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><blockquote><p>步骤1：编写 Dockerfile 文件。vim Dockerfile </p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> tomcat</span><br><span class="line"><span class="comment"># 构建过程中执行命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;helle dockerfile ~~~~~&#x27;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>步骤2：基于 Dockerfile 构建镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前所处路径</span></span><br><span class="line">➜  dockerfile pwd</span><br><span class="line">/home/vagrant/dockerfile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式：docker build -t 库名称(可省略)/镜像名称:标签  Dockerfile所在路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">镜像名称为 mytomcat</span></span><br><span class="line">➜  dockerfile docker build -t mytomcat .          </span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1/2 : FROM tomcat</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">6fa48e047721 <span class="comment"># 镜像ID</span></span></span><br><span class="line">Step 2/2 : RUN echo &#x27;helle dockerfile ~~~~~&#x27;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 3b8b12856cac <span class="comment"># 1.基于镜像6fa48e047721启动一个容器</span></span></span><br><span class="line">helle dockerfile ~~~~~ # 2.修改当前容器3b8b12856cac</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">fdd8fa08e7fe <span class="comment"># 3.根据修改过后的容器生产一个镜像</span></span></span><br><span class="line">Removing intermediate container 3b8b12856cac # 4.成功生产镜像后移除原来容器</span><br><span class="line">Successfully built fdd8fa08e7fe # 最终镜像ID</span><br></pre></td></tr></table></figure><ul><li>除此之外还可以从构建过程看出每一个Dockerfile指令都是一个 Step</li></ul><blockquote><p>查看生产的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  dockerfile docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mytomcat            latest              fdd8fa08e7fe        3 minutes ago       507 MB</span><br><span class="line">docker.io/tomcat    latest              6fa48e047721        9 hours ago         507 MB</span><br></pre></td></tr></table></figure><h4 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h4><h5 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像（注意：FROM必须在文件顶部）</span></span><br><span class="line"><span class="keyword">FROM</span> 镜像名称 </span><br></pre></td></tr></table></figure><ul><li><p>scratch 是基础镜像的特殊值，表示当前镜像不基于任何镜像来构建镜像，例如只用作软件打包</p></li><li><p>最基础的镜像应该是系统镜像</p></li><li><p>如果是基于某些软件应用来构建自己的镜像，则无需显式指定系统镜像而只需直接基于某个软件应用镜像来构建即可。例如 FROM nginx，这里的nginx本身已经是基于系统镜像来构建的，所有已经有了 rootfs。因此在构建自己的镜像时，我们只需考虑如何使用基础镜像和挂载数据到基础镜像即可。如下：</p><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/003.png"></p></li></ul><h5 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 镜像构建时执行的命令</span></span><br><span class="line"><span class="comment"># 注意，每执行一次RUN都会生成新的Layer（其实每个大写指令都是一个层Layer)</span></span><br><span class="line"><span class="comment"># 所以，尽量将命令写在一行，如用 &amp;&amp; 拼接命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> 需要执行的linux命令</span></span><br></pre></td></tr></table></figure><h5 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定Dockerfile的元数据。例如创建者的信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> 作者名称&lt;作者邮箱&gt;</span><br></pre></td></tr></table></figure><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文件到镜像的指定位置(因为镜像是只读的，所以该操作会产生新Layer，其他指令同理)</span></span><br><span class="line"><span class="comment"># 源文件可以是一个路径也可以是一个url地址（注意：会自动进行解压）</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> 源文件 目标文件</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [<span class="string">&quot;源文件1&quot;</span>, <span class="string">&quot;源文件2&quot;</span>, ..., <span class="string">&quot;目标文件&quot;</span>]</span></span><br></pre></td></tr></table></figure><h5 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文件到镜像的指定位置</span></span><br><span class="line"><span class="comment"># 功能和ADD一样，但不支持解压和URL</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> 源文件 目标文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [<span class="string">&quot;源文件1&quot;</span>, <span class="string">&quot;源文件2&quot;</span>, ..., <span class="string">&quot;目标文件&quot;</span>]</span></span><br></pre></td></tr></table></figure><h5 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> key value</span><br><span class="line"><span class="keyword">ENV</span> key=value</span><br></pre></td></tr></table></figure><h5 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定构建时参数，功能和ENV一样，但是只在Dockerfile内有效</span></span><br><span class="line"><span class="keyword">ARG</span> key=value</span><br></pre></td></tr></table></figure><p>LABEL</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定镜像元数据。可以使用 docker inspect 命令查看到</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> 元数据</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;2.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> desc=<span class="string">&quot;其实就是描述信息&quot;</span></span></span><br></pre></td></tr></table></figure><h5 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定工作目录</span></span><br><span class="line"><span class="comment"># 注意：该指令相当于Linux的CD命令，在该命令之后的RUN/CMD/ENTRYPOINT，都将在该工作目录下进行</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> 目录路径</span></span><br></pre></td></tr></table></figure><ul><li>注意：默认的工作目录是根路径（既 &#x2F; 下面）</li></ul><h5 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定数据挂载点。可将容器数据目录挂载到宿主机器上</span></span><br><span class="line"><span class="comment"># 非常重要，用于避免数据因容器重启而丢失</span></span><br><span class="line"><span class="comment"># 可以使用 docker volume ls 命令查看到</span></span><br><span class="line"><span class="comment"># 启动容器 docker run 的时候，可以通过-v参数修改挂载点</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> 路径</span></span><br></pre></td></tr></table></figure><h5 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露容器端口（只针对容器之间）</span></span><br><span class="line"><span class="comment"># 注意1：该配置只作声明作用，有助于观看Dockerfile的人得知端口信息</span></span><br><span class="line"><span class="comment"># 注意2：如果外部需要访问，则使用参数-p</span></span><br><span class="line"><span class="keyword">EXPOSE</span> 端口号</span><br><span class="line"><span class="keyword">EXPOSE</span> 端口号/协议</span><br></pre></td></tr></table></figure><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置容器启动时执行的默认命令</span></span><br><span class="line"><span class="comment"># 注意1: CMD在Dockerfile中是唯一的，既即使定义多个CMD都会被最后的覆盖</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;命令&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;命令&quot;</span>,<span class="string">&quot;命令参数1&quot;</span>,<span class="string">&quot;命令参数2&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> 命令 命令参数</span></span><br><span class="line"><span class="comment"># 注意2：CMD只是默认的，如果docker run的指定了命令则CMD会被覆盖</span></span><br><span class="line"><span class="comment"># 例如：docker run -it tomcat bin/bash</span></span><br></pre></td></tr></table></figure><h5 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 功能和CMD一样，但不会被 docker run 的命令行参数指定的指令所覆盖</span></span><br><span class="line"><span class="comment"># 如：ENTRYPOINT [&quot;/bin/echo&quot;]，然后docker run -itd xxxx hi传入参数，则会输出hi</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;命令&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;命令&quot;</span>,<span class="string">&quot;命令参数1&quot;</span>,<span class="string">&quot;命令参数2&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> 命令 命令参数</span></span><br></pre></td></tr></table></figure><h5 id="RUN、CMD、ENTRYPOINT之间的区别"><a href="#RUN、CMD、ENTRYPOINT之间的区别" class="headerlink" title="RUN、CMD、ENTRYPOINT之间的区别"></a>RUN、CMD、ENTRYPOINT之间的区别</h5><blockquote><p>说明：</p><ol><li>如果ENTRYPOINT在CMD之后定义，ENTRYPOINT中的命令会覆盖CMD中的命令</li><li>而且ENTRYPOINT中的命令，可以使用CMD中定义的参数</li><li>ENTRYPOINT使用参数的顺序：先使用自己定义的参数，再使用CMD中的定义的参数</li></ol></blockquote><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/007.png"></p><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/008.png"></p><ul><li>注意：shell格式能输出ENV变量，而exec格式不能</li></ul><blockquote><p>例子</p></blockquote><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/005.png"></p><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/006.png"></p><h5 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h5><blockquote><p>以下 Dockerfile 源自MySQL</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在debian layer(临时产生的容器)中添加用户和用户组</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新上一层layer(临时产生的容器)和下载配置相关上下文</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends gnupg dirmngr &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> GOSU_VERSION <span class="number">1.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新上一层layer(临时产生的容器)和配置相关上下文</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -x \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends ca-certificates wget &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; wget -O /usr/local/bin/gosu <span class="string">&quot;https://github.com/tianon/gosu/releases/download/<span class="variable">$GOSU_VERSION</span>/gosu-<span class="subst">$(dpkg --print-architecture)</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; wget -O /usr/local/bin/gosu.asc <span class="string">&quot;https://github.com/tianon/gosu/releases/download/<span class="variable">$GOSU_VERSION</span>/gosu-<span class="subst">$(dpkg --print-architecture)</span>.asc&quot;</span> \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">export</span> GNUPGHOME=<span class="string">&quot;<span class="subst">$(mktemp -d)</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; gpgconf --<span class="built_in">kill</span> all \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$GNUPGHOME</span>&quot;</span> /usr/local/bin/gosu.asc \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">chmod</span> +x /usr/local/bin/gosu \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; gosu nobody <span class="literal">true</span> \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt-get purge -y --auto-remove ca-certificates wget</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹docker-entrypoint-initdb.d</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /docker-entrypoint-initdb.d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新上一层layer(临时产生的容器)和配置相关上下文</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash"><span class="comment"># for MYSQL_RANDOM_ROOT_PASSWORD</span></span></span><br><span class="line">pwgen \</span><br><span class="line">openssl \</span><br><span class="line">perl \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置相关上下文</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex; \</span></span><br><span class="line"><span class="language-bash"><span class="comment"># gpg: key 5072E1F5: public key &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; imported</span></span></span><br><span class="line">key=<span class="string">&#x27;A4A9406876FCBD3C456770C88C718D3B5072E1F5&#x27;</span>; \</span><br><span class="line">export GNUPGHOME=<span class="string">&quot;$(mktemp -d)&quot;</span>; \</span><br><span class="line">gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys <span class="string">&quot;$key&quot;</span>; \</span><br><span class="line">gpg --batch --export <span class="string">&quot;$key&quot;</span> &gt; /etc/apt/trusted.gpg.d/mysql.gpg; \</span><br><span class="line">gpgconf --kill all; \</span><br><span class="line">rm -rf <span class="string">&quot;$GNUPGHOME&quot;</span>; \</span><br><span class="line">apt-key list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_MAJOR <span class="number">8.0</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_VERSION <span class="number">8.0</span>.<span class="number">18</span>-<span class="number">1</span>debian9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置相关上下文</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;deb http://repo.mysql.com/apt/debian/ stretch mysql-<span class="variable">$&#123;MYSQL_MAJOR&#125;</span>&quot;</span> &gt; /etc/apt/sources.list.d/mysql.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新上一层layer(临时产生的容器)和配置相关上下文</span></span><br><span class="line"><span class="comment"># 该操作会生成新的layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &#123; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> mysql-community-server mysql-community-server/data-dir select <span class="string">&#x27;&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> mysql-community-server mysql-community-server/root-pass password <span class="string">&#x27;&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> mysql-community-server mysql-community-server/re-root-pass password <span class="string">&#x27;&#x27;</span>; \</span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> mysql-community-server mysql-community-server/remove-test-db select <span class="literal">false</span>; \</span></span><br><span class="line"><span class="language-bash">&#125; | debconf-set-selections \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; apt-get update &amp;&amp; apt-get install -y mysql-community-client=<span class="string">&quot;<span class="variable">$&#123;MYSQL_VERSION&#125;</span>&quot;</span> mysql-community-server-core=<span class="string">&quot;<span class="variable">$&#123;MYSQL_VERSION&#125;</span>&quot;</span> &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">rm</span> -rf /var/lib/mysql &amp;&amp; <span class="built_in">mkdir</span> -p /var/lib/mysql /var/run/mysqld \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">chown</span> -R mysql:mysql /var/lib/mysql /var/run/mysqld \</span></span><br><span class="line"><span class="language-bash"><span class="comment"># ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime</span></span></span><br><span class="line">&amp;&amp; chmod <span class="number">777</span> /var/<span class="keyword">run</span><span class="language-bash">/mysqld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置挂载点</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝配置文件到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> config/ /etc/mysql/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-entrypoint.sh /usr/local/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生新的Layer</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动时指定脚本docker-entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;docker-entrypoint.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口号</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3306</span> <span class="number">33060</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器启动时启动mysql服务</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;mysqld&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p>基于以上 Dockerfile 生成 MySQL 镜像</p></blockquote><p>下载 Dockerfile 到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/docker-library/mysql/6659750146b7a6b91a96c7867</span><br><span class="line">29b4d482cf49fe6/8.0/Dockerfile</span><br></pre></td></tr></table></figure><p>基于 Dockerfile 构 建MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  dockerfile docker build -t mysql8 .</span><br></pre></td></tr></table></figure><h2 id="单机容器编排"><a href="#单机容器编排" class="headerlink" title="单机容器编排"></a>单机容器编排</h2><h3 id="Docker-Compose和容器编排"><a href="#Docker-Compose和容器编排" class="headerlink" title="Docker Compose和容器编排"></a>Docker Compose和容器编排</h3><ul><li>Docker的最佳实践是一个容器只运行一个进程</li><li>通常应用服务都不会单个存在，很多时候服务之间是存在依赖性的。例如应用依赖数据库服务和缓存服务，这时就需要对容器进行编排。例如在服务A启动之前需要保证服务B和服务C启动，否者服务A不能正常提供服务，这时我们就需要手动启动多个服务</li><li>针对以上情况，如果服务太多的话，启动服务的工作就会变得额外沉重。为了解决这个问题 Docker 提供了 Docker Compose 作为解决方案</li><li>Docker Compose 允许对容器进行编排并关联服务之间的关系</li><li>Docker Compose 使用 yaml 进行配置，通过解析 yaml 配置转为 docker 参数来运行组建容器</li><li>Docker Compose 使用步骤：<code>定义Dockerfile生成镜像</code>、<code>定义yaml</code>、运行<code>docker-compose up</code>命令</li></ul><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><p>注意：新版Docker已内置compose功能，可通过 docker -h 查看知否支持</p><ul><li>官方文档：<a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></li><li>Docker Compose的安装方式有两种：pip（因为Docker Compose是用Python开发的）、curl</li></ul><blockquote><p>步骤1：下载 docker-compose</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>步骤2：授权</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h3><blockquote><p>步骤1：创建 docker-compose.yml 文件，注意docker-compose.yml是缺省文件名字</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker compose版本号</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="comment"># 服务名称（自定义）</span></span><br><span class="line"><span class="attr">tomcat:</span> </span><br><span class="line"><span class="comment"># dockerfile文件所在的位置</span></span><br><span class="line"><span class="comment"># build: .  </span></span><br><span class="line"><span class="comment"># 除了使用dockerfile还可以直接指定镜像,默认使用最新版本</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="comment"># 端口映射，相当于 -p 8080:8080</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span> </span><br></pre></td></tr></table></figure><blockquote><p>步骤2：运行docker-compose.yml</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建（如果其中使用的Dockerfile，那么在up之前建议先执行如下命令构建）</span></span><br><span class="line">docker-compose build</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台运行（在docker-compose文件目录下执行）</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定文件启动</span></span><br><span class="line">docker-compose -f docker-compose.yml up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以指定多个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose -f docker-compose.yml -f docker-compose2.yml up -d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker-compose stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">docker-compose start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止并移除</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除容器</span></span><br><span class="line">docker-compose rm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h3 id="docker-compose配置参考"><a href="#docker-compose配置参考" class="headerlink" title="docker-compose配置参考"></a>docker-compose配置参考</h3><ul><li><a href="https://github.com/docker/docker.github.io/blob/master/compose/index.md#common-use-cases">https://github.com/docker/docker.github.io/blob/master/compose/index.md#common-use-cases</a> </li><li><a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></li></ul><h3 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h3><blockquote><p>下面以 elasticsearch + cerebro + kibana  为例子。因为博主机器内存有限，所以只能单节点做例子，而集群配置可以参考官方文档（注意版本）：</p><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html</a></li></ul></blockquote><p>步骤1：扩大宿主机限制，否则 Elasticsearch 可能启动不成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><p>步骤2：编写 docker-compose.yml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.6&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="comment"># 服务名称（会写入容器DNS）</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 容器名称</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 镜像</span></span><br><span class="line">        <span class="comment"># 注意需要指定版本号，否则拉取不成功</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">elasticsearch:7.5.</span>        </span><br><span class="line">        <span class="comment"># 也可以指定Dockerfile文件</span></span><br><span class="line">        <span class="comment">#build: ./Dockerfile</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 端口映射</span></span><br><span class="line">        <span class="attr">ports:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">        <span class="comment"># 容器环境变量</span></span><br><span class="line">        <span class="attr">environment:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">node.name=es-node-1</span> <span class="comment"># 指定节点名称</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span> <span class="comment"># 锁定内存大小</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">discovery.type=single-node</span> <span class="comment"># 单节点模式</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms512m</span> <span class="string">-Xmx512m</span> <span class="comment"># 配置堆大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#environment: </span></span><br><span class="line"><span class="comment">#        node.name: es-node-1</span></span><br><span class="line"><span class="comment">#            bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#            discovery.type: single-node</span></span><br><span class="line"><span class="comment">#            ES_JAVA_OPTS: -Xms512m -Xmx512m          </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器限制</span></span><br><span class="line">        <span class="attr">ulimits:</span></span><br><span class="line">            <span class="attr">memlock:</span></span><br><span class="line">                <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">                <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 重启策略（相对容器服务）</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="comment"># 网络</span></span><br><span class="line">        <span class="attr">networks:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elastic</span>     </span><br><span class="line"></span><br><span class="line">    <span class="attr">kibana:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">kibana:7.5.0</span></span><br><span class="line">        <span class="attr">ports:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="comment"># 先后顺序</span></span><br><span class="line">        <span class="comment"># 表示必须等待elasticsearch服务启动后当前服务才接着启动</span></span><br><span class="line">        <span class="attr">depends_on:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">        <span class="attr">networks:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cerebro可用于监控es节点，如内存、cpu等等指标</span></span><br><span class="line">    <span class="attr">cerebro:</span> </span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">cerebro</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">lmenezes/cerebro</span></span><br><span class="line">        <span class="attr">ports:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">depends_on:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">        <span class="attr">networks:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elastic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义（创建）一个网络，用于服务之间通信使用</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">elastic:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"><span class="comment"># 也可以写成这样，采用默认配置</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">elastic:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>书写规范：<a href="https://github.com/compose-spec/compose-spec/blob/master/spec.md">https://github.com/compose-spec/compose-spec/blob/master/spec.md</a></li></ul><h2 id="注册中心相关"><a href="#注册中心相关" class="headerlink" title="注册中心相关"></a>注册中心相关</h2><ul><li>以下操作需要将加速站点配置为DaoCloud</li></ul><blockquote><p>步骤1：在DockerHub上注册一个账号</p></blockquote><p>账号：<a href="mailto:&#x78;&#x78;&#120;&#x78;&#120;&#x78;&#x78;&#64;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;">&#x78;&#x78;&#120;&#x78;&#120;&#x78;&#x78;&#64;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;</a></p><p>密码：dh———————–</p><blockquote><p>步骤2：Docker登录到注册中心</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><blockquote><p>步骤3：编写Dockerfile</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> desc=测试镜像上传到注册中心</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello...&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>步骤4：构建镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：docker build -t 库名称/镜像名称 dockerfile文件所在路径</span><br><span class="line">docker build -t tandi/hello-test .</span><br></pre></td></tr></table></figure><blockquote><p>步骤5：上传镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push tandi/hello-test</span><br></pre></td></tr></table></figure><blockquote><p>查看是否上传成功</p></blockquote><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/009.png"></p><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/010.png"></p><blockquote><p>从注册中心拉取镜像</p><p>注意：拉取前必须确认库是public的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tandi/hello-test</span><br></pre></td></tr></table></figure><p><strong>搭建私有注册中心</strong></p><blockquote><p>步骤1：拉取docker hub上的registry</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e REGISTRY_HTTP_HOST=对应的域名 -d -p 5000:5000 --restart always --name registry registry</span><br></pre></td></tr></table></figure><ul><li>注：如果不配置 -e REGISTRY_HTTP_HOST，则在 docker push 时可能会出现 Retrying 的情况。</li></ul><blockquote><p>步骤2：构建一个镜像</p></blockquote><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> desc=测试镜像上传到注册中心</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello...&quot;</span></span></span><br></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：docker build -t 注册中心所在主机ip:5000/镜像名称 .</span><br><span class="line">docker build -t 192.168.1.102:5000/hello-test .</span><br></pre></td></tr></table></figure><p>配置注册中心信任</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http://f1361db2.m.daocloud.io&quot;], # 镜像加速</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.1.102:5000&quot;] # 非SSL源管理镜像</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload ; systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>步骤3：启动注册中心容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 116995fd6624</span><br></pre></td></tr></table></figure><blockquote><p>步骤4：将镜像push到私有注册中心</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.1.102:5000/hello-test</span><br></pre></td></tr></table></figure><blockquote><p>步骤5：检验是否push成功</p></blockquote><p>浏览器：<a href="http://192.168.1.102:5000/v2/_catalog">http://192.168.1.102:5000/v2/_catalog</a></p><p><img src="/docker%E5%BA%94%E7%94%A8%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/011.png"></p><h2 id="安装可视化工具-Portainer"><a href="#安装可视化工具-Portainer" class="headerlink" title="安装可视化工具 - Portainer"></a>安装可视化工具 - Portainer</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer </span><br><span class="line">docker run --name portainer-ui -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.docker.com/">Docker Documentation</a></li><li><a href="https://www.accenture.com/us-en/blogs/blogs-reshma-shinde-docker-containerization-devops">Evolution of Linux containerization helped in simplifying DevOps using Docker</a></li><li><a href="https://woshijpf.github.io/%E5%86%85%E6%A0%B8/2017/06/14/ramfs-rootfs-initramfs%E7%9A%84%E5%8C%BA%E5%88%AB.html">ramfs, tmpfs, rootfs, initramfs的区别</a></li><li><a href="https://juejin.im/post/5cd2cf01f265da0374189441">Docker Hub 镜像加速器</a></li><li>《Docker进阶与实战》</li><li>《Docker微服务架构实战》</li></ul><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年12月14日02:09:53 — 重新编排并丰富Docker概念和使用内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 敏捷工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SpringSecurity-Oauth2实现QQ登录</title>
      <link href="/SpringSecurity2/"/>
      <url>/SpringSecurity2/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="使用注解控制权限"><a href="#使用注解控制权限" class="headerlink" title="使用注解控制权限"></a>使用注解控制权限</h2><p>SecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loginPage</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/&quot;, &quot;/index&quot;, &quot;/home&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">indexPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured(&#123;&quot;ROLE_USER&quot;, &quot;ROLE_ADMIN&quot;, &quot;ROLE_DBA&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/user&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured(&quot;ROLE_ADMIN&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/admin&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adminPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured(&quot;ROLE_DBA&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/dba&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dbaPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dba&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>error.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>springboot当发生异常时自动跳转到请求路径/error<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    status: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#response.status&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>登录<a href="https://connect.qq.com/">qq互联</a>申请开发者资格</li><li>使用内网穿透工具（例如Natapp，花生壳）将当前局域网开发机器的 80 端口暴露到公网上</li><li>在qq互联中创建一个应用得到 appid 和 appkey，并设置其回调地址（使用内网穿透暴露的局域网机器）</li><li>阅读qq互联提供的<a href="http://wiki.connect.qq.com/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B">网站应用接入流程文档</a>（必须阅读）</li></ol><h3 id="案例场景"><a href="#案例场景" class="headerlink" title="案例场景"></a>案例场景</h3><ul><li>实现第三方登录（qq）</li><li>使用qq登录的用户默认给其分配一个 ROLE_USER 角色</li></ul><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><h4 id="步骤1：在登录页面中添加qq登录按钮"><a href="#步骤1：在登录页面中添加qq登录按钮" class="headerlink" title="步骤1：在登录页面中添加qq登录按钮"></a>步骤1：在登录页面中添加qq登录按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=101571894&amp;redirect_uri=http://tandi.natapp1.cc/qq/callback&amp;state=test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/Connect_logo_7.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="步骤2：创建用来存储用户相关信息的实体"><a href="#步骤2：创建用来存储用户相关信息的实体" class="headerlink" title="步骤2：创建用来存储用户相关信息的实体"></a>步骤2：创建用来存储用户相关信息的实体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">    <span class="keyword">private</span> String refreshToken;</span><br><span class="line">    <span class="keyword">private</span> String expiresIn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ret;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String figureurl;</span><br><span class="line">    <span class="keyword">private</span> String figureurl_1;</span><br><span class="line">    <span class="keyword">private</span> String figureurl_2;</span><br><span class="line">    <span class="keyword">private</span> String figureurl_qq_1;</span><br><span class="line">    <span class="keyword">private</span> String figureurl_qq_2;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤3：创建qq登录认证过滤器"><a href="#步骤3：创建qq登录认证过滤器" class="headerlink" title="步骤3：创建qq登录认证过滤器"></a>步骤3：创建qq登录认证过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractAuthenticationProcessingFilter的别名叫PRE_AUTH_FILTER，即认证前置过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span> &#123;</span><br><span class="line">    <span class="comment">// 授权码模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">GRANT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;authorization_code&quot;</span>;</span><br><span class="line">    <span class="comment">// appid</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CLIENT_ID</span> <span class="operator">=</span> <span class="string">&quot;101571894&quot;</span>;</span><br><span class="line">    <span class="comment">// appkey</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CLIENT_SECRET</span> <span class="operator">=</span> <span class="string">&quot;b909357a9d447329f66c47f3fa3333b7&quot;</span>;</span><br><span class="line">    <span class="comment">// 回调地址（当前应用所在服务器的回调接口，表示登录成功）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REDIRECT_URI</span> <span class="operator">=</span> <span class="string">&quot;http://tandi.natapp1.cc/qq/callback&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QQAuthenticationFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QQAuthenticationFilter</span><span class="params">(String defaultFilterProcessesUrl)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(defaultFilterProcessesUrl, <span class="string">&quot;GET&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException, IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 获取回调返回的授权码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line"><span class="comment">// 根据授权码获取token</span></span><br><span class="line">        <span class="type">QQToken</span> <span class="variable">qqToken</span> <span class="operator">=</span> getQQToken(code);</span><br><span class="line"><span class="comment">// 根据token返回openId</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> getOpenId(qqToken.getAccessToken());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(openId)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> </span><br><span class="line">                <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(qqToken.getAccessToken(), openId);</span><br><span class="line">            <span class="comment">// 返回验证结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QQToken <span class="title function_">getQQToken</span><span class="params">(String code)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> <span class="title class_">URIBuilder</span>()</span><br><span class="line">                    .setScheme(<span class="string">&quot;https&quot;</span>)</span><br><span class="line">                    .setHost(<span class="string">&quot;graph.qq.com&quot;</span>)</span><br><span class="line">                    .setPath(<span class="string">&quot;/oauth2.0/token&quot;</span>)</span><br><span class="line">                    .setParameter(<span class="string">&quot;client_id&quot;</span>, CLIENT_ID)</span><br><span class="line">                    .setParameter(<span class="string">&quot;client_secret&quot;</span>, CLIENT_SECRET)</span><br><span class="line">                    .setParameter(<span class="string">&quot;code&quot;</span>, code)</span><br><span class="line">                    .setParameter(<span class="string">&quot;redirect_uri&quot;</span>, REDIRECT_URI)</span><br><span class="line">                    .setParameter(<span class="string">&quot;grant_type&quot;</span>, GRANT_TYPE)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(url.toString()).get();</span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenResult</span> <span class="operator">=</span> document.text();</span><br><span class="line"></span><br><span class="line">        String[] split = tokenResult.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            String[] sp = s.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            map.put(sp[<span class="number">0</span>], <span class="string">&quot;&quot;</span>.equals(sp[<span class="number">1</span>].trim())?<span class="string">&quot;&quot;</span>:sp[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">QQToken</span> <span class="variable">qqToken</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            qqToken = <span class="keyword">new</span> <span class="title class_">QQToken</span>();</span><br><span class="line">            qqToken.setAccessToken(map.get(<span class="string">&quot;access_token&quot;</span>));</span><br><span class="line">            qqToken.setRefreshToken(map.get(<span class="string">&quot;refresh_token&quot;</span>));</span><br><span class="line">            qqToken.setExpiresIn(map.get(<span class="string">&quot;expires_in&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> qqToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getOpenId</span><span class="params">(String accessToken)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">URI</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> <span class="title class_">URIBuilder</span>()</span><br><span class="line">                    .setScheme(<span class="string">&quot;https&quot;</span>)</span><br><span class="line">                    .setHost(<span class="string">&quot;graph.qq.com&quot;</span>)</span><br><span class="line">                    .setPath(<span class="string">&quot;/oauth2.0/me&quot;</span>)</span><br><span class="line">                    .setParameter(<span class="string">&quot;access_token&quot;</span>, accessToken)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.connect(url.toString()).get();</span><br><span class="line">        <span class="type">String</span> <span class="variable">oepnIdResult</span> <span class="operator">=</span> document.text();</span><br><span class="line"></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\&quot;openid\&quot;:\&quot;(.*?)\&quot;&quot;</span>).matcher(oepnIdResult);</span><br><span class="line">        <span class="keyword">if</span> (matcher.find())&#123;</span><br><span class="line">            <span class="keyword">return</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤4：创建qq登录认证过滤器管理"><a href="#步骤4：创建qq登录认证过滤器管理" class="headerlink" title="步骤4：创建qq登录认证过滤器管理"></a>步骤4：创建qq登录认证过滤器管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QQAuthenticationManager</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;GrantedAuthority&gt; AUTHORITIES = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        AUTHORITIES.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_USER&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CLIENT_ID</span> <span class="operator">=</span> <span class="string">&quot;101571894&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> (String)authentication.getCredentials();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QQUser</span> <span class="variable">userInfo</span> <span class="operator">=</span> getUserInfo(accessToken, openId);</span><br><span class="line">            log.info(<span class="string">&quot;user=&#123;&#125;&quot;</span>, userInfo);</span><br><span class="line">            <span class="keyword">if</span> (Integer.parseInt(userInfo.getRet()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 生成一个已经校验的验证spring security token</span></span><br><span class="line">                <span class="comment">// 参数1：相当于账号</span></span><br><span class="line">                <span class="comment">// 参数2：相当于密码</span></span><br><span class="line">                <span class="comment">// 参数3：当前用户的权限，默认角色ROLE_USER</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userInfo, <span class="literal">null</span>, AUTHORITIES);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QQUser <span class="title function_">getUserInfo</span><span class="params">(String accessToken, String openId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">URI</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> <span class="title class_">URIBuilder</span>()</span><br><span class="line">                    .setScheme(<span class="string">&quot;https&quot;</span>)</span><br><span class="line">                    .setHost(<span class="string">&quot;graph.qq.com&quot;</span>)</span><br><span class="line">                    .setPath(<span class="string">&quot;/user/get_user_info&quot;</span>)</span><br><span class="line">                    .setParameter(<span class="string">&quot;access_token&quot;</span>, accessToken)</span><br><span class="line">                    .setParameter(<span class="string">&quot;openid&quot;</span>, openId)</span><br><span class="line">                    .setParameter(<span class="string">&quot;appid&quot;</span>, CLIENT_ID)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Document document;</span><br><span class="line">        document = Jsoup.connect(url.toString()).get();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonText</span> <span class="operator">=</span> document.text();</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">QQUser</span> <span class="variable">qqUser</span> <span class="operator">=</span> gson.fromJson(jsonText, QQUser.class);</span><br><span class="line">        <span class="keyword">return</span> qqUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤5：将qq登录认证过滤器添加到过滤器链"><a href="#步骤5：将qq登录认证过滤器添加到过滤器链" class="headerlink" title="步骤5：将qq登录认证过滤器添加到过滤器链"></a>步骤5：将qq登录认证过滤器添加到过滤器链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QQAuthenticationFilter qqAuthenticationFilter;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        qqAuthenticationFilter.setFilterProcessesUrl(<span class="string">&quot;/qq/callback&quot;</span>); <span class="comment">// 默认拦截的路径</span></span><br><span class="line">        qqAuthenticationFilter.setAuthenticationManager(<span class="keyword">new</span> <span class="title class_">QQAuthenticationManager</span>());</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(qqAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wiki.td<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webdemo4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>webdemo4<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- httpclient --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jsoup --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- gson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring security --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- thymeleaf --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring data jpa --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h2><p><img src="/SpringSecurity2/002.png"></p><p><img src="/SpringSecurity2/003.png"></p><p><img src="/SpringSecurity2/004.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity入门</title>
      <link href="/SpringSecurity/"/>
      <url>/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>Spring Security 用于解决 Web 应用的安全访问问题（譬如对用户进行<strong>认证</strong>和<strong>鉴权</strong>等操作）</li><li>Spring Security 基于 Spring AOP 和 Filter 实现。提供了一系列的 Filter 来解决 Web 应用上的安全问题</li><li>类似于 Spring Security 的安全框架还有比较著名的 Apache Shiro，但因为 Spring Security 是 Spring 全家桶的成员，因此能够与 Spring Framework 无缝集成，而且 Spring Security 对目前流程的 Oauth2 开放授权协议有着良好的支持，所以对于目前而言学习 Spring Security 是很有必要的</li></ul><h2 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h2><h3 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h3><ul><li>案例中存在 3 个需要<strong>认证</strong>和<strong>授权</strong>的页面，分别是：user.jsp、admin.jsp、dba.jsp</li><li>案例中存在 3 个角色，分别是：USER、ADMIN、DBA</li><li>访问页面时，要求用户需要有对应的权限。其关系如下：<ul><li>user.jsp 只要用户拥有 USER、ADMIN、DBA 中其中一个角色就可以访问</li><li>admin.jsp 要求用户必须有 ADMIN 角色才可以访问</li><li>dba.jsp 要求用户拥有 ADMIN、DBA 中其中一个角色就可以访问</li></ul></li></ul><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><blockquote><p>为了更好地了解配置，项目基于 Spring5 + Servlet3.0 搭建，而没采用 Spring Boot</p></blockquote><h4 id="案例目录"><a href="#案例目录" class="headerlink" title="案例目录"></a>案例目录</h4><p><img src="/SpringSecurity/001.png"></p><h4 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h4><p>RootConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages=&quot;wiki.td&quot;,</span></span><br><span class="line"><span class="meta">        excludeFilters=@ComponentScan.Filter(type= FilterType.ANNOTATION,classes=Controller.class))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RootConfig</span> &#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages=&quot;wiki.td&quot;, includeFilters=@Filter(type=FilterType.ANNOTATION,classes=Controller.class),useDefaultFilters=false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 注册视图解析器</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebAppInitializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebAppInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; RootConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; WebConfig.class &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebServletContainerInitializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title class_">ServletContainerInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringSecurityInitializer</p><blockquote><p>Spring Security 配置1：相当于配置了 SpringSecurityFilterChain 拦截器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityInitializer</span> </span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSecurityWebApplicationInitializer</span> &#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecurityConfig</p><blockquote><p>Spring Security 配置2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 认证配置 */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 下面这段代码很容易理解，就是在内存中模拟数据库用户和角色模型</span></span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;tandi01&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;tandi02&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">&quot;tandi03&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;DBA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 权限拦截 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 要求用户访问某个uri时，需要有指定的角色</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) or hasRole(&#x27;ROLE_USER&#x27;) or hasRole(&#x27;ROLE_DBA&#x27;)&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) &quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/dba/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) or hasRole(&#x27;ROLE_DBA&#x27;)&quot;</span>)</span><br><span class="line">                .and().formLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adminPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;dba&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dbaPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dba&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; admin pag &lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; dba pag &lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; index pag &lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; admin pag &lt;/body&gt;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wiki.td<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webdemo3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-security</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">spring-security</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring mvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring security--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-security&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-security&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><p>当用户浏览器访问<strong>localhost:8888&#x2F;admin</strong>后会自动被导向到 Spring Security 默认的登录页面。这时因为 admin 这个页面是需要认证过后且有 ADMIN 角色权限才能够被访问的</p><p><img src="/SpringSecurity/002.png"></p><p>首先尝试使用 tandi03 登录（该用户只有DBA角色），所以可以推断 tandi03 并没有权限访问 admin 页面。</p><p>所以登录后结果如下：</p><p><img src="/SpringSecurity/003.png"></p><p>可以看到返回的是 403，表示没有权限访问。</p><p>现在我们再访问一下 dba 页面，因为 tandi03 拥有 DBA 角色权限</p><p><img src="/SpringSecurity/004.png"></p><p>可以看到，成功访问。</p><p>在试试 user 页面，因为 user 页面只要用户拥有 USER、ADMIN、DBA 中的其中一个角色就可以访问</p><p><img src="/SpringSecurity/005.png"></p><h2 id="关于认证、授权、鉴权"><a href="#关于认证、授权、鉴权" class="headerlink" title="关于认证、授权、鉴权"></a>关于认证、授权、鉴权</h2><ul><li>认证：通过凭证来证明是当前系统的合法用户</li><li>授权：在用户通过认证后，系统给予用户资源权限的过程</li><li>鉴权：在系统给用户授予（特定）权限之后，用户再访问资源时系统就需要对其当前的访问操作进行资格判断。即有权限可操作性，无权限则拦截</li></ul><h2 id="基于数据库数据进行认证授权"><a href="#基于数据库数据进行认证授权" class="headerlink" title="基于数据库数据进行认证授权"></a>基于数据库数据进行认证授权</h2><blockquote><p>当前案例基于快速入门案例上修改</p></blockquote><h3 id="数据库数据"><a href="#数据库数据" class="headerlink" title="数据库数据"></a>数据库数据</h3><p><strong>表关系</strong></p><ul><li><p>user：用户表</p></li><li><p>user_role：中间表</p></li><li><p>role：角色表</p></li><li><p>正常情况还会有权限表，但为了简化案例所以省略</p></li></ul><p><strong>表</strong></p><p><img src="/SpringSecurity/007.png"></p><p><img src="/SpringSecurity/008.png"></p><p><img src="/SpringSecurity/009.png"></p><h3 id="认证流程图"><a href="#认证流程图" class="headerlink" title="认证流程图"></a>认证流程图</h3><p><img src="/SpringSecurity/010.png"></p><h3 id="案例源码"><a href="#案例源码" class="headerlink" title="案例源码"></a>案例源码</h3><h4 id="案例目录-1"><a href="#案例目录-1" class="headerlink" title="案例目录"></a>案例目录</h4><p><img src="/SpringSecurity/006.png"></p><h4 id="案例代码-1"><a href="#案例代码-1" class="headerlink" title="案例代码"></a>案例代码</h4><blockquote><p>只贴出差异代码</p></blockquote><p>RootConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages=&quot;wiki.td&quot;,</span></span><br><span class="line"><span class="meta">        excludeFilters=@ComponentScan.Filter(type= FilterType.ANNOTATION,classes=Controller.class))</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &quot;wiki.td.repository&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RootConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/ss&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title function_">entityManagerFactory</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">LocalContainerEntityManagerFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalContainerEntityManagerFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setPackagesToScan(<span class="string">&quot;wiki.td&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;hibernate.show_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;hibernate.format_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        factoryBean.setJpaProperties(prop);</span><br><span class="line">        factoryBean.setPersistenceProvider(<span class="keyword">new</span> <span class="title class_">HibernatePersistenceProvider</span>());</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDetailsService</span>() &#123;</span><br><span class="line">            <span class="comment">// 从数据库中返回用户信息</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findUserByUserName(username);</span><br><span class="line">                List&lt;Role&gt; roles = roleRepository.findRolesByUserId(user.getuId());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserPrincipal</span>(user, roles);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DaoAuthenticationProvider <span class="title function_">authenticationProvider</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 密码加密工具类</span></span><br><span class="line">        Map&lt;String, PasswordEncoder&gt; encoders = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        encoders.put(<span class="string">&quot;pbkdf2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Pbkdf2PasswordEncoder</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">authenticationProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        authenticationProvider.setUserDetailsService(userDetailsService());</span><br><span class="line">        authenticationProvider.setPasswordEncoder(<span class="keyword">new</span> <span class="title class_">DelegatingPasswordEncoder</span>(<span class="string">&quot;pbkdf2&quot;</span>, encoders));</span><br><span class="line">        <span class="keyword">return</span> authenticationProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 要求用户访问某个uri时，需要有指定的角色</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) or hasRole(&#x27;ROLE_USER&#x27;) or hasRole(&#x27;ROLE_DBA&#x27;)&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) &quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/dba/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) or hasRole(&#x27;ROLE_DBA&#x27;)&quot;</span>)</span><br><span class="line">                .and().formLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Role</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer rId;</span><br><span class="line">    <span class="keyword">private</span> String rName;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserRole</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;user_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 应该用独立的字段来做ID，这里只是图方便</span></span><br><span class="line">    <span class="keyword">private</span> Integer uId;</span><br><span class="line">    <span class="keyword">private</span> Integer rId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserPrincipal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPrincipal</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"><span class="comment">// 也可以直接通过User来实现UserDetails</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserPrincipal</span><span class="params">(User user, List&lt;Role&gt; roles)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 权限</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> roles.stream().map(role -&gt; <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(role.getrName())).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassWord();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">getRoles</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RoleRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Role, Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT r From Role r join UserRole ur on r.rId = ur.rId WHERE ur.uId = :userId&quot;)</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">findRolesByUserId</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Integer&gt; &#123;</span><br><span class="line">    User <span class="title function_">findUserByUserName</span><span class="params">(String userName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于-HttpSecurity-常用配置"><a href="#关于-HttpSecurity-常用配置" class="headerlink" title="关于 HttpSecurity 常用配置"></a>关于 HttpSecurity 常用配置</h2><p>HttpSecurity 是 Spring Security 对请求资源路径进行拦截的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomWebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/resources/**&quot;</span>, <span class="string">&quot;/about&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/db/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ADMIN&#x27;) and hasRole(&#x27;DBA&#x27;)&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .failureForwardUrl(<span class="string">&quot;/login?error&quot;</span>)</span><br><span class="line">                .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">            .logout()</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">            .httpBasic()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>authorizeRequests()：授权请求定义</li><li>permitAll()：表示无需授权，允许直接访问</li><li>antMatchers()：表示对应的请求路径uri</li><li>anyRequest()：表示其余的所有请求</li><li>authenticated()：表示需要认证</li><li>and()：代表一段定义的结束并连接下一段其他的定义</li><li>formLogin()：登录认证定义</li><li>loginPage()：指定登录路径</li><li>usernameParameter()：指定登录认证表单提交的username字段名称</li><li>passwordParameter()：指定登录认证表单提交的password字段名称</li><li>failureForwardUrl()：指定登录认证失败路径</li><li>logout()：登出认证定义</li><li>logoutUrl()：指定登出路径</li><li>httpBasic()：basic登录定义</li><li>disable()：表示不可用</li></ul><h2 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h2><blockquote><p>案例基于上面的 “基于数据库数据进行认证授权”，下面为差异代码</p></blockquote><h3 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h3><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p><img src="/SpringSecurity/011.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>SecuritiyConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 权限拦截 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 要求用户访问某个uri时，需要有指定的角色</span></span><br><span class="line">        http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) or hasRole(&#x27;ROLE_USER&#x27;) or hasRole(&#x27;ROLE_DBA&#x27;)&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) &quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/dba/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;ROLE_ADMIN&#x27;) or hasRole(&#x27;ROLE_DBA&#x27;)&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            <span class="comment">// 认证成功后进入处理器</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> <span class="title class_">LoginSuccessHandler</span>())</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">            .logout()</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 关闭csrf(跨站请求伪造)保护, Spring Security3默认关闭csrf，SpringSecurity4默认启动了csrf</span></span><br><span class="line"><span class="comment">                 * 原因是不关闭会进入CsrfFilter进行处理，从而会使用CsrfToken来认证而不是session</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">            .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">/** 方法无需方法体 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loginPage</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登出</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginSuccessHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SavedRequest缓存了当前的请求</span></span><br><span class="line">        <span class="type">SavedRequest</span> <span class="variable">savedRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpSessionRequestCache</span>()</span><br><span class="line">            .getRequest(request, response);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取到原来请求的url</span></span><br><span class="line">        <span class="comment">// 例如在认证前访问的是localhost:8080/admin,那么认证成功后就重定向到admin</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> (savedRequest == <span class="literal">null</span>) ? <span class="string">&quot;&quot;</span> : savedRequest.getRedirectUrl();</span><br><span class="line">        <span class="keyword">if</span> (!redirectUrl.isEmpty()) &#123;</span><br><span class="line">            response.sendRedirect(redirectUrl);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 如果为null，则调到所属页面</span></span><br><span class="line">        <span class="comment">// 获取认证成功的用户信息</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : auth.getAuthorities()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用户的权限</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">role</span> <span class="operator">=</span> authority.getAuthority();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (role != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(role)) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (role) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;ROLE_ADMIN&quot;</span>:</span><br><span class="line">                        redirectUrl = <span class="string">&quot;/admin&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;ROLE_DBA&quot;</span>:</span><br><span class="line">                        redirectUrl = <span class="string">&quot;/dba&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        redirectUrl = <span class="string">&quot;/user&quot;</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向到对应的页面</span></span><br><span class="line">        response.sendRedirect(redirectUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    admin page&lt;a href=<span class="string">&quot;/logout&quot;</span>&gt;登出&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    dba page&lt;a href=<span class="string">&quot;/logout&quot;</span>&gt;登出&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    user page&lt;a href=<span class="string">&quot;/logout&quot;</span>&gt;登出&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>登录页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;login page&lt;/h3&gt;</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;自定义表单验证&lt;/legend&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;用户名:&lt;/td&gt;&lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;username&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;密码:&lt;/td&gt;&lt;td&gt;&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;password&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input name=<span class="string">&quot;submit&quot;</span> type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义认证规则"><a href="#自定义认证规则" class="headerlink" title="自定义认证规则"></a>自定义认证规则</h2><blockquote><p>自定义 AuthenticationProvider  (认证条件)</p></blockquote><p>MyProvider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProvider</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProvider</span><span class="params">(UserDetailsService userDetailsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们的自定义认证条件是，只要用户名正确就可以了不需要校验密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取表单提交的用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据提交的用户名到数据库中查找</span></span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">result</span> <span class="operator">=</span> authentication;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果相等则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (userDetails != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 相当于凭证已认证的Authentication</span></span><br><span class="line">            result = <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                    userDetails.getUsername(),</span><br><span class="line">                    userDetails.getPassword(),</span><br><span class="line">                    userDetails.getAuthorities());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自定义认证规则添加到 AuthenticationManager </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationProvider <span class="title function_">authenticationProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyProvider</span>(userDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义Filter"><a href="#自定义Filter" class="headerlink" title="自定义Filter"></a>自定义Filter</h2><h3 id="内置Filter"><a href="#内置Filter" class="headerlink" title="内置Filter"></a>内置Filter</h3><p>在 Spring Security 5 中，默认的过滤器链中有以下这些过滤器，它们各自承担着不同的责任</p><blockquote><p><a href="https://docs.spring.io/spring-security/site/docs/5.0.0.M1/reference/htmlsingle/#ns-custom-filters">https://docs.spring.io/spring-security/site/docs/5.0.0.M1/reference/htmlsingle/#ns-custom-filters</a></p></blockquote><p><img src="/SpringSecurity/012.png"></p><h3 id="了解内置的认证过滤器"><a href="#了解内置的认证过滤器" class="headerlink" title="了解内置的认证过滤器"></a>了解内置的认证过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> <span class="keyword">extends</span></span><br><span class="line"><span class="title class_">AbstractAuthenticationProcessingFilter</span> &#123;</span><br><span class="line"><span class="comment">// 默认情况下，登录表单提交的用户名称和用户密码的属性名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_SECURITY_FORM_USERNAME_KEY</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_SECURITY_FORM_PASSWORD_KEY</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">usernameParameter</span> <span class="operator">=</span> SPRING_SECURITY_FORM_USERNAME_KEY;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">passwordParameter</span> <span class="operator">=</span> SPRING_SECURITY_FORM_PASSWORD_KEY;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">postOnly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配以POST方式提交到/login的表单</span></span><br><span class="line">    <span class="comment">// 可以通过HttpSecurity修改该定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;POST&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> obtainUsername(request);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> obtainPassword(request);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">username = username.trim();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将账号和密码包装成一个未认证的token</span></span><br><span class="line"><span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">username, password);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对未认证的token进行认证（认证由AuthenticationProvider来完成）</span></span><br><span class="line">        <span class="comment">// 如果通过，则会返回一个已认证的Authentication</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="是何时将过滤器链添加到容器的？"><a href="#是何时将过滤器链添加到容器的？" class="headerlink" title="是何时将过滤器链添加到容器的？"></a>是何时将过滤器链添加到容器的？</h3><p>这是我们配置的 SpringSecurityInitializer，它用于创建一个过滤器链并将其设置到上下文中（其作用相当于在 xml 中配置 DelegatingFilterProxy 过滤器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityInitializer</span> </span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSecurityWebApplicationInitializer</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>以下为容器启动时，Debug AbstractSecurityWebApplicationInitializer 类的过程</p><p><img src="/SpringSecurity/013.png"></p><p>简单来说就是 AbstractSecurityWebApplicationInitializer 在应用启动时，将一个名为<code>springSecurityFilterChain</code>的 DelegatingFilterProxy 实例添加到了 ServletContext 中</p><h3 id="自定义JWT-Token认证Filter"><a href="#自定义JWT-Token认证Filter" class="headerlink" title="自定义JWT Token认证Filter"></a>自定义JWT Token认证Filter</h3><blockquote><p>以下自定义的 Filter 相当于充当了 Filter 和 Provider 的职责</p></blockquote><p>JwtRequestFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 也可直接继承BasicAuthenticationFilter</span></span><br><span class="line"><span class="comment">// 然后通过HttpSecurity#addFilter(new JwtRequestFilter(authenticationManager));添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtRequestFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从请求中获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(SecurityConst.AUTHENTICATE_HEAD);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>)</span><br><span class="line">            token = request.getHeader(<span class="string">&quot;token&quot;</span>) == <span class="literal">null</span> ? request.getParameter(<span class="string">&quot;token&quot;</span>) : <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 校验token</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(token)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">tokenUsername</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!jwtUtil.validateToken(token))</span><br><span class="line">                authFailResponse(response, <span class="string">&quot;token已过期&quot;</span>, <span class="number">401</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tokenUsername = jwtUtil.extractUsername(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                authFailResponse(response, <span class="string">&quot;token解析失败&quot;</span>, <span class="number">401</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tokenUsername != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 从数据库获取UserDetails</span></span><br><span class="line">                <span class="type">UserDetails</span> <span class="variable">userDetails</span> </span><br><span class="line">                    <span class="operator">=</span> userDetailsService.loadUserByUsername(tokenUsername);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 生成AuthenticationToken</span></span><br><span class="line">                <span class="comment">// 这里之所以直接将数据库获得的userDetails传入，是因为token有效</span></span><br><span class="line">                <span class="comment">// 因此直接通过，无需再认证</span></span><br><span class="line">                <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span></span><br><span class="line">                        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="literal">null</span>, userDetails.getAuthorities());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 保存到SecurityContext中，提供后续鉴权使用</span></span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">                    authFailResponse(response, <span class="string">&quot;认证失败&quot;</span>, <span class="number">401</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续执行拦截器链</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">authFailResponse</span><span class="params">(HttpServletResponse response, String respMsg, <span class="type">int</span> statusCode)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            response.setStatus(statusCode);</span><br><span class="line">            <span class="type">JsonData</span> <span class="variable">jsonData</span> <span class="operator">=</span> JsonData.buildError(respMsg);</span><br><span class="line">            <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> objectMapper.writeValueAsString(jsonData);</span><br><span class="line">            response.getWriter().println(resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 JwtRequestFilter 添加到过滤器链中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 端点连接配置</span></span><br><span class="line">        httpSecurity</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .formLogin().disable()</span><br><span class="line">                .anonymous().disable()</span><br><span class="line">                .httpBasic().disable() </span><br><span class="line">                .logout().disable()</span><br><span class="line">                .cors()</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated() <span class="comment">// 所以请求都需要认证</span></span><br><span class="line">                .and()</span><br><span class="line">            .sessionManagement()</span><br><span class="line">            .sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加JWT Token拦截过滤器</span></span><br><span class="line">        httpSecurity</span><br><span class="line">           .addFilterBefore(jwtRequestFilter,UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 排除不需要拦截的资源路径</span></span><br><span class="line">        <span class="comment">// 譬如：登录、swagger、静态资源</span></span><br><span class="line">        String[] uris = excludedProperties.getExcludedURIsToArray();</span><br><span class="line">        web.ignoring().antMatchers(uris);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些核心类和接口介绍"><a href="#一些核心类和接口介绍" class="headerlink" title="一些核心类和接口介绍"></a>一些核心类和接口介绍</h2><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p>Authentication是一个接口，譬如 *Token 结尾的类都实现自该接口。</p><p>用于存储用户的认证信息。譬如常见的 UsernamePasswordAuthenticationToken</p><h3 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h3><p>SecurityContextHolder 是一个获取 SecurityContext 的静态工具类，而 SecurityContext 为当前请求的认证授权上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过工具获取上下文对象</span></span><br><span class="line"><span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.getContext();</span><br><span class="line"><span class="comment">// 当前上下文的保存策略</span></span><br><span class="line">SecurityContextHolder.getContextHolderStrategy();</span><br><span class="line"><span class="comment">// 获取认证信息</span></span><br><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> </span><br><span class="line">    <span class="operator">=</span> context.getAuthentication();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Authorities用户拥有的权限</span></span><br><span class="line">authentication.getAuthorities();</span><br><span class="line"><span class="comment">// Credentials用户凭证，一般为密码</span></span><br><span class="line">authentication.getCredentials();</span><br><span class="line"><span class="comment">// Principal用户身份（标识属性），一般为用户名、Email、手机号、身份证等信息</span></span><br><span class="line">authentication.getPrincipal();</span><br><span class="line"><span class="comment">// Details当前认证用户的额外信息</span></span><br><span class="line">authentication.getDetails();</span><br></pre></td></tr></table></figure><h3 id="AuthenticationManager和AuthenticationProvider"><a href="#AuthenticationManager和AuthenticationProvider" class="headerlink" title="AuthenticationManager和AuthenticationProvider"></a>AuthenticationManager和AuthenticationProvider</h3><ul><li>AuthenticationManager 本身是一个接口，它只有一个抽象方法 **Authentication authenticate(authentication)**，用于用户认证操作（传入需要认证的authentication，成功则返回已认证的authentication）。</li><li>其中 AuthenticationManager 有个实现叫 ProviderManager，它用于管理 AuthenticationProvider（认证规则） 集合</li><li>在认证过程中，需要认证的 authentication 会经过 AuthenticationProvider 集合，而重要的是只要有一个 AuthenticationProvider 返回 Authentication 就表示认证认证通过</li><li>因此，如果需要实现自定义认证规则，只需要实现一个 AuthenticationProvider 并添加到 AuthenticationManager 即可</li></ul><h3 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h3><p>UserDetailsService 是一个接口，其实现用通过用户提交的 Principal 来查询 UserDetails。</p><h3 id="PasswordEncoder"><a href="#PasswordEncoder" class="headerlink" title="PasswordEncoder"></a>PasswordEncoder</h3><p>PasswordEncoder是一个接口，其实现用于给用户密码进行加密。</p><h3 id="HttpSecurity"><a href="#HttpSecurity" class="headerlink" title="HttpSecurity"></a>HttpSecurity</h3><p>HttpSecurity 是一个 immutable 类，用于设置 HTTP 请求拦截规则。</p><h3 id="AuthenticationManagerBuilder"><a href="#AuthenticationManagerBuilder" class="headerlink" title="AuthenticationManagerBuilder"></a>AuthenticationManagerBuilder</h3><p>使用 AuthenticationManagerBuilder 可以构建出基于特定环境和边界的AuthenticationManager。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    auth.inMemoryAuthentication().withUser(<span class="string">&quot;tandi01&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    auth.inMemoryAuthentication().withUser(<span class="string">&quot;tandi02&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">    auth.inMemoryAuthentication().withUser(<span class="string">&quot;tandi03&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;DBA&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Spring全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring全家桶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码浅析</title>
      <link href="/HashMap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
      <url>/HashMap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="JDK-1-7"><a href="#JDK-1-7" class="headerlink" title="JDK 1.7"></a>JDK 1.7</h2><blockquote><p>基本了解</p></blockquote><p><img src="/HashMap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/001.png"></p><blockquote><p>构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化table</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inflateTable</span><span class="params">(<span class="type">int</span> toSize)</span> &#123;</span><br><span class="line">    <span class="comment">// Find a power of 2 &gt;= toSize</span></span><br><span class="line">    <span class="comment">// 返回2的n次方</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> roundUpToPowerOf2(toSize);</span><br><span class="line">    <span class="comment">// 初始化后的阈值</span></span><br><span class="line">    threshold = (<span class="type">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[capacity];</span><br><span class="line">    <span class="comment">// 初始化哈希种子</span></span><br><span class="line">    initHashSeedAsNeeded(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>put方法相关</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化数组</span></span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123; </span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存放null</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用异或运算优化对象的哈希值以减少哈希冲突</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算对象（元素）在table中位置</span></span><br><span class="line">    <span class="comment">// 下标计算公式为：h &amp; (length-1)，length为数组的长度</span></span><br><span class="line">    <span class="comment">// 又因为length必定是2的n次幂所以该公式等同于 h % length 取余公式，但因为&amp;更加符合计算机运算规则所以比%要稍高效一些</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换已存在的元素值</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">// 哈希值就一样了，那么还要判断key是否一样</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="comment">// 置换新值并返回旧值</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  1. key为null时的哈希值始终为0，换句话就是table索引也是0，因为 hash &amp; n-1 有假必假</span></span><br><span class="line"><span class="comment"> *2. 获取到哈希值后需要再进行右移和异或运算，目的是解决高低位问题。 </span></span><br><span class="line"><span class="comment"> *  3. 为什么HashMap容量为2的n次幂。主要是因为，用位运算代替普通取模运行（&amp;取代%）来提高计算速度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="comment">// key为String时的操作</span></span><br><span class="line">    <span class="comment">// hashSeed默认为0，需要设置jvm参数jdk.map.althashing.threshold来调整hashSeed</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed; </span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="comment">// 在String中，计算hashCode的公式为：s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</span></span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将hashCode高位右移进行计算，以解决hashcode低位同但高位不同的问题（减少哈希冲突）</span></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash：key的哈希值</span></span><br><span class="line"><span class="comment">// bucketIndex：元素将要存储在table的下标位置</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断容器是否需要扩容</span></span><br><span class="line">    <span class="comment">// 扩容要求：</span></span><br><span class="line">    <span class="comment">//   1. size(元素个数)大于容器阈值(capacity * load factor)</span></span><br><span class="line">    <span class="comment">//   2. table[bucketIndex]已经给链表占了</span></span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">// 【重要】：扩展为原来的两倍</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="literal">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 重新计算应该存储的位置</span></span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存元素</span></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取bucketIndex这个位置的链表，如果有的话</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">// 正式保存</span></span><br><span class="line">    <span class="comment">// 【重】这里可以看到，它是将原链表设置为新节点的next，即新节点作为head</span></span><br><span class="line">    <span class="comment">// 但这在JDK1.8后改了，改为设置到链尾，因为配和新引入的红黑树结构</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">// 将元素size加1</span></span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点的构造方法</span></span><br><span class="line">Entry(<span class="type">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">    hash = h;</span><br><span class="line">    key = k;</span><br><span class="line">    value = v;</span><br><span class="line">    next = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 旧数组信息</span></span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> oldTable.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果旧数组的大小已经是MAXIMUM_CAPACITY，即表示没法再扩容了，那么HashMap就会将加载因此设置为Integer.MAX_VALUE</span></span><br><span class="line">    <span class="comment">// 因为原来的加载因子0.75f是经过实际测试考虑的，即空间浪费程度和哈希冲突程度是折中的</span></span><br><span class="line">    <span class="comment">// 通俗点说就是不会太浪费空间也不会出现大量哈希冲突而导致链表越来越长导致查询效率降低</span></span><br><span class="line">    <span class="comment">// 现在设置为 Integer.MAX_VALUE 即表示将空间利用率调到最大而不顾哈希冲突导致性能下降，因为没办法再扩容了嘛</span></span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的Node数组，固定为原来长度的2倍</span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> <span class="title class_">Entry</span>[newCapacity];</span><br><span class="line">    <span class="comment">// 将旧数组中的元素重新计算哈希值并存到新数组中</span></span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">    <span class="comment">// 替换数组</span></span><br><span class="line">    table = newTable;</span><br><span class="line">    <span class="comment">// 【重要】：计算新的容量阈值</span></span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否需要rehash</span></span><br><span class="line"><span class="comment">// 【需要jvm参数开启功能，主要针对String类型】</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">initHashSeedAsNeeded</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="comment">// hashSeed默认为0，只有switching为true时hashSeed才会被改变</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">currentAltHashing</span> <span class="operator">=</span> hashSeed != <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// sun.misc.VM.isBooted()默认为false</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">useAltHashing</span> <span class="operator">=</span> sun.misc.VM.isBooted() &amp;&amp; (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">switching</span> <span class="operator">=</span> currentAltHashing ^ useAltHashing;</span><br><span class="line">    <span class="keyword">if</span> (switching) &#123;</span><br><span class="line">        hashSeed = useAltHashing? sun.misc.Hashing.randomHashSeed(<span class="built_in">this</span>) : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> switching;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将旧数组元素置换到新数组中</span></span><br><span class="line"><span class="comment">// 【重】该方法在JDK1.8后被移除，因为在并发情况下可能会导致引用【死循环】和【丢失节点】</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Entry[] newTable, <span class="type">boolean</span> rehash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> newTable.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历旧数组</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历链表</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">null</span> != e) &#123;</span><br><span class="line">            <span class="comment">// e为head节点</span></span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123; <span class="comment">// 是否需要rehash</span></span><br><span class="line">                e.hash = <span class="literal">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重新计算哈希值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(e.hash, newCapacity);</span><br><span class="line">            <span class="comment">// 交换值位置【头插法，导致并发丢失节点和存在死循环风险】</span></span><br><span class="line">            <span class="comment">// 每次都将新数组中的元素先设置到e.next中然后将整个e置换到该下标位置下</span></span><br><span class="line">            e.next = newTable[i]; </span><br><span class="line">            newTable[i] = e; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下一个循环</span></span><br><span class="line">            e = next; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK-1-8"><a href="#JDK-1-8" class="headerlink" title="JDK 1.8"></a>JDK 1.8</h2><blockquote><p>基本了解</p></blockquote><p><img src="/HashMap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/002.png"></p><blockquote><p>构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>put方法相关</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt;[] tab; </span><br><span class="line">    Node&lt;K,V&gt; p; </span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// table长度</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化table</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// table下标位置恰好没有存元素</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// table下标位置有元素，将作为子节点存入（这里有别于JDK1.7存在head节点）</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// p为head节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 哈希值相等，key也相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 节点是TreeNode吗？是</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加到链表中</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// p节点没有子节点了</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 直接作为子节点存储到p中</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果这时链表长度于等于7（从0开始，即大于等于8个节点）</span></span><br><span class="line">                    <span class="comment">// 则将链表树化成红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                        <span class="comment">// 再次判断是否有必要树化</span></span><br><span class="line">                        <span class="comment">// 树化要求：tab.length &gt;= MIN_TREEIFY_CAPACITY（默认64）</span></span><br><span class="line">                        <span class="comment">// 如果tab.length不足64，就需要resize，直至tab.length&gt;64才可以树化</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">//【问题1】为什么需要引入红黑树？</span></span><br><span class="line">                    <span class="comment">// 因为当大量哈希冲突的时候会导致节点链表越来越长从而降低HashMap性能。而链表的查询复杂度为O(n),而红黑树为二叉查找树，所以时间复杂度为O(logn)，因此在数据量大的散列表中红黑树更有优势</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//【问题2】为什么选择红黑树而不是二叉树或绝对平衡二叉树呢？</span></span><br><span class="line">                    <span class="comment">// 首先，二叉树在极端情况下依然会形成链表。例如1,2,3,4的hashCode相同时，二叉树退化成链表</span></span><br><span class="line">                    <span class="comment">// 再是，绝对平衡就好像有强迫症一样把精力消耗在如何达到平衡上，因此造成不必要的性能开销</span></span><br><span class="line">                    <span class="comment">// 而红黑树它是一棵平衡树但不是绝对平衡树，优点有以下</span></span><br><span class="line">                    <span class="comment">// 1. 树属于折半查找，于较长的链表相比查询效率要高</span></span><br><span class="line">                    <span class="comment">// 2. 平衡树解决了二叉树的计算情况问题（二叉树退化成链表）</span></span><br><span class="line">                    <span class="comment">// 3. 非绝对平衡树比绝对平衡树在增删节点时要高效一些</span></span><br><span class="line">                    <span class="comment">// 因此红黑树是综合性能较强的数型数据结构</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// p节点有子节点，这时e就是p的子节点</span></span><br><span class="line">                <span class="comment">// 判断是否已经存有该key的value，有的打断循环直接替换value即可</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 循环下一个节点</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// e不为null表示已经存有该key的value，这时只需替换值即可</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 判断是否需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否需要树化</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; </span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不满足树化要求，需要再扩容</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前hash值得链表树化</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>;</span><br><span class="line">        TreeNode&lt;K,V&gt; tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容条件：</span></span><br><span class="line"><span class="comment">// size &gt; threshold 或者 tab == null 再者 tab.length &lt; MIN_TREEIFY_CAPACITY</span></span><br><span class="line"><span class="comment">// 以上三种情况均会导致resize</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length; <span class="comment">// 旧长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold; <span class="comment">// 旧扩容阈值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCap</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 新长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newThr</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 新扩容阈值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组长度大于0吗</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果数组长度已然是最大值，则将扩容阈值设置为Integer.MAX_VALUE</span></span><br><span class="line">        <span class="comment">// 这样做可以提升HashMap的空间利用率，即可以存放更多节点，但会提高哈希冲突率从而降低HashMap性能</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 正常扩容条件：</span></span><br><span class="line">        <span class="comment">// 1. table.length*2依然小于最大值容量阈值</span></span><br><span class="line">        <span class="comment">// 2. table.length大于或等大于等于16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// 新容量阈值是原来的2倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扩容阈值大于0吗</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">        newCap = oldThr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 即没元素扩容阈值又等于0【初始阶段】</span></span><br><span class="line">    <span class="keyword">else</span> &#123;              </span><br><span class="line">        <span class="comment">// 容器为默认容量，即16</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        <span class="comment">// 扩容阈值为：16*0.75f</span></span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新数组，新扩容阈值</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新建的数组赋值给全局变量</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123; <span class="comment">// 以下为原来JDK1.7 transfer() 的操作</span></span><br><span class="line">            Node&lt;K,V&gt; e; <span class="comment">// 链表head节点</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>; <span class="comment">// 置空旧数组</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>) <span class="comment">// 没有冲突链表</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 节点为树节点</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order. 冲突链表节点，相较JDK1.7多了以下4个指针变量</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123; <span class="comment">// 执行高低位标记。高位节点将迁移到新数组的 oldIndex+oldLength 位置，低位则迁移到oldIndex</span></span><br><span class="line">                        next = e.next; <span class="comment">// 记录next指针</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123; <span class="comment">// 当前节点位于新散列表的低位</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>) <span class="comment">// 没有tail则为低位链头</span></span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span> <span class="comment">// 尾插法形成低位链表</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123; <span class="comment">// 当前节点位于新散列表的高位</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>); <span class="comment">// 注意，while在处理的是旧数组中的冲突链表</span></span><br><span class="line">                    <span class="comment">// 并发操作可能会导致节点丢失，因为是先拼接链表再设新散列表</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123; </span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead; <span class="comment">// 低位链表迁移到新散列表下原下标值处</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123; <span class="comment">// 高位链表迁移到新散列表，下标为：当前下标（OldIndex） + oldCap(OldTable.length)</span></span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="comment">// 为什么能够解决JDK1.7的死循环问题？ 通过高低位拆分冲突链表后，再等待组装完成后再插入新散列表。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫笔记-爬取花瓣网图片</title>
      <link href="/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E5%8F%96%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/"/>
      <url>/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E5%8F%96%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="如何区分网站是静态网站还是动态网站"><a href="#如何区分网站是静态网站还是动态网站" class="headerlink" title="如何区分网站是静态网站还是动态网站"></a>如何区分网站是静态网站还是动态网站</h2><ol><li>拿爬取图片为例，静态网站会把图片直接写入img标签的src中，这个可以通过浏览器右键查看源码观察到；相对静态网站而言，动态网站上的图片是动态加载的，也就是说，它的图片一开始可能只有一小部分（甚至没有）嵌在页面上，随后的图片根据你的浏览程度来给你动态地加载进页面；例如你进行下拉滚动条、点击查看更多等等这些操作来进行异步的内容加载，这就是动态网站（<strong>以图片爬虫的角度</strong>）；</li><li><strong>强调的是一下</strong>，并不是说将图片直接写入img标签src中就是静态网站，上面的例子只是以图片爬取举的例子，针对的是图片爬虫时如何区分图片是静态加载还是动态加载；实质静态网站指的是那种交互操作（页面操作）无需服务器处理的网站，可以用单机游戏来理解这个概念；而动态网站上的交互，如注册这个操作，是会经过服务器来进行数据处理的，这就是动态网站</li><li>目前来说，现在大多数热门的网站都是动态网站；静态网站如我当前这个博客就是静态网站（忽略评论功能）</li></ol><h2 id="分析花瓣网图片加载"><a href="#分析花瓣网图片加载" class="headerlink" title="分析花瓣网图片加载"></a>分析花瓣网图片加载</h2><p>对于 Python 爬虫而言<code>分析需要爬取的数据是一个至关重要的步骤</code>。比如按本例子是爬取的是花瓣网的图片，而花瓣网是一个动态展示图片的网站，即图片的连接并不是直接编写在 img 的 src 里的，所以这时你就需要知道花瓣网是怎样动态加载图片并展示到页面上的。</p><p>首先花瓣网取用下拉时异步加载图片来展示，即一开始打开网页的时候并不是将图片都展示出来，而是当你下拉浏览器滚动条的时候才一部分一部分地加载并展示。</p><blockquote><p>验证操作：</p><ol><li>打开浏览器的开发者模式（f12）</li><li>点击network ,再选中XHR（异步请求）</li><li>下拉浏览器并观察</li></ol></blockquote><p>比如我在花瓣网搜索蝙蝠侠的图片</p><p><img src="/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E5%8F%96%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/001.png"></p><p>接下来点击查看异步请求的详细内容，如下</p><p><img src="/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E5%8F%96%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/002.png"></p><p>【重】得到一个异步请求url：<a href="https://huaban.com/search/?q=%E8%9D%99%E8%9D%A0%E4%BE%A0&amp;type=pins&amp;jtsbscty&amp;page=4&amp;per_page=20&amp;wfl=1">https://huaban.com/search/?q=%E8%9D%99%E8%9D%A0%E4%BE%A0&amp;type=pins&amp;jtsbscty&amp;page=4&amp;per_page=20&amp;wfl=1</a></p><p>这是非常重要的一步，因为这就是 Python 爬取图片时的请求的 url。接着将这个 url 直接帖到浏览器url栏中回车观察它返回的内容，如下</p><p><img src="/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E5%8F%96%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/003.png"></p><p>可以看出这个请求返回的是一个网页，即html。接着再通过右键查看其网页源码，如下</p><p><img src="/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E5%8F%96%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/004.png"></p><p>这就是异步请求返回的实际内容；</p><p>再细心观察一下，在源码中有个叫 app.page[“pins”] 的信息，而后面紧接着的就是我们梦寐以求的图片信息，到目前为止已经找到了需要爬取的内容了。接下来需要分析图片的地址。这又怎么理解？就是通过请求url<code>https://huaban.com/search/?q=%E8%9D%99%E8%9D%A0%E4%BE%A0&amp;type=pins&amp;jtsbscty&amp;page=4&amp;per_page=20&amp;wfl=1</code>得到的信息，再从这些信息中提取到关键的图片信息，然后拼接出真正的图片地址</p><h2 id="分析花瓣网图片下载链接"><a href="#分析花瓣网图片下载链接" class="headerlink" title="分析花瓣网图片下载链接"></a>分析花瓣网图片下载链接</h2><p>在花瓣网随便点击一张图片，然后右键复制图片地址（chrome浏览器），得到一条这样的链接</p><blockquote><p>第1张图片的图片地址</p></blockquote><p><a href="https://hbimg.b0.upaiyun.com/fcdcbd4a742a2f78e0ac3ba0e1e9be5f09e94f6517b10-5rZ92O_fw658">https://hbimg.b0.upaiyun.com/fcdcbd4a742a2f78e0ac3ba0e1e9be5f09e94f6517b10-5rZ92O_fw658</a></p><p>重复一次上面的步骤，再随便获取多一张图片的地址来做样本分析</p><blockquote><p>第2张图片的图片地址</p></blockquote><p><a href="https://hbimg.b0.upaiyun.com/dc4d65c69be68059abd119436f01333c99fd7a3d7dd2-rxbYD0_fw658">https://hbimg.b0.upaiyun.com/dc4d65c69be68059abd119436f01333c99fd7a3d7dd2-rxbYD0_fw658</a></p><p>观察上面两个url，分析得出以下公共部分</p><p><a href="https://hbimg.b0.upaiyun.com/">https://hbimg.b0.upaiyun.com/</a>  +  未知部分 + _fw658</p><p>那么这个<code>未知部分</code>到底是什么呢？你可以对比上面两个链接中的<code>未知部分</code>其实是不相同的，所以这是可以大胆猜测这就是用来区分图片的标识。那为了验证这一点，我将第1张图片的<code>未知部分:fcdcbd4a742a2f78e0ac3ba0e1e9be5f09e94f6517b10-5rZ92O</code>抽取了出来，再到 <a href="https://huaban.com/search/?q=%E8%9D%99%E8%9D%A0%E4%BE%A0&amp;type=pins&amp;jtsbscty&amp;page=4&amp;per_page=20&amp;wfl=1">https://huaban.com/search/?q=%E8%9D%99%E8%9D%A0%E4%BE%A0&amp;type=pins&amp;jtsbscty&amp;page=4&amp;per_page=20&amp;wfl=1</a> 的源码（右键查看源码）中检索一下，如下</p><p><img src="/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E5%8F%96%E8%8A%B1%E7%93%A3%E7%BD%91%E5%9B%BE%E7%89%87/005.png"></p><p>从上图可以看出我们的猜测是没有错的，这个<code>未知部分</code>实际就是图片格式化数据的 key 字段的值。</p><blockquote><p>以下 json 串截取自上图 app.page[“pins”] ，这其实是一张图片的格式化数据信息，用于直观地参考一下</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;pin_id&quot;</span><span class="punctuation">:</span> <span class="number">1642213390</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">15953905</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;board_id&quot;</span><span class="punctuation">:</span> <span class="number">28500695</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;file_id&quot;</span><span class="punctuation">:</span> <span class="number">192178188</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hbimg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fcdcbd4a742a2f78e0ac3ba0e1e9be5f09e94f6517b10-5rZ92O&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">701</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;frames&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;media_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;movie.douban.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://movie.douban.com/photos/photo/2520464127/#title-anchor&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;raw_text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;忍者蝙蝠侠&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;text_meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;via&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;via_user_id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="number">1525941787</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;like_count&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;comment_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;repin_count&quot;</span><span class="punctuation">:</span> <span class="number">175</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;is_private&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;orig_source&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">15953905</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;天天蝎&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;urlname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zlsavqbwp3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="number">1413880168</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">61285497</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;farm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;farm1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hbimg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36109024664771846f77206e63902ce52721793e1437-397g8F&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;frames&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;board&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;board_id&quot;</span><span class="punctuation">:</span> <span class="number">28500695</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">15953905</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电影海报&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电影，电影海报，平面&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;category_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;design&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;seq&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pin_count&quot;</span><span class="punctuation">:</span> <span class="number">1984</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;follow_count&quot;</span><span class="punctuation">:</span> <span class="number">83</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;like_count&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="number">1457573839</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="number">1553137563</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;deleting&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;is_private&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;liked&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后我们得出图片地址格式为：<a href="https://hbimg.b0.upaiyun.com/">https://hbimg.b0.upaiyun.com/</a>  +  <code>图片json[&#39;file&#39;\][&#39;key&#39;\]</code> + _fw658 </p><h2 id="编写爬取图片的代码"><a href="#编写爬取图片的代码" class="headerlink" title="编写爬取图片的代码"></a>编写爬取图片的代码</h2><blockquote><p>因为代码量比较少，所以就不进行封装了，一个文件搞定，看起来更加直观</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片保存文件</span></span><br><span class="line">dirName = <span class="string">&#x27;C:/Users/admin/Desktop/py_save&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">path</span>):</span><br><span class="line">    path = path.strip()</span><br><span class="line">    isExists = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件夹创建成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(path, <span class="string">&#x27;文件夹已经存在了，不再创建&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir(dirName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveImg</span>(<span class="params">requests, url, dirName, fileName</span>):</span><br><span class="line">    img = requests.get(url)</span><br><span class="line">    file_name = dirName + <span class="string">&#x27;/&#x27;</span> + fileName + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">    f.write(img.content)</span><br><span class="line">    <span class="built_in">print</span>(file_name, <span class="string">&#x27;文件保存成功！&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过正则表达式截取到图片信息部分，即app.page[&quot;pins&quot;]的内容</span></span><br><span class="line">re_compile = re.<span class="built_in">compile</span>(<span class="string">&#x27;app\.page\[&quot;pins&quot;\].*&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片地址拼接用</span></span><br><span class="line"><span class="comment"># https://hbimg.b0.upaiyun.com/  +  图片json[&#x27;file&#x27;\][&#x27;key&#x27;\] + _fw658</span></span><br><span class="line">urlPrefix = <span class="string">&#x27;https://hbimg.b0.upaiyun.com/&#x27;</span></span><br><span class="line">urlSuffix = <span class="string">&#x27;_fw658&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们只爬取10页蝙蝠侠的图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接异步请求url来访问花瓣网来获取图片信息</span></span><br><span class="line">    page = <span class="built_in">str</span>(i)</span><br><span class="line">    post_param = &#123;<span class="string">&quot;page&quot;</span>: page, <span class="string">&quot;per_page&quot;</span>: <span class="string">&quot;20&quot;</span>, <span class="string">&quot;wfl&quot;</span>:<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">    url = <span class="string">&#x27;https://huaban.com/search/?q=蝙蝠侠&#x27;</span></span><br><span class="line">    response = requests.get(url, params=post_param)</span><br><span class="line">    text = response.text</span><br><span class="line"></span><br><span class="line">    datas = re_compile.findall(text)[<span class="number">0</span>]</span><br><span class="line">    split_ = datas.split(<span class="string">&#x27;= &#x27;</span>)[<span class="number">1</span>][:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loads = json.loads(split_)</span><br><span class="line">    <span class="keyword">except</span> json.decoder.JSONDecodeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> imgMsg <span class="keyword">in</span> loads:</span><br><span class="line">        imgName = <span class="built_in">str</span>(imgMsg[<span class="string">&#x27;pin_id&#x27;</span>])</span><br><span class="line">        imgkey = imgMsg[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        imgUrl = urlPrefix + imgkey + urlSuffix</span><br><span class="line">        <span class="comment"># 使用多线程改善效率</span></span><br><span class="line">        _thread.start_new_thread(saveImg, (requests, imgUrl, dirName, imgName,))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>好了！！！ 是不是很简单呢</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可继承的ThreadLocal-InheritableThreadLocal</title>
      <link href="/%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%9A%84ThreadLocal-InheritableThreadLocal/"/>
      <url>/%E5%8F%AF%E7%BB%A7%E6%89%BF%E7%9A%84ThreadLocal-InheritableThreadLocal/</url>
      
        <content type="html"><![CDATA[<p>前段时间在Q群里看见有人问子线程如何继承父线程的ThreadLocal值，所以故作此记。</p><h2 id="ThreadLocal小回顾"><a href="#ThreadLocal小回顾" class="headerlink" title="ThreadLocal小回顾"></a>ThreadLocal小回顾</h2><ul><li><p>在ThreadLocal 中有个内部类叫 ThreadLocalMap，其存储格式为键值对存储</p></li><li><p>操作 ThreadLocal 实质就是对 ThreadLocalMap 操作</p></li><li><p>每个 Thread 对象中都有一个与当前线程所管理的 ThreadLocalMap，所以 ThreadLocal 之所以被叫做线程变量，其实就是这个原因，因为 ThreadLocalMap 是线程独占的并不存在并发问题</p></li><li><p>一个 Thread（ThreadLocalMap）中可以存储多个 ThreadLocal</p><ul><li>添加线程变量：<code>ThreadLocalMap#set(ThreadLocal, Object)</code></li><li>获取线程变量：<code>ThreadLocalMap#getEntity(ThreadLocal)</code></li></ul></li><li><p>如果要在线程池中使用 ThreadLocal，则应该在任务结束时主动调用 <code>ThreadLocal#remove()</code> 将当前 ThreadLocal 在 Thread（ThreadLocalMap）中删除，否则可能会因为线程重用的缘故而导致 Value 值无法被及时回收从而导致内存泄露。</p></li></ul><h2 id="案例驱动源码浅析"><a href="#案例驱动源码浅析" class="headerlink" title="案例驱动源码浅析"></a>案例驱动源码浅析</h2><blockquote><p>案例代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// ThreadLocal&lt;String&gt; threadLocal = new ThreadLocal&lt;&gt;();</span></span><br><span class="line">        InheritableThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>&lt;&gt;();</span><br><span class="line">        threadLocal.set(<span class="string">&quot;hello&quot;</span>); <span class="comment">// Debug</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程：&quot;</span> + str);</span><br><span class="line">            <span class="comment">// ThreadLocal=null、InheritableThreadLocal=hello</span></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;父线程：&quot;</span> + threadLocal.get());</span><br><span class="line">        <span class="comment">// ThreadLocal=hello、InheritableThreadLocal=hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当使用 InheritableThreadLocal 时，子线程是可以获取到在父线程中所摄入的值的</li></ul><blockquote><p>InheritableThreadLocal源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableThreadLocal</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> T <span class="title function_">childValue</span><span class="params">(T parentValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parentValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123; </span><br><span class="line">       <span class="keyword">return</span> t.inheritableThreadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123; </span><br><span class="line">        t.inheritableThreadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到 InheritableThreadLocal 只是重写了 ThreadLocal 的三个方法：childValue、getMap、createMap</li><li>其中 getMap 用于获取当前线程的 ThreadLocalMap，而 createMap 则是创建 ThreadLocalMap</li></ul><blockquote><p>接下来我们从 threadLocal.set(“hello”) 这句代码中进入观察</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">// 尝试在当前线程中获取ThreadLocalMap</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t); </span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 如果没有获取到，则创建一个并绑定到当前线程上</span></span><br><span class="line">        createMap(t, value); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面已经提到过，InheritableThreadLocal 重写了 getMap 和 createMap 方法，也就是说这是 getMap&#x2F;createMap 所操作的具体类型是 InheritableThreadLocal 而不是 ThreadLocal</li></ul><blockquote><p>Thread源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">inheritableThreadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到在 Thread 中其实不仅有 threadLocals 成员，还有一个 inheritableThreadLocals</li><li>即如果使用的是 ThreadLocal 则绑定到 Thread.threadLocals 中，而如果使用的是 InheritableThreadLocal 则绑定到 Thread.inheritableThreadLocals</li></ul><blockquote><p>接下来看看实例化 Thread 时都做了些什么初始化操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span><br><span class="line"><span class="params">                  <span class="type">long</span> stackSize, AccessControlContext acc,</span></span><br><span class="line"><span class="params">                  <span class="type">boolean</span> inheritThreadLocals)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 获取创建当前线程的线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">parent</span> <span class="operator">=</span> currentThread();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果当父线程使用的是InheritableThreadLocals且不为null时，则将父线程中的变量设置到前线程上</span></span><br><span class="line">    <span class="comment">// 特别注意，如果ThreadLocal中保存有&quot;引用类型&quot;，则要是父子线程在执行任务时出现了并发操作该引用的情况，则就会导致同步安全问题</span></span><br><span class="line">    <span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="literal">null</span>)</span><br><span class="line">        <span class="built_in">this</span>.inheritableThreadLocals =</span><br><span class="line">        ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ThreadLocalMap</span><span class="params">(ThreadLocalMap parentMap)</span> &#123; </span><br><span class="line">    Entry[] parentTable = parentMap.table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> parentTable.length;</span><br><span class="line">    setThreshold(len);</span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[len];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> parentTable[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();</span><br><span class="line">            <span class="keyword">if</span> (key != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> key.childValue(e.value);</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(key, value);</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (table[h] != <span class="literal">null</span>)</span><br><span class="line">                    h = nextIndex(h, len);</span><br><span class="line">                table[h] = c;</span><br><span class="line">                size++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>InheritableThreadLocal 之所以能够获取父线程的 ThreadLocalMap 内容是因为 Thread 在初始化实例时继承了父线程的 ThreadLocalMap 内容</li><li>最后要说的是，其实我们之所以使用 ThreadLocal 本质是因为不想将变量共享，所以如果如改用 InheritableThreadLocal 后就打破了一开始的出发点，而且还存在一定的同步安全隐患，因此如果不是有特别的需求个人而言其实并不建议使用 InheritableThreadLocal</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解WebSocket协议</title>
      <link href="/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote><p>了解更多：<a href="https://tools.ietf.org/html/rfc6455">https://tools.ietf.org/html/rfc6455</a></p></blockquote><ul><li>是一种应用层通信协议。可通过单个TCP连接进行<strong>全双工通信</strong></li><li>为了兼容HTTP协议，目前版本的 WebSocket 会从 HTTP 之上进行升级转变为 WebSocket（TCP握手成功之后）</li></ul><blockquote><p>知识拓展</p></blockquote><ol><li><p>什么是单工通信、半双工通信、全双工通信</p><ul><li>单工通信 - 信息只能单向传送</li><li>半双工通信 - 信息能双向传送，但不能同时双向传送</li><li>全双工通信 - 信息能够同时双向传送</li></ul></li><li><p>OSI模型</p></li></ol><p><img src="/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/001.png"></p><h2 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h2><blockquote><p>HTTP协议的缺点</p></blockquote><p>HTTP是一种<strong>无状态（通信过程不会记录状态记录，是一次性的）</strong>、<strong>单向（只能通过请求-应答方式，不能主动推送）</strong>的应用层通信协议，所以如果想要实现服务器推送功能，就需要客户端使用 XMLHttpRequest 或 &lt;iframe&gt; 等技术主动轮询来代替实现。但这样地频繁请求，不但效率不高而且还消耗无畏的网络资源，但如果使用 WebSocket 的话，就可以很简单地实现这样的功能。因为 WebSocket 只需要通过一条 TCP 连接就可以实现全双工通信，对于一些客户端和服务器需要进行频繁互动的操作显然 WebSocket 的优势更大。</p><blockquote><p>HTTP的短连接和长连接的区别</p></blockquote><p>HTTP协议本身是基于TCP来通信的，在1.1版本前HTTP默认使用<strong>短连接</strong>的方式来通信，意思是每个请求都需要进行三次TCP握手，而通信结束后就断开，TCP连接不会被复用。这样的好处是能够减少不必要的网络传输消耗，而且在2G通信年代，这样的通信方式已经能够满足使用的需求。但随着3G、4G的到来，Web网站的内容也不再是简单的文字和小图片，而还有视频、音频、大图片等，所以在1.1版本开始，HTTP从默认的短连接该为了<strong>长连接</strong>（默认请求头connection:keep-alive）,即单个TCP连接可以处理多个HTTP请求，从而很大程度地减少了TCP握手过程带来的消耗，使得请求响应更快。</p><p><img src="/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/006.png"></p><h2 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程"></a>握手过程</h2><p>WebSocket 连接会以 HTTP 连接开始自己的生命周期，而这个过程称为 WebSocket 握手。</p><p><img src="/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/007.png"></p><p>1）浏览器向服务器发送请求，通过 Upgrade 请求头表明希望升级为 WebSocket 通信方式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">ws://echo.websocket.org/?encoding=text</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://websocket.org</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>__utma=99as</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>echo.websocket.org</span><br><span class="line"><span class="attribute">Sec-WebSocket-Key</span><span class="punctuation">: </span>uRovscZjNol/umbTt5uKmw==</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Sec-WebSocket-Version</span><span class="punctuation">: </span>13</span><br></pre></td></tr></table></figure><p>2）只要服务器支持 WebSocket 协议就会执行升级操作。默认情况下 Websocket 使用与 HTTP（80）和 HTTPS（443） 相同的端口</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">101</span> WebSocket Protocol Handshake</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 10 Feb 2012 17:38:18 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Kaazing Gateway</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>WebSocket</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://websocket.org</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span><span class="punctuation">: </span>rLHCkw/SKsO9GAH/ZSFhBATDKrU=</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>content-type</span><br></pre></td></tr></table></figure><h2 id="WebSocket和Server-Sent-Event（SSE）的区别"><a href="#WebSocket和Server-Sent-Event（SSE）的区别" class="headerlink" title="WebSocket和Server Sent Event（SSE）的区别"></a>WebSocket和Server Sent Event（SSE）的区别</h2><blockquote><p>主要区别</p></blockquote><ol><li>都可以实现服务端推送，并且都是长连接</li><li>SSE仍然使用HTTP协议进行通讯，即通信会采用HTTP报文</li><li>WebSocket可以进行双向通讯，但SSE只能单向，即服务端推送到客户端</li></ol><blockquote><p>SSE实现</p></blockquote><p>前端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var eventSource = new EventSource(url, &#123; withCredentials: true &#125;);</span></span><br><span class="line"><span class="keyword">var</span> eventSource = <span class="keyword">new</span> <span class="title class_">EventSource</span>(url);</span><br><span class="line">eventSource.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后端返回数据时的响应头</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/event-stream</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure><h2 id="WebSocket快速入门案例"><a href="#WebSocket快速入门案例" class="headerlink" title="WebSocket快速入门案例"></a>WebSocket快速入门案例</h2><h3 id="Spring-H5"><a href="#Spring-H5" class="headerlink" title="Spring + H5"></a>Spring + H5</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><blockquote><p>无需导入插件，因为 websocket 是 HTML5 规范中的内容，目前普遍的浏览器都支持</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建websocket对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8888/websocket/ws&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">info</span>(websocket);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接成功后触发</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;连接成功!!!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        websocket.<span class="title function_">send</span>(<span class="string">&quot;服务端你好，我是客户端呢&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//接收到服务器响应时触发</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">info</span>(res);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//连接关闭时触发</span></span></span><br><span class="line"><span class="language-javascript">websocket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&quot;Connection is closed...&quot;</span>); </span></span><br><span class="line"><span class="language-javascript">   &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-websocket --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义WebSocketHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立连接后执行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;连接成功！！&quot;</span>);</span><br><span class="line">        <span class="comment">// 随便向客户端发送一些内容</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">session.sendMessage(<span class="keyword">new</span> <span class="title class_">TextMessage</span>(<span class="string">&quot;客户端你好，我是服务端&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置WebSocket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebSocketHandler webSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册WebSocket处理器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> &#123;</span><br><span class="line">registry.addHandler(webSocketHandler, <span class="string">&quot;/ws&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/003.png"></p><h3 id="SpringBoot-H5"><a href="#SpringBoot-H5" class="headerlink" title="SpringBoot + H5"></a>SpringBoot + H5</h3><h4 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建websocket对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8888/websocket/ws&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">info</span>(websocket);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接成功后触发</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;连接成功!!!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        websocket.<span class="title function_">send</span>(<span class="string">&quot;服务端你好，我是客户端呢&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//接收到服务器响应时触发</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">info</span>(res);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//连接关闭时触发</span></span></span><br><span class="line"><span class="language-javascript">websocket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&quot;Connection is closed...&quot;</span>); </span></span><br><span class="line"><span class="language-javascript">   &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h4><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- websocket --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义MyWebSocketServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(&quot;/ws&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnOpen</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onopen</span><span class="params">(Session session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">session.getBasicRemote().sendText(<span class="string">&quot;客户端你好啊，我是websocket服务端&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnMessage</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Session session, String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;客户端:&quot;</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置WebSocket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p><img src="/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/004.png"></p><h3 id="Spring-SockJS-STOMP协议"><a href="#Spring-SockJS-STOMP协议" class="headerlink" title="Spring + SockJS + STOMP协议"></a>Spring + SockJS + STOMP协议</h3><ul><li><p>SockJS 可以支持哪些不能使用 WebSocket 的浏览器</p></li><li><p>采用 Spring + SockJS + STOMP协议 方案，可以提高 WebSocket 通信的可定制程度</p></li></ul><h4 id="前端-2"><a href="#前端-2" class="headerlink" title="前端"></a>前端</h4><blockquote><p>Thymeleaf模板</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sockjs + stomp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/sockjs-client/1.1.4/sockjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/stomp.js/2.3.3/stomp.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;disconnect()&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> stompClient = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">setConnected</span>(<span class="params">connected</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;connect&#x27;</span>).<span class="property">disabled</span> = connected;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disconnect&#x27;</span>).<span class="property">disabled</span> = !connected;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;conversationDiv&#x27;</span>).<span class="property">style</span>.<span class="property">visibility</span> = connected ? <span class="string">&#x27;visible&#x27;</span> : <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;response&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 可以看到SockJS可以采用的是HTTP协议进行连接，这是为了兼用不支持WebSocket的浏览器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="string">&#x27;http://localhost:8080/thymeleaf_demo/chat&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">SockJS</span>(url);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            stompClient = <span class="title class_">Stomp</span>.<span class="title function_">over</span>(socket);</span></span><br><span class="line"><span class="language-javascript">            stompClient.<span class="title function_">connect</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 打开输入框，因为已经连接成功</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">setConnected</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">              </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 订阅MQ消息端点</span></span></span><br><span class="line"><span class="language-javascript">                stompClient.<span class="title function_">subscribe</span>(<span class="string">&#x27;/topic/messages&#x27;</span>, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">showMessageOutput</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(response.<span class="property">body</span>));</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// stompClient.subscribe(&#x27;/app/chat&#x27;, function (response) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     showMessageOutput(JSON.parse(response.body));</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">disconnect</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (stompClient != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                stompClient.<span class="title function_">disconnect</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setConnected</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Disconnected&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;send message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="keyword">from</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;from&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> send = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&#x27;from&#x27;</span>: <span class="keyword">from</span>, <span class="string">&#x27;text&#x27;</span>: text&#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 往服务端发送消息</span></span></span><br><span class="line"><span class="language-javascript">            stompClient.<span class="title function_">send</span>(<span class="string">&quot;/app/chat&quot;</span>, &#123;&#125;, send);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">showMessageOutput</span>(<span class="params">messageOutput</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> response = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;response&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            p.<span class="property">style</span>.<span class="property">wordWrap</span> = <span class="string">&#x27;break-word&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            p.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(messageOutput.<span class="property">from</span> + <span class="string">&quot;: &quot;</span></span></span><br><span class="line"><span class="language-javascript">                + messageOutput.<span class="property">text</span> + <span class="string">&quot; (&quot;</span> + messageOutput.<span class="property">time</span> + <span class="string">&quot;)&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">            response.<span class="title function_">appendChild</span>(p);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;from&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Choose a nickname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;connect&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;connect();&quot;</span>&gt;</span>Connect<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;disconnect&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;disconnect();&quot;</span>&gt;</span></span><br><span class="line">                Disconnect</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conversationDiv&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Write a message...&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;sendMessage&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMessage();&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h4><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-version</span>&gt;</span>3.0.11.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-framework-version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">spring-framework-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring mvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- servlet 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring websocket + stomp + sockjs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-framework-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketStompConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>); <span class="comment">// 启用一个简单的broker，用于被代理。其端点前缀为 /topic</span></span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>); <span class="comment">// 当前消息代理的端点前缀（客户端发送消息时使用）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> &#123;</span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/chat&quot;</span>);</span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/chat&quot;</span>).withSockJS();</span><br><span class="line">        <span class="comment">// 其中一个使用 sockjs 是为了“弹性”，即客户端可用 sockjs 也可以不用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：用于自定义消息格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputMessage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Sam&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestController</span><span class="params">(SimpMessagingTemplate simpMessagingTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.simpMessagingTemplate = simpMessagingTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">OutputMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputMessage</span>(<span class="string">&quot;服务端&quot;</span>, <span class="string">&quot;sendMessage处理器&quot;</span>, time);</span><br><span class="line">        simpMessagingTemplate.convertAndSend(<span class="string">&quot;/topic/messages&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/chat&quot;)</span> <span class="comment">// 表示这是一个端点处理器,用于接收客户端发送过来的stomp消息</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;/topic/messages&quot;)</span> <span class="comment">// 将return发送到MQ的&quot;/topic/messages&quot;</span></span><br><span class="line">    <span class="keyword">public</span> OutputMessage <span class="title function_">send</span><span class="params">(Message message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OutputMessage</span>(<span class="string">&quot;服务端&quot;</span>, <span class="string">&quot;send处理器&quot;</span>, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Stomp客户端订阅时触发</span></span><br><span class="line"><span class="comment">     * 特别注意，以当前案例为例子 <span class="doctag">@SubscribeMapping</span> 只能处理 /app 前缀的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @SubscribeMapping(&quot;/chat&quot;)</span></span><br><span class="line"><span class="comment">//    public OutputMessage subscribe() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;subscribe触发&quot;);</span></span><br><span class="line"><span class="comment">//        String time = new SimpleDateFormat(&quot;HH:mm&quot;).format(new Date());</span></span><br><span class="line"><span class="comment">//        return new OutputMessage(&quot;服务端&quot;, &quot;响应测试&quot;, time);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// @MessageMapping 的异常处理</span></span><br><span class="line">    <span class="meta">@MessageExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNullPointerException</span><span class="params">(Exception exception)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抛出了异常：handleNullPointerException&quot;</span>);</span><br><span class="line">        System.out.println(exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><p><img src="/websocket%E5%8D%8F%E8%AE%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/005.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ThreadLocal内存泄露和ThreadLocalMap源码浅析</title>
      <link href="/%E5%85%B3%E4%BA%8EThreadLocal%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%92%8CThreadLocalMap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
      <url>/%E5%85%B3%E4%BA%8EThreadLocal%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%92%8CThreadLocalMap%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2020年3月20日15:22:14 — 修改为更通俗的表述</li></ul><h2 id="关于引用的小知识"><a href="#关于引用的小知识" class="headerlink" title="关于引用的小知识"></a>关于引用的小知识</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 软引用生命周期：内存不足的前提下第二次gc前。即第一次gc回收过后，依然不能满足所需内存才会回收软引用</span></span><br><span class="line">        SoftReference&lt;Person&gt; softReference = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sam&quot;</span>));</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(softReference.get() == <span class="literal">null</span> ? <span class="string">&quot;对象已被回收&quot;</span> : <span class="string">&quot;对象依然存活&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------- 软引用 end -------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 弱引用生命周期：从对象诞生到下一次GC之前</span></span><br><span class="line">        WeakReference&lt;Person&gt; weakReference = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sam&quot;</span>));</span><br><span class="line">        System.out.println(weakReference.get() == <span class="literal">null</span> ? <span class="string">&quot;对象已被回收&quot;</span> : <span class="string">&quot;对象依然存活&quot;</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(weakReference.get() == <span class="literal">null</span> ? <span class="string">&quot;对象已被回收&quot;</span> : <span class="string">&quot;对象依然存活&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------- 弱引用 end -------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 虚引用生命周期：该等级的引用不会对引用本身产生任何副作用，只用于监听引用是否被回收</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">sam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Sam&quot;</span>);</span><br><span class="line">        ReferenceQueue&lt;Person&gt; queue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;Person&gt; personPhantomReference = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;&gt;(sam, queue);</span><br><span class="line">        <span class="comment">// 注意：虚引用无法像其他引用一样 get() 获取到关联的引用实例</span></span><br><span class="line">        <span class="comment">// 主动将引用入队</span></span><br><span class="line">        <span class="comment">//personPhantomReference.enqueue();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.poll() == <span class="literal">null</span>) &#123; <span class="comment">// 当引用被回收就会入队</span></span><br><span class="line">                <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;对象依然存活&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象已被回收&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        sam = <span class="literal">null</span>; <span class="comment">// 消除强引用让gc回收</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待gc</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果：</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 对象依然存活</span></span><br><span class="line"><span class="comment">         * -------------------- 软引用 end -------------------------</span></span><br><span class="line"><span class="comment">         * 对象依然存活</span></span><br><span class="line"><span class="comment">         * 对象已被回收</span></span><br><span class="line"><span class="comment">         * -------------------- 弱引用 end -------------------------</span></span><br><span class="line"><span class="comment">         * 对象依然存活</span></span><br><span class="line"><span class="comment">         * 对象依然存活</span></span><br><span class="line"><span class="comment">         * 对象依然存活</span></span><br><span class="line"><span class="comment">         * 对象已被回收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>拓展内容1：三种引用的使用场景</p></blockquote><p>软引用：适合做缓存</p><p>弱引用：适合临时数据。例如 JDK 中的 WeakHashMap 以及接下来聊的 ThreadLocalMap </p><p>虚引用：监控对象回收</p><blockquote><p>拓展内容2：FinalReference  </p></blockquote><p>除了以上3种引用之外，还有一种特别的引用FinalReference。FinalReference接口是包级别的，说白了就是对外不公开只是内部使用的接口。</p><p>JVM会在垃圾回收之前（第一次标记之后）将实现了Object的finalze方法的实例包装为FinalReference放进ReferenceQueue中进行统一调用，而完成这项工作的精灵线程叫Finalizer线程。 </p><h2 id="ThreadLocal-和-Thread-之间的关系"><a href="#ThreadLocal-和-Thread-之间的关系" class="headerlink" title="ThreadLocal 和 Thread 之间的关系"></a>ThreadLocal 和 Thread 之间的关系</h2><ul><li><p>在ThreadLocal 中有个内部类叫 ThreadLocalMap，其存储格式为键值对存储</p></li><li><p>操作 ThreadLocal 实质就是对 ThreadLocalMap 操作</p></li><li><p>每个 Thread 对象中都有一个与当前线程所管理的 ThreadLocalMap，所以 ThreadLocal 之所以被叫做线程变量，其实就是这个原因，因为 ThreadLocalMap 是线程独占的并不存在并发问题</p></li><li><p>一个 Thread（ThreadLocalMap）中可以存储多个 ThreadLocal</p><ul><li>添加线程变量：<code>ThreadLocalMap#set(ThreadLocal, Object)</code></li><li>获取线程变量：<code>ThreadLocalMap#getEntity(ThreadLocal)</code></li></ul></li><li><p>如果要在线程池中使用 ThreadLocal，则应该在任务结束时主动调用 <code>ThreadLocal#remove()</code> 将当前 ThreadLocal 在 Thread（ThreadLocalMap）中删除，否则可能会因为线程重用的缘故而导致 Value 值无法被及时回收从而导致内存泄露。</p></li></ul><h2 id="ThreadLocalMap源码浅析与内存泄露问题"><a href="#ThreadLocalMap源码浅析与内存泄露问题" class="headerlink" title="ThreadLocalMap源码浅析与内存泄露问题"></a>ThreadLocalMap源码浅析与内存泄露问题</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">    <span class="comment">// 初始化entry数组，大小默认为INITIAL_CAPACITY，即16</span></span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[INITIAL_CAPACITY];</span><br><span class="line">    <span class="comment">// 计算第一个Entry在数组中的下标值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    table[i] = <span class="keyword">new</span> <span class="title class_">Entry</span>(firstKey, firstValue);</span><br><span class="line">    <span class="comment">// 计算Entry个数</span></span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 计算阈值。公式：len*2 / 3</span></span><br><span class="line">    setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Entry类的内存泄露问题"><a href="#Entry类的内存泄露问题" class="headerlink" title="Entry类的内存泄露问题"></a>Entry类的内存泄露问题</h3><h4 id="Entry类"><a href="#Entry类" class="headerlink" title="Entry类"></a>Entry类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">    Object value;</span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="built_in">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么要将-key-定义为弱引用？"><a href="#为什么要将-key-定义为弱引用？" class="headerlink" title="为什么要将 key 定义为弱引用？"></a>为什么要将 key 定义为弱引用？</h4><p>&amp;emsp;&amp;emsp;个人认为原因是为了更好地回收 ThreadLocal 与之对应的 value 值。因为 ThreadLocalMap 的 set&#x2F;get 方法是具有一定的清理能力的，而其清理操作主要针对 key 为 null 的 Entry（参考下面的源码分析）。大致步骤是先往数组左边检索，然后再从左往右清理其 key 为 null 的 Entry。</p><p>&amp;emsp;&amp;emsp;在上面我们已经得知了弱引用实例的生命周期范围，所以简单地说就是如果当 ThreadLocal 用完后被手动置空的话（即丢失了强引用），那么这个 ThreadLocal 就只能活到下一次gc，而当 ThreadLocal 被回收掉，那么在下一次再调用 set&#x2F;get 方法时就会被发现 key 为 null 然后其value就会被清除。</p><p>&amp;emsp;&amp;emsp;现在我们假设如果 key 被定义为强引用看看又会发生什么事情。key如果为强引用，也就是说即使在程序中手动置空 ThreadLocal 引用 gc 也不能将其回收，主要是因为 ThreadLocalMap 中还强引用着这个已经“用完”的 ThreadLocal，因此对于 JVM 而言宁可抛出 OOM 都不会回收强引用的其空间。但我们现在明确知道这个 ThreadLocal（以及其关联的Value）已经“用完”了，但其空间却不能回收，这时如果 Thread 的生命周期非常长的话，就会导致内存泄露问题的发生。所以看到网上有些人说是因为弱引用而导致内存泄露，这显然是不正确的。</p><h4 id="为什么会出现内存泄露？"><a href="#为什么会出现内存泄露？" class="headerlink" title="为什么会出现内存泄露？"></a>为什么会出现内存泄露？</h4><p>&amp;emsp;&amp;emsp;ThreadLocalMap 的生命周期与 Thread 绑定，所以当 Thread 被回收后 ThreadLocalMap 很自然就被回收了，所以并不会出现什么内存泄露的问题。明白这一点很重要，因为问题的关键点就在 Thread 的生命周期被延长后，才导致 ThreadLocalMap 存在内存泄露的风险。譬如线程池中的线程可能长期驻留在内存中，因此导致 ThreadLocalMap 中的内容无法被回收。</p><p>&amp;emsp;&amp;emsp;虽然 ThreadLocalMap 的 set&#x2F;get 方法具有一定的清理能力的，但这里需要强调一下这种清理能力是有限度的，因为它并不能保证所有 key 为 null 的 Entry 都被完全清理掉。例如在 ThreadLocalMap#set(ThreadLocal, Object) 中，ThreadLocal<strong>没有发生冲突</strong>或<strong>发生了冲突但在当前下标的右边不存在key为null的Entry</strong>时，是不会往左遍历的。也就是说在这两种情况下左边即使有 key 为 null 的 Entry 都不会被发现和清理，所以就会导致内存泄露。</p><h4 id="如何避免内存泄露？"><a href="#如何避免内存泄露？" class="headerlink" title="如何避免内存泄露？"></a>如何避免内存泄露？</h4><p>&amp;emsp;&amp;emsp;发生内存泄露问题的本质是 Thread 生命周期被延长而导致 ThreadLocalMap 生命周期也被延长，且在操作过后 ThreadLocalMap 并没有发现 key 为 null 的 Entry，这时就会导致内存泄露问题。所以最好的解决方法就是：</p><ol><li>尽量不要在线程池中使用 ThreadLocal </li><li>使用完 ThreadLocal 后要主动调用 ThreadLocal 的 remove 方法，将自己在当前 Thread 的 ThreadLocalMap 中移除来主动释放空间</li></ol><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出现了Hash冲突</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[i];</span><br><span class="line">         e != <span class="literal">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123; <span class="comment">// 注意：从当前下标往右遍历</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回遍历到的ThreadLocal</span></span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发现key是同一个ThreadLocal，直接替换即可</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历时发现了key（ThreadLoca）为null，替换并执行清理操作</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 用当前设入的 ThreadLocal 将其替换掉</span></span><br><span class="line">            <span class="comment">// 注意，这时会进行一次全散列表清理（从左往右）</span></span><br><span class="line">            replaceStaleEntry(key, value, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【没有发生冲突】或【发生了冲突但从i开始散列表右边不存在key为null的Entry】</span></span><br><span class="line">    <span class="comment">// 那么就将当前Entry保存到散列表的最右边</span></span><br><span class="line">    tab[i] = <span class="keyword">new</span> <span class="title class_">Entry</span>(key, value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> ++size;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否需要rehash</span></span><br><span class="line">    <span class="comment">// cleanSomeSlots：从i开始往右清理哪些key为null的Entry</span></span><br><span class="line">    <span class="comment">// !cleanSomeSlots(i, sz)：为true时表示i开始往右并没有需要清理的Entry，即没法腾出空间</span></span><br><span class="line">    <span class="comment">// sz &gt;= threshold，即表示已经到达容许限制</span></span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">        rehash(); <span class="comment">// 扩容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以注意到，当【没有发生冲突】或【发生了冲突但从i开始散列表的右边不存在key为null的Entry】时，是不会往左遍历的，所以这时左边即使有 key 为 null 的 Entry 也不会被发现，即存在内存泄露风险</li><li>处于右边且 key 为 null 的 Entry 之所以能够被清理是因为每一次 set 操作都会进行一次 cleanSomeSlots，而 cleanSomeSlots 是往右清理的</li></ul><h3 id="rehash和expungeStaleEntries"><a href="#rehash和expungeStaleEntries" class="headerlink" title="rehash和expungeStaleEntries"></a>rehash和expungeStaleEntries</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 压缩散列表</span></span><br><span class="line">    expungeStaleEntries();</span><br><span class="line">    <span class="comment">// 如果这时size已经到达阈值，则扩容为原来的2倍</span></span><br><span class="line">    <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">        resize(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">expungeStaleEntries</span><span class="params">()</span> &#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    <span class="comment">// rehash操作会对散列表进行一次全表清理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[j];</span><br><span class="line">        <span class="comment">// 从散列表最左边且key为null的Entry位置开始清理</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span> &amp;&amp; e.get() == <span class="literal">null</span>)</span><br><span class="line">            expungeStaleEntry(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="replaceStaleEntry"><a href="#replaceStaleEntry" class="headerlink" title="replaceStaleEntry"></a>replaceStaleEntry</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> staleSlot)</span> &#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    Entry e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前冲突位置staleSlot（不包含staleSlot）开始往左查找key为null的Entry</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">slotToExpunge</span> <span class="operator">=</span> staleSlot;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> prevIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="literal">null</span>;</span><br><span class="line">         i = prevIndex(i, len))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e.get() == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">// slotToExpunge记录了散列表最左边且key为null的Entry下标</span></span><br><span class="line">            slotToExpunge = i; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再往右遍历（不包含staleSlot）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nextIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="literal">null</span>;</span><br><span class="line">         i = nextIndex(i, len)) &#123;</span><br><span class="line"></span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从staleSlot（不包含staleSlot）往右遍历时发现了相同的ThreadLocal</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将当前key为null的Entry替换到i位置</span></span><br><span class="line">            <span class="comment">// 同时将当前保存的ThreadLocal所在的Entry赋值给staleSlot</span></span><br><span class="line">            tab[i] = tab[staleSlot];</span><br><span class="line">            tab[staleSlot] = e;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 避免先前往右遍历时发现staleSlot真好是要清除的对象</span></span><br><span class="line">            <span class="comment">// 所以将当前往右遍历到的i设置为清除的目标</span></span><br><span class="line">            <span class="keyword">if</span> (slotToExpunge == staleSlot)</span><br><span class="line">                slotToExpunge = i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从slotToExpunge往右清除（slotToExpunge是位于最左边key为null的Entry的下标）</span></span><br><span class="line">            <span class="comment">// 回顾：slotToExpunge为哈希表最左边的且key为null的Entry</span></span><br><span class="line">            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we didn&#x27;t find stale entry on backward scan, the</span></span><br><span class="line">        <span class="comment">// first stale entry seen while scanning for key is the</span></span><br><span class="line">        <span class="comment">// first still present in the run.</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span> &amp;&amp; slotToExpunge == staleSlot)</span><br><span class="line">            slotToExpunge = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If key not found, put new entry in stale slot</span></span><br><span class="line">    tab[staleSlot].value = <span class="literal">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="keyword">new</span> <span class="title class_">Entry</span>(key, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are any other stale entries in run, expunge them</span></span><br><span class="line">    <span class="keyword">if</span> (slotToExpunge != staleSlot)</span><br><span class="line">        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="expungeStaleEntry"><a href="#expungeStaleEntry" class="headerlink" title="expungeStaleEntry"></a>expungeStaleEntry</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除指定下标的entry和该下标后key为null的entry</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expungeStaleEntry</span><span class="params">(<span class="type">int</span> staleSlot)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前entry[]信息</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将其置空后再size减1</span></span><br><span class="line">    <span class="comment">// 置空的目的是解除entry的引用好让gc将其回收</span></span><br><span class="line">    tab[staleSlot].value = <span class="literal">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    Entry e;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个置空的entry后面是否还有entry？</span></span><br><span class="line">    <span class="keyword">for</span> (i = nextIndex(staleSlot, len); (e = tab[i]) != <span class="literal">null</span>; i = nextIndex(i, len)) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有entry且key为null？</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将它一同置空</span></span><br><span class="line">            e.value = <span class="literal">null</span>;</span><br><span class="line">            tab[i] = <span class="literal">null</span>;</span><br><span class="line">            size--;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 有entry但key不为null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取当前ThreadLocal对应Entry的下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 如果h不等于当前i则表示存在ThreadLocal冲突的情况，即i和h冲突</span></span><br><span class="line">            <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                <span class="comment">// 置空当前i下标的Entry（tab[i]的值位于当前局部变量e）</span></span><br><span class="line">                tab[i] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 如果当前冲突的Entry（h）不会null则往后找位置来存放原来位于i的Entry</span></span><br><span class="line">                <span class="keyword">while</span> (tab[h] != <span class="literal">null</span>) </span><br><span class="line">                    h = nextIndex(h, len);</span><br><span class="line">                <span class="comment">// 将当前i的Entry存放到右边，总体来说是将Entry往右移动</span></span><br><span class="line">                tab[h] = e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cleanSomeSlots"><a href="#cleanSomeSlots" class="headerlink" title="cleanSomeSlots"></a>cleanSomeSlots</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">cleanSomeSlots</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">removed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从i开始往右清理哪些key为null的Entry</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        i = nextIndex(i, len);</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span> &amp;&amp; e.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">            n = len;</span><br><span class="line">            removed = <span class="literal">true</span>;</span><br><span class="line">            i = expungeStaleEntry(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getEntry"><a href="#getEntry" class="headerlink" title="getEntry"></a>getEntry</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Entry <span class="title function_">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">    <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> table[i];</span><br><span class="line">    <span class="comment">// entry[]中存在该值，且正好是要查询的key</span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 表示存在哈希冲突，当前要找的Entry不在当前位置，则需要往右查找</span></span><br><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getEntryAfterMiss"><a href="#getEntryAfterMiss" class="headerlink" title="getEntryAfterMiss"></a>getEntryAfterMiss</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Entry <span class="title function_">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="type">int</span> i, Entry e)</span> &#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="comment">// 找到对应的Entry直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (k == key)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="comment">// 在找Entry途中发现到存在key为null的Entry则进行清理</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>)</span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 当前下标没有找到想要的结果，接着往右遍历</span></span><br><span class="line">            i = nextIndex(i, len);</span><br><span class="line">        e = tab[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不存在该key对应的Entry</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫笔记-入门</title>
      <link href="/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
      <url>/python%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0-%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96-%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># =========== requests基本使用 ===========</span></span><br><span class="line"><span class="comment"># 安装requests模块：用于请求(访问)网站</span></span><br><span class="line"><span class="comment"># pip install requests</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求网站（指定爬取目标）</span></span><br><span class="line"><span class="comment"># response = requests.get(&#x27;https://news.163.com&#x27;)</span></span><br><span class="line"><span class="comment"># 获取返回的文本内容</span></span><br><span class="line"><span class="comment"># text = response.text</span></span><br><span class="line"><span class="comment"># print(text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========== 使用BeautifulSoup获取页面标签 ===========</span></span><br><span class="line"><span class="comment"># 安装beautifulsoup4模块：用于解析requests返回的文本内容</span></span><br><span class="line"><span class="comment"># pip install beautifulsoup4</span></span><br><span class="line"><span class="comment"># 安装lxml解析器</span></span><br><span class="line"><span class="comment"># 1.</span></span><br><span class="line"><span class="comment">#  http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml</span></span><br><span class="line"><span class="comment">#  下载适合自己python版本的whl文件，如下为我下载的版本</span></span><br><span class="line"><span class="comment"># 2. 切换到下载whl文件所在目录安装whl，如下</span></span><br><span class="line"><span class="comment"># pip3 install lxml-4.3.3-cp37-cp37m-win_amd64.whl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># response = requests.get(&#x27;https://news.163.com&#x27;)</span></span><br><span class="line"><span class="comment"># text = response.text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定BeautifulSoup使用lxml解析文本内容</span></span><br><span class="line"><span class="comment"># soup = BeautifulSoup(text, &#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment"># 使用find方法查到第一个img标签</span></span><br><span class="line"><span class="comment"># find = soup.find(&#x27;img&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出返回值类型</span></span><br><span class="line"><span class="comment"># print(&quot;find的类型：&quot;, type(find))</span></span><br><span class="line"><span class="comment"># 输出find获取的值</span></span><br><span class="line"><span class="comment"># print(&quot;整合标签定义：&quot;, find)</span></span><br><span class="line"><span class="comment"># 输出标签的名字</span></span><br><span class="line"><span class="comment"># print(&quot;标签名称：&quot;, find.name)</span></span><br><span class="line"><span class="comment"># 输出标签的_src属性值</span></span><br><span class="line"><span class="comment"># print(&quot;图片：&quot;, find[&#x27;src&#x27;])</span></span><br><span class="line"><span class="comment"># 标签体内容</span></span><br><span class="line"><span class="comment"># print(&#x27;标签体内容：&#x27;, find.string)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========== 获取html注释内容 ===========</span></span><br><span class="line"><span class="comment"># markup = &quot;&lt;b&gt;&lt;!-- python爬虫学习 --&gt;&lt;/b&gt;&lt;a href=&#x27;www.bing.com&#x27;&gt;&lt;!-- aaa python爬虫学习 --&gt;&lt;/a&gt;&quot;</span></span><br><span class="line"><span class="comment"># soup = BeautifulSoup(markup, &#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment"># print(&#x27;b注释内容：&#x27;, soup.b.string)</span></span><br><span class="line"><span class="comment"># print(&#x27;a注释内容：&#x27;, soup.a.string)</span></span><br><span class="line"><span class="comment"># 查找标签string表达式：soup.标签名称.string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========== 遍历img标签(强大的find_all方法) ===========</span></span><br><span class="line"><span class="comment"># response = requests.get(&#x27;https://news.163.com&#x27;)</span></span><br><span class="line"><span class="comment"># text = response.text</span></span><br><span class="line"><span class="comment"># soup = BeautifulSoup(text, &#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #得到所有的&lt;a&gt;标签</span></span><br><span class="line"><span class="comment"># find_all = soup.find_all(&#x27;img&#x27;)</span></span><br><span class="line"><span class="comment"># for img in find_all:</span></span><br><span class="line"><span class="comment">#     # print(type(img))</span></span><br><span class="line"><span class="comment">#     # &lt;class &#x27;bs4.element.Tag&#x27;&gt;</span></span><br><span class="line"><span class="comment">#     if img.get(&#x27;src&#x27;):</span></span><br><span class="line"><span class="comment">#         print(img.get(&#x27;src&#x27;))</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         print(img.get(&#x27;data-src&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========== 图片保存相关 ===========</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">dirName = <span class="string">&#x27;C:/Users/admin/Desktop/py_save&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">path</span>):</span><br><span class="line">    path = path.strip()</span><br><span class="line">    isExists = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件夹创建成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(path, <span class="string">&#x27;文件夹已经存在了，不再创建&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir(dirName)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saveImg</span>(<span class="params">requests, url, dirName, fileName</span>):</span><br><span class="line">    img = requests.get(url)</span><br><span class="line">    file_name = dirName + <span class="string">&#x27;/&#x27;</span> + fileName + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">    f.write(img.content)</span><br><span class="line">    <span class="built_in">print</span>(file_name, <span class="string">&#x27;文件保存成功！&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># =========== 去除https://unsplash.com/t/wallpapers中图片地址后面的参数 ===========</span></span><br><span class="line"></span><br><span class="line">reqUrl = <span class="string">&#x27;https://unsplash.com/t/wallpapers&#x27;</span></span><br><span class="line">text = requests.get(reqUrl).text</span><br><span class="line">soup = BeautifulSoup(text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到所有的&lt;a&gt;标签</span></span><br><span class="line">find_all = soup.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> find_all:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文件名称</span></span><br><span class="line">    uuid_ = uuid.uuid1()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> img.get(<span class="string">&#x27;src&#x27;</span>):</span><br><span class="line">        <span class="comment"># 将后面的参数去掉，即?后面的内容</span></span><br><span class="line">        url = img.get(<span class="string">&#x27;src&#x27;</span>).split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        saveImg(requests, url, dirName, <span class="built_in">str</span>(uuid_))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从ConcurrentModificationException分析ArrayList迭代器</title>
      <link href="/%E4%BB%8EConcurrentModificationException%E5%88%86%E6%9E%90ArrayList%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/%E4%BB%8EConcurrentModificationException%E5%88%86%E6%9E%90ArrayList%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近突然想起刚毕业那会找工作时面试被问了个这样的问题。就是“使用增强for循环遍历ArrayList（List集合）时删除其中的元素是否会出现异常？”。说实话当时真把我愣住了，我当时的回答是：<code>ArrayList内部使用的是Object数组，所以在增删时会自动挪动下标，而且对于数组而言长度是固定的，没有元素的位置会用null填充，虽然我没试过但我觉得不会抛异常。</code> </p><p>现在想起这件事自己都觉得有些搞笑，哈哈，经验少也是没办法。现在回想既然面试官问得出这样的问题肯定是会抛出异常的，这个拿大腿都能想到，但是为什么呢？今天就这个问题来分析一下源码到底是怎么一回事。</p><p>文章分为两部分。首先是了解<code>迭代器设计模式</code>，然后再拿ArrayList作为例子进行源码分析。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul><li>遍历集合中的元素</li><li>优点是无需暴露集合内部信息，且迭代器可以为不同结构集合指定统一接口</li><li>缺点是每一个迭代器实现只对应一个特定结构的集合，也就是说如果集合类型繁多就增加迭代器的实现的个数</li></ul><h3 id="自定义迭代器"><a href="#自定义迭代器" class="headerlink" title="自定义迭代器"></a>自定义迭代器</h3><ul><li>迭代器模式其实也很简单，主要角色有：<code>自定义集合</code>、<code>迭代器接口</code>、<code>迭代器实现</code>3个</li><li>以下例子并不严谨，只作为了解迭代器的参考</li></ul><h4 id="自定义集合"><a href="#自定义集合" class="headerlink" title="自定义集合"></a>自定义集合</h4><blockquote><p>以数组作为内部存储结构（模仿ArrayList）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] list;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> savePosition;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">()</span> &#123;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T t)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savePosition &gt;= list.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.list[savePosition++] = t;</span><br><span class="line">        size ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= list.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) <span class="built_in">this</span>.list[position];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回实质存储的元素个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回迭代器</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyListIterator</span>(<span class="built_in">this</span>.list, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                builder.append(list[i]);</span><br><span class="line">                <span class="keyword">if</span> ((i+<span class="number">1</span>) &lt; list.length &amp;&amp; list[i+<span class="number">1</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">                    builder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    E <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代器实现"><a href="#迭代器实现" class="headerlink" title="迭代器实现"></a>迭代器实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListIterator</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] list;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> position;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyListIterator</span><span class="params">(Object[] ts, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;ts.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ts[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                list[index++] = ts[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) list[position++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position != list.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>迭代器的本质就是用来遍历某个时间点集合中的元素</li><li>在上面的例子中，MyListIterator 相当于在 MyList.iterator() 时copy了一份 MyList 的元素然后进行遍历</li><li>结合上面这个简单的例子可以得出结论，在迭代器迭代元素过程中，源集合序列是否允许被修改。上面例子我并没有做任何处理，所以在迭代器迭代元素过程中源集合序列是可以被修改。但这样就存在问题了，就是并发操作时迭代的元素序列可能会与源集合序列不一致。那为什么要引出这个问题呢？这是为了响应文章开头讨论的问题。即为什么增强for循环遍历List集合时删除元素会抛出异常，原因有以下两个：<ul><li>增强for循环使用迭代器实现（可以通过Debug观察）</li><li>在JDK中集合的迭代器实现是不允许在迭代元素过程中源集合序列被修改的，即为了保证迭代元素序列和源元素序列的一致性。</li></ul></li></ul><h2 id="ArrayList迭代器浅析"><a href="#ArrayList迭代器浅析" class="headerlink" title="ArrayList迭代器浅析"></a>ArrayList迭代器浅析</h2><blockquote><p>异常问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = new LinkedList&lt;&gt;();</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(s)) &#123;</span><br><span class="line">                list.remove(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出结果：</span></span><br><span class="line"><span class="comment">         * Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment">         * at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)</span></span><br><span class="line"><span class="comment">         * at java.util.ArrayList$Itr.next(ArrayList.java:859)</span></span><br><span class="line"><span class="comment">         * at wiki.td.Main.main(Main.java:16)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到在增强for循环遍历过程中如果删除一个元素会抛出 ConcurrentModificationException 。该异常的用意是并发修改是不允许的（说明源自 ConcurrentModificationException 类注释）。</li><li>从异常中可以看到问题出自 ArrayList$Itr.next 方法，该方法中触发了 ArrayList$Itr.checkForComodification 导致了异常的发生</li></ul><blockquote><p>ArrayList$Itr （迭代器实现）源码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 【重】modCount是源集合序列（即List）中的成员变量</span></span><br><span class="line">    <span class="comment">// modCount代表着源集合序列的操作次数。即在List返回Iterator时</span></span><br><span class="line">    <span class="comment">// 就会实例化1个Iterator，这时expectedModCount就固定了值为modCount</span></span><br><span class="line">    <span class="comment">// 所以一旦在增强for循环（迭代器）迭代元素过程中源集合序列被修改，就会导致</span></span><br><span class="line">    <span class="comment">// expectedModCount 不等于 modCount，因此被视为并发问题导致集合序列不一致</span></span><br><span class="line">    <span class="comment">// 随即就会抛出 ConcurrentModificationException</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">    Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否有下一个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取下一个元素</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 迭代获取下一个元素之前检查一下源集合序列是否有被修改</span></span><br><span class="line">        <span class="comment">// 如果有则抛异常</span></span><br><span class="line">        checkForComodification();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        </span><br><span class="line">        Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        </span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除当前遍历到的元素</span></span><br><span class="line">    <span class="comment">// 【重】如果想要在迭代器迭代过程中删除元素，只能通过Iterator的remove方法实现</span></span><br><span class="line">    <span class="comment">// Iterator.remove方法之所以不会抛出异常是因为迭代器remove后随即重新赋值了expectedModCount的值，因此checkForComodification()不会抛异常</span></span><br><span class="line">    <span class="comment">// 那么我们可以得出这么一个结论，就是为什么增强for循环中删除元素会抛异常，是因为删除了元素之后没有重新修改迭代器中的expectedModCount值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用当前实例的外部类ArrayList的remove方法删除当前遍历到的元素</span></span><br><span class="line">            ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 重新设置expectedModCount值</span></span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JDK 1.8 新方法，用于支持函数式编程</span></span><br><span class="line">    <span class="comment">// 即无需再手动写while或者for操作迭代器，可以直接Iterator.forEachRemaining使用Lambda传入Consumer消费（迭代）元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; consumer)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> ArrayList.<span class="built_in">this</span>.size;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测源集合序列在迭代器迭代过程中是否有被修改</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以在源码中看到 next 方法中会先触发 checkForComodification 来检测源集合序列是否被修改，没有被修改才会继续操作，否则抛出异常。但我们想深一层，next 和 checkForComodification 两个方法其实都不是线程安全的，因此在多线程并发过程中并不能保证一致性。那么为什么需要 checkForComodification 呢？或者问 checkForComodification 的意义何在？其实这种操常被人叫做 <code>fail-fast 机制</code>，即快速失败。大概的用意是，如果不满足条件就没必要继续执行了，这时可以是跳过操作（比如continue和break），或者是抛出异常等等。这操作好比如我们在执行逻辑前会先判断传入的参数是否为null，如果为null则抛异常，道理是一样的。</li></ul><h2 id="增强for循环中删除元素是不是一定抛异常？"><a href="#增强for循环中删除元素是不是一定抛异常？" class="headerlink" title="增强for循环中删除元素是不是一定抛异常？"></a>增强for循环中删除元素是不是一定抛异常？</h2><p>答案是否定的。原因是增强for循环本质是 Iterator 。而 Iterator 的操作步骤是先 hasNext 判断有没有下一个元素(<code>判断的依据是源集合的size变量</code>)。然后如果 hasNext 返回 true 才可以进行 next 操作。</p><p>所以什么情况下在增强for循环中删除元素不会抛出 ConcurrentModificationException 异常呢？答案就是，删除元素后（导致源集合序列的size减1）hasNext 正好返回false就不会抛出异常（删除的元素正好是倒数第2个）。因为返回false就不会触发 next  方法的 checkForComodification 操作。</p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>); </span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    <span class="comment">// 删除的元素正好是倒数第2个时就不会抛出异常</span></span><br><span class="line">    <span class="comment">// 删除元素后导致list的size-1，但因为hasNext依据是size</span></span><br><span class="line">    <span class="comment">// 所以size-1后hasNext返回false导致迭代直接结束所以不会触发next抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;2&quot;</span>.equals(s)) &#123; </span><br><span class="line">        list.remove(s); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hasNext方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// cursor记录的是将要返回的元素的下标值</span></span><br><span class="line">    <span class="comment">// 即删除倒数第2个元素，导致size-1后触发hasNext导致了cursor等于size退出迭代</span></span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识ZooKeeper</title>
      <link href="/%E5%88%9D%E5%A7%8Bzookeeper/"/>
      <url>/%E5%88%9D%E5%A7%8Bzookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年7月09日08:40:40 — 迁移ZAB协议相关内容到<a href="https://tandi.pub/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/">分布式的一致性和共识性</a></li><li>2020年9月02日16:55:12 — 增加 3.5.0 版本后配置改动相关内容</li></ul><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><blockquote><p>简介</p></blockquote><ul><li>Zookeeper 是一个分布式协调服务。简单说就是可以利用 Zookeeper 的数据特点来协调分布式服务运行。譬如 Dobbo 利用 Zookeeper 提供的命名服务（既DNS服务）来实现服务的注册和发现</li><li>保证节点状态一致性优先的前提下，Zookeeper 集群只要过半节点能够通信就能正常提供服务</li><li>Zookeeper 在内存中存储的数据模型叫 Data Tree ，实质就是和文件系统目录结构一样呈现树状。在 Data Tree 上的节点被称为 ZNode ，ZNode 除了保存子节点之外，自身还可以存储数据，而且带有Version版本号等元数据信息</li><li>Zookeeper 并不适合存储大量数据。也就是说数据应该尽量少，而且这些数据对于分布式服务协调来说是至关重要的</li><li>Zookeeper 并不适合高并发写的场景。这是因为写操作只能在 Leader 节点上进行，除此之外 Leader 节点在处理一个写请求的同时，当前 Leader 节点是不能再处理其它读写请求的，因为它是（会话）串行(FIFO形式)处理请求的，所以 Zookeeper 相当于降低了系统的可用性来提高一致性。这也是为什么 Kafka 不再使用 Zookeeper 来保存消费者偏移量的原因，因为消费者提交偏移量是一个非常频繁的写操作</li><li>在 Zookeeper 中，同一个会话的操作是先进先出（FIFO）按顺序被操作的</li></ul><blockquote><p>Data Tree</p></blockquote><p><img src="/%E5%88%9D%E5%A7%8Bzookeeper/005.png"></p><h2 id="安装ZooKeeper"><a href="#安装ZooKeeper" class="headerlink" title="安装ZooKeeper"></a>安装ZooKeeper</h2><blockquote><p>ZooKeeper 使用 Java 开发，所以应该先安装和配置好 Java 环境</p></blockquote><p>ZooKeeper安装：<a href="https://www.apache.org/dyn/closer.cgi/zookeeper/">官网下载地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz </span><br></pre></td></tr></table></figure><p>解压后目录如下：<br><img src="/%E5%88%9D%E5%A7%8Bzookeeper/001.png"><br><img src="/%E5%88%9D%E5%A7%8Bzookeeper/002.png"></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="启动server"><a href="#启动server" class="headerlink" title="启动server"></a>启动server</h3><p>如果启动时不指定配置文件，则默认使用 conf 文件夹下名为 <code>zoo.cfg</code> 的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zookeeper-3.4.14]# bin/zkServer.sh start conf/zoo_sample.cfg</span><br><span class="line">[root@localhost zookeeper-3.4.14]# jps -l</span><br><span class="line">31623 org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br><span class="line">31640 sun.tools.jps.Jps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以从输出信息中看到 zookeeper.server 已经成功启动</span></span><br></pre></td></tr></table></figure><h3 id="启动client"><a href="#启动client" class="headerlink" title="启动client"></a>启动client</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zookeeper-3.4.14]# bin/zkCli.sh -server 127.0.0.1:2181 </span><br></pre></td></tr></table></figure><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p>可以随便输入一些内容，只要不是命令，就会输出命令说明。</p><blockquote><p>常用命令如下</p></blockquote><p>节点命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls [-s] [-w] [-R] path # 列出路径中的节点,-w表示加上一个监听器</span><br><span class="line">ls2 path [watch] # 列出路径中的节点和节点的状态</span><br><span class="line">stat [-w] path # 打印节点状态,-w表示加上一个监听器</span><br><span class="line">create [-s] [-e] [-c] [-t ttl] path [data] [acl] # 创建节点，-e临时节点，-s顺序节点</span><br><span class="line">set [-s] [-v version] path data # 设置节点值</span><br><span class="line">get [-s] [-w] path # 返回节点值,-w表示加上一个监听器</span><br><span class="line">delete [-v version] path # 删除节点</span><br><span class="line">deleteall path # 删除所有节点,用来代替rmr（rmr在新版本中已经标注为过时）</span><br><span class="line">sync path # 节点同步</span><br></pre></td></tr></table></figure><p>acl机制命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addauth scheme auth # 创建认证策略并指定权限</span><br><span class="line">setAcl [-s] [-v version] [-R] path acl # 设置节点访问权限</span><br><span class="line">getAcl [-s] path # 返回节点的权限</span><br></pre></td></tr></table></figure><p>quota机制命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listquota path # 列出节点quota</span><br><span class="line">setquota -n|-b val path # 设置节点的quota限定，-n 节点个数，-b 节点大小</span><br><span class="line">delquota [-n|-b] path # 删除节点的quota限定</span><br></pre></td></tr></table></figure><p>watcher命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printwatches on|off </span><br><span class="line">removewatches path [-c|-d|-a] [-l]</span><br></pre></td></tr></table></figure><p>行为命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history # 显示使用过的命令</span><br><span class="line">redo cmdno # 可以根据history查询出来的命令编号重新调用这些命令</span><br><span class="line">close # 断开当前的服务端连接</span><br><span class="line">quit # 退出当前客户端</span><br><span class="line">connect host:port # 重新接连到其他的服务端</span><br></pre></td></tr></table></figure><h2 id="关于节点（ZNode）"><a href="#关于节点（ZNode）" class="headerlink" title="关于节点（ZNode）"></a>关于节点（ZNode）</h2><blockquote><p>注：</p><ul><li>一个 ZNode 默认最多能存 1M 大小的数据</li><li>可通过  jute.maxbuffer 配置修改，值的单位是字节（ 默认值为 1048575）</li></ul></blockquote><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><p><strong>zookeeper节点的基本类型：</strong></p><ol><li>持久(persistent)节点</li><li>临时(ephemeral)节点（会话级别）</li><li>顺序节点</li></ol><p><strong>组合节点类型：</strong></p><ol><li>持久(persistent)节点</li><li>临时(ephemeral)节点</li><li>持久顺序节点</li><li>临时顺序节点</li></ol><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><p><strong>创建持久节点（默认）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 13] create /zookeeper/person &#x27;p1&#x27;</span><br><span class="line">[zk: localhost:2181(CONNECTED) 14] stat /zookeeper/person</span><br><span class="line">cZxid = 0x12#节点创建时的zxid</span><br><span class="line">ctime = Mon Aug 12 05:09:56 CST 2019#节点创时间</span><br><span class="line">mZxid = 0x12#节点修改时的zxid</span><br><span class="line">mtime = Mon Aug 12 05:09:56 CST 2019#节点最后一次修改的时间</span><br><span class="line">pZxid = 0x12#子节点最近一次创建/删除的zxid</span><br><span class="line">cversion = 0#子节点的更新次数（乐观锁version）</span><br><span class="line">dataVersion = 0#节点数据的更新次数（乐观锁version）</span><br><span class="line">aclVersion = 0#节点acl的更新次数（乐观锁version）</span><br><span class="line">ephemeralOwner = 0x0#是否为临时节点，0为false,非0为true</span><br><span class="line">dataLength = 2#节点数据长度（字节）</span><br><span class="line">numChildren = 0 #字节点个数</span><br></pre></td></tr></table></figure><p><strong>创建临时节点（会话结束自动删除）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] create -e /zookeeper/person2 &#x27;p2&#x27;</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] stat /zookeeper/person2</span><br><span class="line">cZxid = 0x15</span><br><span class="line">ctime = Mon Aug 12 05:18:38 CST 2019</span><br><span class="line">mZxid = 0x15</span><br><span class="line">mtime = Mon Aug 12 05:18:38 CST 2019</span><br><span class="line">pZxid = 0x15</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x10004ee71460002 #非0就是临时节点</span><br><span class="line">dataLength = 2</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p><strong>创建顺序节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 6] create -s /zookeeper/person3 &#x27;p3&#x27;</span><br><span class="line">Created /zookeeper/person30000000007 # 创建顺序节点时最会在节点名字后添加顺序后续</span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] create -s /zookeeper/person4 &#x27;p4&#x27;</span><br><span class="line">Created /zookeeper/person40000000008 # 可以看到后续是有序递增的</span><br></pre></td></tr></table></figure><p><strong>删除节点</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 12] delete /zookeeper/person30000000007</span><br><span class="line">[zk: localhost:2181(CONNECTED) 14] deleteall /zookeeper/person40000000008</span><br></pre></td></tr></table></figure><h3 id="acl策略"><a href="#acl策略" class="headerlink" title="acl策略"></a>acl策略</h3><p><strong>作用：</strong>对节点进行访问控制</p><p><strong>使用说明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[支持的认证策略]</span><br><span class="line">world：默认，所有会话可以访问</span><br><span class="line">auth：auth策略。使用前需要先用 authadd 添加认证策略</span><br><span class="line">digest：用户密码策略。会话访问节点时需要正确的用户和密码</span><br><span class="line">ip：ip绑定策略。会话访问节点时需要是特定的IP才能访问</span><br><span class="line"></span><br><span class="line">[支持的访问权限（默认crwda，表示有所有操作权限）]</span><br><span class="line">CREATE： 创建</span><br><span class="line">READ： 读取</span><br><span class="line">WRITE： 写入</span><br><span class="line">DELETE： 删除</span><br><span class="line">ADMIN： 管理</span><br></pre></td></tr></table></figure><p><strong>acl策略使用</strong></p><p>1）ip模式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /test ip:<span class="number">127.0</span>.<span class="number">0.1</span>:crwda</span><br></pre></td></tr></table></figure><p>2）digest模式</p><blockquote><p>注意：设置节点的 digest 时，需要对密码部分进行编码。</p><p>使用 org.apache.zookeeper.server.auth.DigestAuthenticationProvider ，譬如：</p><p>java -cp .&#x2F;lib&#x2F;<em>:.&#x2F;</em> org.apache.zookeeper.server.auth.DigestAuthenticationProvider 账号:密码 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create /test/t3 &#x27;t3&#x27;</span><br><span class="line">setAcl /test/t3 digest:test:V28q/NynI4JI3Rk54h0r8O5kMug=:crwda</span><br><span class="line">addauth digest test:test</span><br></pre></td></tr></table></figure><p>3）auth模式</p><blockquote><p>auth 和 digest 差不多，但 auth 模式需要先使用 addauth 添加权限再操作，其次是 auth 模式下无需对密码进行编码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addauth digest aaa:aaa</span><br><span class="line">setAcl /test/t4 auth:aaa:aaa:crwda</span><br></pre></td></tr></table></figure><h3 id="quota策略"><a href="#quota策略" class="headerlink" title="quota策略"></a>quota策略</h3><p>作用：给节点设置配额限制</p><blockquote><p>重点注意：设置-n后并不是如我们所愿zookeeper会阻止节点的创建，实质只会超额后发出警告</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 20] create /test/t7 &#x27;t7&#x27;</span><br><span class="line">[zk: localhost:2181(CONNECTED) 21] setquota -b 10 /test/t7</span><br><span class="line">[zk: localhost:2181(CONNECTED) 22] setquota -n 2 /test/t7</span><br><span class="line">[zk: localhost:2181(CONNECTED) 23] listquota /test/t7</span><br><span class="line">absolute path is /zookeeper/quota/test/t7/zookeeper_limits</span><br><span class="line">Output quota for /test/t7 count=2,bytes=-1</span><br><span class="line">Output stat for /test/t7 count=5,bytes=2</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 25] stat /test/t7</span><br><span class="line">cZxid = 0x20</span><br><span class="line">ctime = Tue Aug 13 07:42:04 CST 2019</span><br><span class="line">mZxid = 0x20</span><br><span class="line">mtime = Tue Aug 13 07:42:04 CST 2019</span><br><span class="line">pZxid = 0x28</span><br><span class="line">cversion = 4</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 2 长度为2个字节</span><br><span class="line">numChildren = 4</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>除了开源的zkClient客户端之外，Java方面还有 zookeeper 和 curator 两个API</p><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>watcher无法复用</li><li>没有提供连接失败重试的实现</li><li>没有提供创建多级节点的实现</li></ul><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestZookeeper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(TestZookeeper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为Zookeeper连接操作时异步的，所以需要等待其连接成功后，否则主线程会先关闭</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ZooKeeper <span class="title function_">connect</span><span class="params">(String server, <span class="type">int</span> timeout, Watcher watcher)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(<span class="string">&quot;127.0.0.1:2181&quot;</span>, <span class="number">20000</span>, watcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Watcher</span> <span class="variable">masterWatcher</span> <span class="operator">=</span> watchedEvent -&gt; &#123;</span><br><span class="line">            <span class="comment">// 判断连接状态</span></span><br><span class="line">            <span class="keyword">if</span> (watchedEvent.getState() == Watcher.Event.KeeperState.SyncConnected) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Watcher</span> <span class="variable">createWatcher</span> <span class="operator">=</span> watchedEvent -&gt; &#123;</span><br><span class="line">            <span class="comment">// 判断操作类型</span></span><br><span class="line">            <span class="keyword">if</span> (watchedEvent.getType() == Watcher.Event.EventType.NodeCreated) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">&quot;创建节点成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZooKeeper</span> <span class="variable">zooKeeper</span> <span class="operator">=</span> connect(<span class="string">&quot;127.0.0.1:2181&quot;</span>, <span class="number">5000</span>, masterWatcher);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根节点</span></span><br><span class="line">        <span class="keyword">if</span> (zooKeeper.exists(<span class="string">&quot;/test&quot;</span>, createWatcher) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建所有会话可操作的持久化节点</span></span><br><span class="line">            zooKeeper.create(<span class="string">&quot;/test&quot;</span>, <span class="literal">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建临时节点</span></span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/test/t1&quot;</span>, <span class="string">&quot;t1&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">        zooKeeper.create(<span class="string">&quot;/test/t2&quot;</span>, <span class="string">&quot;t2&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加认证</span></span><br><span class="line">        zooKeeper.addAuthInfo(<span class="string">&quot;digest&quot;</span>, <span class="string">&quot;aaa:aaa&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置acl - digest</span></span><br><span class="line">        List&lt;ACL&gt; digest = TestZookeeper.getAcls(<span class="string">&quot;digest&quot;</span>, DigestAuthenticationProvider.generateDigest(<span class="string">&quot;aaa:aaa&quot;</span>));</span><br><span class="line">        <span class="comment">// version是乐观所的期望值，如果与zookeeper中的不一直则会操作失败,当版本号设置为-1时，忽略节点的版本号</span></span><br><span class="line">        <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> zooKeeper.setACL(<span class="string">&quot;/test/t1&quot;</span>, digest, -<span class="number">1</span>);</span><br><span class="line">        LOGGER.info(zooKeeper.getACL(<span class="string">&quot;/test/t1&quot;</span>, stat).toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置acl - ip</span></span><br><span class="line">        List&lt;ACL&gt; ip = TestZookeeper.getAcls(<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Stat</span> <span class="variable">t2Stat</span> <span class="operator">=</span> zooKeeper.exists(<span class="string">&quot;/test/t2&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        t2Stat = zooKeeper.setACL(<span class="string">&quot;/test/t2&quot;</span>, ip, t2Stat.getVersion());</span><br><span class="line">        LOGGER.info(zooKeeper.getACL(<span class="string">&quot;/test/t2&quot;</span>, t2Stat).toString());</span><br><span class="line">        <span class="type">byte</span>[] data = zooKeeper.getData(<span class="string">&quot;/test/t2&quot;</span>, <span class="literal">null</span>, t2Stat);</span><br><span class="line">        LOGGER.info(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        zooKeeper.delete(<span class="string">&quot;/test/t1&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line">        zooKeeper.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ACL&gt; <span class="title function_">getAcls</span><span class="params">(String scheme, String id)</span> &#123;</span><br><span class="line">        <span class="type">ACL</span> <span class="variable">auth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ACL</span>(ZooDefs.Perms.ALL, <span class="keyword">new</span> <span class="title class_">Id</span>(scheme, id));</span><br><span class="line">        <span class="keyword">final</span> List&lt;ACL&gt; aclList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        aclList.add(auth);</span><br><span class="line">        <span class="keyword">return</span> aclList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="curator"><a href="#curator" class="headerlink" title="curator"></a>curator</h3><p>对Zookeeper库的扩展</p><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCurator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(TestZookeeper.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVERS</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROOT_PATH</span> <span class="operator">=</span> <span class="string">&quot;/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CuratorFramework <span class="title function_">createConn</span><span class="params">(String servers, </span></span><br><span class="line"><span class="params">                                           <span class="type">int</span> timeout,  // 超时时间</span></span><br><span class="line"><span class="params">                                           <span class="type">int</span> n, // 重试次数</span></span><br><span class="line"><span class="params">                                           <span class="type">int</span> sleepMsBetweenRetries)</span> &#123; <span class="comment">// 重试间隔 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重试策略</span></span><br><span class="line">        <span class="type">RetryNTimes</span> <span class="variable">retryNTimes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RetryNTimes</span>(n, sleepMsBetweenRetries);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接Zookeeper</span></span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(SERVERS) <span class="comment">// Zookeeper地址</span></span><br><span class="line">                .sessionTimeoutMs(timeout) <span class="comment">// 连接超时</span></span><br><span class="line">                .retryPolicy(retryNTimes)  <span class="comment">// 重试策略</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接</span></span><br><span class="line">        client.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> createConn(SERVERS, <span class="number">10000</span>, <span class="number">10</span>, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个临时（根）节点，并初始内容为空</span></span><br><span class="line">        <span class="keyword">if</span> (client.checkExists().forPath(ROOT_PATH) == <span class="literal">null</span>) &#123;</span><br><span class="line">            client.create().withMode(CreateMode.EPHEMERAL).forPath(ROOT_PATH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册可重用监听</span></span><br><span class="line">        <span class="type">PathChildrenCache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathChildrenCache</span>(client, ROOT_PATH, <span class="literal">true</span>);</span><br><span class="line">        cache.start();</span><br><span class="line">        <span class="type">PathChildrenCacheListener</span> <span class="variable">cacheListener</span> <span class="operator">=</span> (client1, event) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;事件类型：&quot;</span> + event.getType());</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != event.getData()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;节点数据：&quot;</span> + event.getData().getPath() + <span class="string">&quot; = &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(event.getData().getData()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        cache.getListenable().addListener(cacheListener);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归创建一个临时节点</span></span><br><span class="line">        <span class="comment">// 递归创建：即使没有根节点都可以创建成功</span></span><br><span class="line">        client.create().creatingParentContainersIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">&quot;/test/t1&quot;</span>,<span class="string">&quot;t1&quot;</span>.getBytes());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 如果主节点是临时的话，就不能构建其子节点。</span></span><br><span class="line">        <span class="comment">//client.create().creatingParentContainersIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(&quot;/test/t1/t11&quot;,&quot;t11&quot;.getBytes());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置acl操作</span></span><br><span class="line">        List&lt;ACL&gt; ip = TestZookeeper.getAcls(<span class="string">&quot;ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        client.setACL().withACL(ip).forPath(<span class="string">&quot;/test/t1&quot;</span>);</span><br><span class="line">        System.out.println(client.getACL().forPath(<span class="string">&quot;/test/t1&quot;</span>));</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">version</span> <span class="operator">=</span> client.checkExists().forPath(ROOT_PATH).getVersion();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归删除子节点</span></span><br><span class="line"><span class="comment">//        client.delete().deletingChildrenIfNeeded().forPath(&quot;/test/t1&quot;);</span></span><br><span class="line">        <span class="comment">// 指定版本号</span></span><br><span class="line">        client.delete().deletingChildrenIfNeeded().withVersion(version).forPath(<span class="string">&quot;/test/t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ACL&gt; <span class="title function_">getAcls</span><span class="params">(String scheme, String id)</span> &#123;</span><br><span class="line">        <span class="type">ACL</span> <span class="variable">auth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ACL</span>(ZooDefs.Perms.ALL, <span class="keyword">new</span> <span class="title class_">Id</span>(scheme, id));</span><br><span class="line">        <span class="keyword">final</span> List&lt;ACL&gt; aclList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        aclList.add(auth);</span><br><span class="line">        <span class="keyword">return</span> aclList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><blockquote><p>zookeeper可视化工具</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install git maven</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zzhang5/zooinspector.git</span><br><span class="line"><span class="built_in">cd</span> zooinspector</span><br><span class="line">mvn clean package</span><br><span class="line"><span class="built_in">chmod</span> +x target/zooinspector-pkg/bin/zooinspector.sh</span><br><span class="line">target/zooinspector-pkg/bin/zooinspector.sh</span><br></pre></td></tr></table></figure><h2 id="常用监控手段"><a href="#常用监控手段" class="headerlink" title="常用监控手段"></a>常用监控手段</h2><ul><li><p>四字命令： <a href="https://www.cnblogs.com/kuku0223/p/8428341.html">https://www.cnblogs.com/kuku0223/p/8428341.html</a> </p></li><li><p>JMX： <a href="https://www.jianshu.com/p/4f11d7bfc9ce">https://www.jianshu.com/p/4f11d7bfc9ce</a></p></li></ul><h2 id="数据持久化了解"><a href="#数据持久化了解" class="headerlink" title="数据持久化了解"></a>数据持久化了解</h2><blockquote><p>简介</p></blockquote><p>&amp;emsp;&amp;emsp;在 Zookeeper 中负责数据持久化和启动数据恢复的组件叫<strong>ZKDatabase</strong>。ZKDatabase 是 Zookeeper 的内存数据库，主要负责<strong>会话管理</strong>、<strong>事务日志</strong>、<strong>生成DataTree快照</strong>以及<strong>重启时恢复数据</strong>等工作。</p><p>&amp;emsp;&amp;emsp;Zookeeper 的持久化方案和 Redis 非常相似，分别有<strong>事务日志</strong>（类似AOF）和<strong>DataTree快照</strong>（类似RDB）两种。ZKDatabase 会在事务产生时将日志写入到事务日志缓冲后再由系统负责定时冲刷到磁盘，以及在特定时间生成 DataTree 快照并将其持久化。</p><blockquote><p>Zookeeper 启动数据恢复流程</p></blockquote><p><img src="/%E5%88%9D%E5%A7%8Bzookeeper/007.png"></p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="关于Leader选举以及ZAB协议相关内容"><a href="#关于Leader选举以及ZAB协议相关内容" class="headerlink" title="关于Leader选举以及ZAB协议相关内容"></a>关于Leader选举以及ZAB协议相关内容</h3><p>移步到另一篇文章 <a href="https://tandi.pub/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%85%B1%E8%AF%86%E6%80%A7/">分布式的一致性和共识性</a></p><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><h4 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h4><p>案例使用 3 个节点来搭建一个伪集群。所谓的伪集群指的是在同一台机器上通过错开端口的形式来模拟物理集群。伪集群通常用于调研阶段，因为方便。</p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><p>1）在各个 Zookeeper 目录下创建data目录并添加 myid 文件</p><p>server1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  apache-zookeeper-3.5.5-bin-01 <span class="built_in">mkdir</span> data</span><br><span class="line">➜  apache-zookeeper-3.5.5-bin-01 <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span> &gt; data/myid <span class="comment"># 设置Zookeeper集群节点ID号</span></span><br></pre></td></tr></table></figure><p>server2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  apache-zookeeper-3.5.5-bin-02 <span class="built_in">mkdir</span> data</span><br><span class="line">➜  apache-zookeeper-3.5.5-bin-02 <span class="built_in">echo</span> <span class="string">&quot;2&quot;</span> &gt; data/myid <span class="comment"># 设置Zookeeper集群节点ID号</span></span><br></pre></td></tr></table></figure><p>server3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  apache-zookeeper-3.5.5-bin-03 <span class="built_in">mkdir</span> data</span><br><span class="line">➜  apache-zookeeper-3.5.5-bin-03 <span class="built_in">echo</span> <span class="string">&quot;3&quot;</span> &gt; data/myid <span class="comment"># 设置Zookeeper集群节点ID号</span></span><br></pre></td></tr></table></figure><p>2）修改配置文件</p><p>server1</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 心跳包间隔，单位为毫秒</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># Follower节点启动连接上Leader的时限（包含了同步Leader数据的时间），单位为秒</span></span><br><span class="line"><span class="comment"># 相当说在10s内没能同步完数据并提供服务则会断开重连。在数据量较大时建议调到该值</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 副本节点同步数据的最大延时，不能满足则会端口重连</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 注意：这里不要放在中文目录下，可能会出现找不到myid的问题</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/home/tandi/zookeeper-test/apache-zookeeper-3.5.5-bin-01/data</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 2888为节点通信端口</span></span><br><span class="line"><span class="comment"># 3888为节点选举端口</span></span><br><span class="line"><span class="attr">server.1</span>=<span class="string">127.0.0.1:2888:3888</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">127.0.0.1:2889:3889</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">127.0.0.1:2890:3890</span></span><br></pre></td></tr></table></figure><p>server2</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/home/tandi/zookeeper-test/apache-zookeeper-3.5.5-bin-01/data</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2182</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server.1</span>=<span class="string">127.0.0.1:2888:3888</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">127.0.0.1:2889:3889</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">127.0.0.1:2890:3890</span></span><br></pre></td></tr></table></figure><p>server3</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/home/tandi/zookeeper-test/apache-zookeeper-3.5.5-bin-03/data</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2183</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server.1</span>=<span class="string">127.0.0.1:2888:3888</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">127.0.0.1:2889:3889</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">127.0.0.1:2890:3890</span></span><br></pre></td></tr></table></figure><p>3）启动集群节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  apache-zookeeper-3.5.5-bin-01 bin/zkServer.sh start conf/zoo.cfg </span><br><span class="line">➜  apache-zookeeper-3.5.5-bin-02 bin/zkServer.sh start conf/zoo.cfg </span><br><span class="line">➜  apache-zookeeper-3.5.5-bin-03 bin/zkServer.sh start conf/zoo.cfg </span><br></pre></td></tr></table></figure><h4 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h4><p>1）先在任意一个集群节点中添加一个node</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  bin/zkCli.sh -server localhost:2181</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] create /test &#x27;t1&#x27;</span><br></pre></td></tr></table></figure><p>2）在集群的其它节点中观察是否同步成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  bin/zkCli.sh -server localhost:2182</span><br><span class="line">[zk: localhost:2182(CONNECTED) 0] ls /</span><br><span class="line">[test, zookeeper]</span><br><span class="line">[zk: localhost:2182(CONNECTED) 1] get /test</span><br><span class="line">t1</span><br></pre></td></tr></table></figure><p>3）查看节点在集群中的角色</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  apache-zookeeper-3.5.5-bin-01 bin/zkServer.sh status             </span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/tandi/zookeeper-test/apache-zookeeper-3.5.5-bin-01/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower # 从节点</span><br><span class="line"></span><br><span class="line">➜  apache-zookeeper-3.5.5-bin-02 bin/zkServer.sh status             </span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/tandi/zookeeper-test/apache-zookeeper-3.5.5-bin-02/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2182. Client address: localhost.</span><br><span class="line">Mode: leader # 主节点</span><br><span class="line"></span><br><span class="line">➜  apache-zookeeper-3.5.5-bin-03 bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/tandi/zookeeper-test/apache-zookeeper-3.5.5-bin-03/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2183. Client address: localhost.</span><br><span class="line">Mode: follower # 从节点</span><br></pre></td></tr></table></figure><p>为什么是 server2 做了 Leader？</p><p>&amp;emsp;&amp;emsp;首先服务器并不是同时启动的，在当前案例中我们先启动了 server1，再启动 server2，但因为 server2 的集群节点 myid 值比 server1 大，而且这时 server1 + server2 已经够过半票数了，所以 server2 就自然成为 Leader 了。虽然随后 server3 加入到集群，但因为集群中已经有了 Leader，因此 server3 就只能成为 Follower 了。</p><p>4）查看集群配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前集群的配置信息位于节点<span class="string">&quot;/zookeeper/config&quot;</span>中</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] get /zookeeper/config</span><br><span class="line">server.1=localhost:2888:3888:participant</span><br><span class="line">server.2=localhost:2889:3889:participant</span><br><span class="line">server.3=localhost:2890:3890:participant</span><br><span class="line">version=0</span><br></pre></td></tr></table></figure><h2 id="3-5-x-版本配置变动"><a href="#3-5-x-版本配置变动" class="headerlink" title="3.5.x 版本配置变动"></a>3.5.x 版本配置变动</h2><blockquote><p>新增重要特性</p></blockquote><p>新增 Dynamic Reconfiguration （动态配置）功能，解决手动扩容时可能导致已提交事务被覆盖从而丢失数据的问题。</p><img src="初始zookeeper/006.png" style="zoom: 80%;" /><blockquote><p>配置变动</p></blockquote><ul><li><p>3.5.3 版本开始，动态配置默认关闭，需要通过<code>reconfigEnabled=true</code>开启</p></li><li><p>3.5.0 版本开始，Zookeeper 默认为单节点模式（Standalone），在该模式下无法对其进行扩展，因此如果要部署集群，则需要在配置中设置<code>standaloneEnabled=false</code></p></li><li><p>3.5.0 版本开始，原来提供客户端服务的 clientPort（服务端口）、clientPortAddress（服务地址） 两个配置项被弃用，而被修改为如下格式：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line"><span class="attr">server.&lt;positive</span> <span class="string">id&gt; = &lt;address&gt;:&lt;port1&gt;:&lt;port2&gt;[:role];[&lt;client port address&gt;:]&lt;client port&gt;</span></span><br><span class="line"><span class="comment"># role 有两种，分别是participant(参与者)和observer(观察者)，不设置默认为participant</span></span><br><span class="line"><span class="comment"># client address相当于原来的clientPortAddress，既提供客户端服务的IP地址，默认值和address一致</span></span><br><span class="line"><span class="comment"># client port相当于原来的clientPort，既提供客户端服务的端口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 例子（集群）=======================</span></span><br><span class="line"><span class="comment"># 其中1234为集群通信端口，而1235为选举端口</span></span><br><span class="line"><span class="attr">server.1</span> = <span class="string">192.168.0.201:1234:1235;2181</span></span><br><span class="line"><span class="attr">server.2</span> = <span class="string">192.168.0.202:1234:1235:participant;2181</span></span><br><span class="line"><span class="attr">server.3</span> = <span class="string">192.168.0.203:1234:1235:participant;2181</span></span><br><span class="line"><span class="attr">server.4</span> = <span class="string">192.168.0.205:1234:1235:observer;2181</span></span><br><span class="line"><span class="comment"># 以上配置表示server.1、server.2、server.3为普通节点，可以参与选举投票。而server.4为Observer节点，只用于备份和扩展读操作，不参与选举投票</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>启用动态配置例子</p></blockquote><p>zookeeper.cfg</p><ul><li>静态配置，不可变</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">reconfigEnabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">standaloneEnabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/zookeeper/data/zookeeper1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 动态配置项文件</span></span><br><span class="line"><span class="comment"># 动态配置如果变动，则由Zookeeper推送，静态配置不变</span></span><br><span class="line"><span class="attr">dynamicConfigFile</span>=<span class="string">/zookeeper/conf/zookeeper_1.dynamic</span></span><br></pre></td></tr></table></figure><p>zookeeper_1.dynamic</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.1</span>=<span class="string">125.23.63.23:2780:2783:participant;2181</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">125.23.63.24:2780:2783:participant;2181</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">125.23.63.25:2780:2783:participant;2181</span></span><br></pre></td></tr></table></figure><blockquote><p>动态扩容例子</p></blockquote><ol><li>假设现在集群中已经有了 3 个节点（集群节点必须都配置 reconfigEnabled&#x3D;true 和 standaloneEnabled&#x3D;false）</li><li>现在打算给该集群新增1个节点，但在此之前必须使用 Zookeeper 提供的 superDigest 产生一个超级用户权限，这是使用动态配置的前提。因此需要执行以下两个步骤的操作：<ol><li>使用<code>java -cp ./lib/*:./* org.apache.zookeeper.server.auth.DigestAuthenticationProvider super:passwd</code> 得出编码后的账号密码信息。譬如执行后得到<code>super:passwd -&gt; super:gACzJ4L2A0F2ygTno5HQnfabuik=</code></li><li>然后将第一步得到的内容配置到 Zookeeper 中。譬如可以通过设置环境变量来实现，即直接执行<code>export SERVER_JVMFLAGS=&quot;-Dzookeeper.DigestAuthenticationProvider.superDigest=super:gACzJ4L2A0F2ygTno5HQnfabuik=&quot;</code> 即可</li></ol></li><li>在第二步操作过后，重启当前机器上的 Zookeeper 节点（集群中的其中一个节点），然后在重启完成后使用命令行客户端连接上，执行如下两个命令：<ol><li>先执行<code>addauth digest super:passwd</code>进行权限认证</li><li>然后通过动态修改配置往集群中增加一个节点（在这之前新节点应该是正在运行的）。执行命令<code>reconfig -add server.4=125.23.63.26:2780:2783:participant;2181</code> 即可</li></ol></li></ol><h2 id="常见-Zookeeper-使用场景"><a href="#常见-Zookeeper-使用场景" class="headerlink" title="常见 Zookeeper 使用场景"></a>常见 Zookeeper 使用场景</h2><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>将共享配置存放到 ZooKeeper 节点中。</p><p>应用在启动时到 ZooKeeper 中获取节点信息，同时也可以在其节点上添加 Watch 来监听配置内容的变更以实现动态更新配置。</p><h3 id="全局ID"><a href="#全局ID" class="headerlink" title="全局ID"></a>全局ID</h3><p>利用 ZooKeeper 的<strong>顺序节点</strong>和 API 特性来实现。</p><p>譬如 create() 一个名称为 <code>id-</code> 的顺序节点，该方法就会返回一个诸如<code>id-0000000005</code>的节点名称。那么就可以使用这个节点名称来做全局 ID 了。除此之外，还可以在 <code>id-0000000005</code> 的基础上增加一些额外的信息。譬如 <code>type-id-0000000005</code> 以实现更富有内涵的全局 ID。</p><h3 id="主备切换-热备"><a href="#主备切换-热备" class="headerlink" title="主备切换( 热备 )"></a>主备切换( 热备 )</h3><ul><li>方法1</li></ul><p>&amp;emsp;&amp;emsp;利用<code>临时节点</code>。例如两台服务器启动时先成功创建节点的就先提供服务，而创建节点失败的服务器则则需要在该节点上添加一个 Watch 来监听节点的消失，因为一旦该节点消失就可以顶替已经宕机的服务器来继续对外提供服务了</p><ul><li>方法2</li></ul><p>&amp;emsp;&amp;emsp;利用<code>临时顺序节点</code>。例如多台服务器在启动时，在持久性节点 instances 下创建临时顺序节点。创建完成后判断自己的序号是否为最小，如果是则对外提供服务，即 RUNNING 状态。如果不是则为 STANDBY ，并监听 instances 节点的变化来切换自己的状态</p><h3 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h3><p>Master 选举和上面主备切换的方法1是一样的。既先成功创建节点的就为 Master，而 Slave 则是在该节点上添加Watch ，一旦发现节点消失则顶替 Master 继续提供服务。</p><h3 id="命名服务（DNS服务）"><a href="#命名服务（DNS服务）" class="headerlink" title="命名服务（DNS服务）"></a>命名服务（DNS服务）</h3><p>利用<code>临时节点</code>来存储服务提供者 IP 地址。</p><p>譬如可以先创建一个持久性节点 <strong>&#x2F;services&#x2F;tiket-services</strong> 用于聚集服务列表，然后<strong>服务提供者</strong>在启动时将自己注册到该节点上。例如注册时可以创建一个临时节点，名称为<strong>address-127.0.0.1:8080</strong>。然后<strong>服务消费者</strong>通过获取持久节点 <strong>&#x2F;services&#x2F;tiket-services</strong> 下的子节点列表再进行服务调用。</p><p>当然，具体的实现方式千差万别，但基本原理是一样的。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><ul><li>排它锁</li></ul><p>利用<code>临时节点</code>和<code>Watch</code>（和上面提到的Master选举操作是一样）。</p><p>譬如获取锁时可以在持久节点**&#x2F;exclusive_lock<strong>中创建一个</strong>临时节点lock<strong>。那么即使是并发创建也只会有一个客户端创建成功（成功即表示获取到锁），而没有成功的客户端就在</strong>临时节点lock**上添加 Watch 来监听其状态编号，一旦该节点消失或被主动删除（释放）后就再竞争创建该节点（竞争锁）。</p><p>而之所以使用临时节点原因是避免获取到锁的客户端因为特殊原因而无法主动释放锁而造成死锁。</p><p><img src="/%E5%88%9D%E5%A7%8Bzookeeper/003.png"></p><ul><li>共享锁</li></ul><p>利用<code>临时顺序节点</code>和<code>Watch</code>。</p><p>例如获取锁时可以在持久节点**&#x2F;shared_lock<strong>中创建一个</strong>临时顺序节点**，但这时和排它锁就稍有区别了。</p><p>1）读锁获取过程：</p><ol><li>创建<strong>临时顺序节点</strong>。例如名称为**主机IP-R-**。如果创建成功 Zookeeper 就会生成一个名称诸如为 <strong>主机IP-R-0000000001</strong> 的临时顺序节点</li><li>然后客户端程序需要再获取**&#x2F;shared_lock**下的子节点列表</li><li>最后判断是否获取锁成功，会有以下种情况放生：<ol><li>通过判断，发现当前创建的节点的序列号最小，则获取共享锁成功</li><li>如果不是最小，则需要接着判断在比自己序号小的节点中<code>是否存在写节点</code>，如果不存在则获取共享锁成功</li><li>如果比自己序号小的节点中存在写节点，则获取共享锁失败，需要进入等待状态，并在距离自己最近且比自己序号小的<code>写节点</code>上添加 Watch 监听其释放，当触发事件时则表示获取共享锁成功（因为已经没有写锁了，只剩下共享锁）</li></ol></li></ol><p>2）写锁获取过程：</p><ol><li>创建<strong>临时顺序节点</strong>。例如名称为<strong>主机IP-W-<strong>。如果创建成功 Zookeeper 就会生成一个名称诸如为</strong>主机IP-W-0000000001</strong> 的临时顺序节点</li><li>然后客户端程序需要再获取**&#x2F;shared_lock**下的子节点列表</li><li>最后判断是否获取锁成功，会有以下种情况放生：<ol><li>通过判断，自己的序号是否为最小，如果是则获取写锁成功</li><li>如果自己的序号不是最小，则进入等待状态，并在距离自己最近且比自己序号小的节点上添加 Watch 监听其消失，当触发事件时则表示获取写锁成功</li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《从Paxos到ZooKeeper 分布式一致性原理与实战》</li><li><a href="https://www.geek-book.com/src/docs/zookeeper3.6.1/zookeeper3.6.1/zookeeper.apache.org/doc/r3.6.1/zookeeperReconfig.html#ch_reconfig_dyn">ZooKeeper Dynamic Reconfiguration</a></li><li><a href="https://www.geek-book.com/src/docs/zookeeper3.6.1/zookeeper3.6.1/zookeeper.apache.org/doc/r3.6.1/zookeeperAdmin.html#sc_authOptions">ZooKeeper Administrator’s Guide</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx再入门</title>
      <link href="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="内容修订"><a href="#内容修订" class="headerlink" title="内容修订"></a>内容修订</h2><ul><li>2019年12月19日14:13:43 — 重构文章</li></ul><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Nginx（ 发音：Engine  X）是一个基于多进程模型及事件驱动的轻量服务器。</p><p>本文不会对 Nginx 的配置作过多的阐述，各模块的配置建议参考官方文档：<a href="https://nginx.org/en/docs/">https://nginx.org/en/docs/</a></p><blockquote><p>特性</p></blockquote><ul><li>高并发<ul><li>使用 Reactor 模型处理网络请求（在 Nginx 中叫 Run-Loop）</li></ul></li><li>高性能<ul><li>确保每一个连接消耗的内存最小化</li></ul></li><li>高可靠<ul><li>Master 进程可以在 Worker 进程出错后快速拉起新的 Worker 进程继续提供服务</li></ul></li><li>可扩展性高<ul><li>模块化设计，第三方模块丰富</li></ul></li><li>热部署<ul><li>支持不停机(信号)维护进程，以及更新配置项和日志文件</li></ul></li><li>源码使用<a href="https://baike.baidu.com/item/BSD%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">BSD许可证</a>，给予使用者非常高的使用自由度</li><li>提供HTTP&#x2F;TCP&#x2F;UDP等7层和四层(ngx_stream_core_module)负载均衡实现</li></ul><blockquote><p>常见使用场景</p></blockquote><ul><li>HTTP静态资源服务器<ul><li>当前文件系统作为静态资源存储点提供服务</li></ul></li><li>反向代理服务器（最常用）<ul><li>基于多进程事件驱动性能强大</li><li>提供静态资源缓存功能，能一定程度提高响应速度</li><li>提供负载均衡能力，可合理地分摊上游服务器负载</li></ul></li><li>网站请求动静分离</li><li>微服务服务API网关<ul><li>Nginx + Lua</li></ul></li><li>流媒体服务器<ul><li>可通过 nginx-rtmp 模块实现</li></ul></li></ul><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>1）在官网选择需要的版本</p><ul><li><a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></li></ul><p>2）下载后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">wget https://nginx.org/download/nginx-1.14.2.tar.gz</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">tar -zxvf nginx-1.14.2.tar.gz</span></span><br></pre></td></tr></table></figure><p>3）生成编译文件 Makefile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> nginx-1.14.2</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">./configure --prefix=/opt/nginx</span></span><br></pre></td></tr></table></figure><ul><li>可以通过<code>./configure --help</code>查看配置参数</li><li>–prefix 用于指定安装路径</li><li>如果需要安装指定模块，可以参考 –with- 开头的参数；反之参考 –without- 开头的参数</li><li>执行完<code>./configure</code>后会在当前目录生成一个<code>objs</code>文件夹，其中 ngx_modules.c 中包含将要安装的模块</li></ul><p>4）安装 Nginx 需要的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake httpd-tools zlib zlib-devel openssl openssl-devel</span></span><br></pre></td></tr></table></figure><p>5）根据 Makefile 编译和安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>6）将Nginx的命令添加到环境变量（可选操作）</p><ul><li>将 sbin 目录配置到 &#x2F;etc&#x2F;profile 中的 PATH 环境变量尾部</li><li>修改完执行<code>source /etc/profile</code>刷新配置即可</li></ul><p>7）使用 vim 编辑 Nginx 配置文件时高亮显示（可选操作）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/root/nginx-1.14.2</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mkdir</span> ~/.vim</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cp</span> -r contrib/vim/* ~/.vim</span></span><br></pre></td></tr></table></figure><p>8）将 Nginx 添加到系统服务中，并设置开机启动（CentOS 8）</p><ol><li><p>添加服务文件 <code>vim /lib/systemd/system/nginx.service</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=<span class="string">nginx service</span></span><br><span class="line"><span class="attr">After</span>=<span class="string">network.target</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="string">forking</span></span><br><span class="line"><span class="attr">ExecStart</span>=<span class="string">/opt/nginx/sbin/nginx</span></span><br><span class="line"><span class="attr">ExecReload</span>=<span class="string">/opt/nginx/sbin/nginx -s reload</span></span><br><span class="line"><span class="attr">ExecStop</span>=<span class="string">/opt/nginx/sbin/nginx -s stop</span></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=<span class="string">multi-user.target</span></span><br></pre></td></tr></table></figure></li><li><p>启动服务并设置开机启动</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&gt;</span> <span class="string">systemctl start nginx.service</span></span><br><span class="line"><span class="attr">&gt;</span> <span class="string">systemctl enable nginx.service</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h2><blockquote><p>nginx命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">nginx -h</span></span><br><span class="line">nginx [-?hvVtq] [-s signal] [-c filename] [-p prefix] [-g directives]</span><br><span class="line"></span><br><span class="line">-?,-h           : 打印帮助信息</span><br><span class="line">-v              : 打印显示版本信息</span><br><span class="line">-V              : 打印显示版本信息，以及 configure 配置项</span><br><span class="line">-t              : 测试配置文件</span><br><span class="line">-q              : 在检测配置文件期间屏蔽非错误信息</span><br><span class="line">-s signal       : 给Master进程发送信号：stop（停止）, quit（退出）, reopen（开启新日志）, reload（重新加载配置）</span><br><span class="line">-p prefix       : 指定nginx目录</span><br><span class="line">-c filename     : 指定配置文件</span><br><span class="line">-g directives   : 指定附加配置路径</span><br></pre></td></tr></table></figure><blockquote><p>kill命令</p></blockquote><p>在 Nginx 中除了可以使通过 nginx -s 给进程发送信号外，其实还可以通过命令 kill 发送</p><p>1）kill 支持的操作信号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">kill</span> -l</span></span><br><span class="line">HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS</span><br></pre></td></tr></table></figure><ul><li>注意以上信号都有与之对应的编号，从1开始往右递增。</li></ul><p>2）常用信号：</p><table><thead><tr><th>编号</th><th>信号</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>HUP</td><td>平滑启动&#x2F;重启信号。用新配置启动新进程，然后关闭旧进程</td></tr><tr><td>2</td><td>INT</td><td>中断信号（ctrl+c）</td></tr><tr><td>3</td><td>QUIT</td><td>平滑退出信号</td></tr><tr><td>9</td><td>KILL</td><td>强制关闭信号（程序无时间回收资源）</td></tr><tr><td>15</td><td>TERM</td><td>（默认）终止信号，正常退出（程序有时间回收资源）</td></tr><tr><td>18</td><td>CONT</td><td>从 STOP 恢复运行信号</td></tr><tr><td>19</td><td>STOP</td><td>暂停信号</td></tr><tr><td>10</td><td>USR1</td><td>开启新日志。常用来做日志切割</td></tr><tr><td>12</td><td>USR2</td><td><code>平滑升级</code>。使用新版本启动进程，然后关闭旧版本进程</td></tr><tr><td>28</td><td>WINCH</td><td>平滑地<code>关闭 Worker 进程</code>。常和 USR2 一同使用来实现平滑升级</td></tr></tbody></table><blockquote><p>案例：为正在运行的 Nginx 添加新模块</p></blockquote><p>1）下载第三方模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/replay/ngx_http_consistent_hash.git</span></span><br></pre></td></tr></table></figure><p>2）进入源文件夹重新生成 Makefile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">nginx -V <span class="comment"># 查看之前的配置项，做到在原来的基础上添加</span></span></span><br><span class="line">nginx version: nginx/1.14.2</span><br><span class="line">built by gcc 8.3.1 20191121 (Red Hat 8.3.1-5) (GCC) </span><br><span class="line">configure arguments: --prefix=/opt/nginx</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">./configure --prefix=/opt/nginx --add-module=/root/ngx_http_consistent_hash</span></span><br></pre></td></tr></table></figure><p>3）重新根据 Makefile 编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure><ul><li>注意无需执行<code>make install</code> 重新安装，否则现有的 Nginx 目录会被覆盖</li></ul><p>4）将 objs 中编译好的二进制 Nginx 命令拷贝到安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先备份预防万一</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mv</span> /opt/nginx/sbin/nginx /opt/nginx/sbin/nginx.bak</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cp</span> objs/nginx /opt/nginx/sbin</span></span><br></pre></td></tr></table></figure><p>5）验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">nginx -V</span></span><br><span class="line">nginx version: nginx/1.14.2</span><br><span class="line">built by gcc 8.3.1 20191121 (Red Hat 8.3.1-5) (GCC) </span><br><span class="line">configure arguments: --prefix=/opt/nginx --add-module=/root/ngx_http_consistent_hash # 可以看到新模块已经加入</span><br></pre></td></tr></table></figure><p>6）因为修改了二进制文件而不是配置文件，因此需要通过平滑升级方式重启，而不是 nginx -t; nginx -s reload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">kill</span> -USR2 14180 <span class="comment"># 平滑升级，这里会使用新的二进制文件启动Nginx</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">kill</span> -WINCH 14180 <span class="comment"># 通知旧Master进程让其关闭Worker进程</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">kill</span> -QUIT 14180 <span class="comment"># 平滑地关闭旧Master进程</span></span></span><br></pre></td></tr></table></figure><h2 id="配置了解"><a href="#配置了解" class="headerlink" title="配置了解"></a>配置了解</h2><p>1）官方文档：<a href="https://nginx.org/en/docs/">https://nginx.org/en/docs/</a></p><p>2）内置变量：<a href="https://nginx.org/en/docs/varindex.html">https://nginx.org/en/docs/varindex.html</a></p><p>3）第三方模块：<a href="https://www.nginx.com/resources/wiki/modules/">https://www.nginx.com/resources/wiki/modules/</a></p><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/003.png"></p><blockquote><p>默认配置样例</p></blockquote><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/002.png"></p><blockquote><p>配置模块的基本作用</p></blockquote><p>全局块（对整个Nginx起作用）</p><ul><li>指定 Nginx 的管理用户及其组信息</li><li>指定启动时拉起的 Worker 进程的数量</li><li>进程 PID 号的存放位置</li><li>日志存放路径和日志类型配置</li><li>引入其它配置</li></ul><p>events块</p><ul><li>指定 Worker 进程同一时刻能够连接客户端的最大数量<ul><li>最大连接数 &#x3D; worker_processes * worker_connections</li><li>注意：worker_connections 不能超过文件系统所允许打开的最大文件数量。可以通过 <code>cat /proc/sys/fs/file-max</code> 查看</li></ul></li><li>事件驱动模型选择</li><li>是否允许同时接受多个网络连接</li></ul><p>http模块</p><ul><li>媒体类型</li><li>代理配置</li><li>缓存配置</li><li>日志定义</li><li>连接配置</li><li>压缩配置</li><li>零拷贝配置</li></ul><p>server块</p><ul><li>虚拟主机。可配置多个</li><li>监听端口</li><li>域名关联</li><li>错误码页面配置</li><li>安全通信配置</li></ul><p>location块</p><ul><li>虚拟主机资源。可配置多个</li></ul><h2 id="日志了解"><a href="#日志了解" class="headerlink" title="日志了解"></a>日志了解</h2><p>访问日志、错误日志</p><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/007.png"></p><p>如果日志格式不满足需求，则可以通过 log_format、access_log 指令和配合<a href="https://nginx.org/en/docs/varindex.html">内置变量</a>修改。例子如下：</p><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/008.png"></p><h2 id="常用负载均衡策略"><a href="#常用负载均衡策略" class="headerlink" title="常用负载均衡策略"></a>常用负载均衡策略</h2><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/009.png"></p><h2 id="架构及请求处理流程"><a href="#架构及请求处理流程" class="headerlink" title="架构及请求处理流程"></a>架构及请求处理流程</h2><blockquote><p>架构图</p></blockquote><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/001.png"></p><p>Master进程职责</p><ul><li>配置文件加载和解释</li><li>数据结构初始化</li><li>模块配置和注册</li><li>信号处理</li><li>平滑升级</li><li>创建 Worker 进程的共享内存</li><li>维护 Worker 进程</li></ul><p>Worker进程职责</p><ul><li>使用基于复用IO的主从Reactor模式处理网络请求</li><li>模块的使用</li><li>缓存的维护<ul><li>AIO</li><li>zero-copy（sendfile）</li><li>mmap</li></ul></li></ul><blockquote><p>请求处理流程</p></blockquote><p><strong>整体处理流程</strong></p><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/004.png"></p><p><strong>复用IO请求处理理解：</strong></p><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/005.png"></p><p>注：可从 <a href="https://nginx.org/en/docs/stream/stream_processing.html">https://nginx.org/en/docs/stream/stream_processing.html</a> 了解目前 Nginx 所支持对 TCP&#x2F;UDP 管理的模块</p><p>指令处理顺序：</p><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/006.png"></p><h2 id="监控Nginx"><a href="#监控Nginx" class="headerlink" title="监控Nginx"></a>监控Nginx</h2><blockquote><p>使用 http_stub_status_module 进行基本状态监控</p></blockquote><p>1）添加模块</p><p>2）配置 localtion </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /status &#123;</span><br><span class="line">stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）平滑升级或重启服务</p><p>4）访问资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl localhost/status</span><br><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 13 13 35 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0 </span><br></pre></td></tr></table></figure><ul><li>Active connections：当前活动的客户端连接数，包括Waiting连接数 </li><li>accepts：已接受的客户端连接总数</li><li>handled：已处理的连接总数。通常该值与 accepts 一致，除非达到了worker_connections资源限制</li><li>requests：客户端请求总数</li><li>Reading：正在向客户端进行读操作的连接数</li><li>Writing：正在向客户端进行写操作的连接数</li><li>Waiting：正在空闲等待客户端请求的连接数</li></ul><blockquote><p>其他</p></blockquote><ul><li>Grafana</li><li>Zabbix</li><li>Nginx-UI</li></ul><h2 id="使用keepalived提供高可用解决方案"><a href="#使用keepalived提供高可用解决方案" class="headerlink" title="使用keepalived提供高可用解决方案"></a>使用keepalived提供高可用解决方案</h2><blockquote><p>VRRP简介</p></blockquote><p>&amp;emsp;&amp;emsp;虚拟路由器冗余协议（VRRP）可用于解决路由器单点故障问题。该协议会在指定网卡上创建一个虚拟IP地址，然后通过自动切其换网关来完成高可用实现。譬如虚拟IP开始会以Master作为网关来处理请求，而一旦Master宕机，则虚拟IP的网关将会被切换到热备节点上，以顶替Master节点的工作。</p><p>&amp;emsp;&amp;emsp;Keepalived 提供了 VRRP 功能实现，因此 Keepalived 可以为任何服务提供高可用解决方案。换句话说如果服务本身没有高可用解决方案的话，就可以考虑使用 Keepalived 来实现。 </p><blockquote><p>在Nginx服务上安装整合Keepalived</p></blockquote><p>0）例子环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.210 nginx、keepalived1</span><br><span class="line">192.168.0.211 nginx、keepalived2</span><br></pre></td></tr></table></figure><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/010.png"></p><p>1）安装keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure><p>2）配置keepalived的vrrp</p><p>vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</p><p>keepalived1配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id nginx_master # keepalived集群节点唯一键</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER # 配置状态</span><br><span class="line">    interface enp0s3 # 绑定网卡，和Nginx一致即可</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100 # 提供服务的优先级别</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"># 虚拟IP</span><br><span class="line"># 注意：网段必须可以被外接访问</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">192.168.0.222</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>keepalived2配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   router_id nginx_backup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface enp0s3</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 50</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.0.222</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）应用并启动Keepalived服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable keepalived.service</span><br><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure><p>4）测试步骤：启动两台Keepalived服务器上的Nginx，并设置测试标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.210 &gt; echo &quot;nginx 192.168.0.210&quot; &gt; /opt/nginx/html/index.html</span><br><span class="line">192.168.0.211 &gt; echo &quot;nginx 192.168.0.211&quot; &gt; /opt/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>5）测试步骤：在随便一台机器上使用虚拟IP访问，譬如：<a href="http://192.168.0.222/">http://192.168.0.222/</a></p><p>两台Keepalived正常服务时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl 192.168.0.222                                      </span><br><span class="line">nginx 192.168.0.210</span><br></pre></td></tr></table></figure><p>关闭 192.168.0.210 上的Keepalived服务后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl stop keepalived.service</span><br><span class="line">&gt; curl 192.168.0.222</span><br><span class="line">nginx 192.168.0.211</span><br></pre></td></tr></table></figure><p>重启 192.168.0.210 上的Keepalived服务后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl start keepalived.service</span><br><span class="line">&gt; curl 192.168.0.222</span><br><span class="line">nginx 192.168.0.210</span><br></pre></td></tr></table></figure><blockquote><p>为 Keepalived 实现故障检测功能</p></blockquote><p>需要注意的是 Keepalived 并不能自主检测服务是否还处于可用状态。譬如以当前案例为例，如果 Nginx 因为某些原因被停掉了，Keepalived 是无法感知的，因此它不会为虚拟IP切换网关，从而导致整个 Nginx 代理的上游服务不可用。</p><p>为了解决上面的问题，我们可以为 Keepalived 提供一个服务的健康监测脚本（&#x2F;root&#x2F;nginx_health_check.sh）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ `systemctl status nginx.service | grep &quot;running&quot; | wc -l` -ne 1 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Nginx服务已停止&quot;</span><br><span class="line">systemctl stop keepalived.service</span><br><span class="line">else</span><br><span class="line">echo &quot;Nginx正常提供服务&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>将脚本文件配置到 Keepalived，在配置文件中追加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 脚本位置</span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    script &quot;/root/nginx_health_check.sh&quot;</span><br><span class="line">    interval 2 # 每两秒执行一次脚本</span><br><span class="line">&#125;</span><br><span class="line"># 应用脚本</span><br><span class="line">track_script &#123;</span><br><span class="line">check_nginx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于 Keepalived 脑裂问题</p></blockquote><p>因为 Keepalived 不在文章讨论范围，因此可以另行参考以下两边文章进行了解：</p><ul><li><a href="https://blog.csdn.net/wdirdo/article/details/103011816">keepalived脑裂</a></li><li><a href="https://cloud.tencent.com/developer/article/1027323">split-brain 脑裂问题（Keepalived）</a></li></ul><p>检测是否出现脑裂可以使用 ip 命令进行查看。正常情况下只有一个 Keepalived 服务器能够获取到虚拟IP，因此如果虚拟IP出现在多台 Keepalived 上就说明出现脑裂了。</p><p><img src="/Nginx%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/011.png"></p><h2 id="Nginx简单优化"><a href="#Nginx简单优化" class="headerlink" title="Nginx简单优化"></a>Nginx简单优化</h2><blockquote><p>基础模块</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># Nginx默认进程数=CPU数+1，1是主进程</span><br><span class="line">worker_processes auto;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line"># Nginx最大连接数（包含客户端、upstream的连接）</span><br><span class="line"># 该值受限于操作系统，可用ulimit -n查看，以及修改/etc/security/limits.conf和/etc/pam.d/login实现增大数值</span><br><span class="line"># 可参考：https://www.linuxidc.com/Linux/2018-08/153369.htm</span><br><span class="line">worker_connections 65535;</span><br><span class="line"># 表示Worker进程可以一次接收多条连接</span><br><span class="line">multi_accept on;</span><br><span class="line"># 启用epoll实现多路复用（Linux 2.6+）</span><br><span class="line">use epoll;</span><br><span class="line"># 指定工作线程数量和任务队列长度（Nginx 1.7.11）</span><br><span class="line"># 定义用于多线程读取和发送文件而不阻塞工作进程的线程池</span><br><span class="line">thread_pool defaultName threads=32 max_queue=65536; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    keepalive_timeout 60s; # 全局连接保活时间</span><br><span class="line"></span><br><span class="line">    # 按需要添加内容压缩</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_http_version 1.1; # 最低版本为1.1</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_comp_level 2; # 压缩等级（1-9）,越低越小越耗时 </span><br><span class="line">    gzip_types text/plain text/css application/json application/javascirpt image/jpeg image/gif image/png; # 需要压缩的媒体类型</span><br><span class="line">    gzip_static on; # 如果有压缩好的直接使用</span><br><span class="line"></span><br><span class="line">    upstream backend &#123;</span><br><span class="line">      server 192.168.0.1;</span><br><span class="line">      keepalive 300; # 最多保活300个与上游服务器通新的连接</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 缓存空间</span><br><span class="line">    proxy_cache_path /tmp/cache level=1:2 keys_zone=cache_one:10m;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(html|gif|jpg|png|svg|css|js)$ &#123;</span><br><span class="line">      proxy_pass http://backend;</span><br><span class="line">      # proxy_redirect可以修改响应头的Location</span><br><span class="line">      # Location用于将页面重新定向至的地址。一般在响应码为3xx的响应中才会有意义。</span><br><span class="line">      proxy_redirect off;</span><br><span class="line">      proxy_cache cache_one; # 缓存内存块</span><br><span class="line">      # 上游服务器不同响应状态的资源的缓存时间</span><br><span class="line">      proxy_cache_valid 200 302 301 1d;</span><br><span class="line">      proxy_cache_valid 404 10m;</span><br><span class="line">      proxy_cache_valid any 1h;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Nginx 核心功能配置文档：<a href="https://nginx.org/en/docs/ngx_core_module.html">https://nginx.org/en/docs/ngx_core_module.html</a></li><li>Nginx ngx_http_core_module 核心模块配置文档：<a href="https://nginx.org/en/docs/http/ngx_http_core_module.html">https://nginx.org/en/docs/http/ngx_http_core_module.html</a></li><li>Nginx ngx_http_gzip_module 模块配置文档：<a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html">https://nginx.org/en/docs/http/ngx_http_gzip_module.html</a></li></ul><blockquote><p>反向代理 - 动静分离</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">upstream static &#123;</span><br><span class="line">server 192.168.0.1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream dynamic &#123;</span><br><span class="line">server 192.168.0.2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location ~ \.(php|jsp)$ &#123;</span><br><span class="line">proxy_pass http://dynamic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ .*\.(html|gif|jpg|png|svg|css|js)$ &#123;</span><br><span class="line">proxy_pass http://static;</span><br><span class="line">proxy_set_header Host $host:$server_port;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Nginx ngx_http_proxy_module 模块配置文档：<a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html">https://nginx.org/en/docs/http/ngx_http_proxy_module.html</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://programming.vip/docs/details-of-event-driven-process-of-nginx-based-on-epoll-model.html">Details of event driven process of nginx based on epoll model</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/">Inside NGINX: How We Designed for Performance &amp; Scale</a></li><li><a href="https://www.nginx.com/blog/thread-pools-boost-performance-9x/">Thread Pools in NGINX Boost Performance 9x!</a></li><li>《Nginx高性能Web服务器详解》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> Web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
